# Generated from SqlBaseParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,331,2626,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,1,0,1,0,1,
        0,5,0,254,8,0,10,0,12,0,257,9,0,1,0,3,0,260,8,0,1,0,1,0,1,1,1,1,
        3,1,266,8,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,3,3,276,8,3,1,3,1,3,
        3,3,280,8,3,1,3,5,3,283,8,3,10,3,12,3,286,9,3,3,3,288,8,3,1,3,1,
        3,1,3,1,3,3,3,294,8,3,1,3,5,3,297,8,3,10,3,12,3,300,9,3,3,3,302,
        8,3,1,3,1,3,3,3,306,8,3,1,3,1,3,3,3,310,8,3,1,3,1,3,1,3,1,3,5,3,
        316,8,3,10,3,12,3,319,9,3,3,3,321,8,3,1,3,1,3,1,3,1,3,1,3,3,3,328,
        8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,339,8,3,10,3,12,3,342,
        9,3,1,3,3,3,345,8,3,1,3,3,3,348,8,3,1,3,1,3,1,3,1,3,3,3,354,8,3,
        1,3,1,3,1,3,1,3,1,3,3,3,361,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        3,3,371,8,3,1,3,1,3,1,3,3,3,376,8,3,1,3,1,3,1,3,1,3,1,3,3,3,383,
        8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,391,8,3,1,3,1,3,1,3,3,3,396,8,3,
        1,3,1,3,1,3,3,3,401,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,409,8,3,10,3,
        12,3,412,9,3,1,3,1,3,1,3,1,3,3,3,418,8,3,1,3,1,3,1,3,1,3,5,3,424,
        8,3,10,3,12,3,427,9,3,1,3,1,3,3,3,431,8,3,1,3,1,3,1,3,1,3,3,3,437,
        8,3,1,3,1,3,1,3,1,3,1,3,3,3,444,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,
        452,8,3,10,3,12,3,455,9,3,3,3,457,8,3,1,3,1,3,1,3,3,3,462,8,3,1,
        3,1,3,1,3,5,3,467,8,3,10,3,12,3,470,9,3,1,3,1,3,1,3,1,3,1,3,1,3,
        3,3,478,8,3,1,3,1,3,1,3,3,3,483,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        5,3,492,8,3,10,3,12,3,495,9,3,1,3,1,3,3,3,499,8,3,1,3,1,3,3,3,503,
        8,3,1,3,3,3,506,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,516,8,3,
        1,3,3,3,519,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,527,8,3,10,3,12,3,530,
        9,3,1,3,1,3,3,3,534,8,3,1,3,1,3,1,3,3,3,539,8,3,1,3,1,3,3,3,543,
        8,3,1,3,1,3,1,3,3,3,548,8,3,1,3,3,3,551,8,3,1,3,1,3,3,3,555,8,3,
        1,3,1,3,3,3,559,8,3,1,3,1,3,1,3,1,3,1,3,3,3,566,8,3,3,3,568,8,3,
        1,3,1,3,1,3,1,3,3,3,574,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,582,8,3,
        3,3,584,8,3,1,3,1,3,1,3,1,3,3,3,590,8,3,1,3,1,3,1,3,1,3,1,3,1,3,
        3,3,598,8,3,3,3,600,8,3,1,3,1,3,1,3,1,3,3,3,606,8,3,1,3,1,3,1,3,
        1,3,1,3,3,3,613,8,3,1,3,1,3,3,3,617,8,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,3,3,628,8,3,1,3,1,3,1,3,1,3,1,3,3,3,635,8,3,1,3,3,3,
        638,8,3,1,3,1,3,1,3,1,3,3,3,644,8,3,3,3,646,8,3,1,4,1,4,1,4,1,4,
        1,4,3,4,653,8,4,1,4,1,4,1,4,1,4,1,4,3,4,660,8,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,676,8,4,1,4,1,4,1,4,
        1,4,1,4,5,4,683,8,4,10,4,12,4,686,9,4,3,4,688,8,4,1,4,1,4,1,4,1,
        4,1,4,1,4,3,4,696,8,4,1,4,1,4,1,4,1,4,1,4,3,4,703,8,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,3,4,713,8,4,1,4,1,4,1,4,1,4,1,4,3,4,720,8,
        4,1,4,1,4,1,4,1,4,1,4,3,4,727,8,4,1,4,1,4,3,4,731,8,4,1,4,1,4,1,
        4,1,4,1,4,3,4,738,8,4,1,4,1,4,3,4,742,8,4,1,4,1,4,1,4,1,4,1,4,3,
        4,749,8,4,1,4,1,4,1,4,1,4,1,4,3,4,756,8,4,1,5,1,5,1,5,1,5,1,5,1,
        5,5,5,764,8,5,10,5,12,5,767,9,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,775,
        8,5,10,5,12,5,778,9,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,800,8,5,10,5,12,5,803,
        9,5,1,5,1,5,3,5,807,8,5,3,5,809,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,825,8,5,10,5,12,5,828,9,5,1,5,1,
        5,3,5,832,8,5,3,5,834,8,5,1,5,1,5,3,5,838,8,5,1,5,1,5,1,5,1,5,1,
        5,1,5,3,5,846,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,856,8,5,1,
        5,1,5,1,5,1,5,3,5,862,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,870,8,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,3,5,890,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,916,8,5,1,
        5,1,5,1,5,3,5,921,8,5,5,5,923,8,5,10,5,12,5,926,9,5,1,5,1,5,1,5,
        1,5,1,5,3,5,933,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,944,
        8,6,1,7,3,7,947,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,5,8,957,8,8,
        10,8,12,8,960,9,8,3,8,962,8,8,1,8,3,8,965,8,8,1,8,3,8,968,8,8,1,
        8,3,8,971,8,8,1,8,3,8,974,8,8,3,8,976,8,8,1,9,1,9,1,9,3,9,981,8,
        9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,989,8,9,1,10,1,10,1,10,3,10,994,8,
        10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,1002,8,11,1,11,1,11,1,11,3,
        11,1007,8,11,1,11,5,11,1010,8,11,10,11,12,11,1013,9,11,1,12,1,12,
        1,13,1,13,3,13,1019,8,13,1,13,1,13,3,13,1023,8,13,1,14,1,14,3,14,
        1027,8,14,1,14,1,14,1,14,5,14,1032,8,14,10,14,12,14,1035,9,14,1,
        14,1,14,1,14,1,14,5,14,1041,8,14,10,14,12,14,1044,9,14,3,14,1046,
        8,14,1,14,3,14,1049,8,14,1,14,1,14,1,14,1,14,1,14,5,14,1056,8,14,
        10,14,12,14,1059,9,14,3,14,1061,8,14,1,14,1,14,3,14,1065,8,14,1,
        14,1,14,1,14,1,14,5,14,1071,8,14,10,14,12,14,1074,9,14,3,14,1076,
        8,14,1,14,1,14,1,14,1,14,5,14,1082,8,14,10,14,12,14,1085,9,14,3,
        14,1087,8,14,1,15,1,15,3,15,1091,8,15,1,15,3,15,1094,8,15,1,15,1,
        15,1,15,1,15,1,15,3,15,1101,8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,
        17,5,17,1110,8,17,10,17,12,17,1113,9,17,1,18,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,3,19,1137,8,19,5,19,1139,8,19,10,19,12,19,1142,
        9,19,1,20,3,20,1145,8,20,1,20,1,20,3,20,1149,8,20,1,20,1,20,3,20,
        1153,8,20,1,20,1,20,3,20,1157,8,20,3,20,1159,8,20,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,5,21,1168,8,21,10,21,12,21,1171,9,21,1,21,1,
        21,3,21,1175,8,21,1,22,1,22,3,22,1179,8,22,1,22,1,22,3,22,1183,8,
        22,3,22,1185,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,
        23,1196,8,23,1,24,1,24,1,24,1,24,1,24,1,24,5,24,1204,8,24,10,24,
        12,24,1207,9,24,1,24,1,24,3,24,1211,8,24,1,25,1,25,1,25,1,25,3,25,
        1217,8,25,1,25,1,25,5,25,1221,8,25,10,25,12,25,1224,9,25,1,25,1,
        25,3,25,1228,8,25,1,26,1,26,1,26,1,26,5,26,1234,8,26,10,26,12,26,
        1237,9,26,1,26,1,26,1,27,1,27,1,27,1,27,5,27,1245,8,27,10,27,12,
        27,1248,9,27,1,28,1,28,3,28,1252,8,28,1,28,1,28,1,28,1,28,1,28,1,
        29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,3,30,1274,8,30,3,30,1276,8,30,3,30,1278,8,30,1,30,1,30,1,
        30,1,30,1,30,1,30,5,30,1286,8,30,10,30,12,30,1289,9,30,1,31,1,31,
        3,31,1293,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1303,
        8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1311,8,32,1,32,1,32,1,32,
        1,32,1,32,5,32,1318,8,32,10,32,12,32,1321,9,32,1,32,1,32,1,32,3,
        32,1326,8,32,1,32,1,32,1,32,3,32,1331,8,32,1,32,1,32,1,32,1,32,3,
        32,1337,8,32,1,32,3,32,1340,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,3,32,1349,8,32,1,32,1,32,3,32,1353,8,32,1,32,1,32,1,32,3,32,1358,
        8,32,1,32,1,32,1,32,3,32,1363,8,32,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,3,33,1372,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,5,33,1389,8,33,10,33,12,33,1392,9,
        33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,1402,8,34,1,34,3,
        34,1405,8,34,1,34,1,34,1,34,1,34,3,34,1411,8,34,1,34,1,34,1,34,5,
        34,1416,8,34,10,34,12,34,1419,9,34,3,34,1421,8,34,1,34,1,34,3,34,
        1425,8,34,1,34,1,34,3,34,1429,8,34,1,34,3,34,1432,8,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,5,34,1453,8,34,10,34,12,34,1456,9,34,1,34,3,
        34,1459,8,34,1,34,3,34,1462,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,1477,8,34,1,34,1,34,3,34,1481,
        8,34,1,34,1,34,1,34,1,34,5,34,1487,8,34,10,34,12,34,1490,9,34,1,
        35,1,35,1,35,1,35,1,35,1,35,3,35,1498,8,35,1,35,1,35,1,35,1,35,1,
        35,3,35,1505,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,3,35,1531,8,35,1,35,1,35,1,35,1,35,1,35,3,35,1538,8,35,1,
        35,3,35,1541,8,35,1,35,3,35,1544,8,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,4,35,1573,8,35,11,35,
        12,35,1574,1,35,1,35,3,35,1579,8,35,1,35,1,35,1,35,1,35,4,35,1585,
        8,35,11,35,12,35,1586,1,35,1,35,3,35,1591,8,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,3,35,1602,8,35,1,35,1,35,1,35,1,35,3,
        35,1608,8,35,1,36,1,36,1,36,1,36,1,37,1,37,3,37,1616,8,37,1,37,1,
        37,1,37,1,37,5,37,1622,8,37,10,37,12,37,1625,9,37,3,37,1627,8,37,
        1,37,1,37,1,37,1,37,1,37,5,37,1634,8,37,10,37,12,37,1637,9,37,3,
        37,1639,8,37,1,37,3,37,1642,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,3,38,1652,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,
        39,1675,8,39,1,40,1,40,3,40,1679,8,40,1,41,1,41,3,41,1683,8,41,1,
        42,1,42,1,42,3,42,1688,8,42,1,43,1,43,1,44,1,44,1,45,1,45,5,45,1696,
        8,45,10,45,12,45,1699,9,45,1,45,1,45,1,46,1,46,3,46,1705,8,46,1,
        47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,1717,8,48,10,
        48,12,48,1720,9,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
        1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,3,54,1741,8,54,
        1,54,1,54,1,54,1,54,1,54,5,54,1748,8,54,10,54,12,54,1751,9,54,3,
        54,1753,8,54,1,54,1,54,1,54,1,54,1,54,5,54,1760,8,54,10,54,12,54,
        1763,9,54,3,54,1765,8,54,1,54,3,54,1768,8,54,1,54,3,54,1771,8,54,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,3,55,1789,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,3,56,1800,8,56,1,57,1,57,1,57,5,57,1805,8,57,10,57,12,
        57,1808,9,57,1,58,1,58,1,58,5,58,1813,8,58,10,58,12,58,1816,9,58,
        1,59,1,59,5,59,1820,8,59,10,59,12,59,1823,9,59,1,60,1,60,3,60,1827,
        8,60,1,61,1,61,1,61,5,61,1832,8,61,10,61,12,61,1835,9,61,1,62,1,
        62,3,62,1839,8,62,1,63,1,63,1,63,3,63,1844,8,63,1,64,1,64,3,64,1848,
        8,64,1,65,1,65,3,65,1852,8,65,1,66,1,66,1,66,3,66,1857,8,66,1,67,
        1,67,3,67,1861,8,67,1,68,1,68,3,68,1865,8,68,1,68,1,68,1,68,1,68,
        3,68,1871,8,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,
        1,73,1,73,1,74,1,74,1,74,1,74,1,74,3,74,1890,8,74,1,75,1,75,1,75,
        3,75,1895,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,5,75,1908,8,75,10,75,12,75,1911,9,75,3,75,1913,8,75,1,76,1,
        76,1,76,1,76,5,76,1919,8,76,10,76,12,76,1922,9,76,1,76,1,76,1,77,
        1,77,1,77,1,77,5,77,1930,8,77,10,77,12,77,1933,9,77,1,77,1,77,1,
        78,1,78,1,78,1,78,5,78,1941,8,78,10,78,12,78,1944,9,78,1,78,1,78,
        1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,3,80,1957,8,80,1,80,
        1,80,1,80,1,80,1,80,5,80,1964,8,80,10,80,12,80,1967,9,80,1,80,1,
        80,1,80,3,80,1972,8,80,1,80,1,80,1,80,1,80,1,80,3,80,1979,8,80,1,
        80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1991,8,80,1,
        80,1,80,1,80,1,80,1,80,5,80,1998,8,80,10,80,12,80,2001,9,80,1,80,
        1,80,1,80,1,80,3,80,2007,8,80,1,80,1,80,1,80,1,80,1,80,3,80,2014,
        8,80,1,80,3,80,2017,8,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2025,
        8,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2033,8,80,1,80,3,80,2036,
        8,80,1,80,1,80,1,80,1,80,1,80,3,80,2043,8,80,1,80,3,80,2046,8,80,
        1,80,1,80,1,80,1,80,5,80,2052,8,80,10,80,12,80,2055,9,80,1,80,1,
        80,1,80,1,80,1,80,3,80,2062,8,80,1,80,1,80,1,80,1,80,1,80,1,80,5,
        80,2070,8,80,10,80,12,80,2073,9,80,3,80,2075,8,80,1,80,1,80,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2091,
        8,80,1,80,1,80,1,80,1,80,1,80,3,80,2098,8,80,1,80,1,80,1,80,1,80,
        1,80,3,80,2105,8,80,1,80,3,80,2108,8,80,1,80,1,80,3,80,2112,8,80,
        3,80,2114,8,80,3,80,2116,8,80,1,80,1,80,1,80,3,80,2121,8,80,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
        1,80,3,80,2138,8,80,1,80,1,80,1,80,3,80,2143,8,80,5,80,2145,8,80,
        10,80,12,80,2148,9,80,3,80,2150,8,80,1,80,1,80,1,80,1,80,1,80,1,
        80,1,80,1,80,3,80,2160,8,80,1,80,1,80,1,80,1,80,1,80,3,80,2167,8,
        80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2175,8,80,3,80,2177,8,80,1,
        81,1,81,1,81,1,81,3,81,2183,8,81,1,82,1,82,1,82,1,82,1,82,5,82,2190,
        8,82,10,82,12,82,2193,9,82,1,82,1,82,1,83,1,83,1,83,1,84,3,84,2201,
        8,84,1,84,1,84,1,85,1,85,1,85,3,85,2208,8,85,1,86,1,86,1,87,3,87,
        2213,8,87,1,87,3,87,2216,8,87,1,87,3,87,2219,8,87,1,87,3,87,2222,
        8,87,3,87,2224,8,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,
        1,89,3,89,2236,8,89,1,89,1,89,1,89,1,89,3,89,2242,8,89,1,90,1,90,
        1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
        3,91,2259,8,91,1,91,3,91,2262,8,91,1,92,1,92,3,92,2266,8,92,1,92,
        5,92,2269,8,92,10,92,12,92,2272,9,92,1,93,1,93,3,93,2276,8,93,1,
        93,1,93,3,93,2280,8,93,1,93,5,93,2283,8,93,10,93,12,93,2286,9,93,
        1,94,1,94,3,94,2290,8,94,1,94,1,94,3,94,2294,8,94,1,94,1,94,1,95,
        1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
        1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2320,8,95,1,95,1,95,
        1,95,1,95,1,95,1,95,3,95,2328,8,95,3,95,2330,8,95,1,96,1,96,1,96,
        1,96,1,96,1,96,5,96,2338,8,96,10,96,12,96,2341,9,96,1,96,1,96,3,
        96,2345,8,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,2353,8,96,1,96,1,
        96,5,96,2357,8,96,10,96,12,96,2360,9,96,1,97,1,97,3,97,2364,8,97,
        1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
        1,98,1,98,1,98,1,98,3,98,2383,8,98,1,99,1,99,1,99,1,99,3,99,2389,
        8,99,1,99,1,99,1,99,1,99,1,99,5,99,2396,8,99,10,99,12,99,2399,9,
        99,1,99,1,99,3,99,2403,8,99,1,100,1,100,1,100,1,100,1,100,1,100,
        1,100,1,100,3,100,2413,8,100,1,100,1,100,1,100,1,100,1,100,1,100,
        3,100,2421,8,100,1,100,1,100,1,100,1,100,3,100,2427,8,100,1,100,
        1,100,3,100,2431,8,100,1,100,1,100,1,100,3,100,2436,8,100,1,101,
        1,101,3,101,2440,8,101,1,101,1,101,1,102,1,102,3,102,2446,8,102,
        1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,104,
        1,104,1,104,5,104,2461,8,104,10,104,12,104,2464,9,104,1,105,1,105,
        1,105,1,105,1,106,1,106,1,106,1,106,5,106,2474,8,106,10,106,12,106,
        2477,9,106,1,106,1,106,1,107,1,107,3,107,2483,8,107,1,108,1,108,
        1,108,1,108,1,108,5,108,2490,8,108,10,108,12,108,2493,9,108,1,108,
        1,108,3,108,2497,8,108,1,109,1,109,3,109,2501,8,109,1,110,1,110,
        1,110,1,110,3,110,2507,8,110,1,111,1,111,1,111,1,112,1,112,1,112,
        1,112,1,112,5,112,2517,8,112,10,112,12,112,2520,9,112,1,112,1,112,
        1,113,1,113,1,113,1,113,1,113,5,113,2529,8,113,10,113,12,113,2532,
        9,113,1,113,1,113,1,114,1,114,3,114,2538,8,114,1,115,1,115,1,115,
        5,115,2543,8,115,10,115,12,115,2546,9,115,1,116,1,116,1,116,1,116,
        1,117,1,117,1,117,1,117,1,117,3,117,2557,8,117,1,118,1,118,1,119,
        1,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,2570,8,120,
        1,120,3,120,2573,8,120,1,120,3,120,2576,8,120,1,121,1,121,1,121,
        1,121,1,121,1,121,1,121,3,121,2585,8,121,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,3,122,2595,8,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,2610,
        8,122,1,123,1,123,1,123,1,123,3,123,2616,8,123,1,123,5,123,2619,
        8,123,10,123,12,123,2622,9,123,1,124,1,124,1,124,0,7,22,38,60,66,
        68,96,192,125,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,0,34,1,0,146,147,2,0,3,3,22,22,1,0,141,142,2,0,4,4,282,282,1,
        0,241,242,2,0,7,7,169,172,1,0,92,93,1,0,246,247,1,0,280,281,1,0,
        111,112,3,0,109,109,197,197,216,216,2,0,36,36,38,38,2,0,86,86,91,
        91,1,0,200,201,2,0,7,7,12,12,1,0,40,41,1,0,36,37,1,0,26,27,1,0,293,
        294,2,0,295,295,297,298,1,0,314,316,1,0,32,33,2,0,60,61,246,246,
        1,0,44,46,1,0,282,292,1,0,7,9,1,0,88,89,1,0,50,55,1,0,30,31,1,0,
        259,260,1,0,230,232,1,0,165,167,3,0,97,97,193,193,252,252,38,0,1,
        1,4,4,6,6,10,10,27,27,32,33,35,35,38,38,42,46,48,59,70,70,81,86,
        88,91,93,93,96,96,98,105,107,108,111,133,135,135,137,158,161,161,
        163,163,165,165,167,172,174,174,176,182,185,196,198,198,202,204,
        208,208,211,215,219,221,223,226,228,232,234,240,244,245,247,247,
        251,281,3024,0,250,1,0,0,0,2,263,1,0,0,0,4,269,1,0,0,0,6,645,1,0,
        0,0,8,755,1,0,0,0,10,932,1,0,0,0,12,943,1,0,0,0,14,946,1,0,0,0,16,
        950,1,0,0,0,18,988,1,0,0,0,20,990,1,0,0,0,22,1001,1,0,0,0,24,1014,
        1,0,0,0,26,1016,1,0,0,0,28,1086,1,0,0,0,30,1100,1,0,0,0,32,1102,
        1,0,0,0,34,1105,1,0,0,0,36,1114,1,0,0,0,38,1119,1,0,0,0,40,1158,
        1,0,0,0,42,1174,1,0,0,0,44,1176,1,0,0,0,46,1195,1,0,0,0,48,1197,
        1,0,0,0,50,1227,1,0,0,0,52,1229,1,0,0,0,54,1240,1,0,0,0,56,1249,
        1,0,0,0,58,1258,1,0,0,0,60,1277,1,0,0,0,62,1290,1,0,0,0,64,1362,
        1,0,0,0,66,1371,1,0,0,0,68,1461,1,0,0,0,70,1607,1,0,0,0,72,1609,
        1,0,0,0,74,1641,1,0,0,0,76,1651,1,0,0,0,78,1674,1,0,0,0,80,1678,
        1,0,0,0,82,1682,1,0,0,0,84,1687,1,0,0,0,86,1689,1,0,0,0,88,1691,
        1,0,0,0,90,1693,1,0,0,0,92,1704,1,0,0,0,94,1706,1,0,0,0,96,1708,
        1,0,0,0,98,1721,1,0,0,0,100,1723,1,0,0,0,102,1725,1,0,0,0,104,1730,
        1,0,0,0,106,1734,1,0,0,0,108,1770,1,0,0,0,110,1788,1,0,0,0,112,1799,
        1,0,0,0,114,1801,1,0,0,0,116,1809,1,0,0,0,118,1817,1,0,0,0,120,1824,
        1,0,0,0,122,1828,1,0,0,0,124,1838,1,0,0,0,126,1843,1,0,0,0,128,1847,
        1,0,0,0,130,1851,1,0,0,0,132,1856,1,0,0,0,134,1860,1,0,0,0,136,1862,
        1,0,0,0,138,1872,1,0,0,0,140,1874,1,0,0,0,142,1876,1,0,0,0,144,1878,
        1,0,0,0,146,1880,1,0,0,0,148,1889,1,0,0,0,150,1912,1,0,0,0,152,1914,
        1,0,0,0,154,1925,1,0,0,0,156,1936,1,0,0,0,158,1947,1,0,0,0,160,2176,
        1,0,0,0,162,2182,1,0,0,0,164,2184,1,0,0,0,166,2196,1,0,0,0,168,2200,
        1,0,0,0,170,2207,1,0,0,0,172,2209,1,0,0,0,174,2223,1,0,0,0,176,2225,
        1,0,0,0,178,2229,1,0,0,0,180,2243,1,0,0,0,182,2261,1,0,0,0,184,2263,
        1,0,0,0,186,2273,1,0,0,0,188,2287,1,0,0,0,190,2329,1,0,0,0,192,2352,
        1,0,0,0,194,2363,1,0,0,0,196,2382,1,0,0,0,198,2384,1,0,0,0,200,2435,
        1,0,0,0,202,2439,1,0,0,0,204,2445,1,0,0,0,206,2452,1,0,0,0,208,2457,
        1,0,0,0,210,2465,1,0,0,0,212,2469,1,0,0,0,214,2480,1,0,0,0,216,2496,
        1,0,0,0,218,2498,1,0,0,0,220,2506,1,0,0,0,222,2508,1,0,0,0,224,2511,
        1,0,0,0,226,2523,1,0,0,0,228,2535,1,0,0,0,230,2539,1,0,0,0,232,2547,
        1,0,0,0,234,2556,1,0,0,0,236,2558,1,0,0,0,238,2560,1,0,0,0,240,2575,
        1,0,0,0,242,2584,1,0,0,0,244,2609,1,0,0,0,246,2620,1,0,0,0,248,2623,
        1,0,0,0,250,255,3,6,3,0,251,252,5,301,0,0,252,254,3,6,3,0,253,251,
        1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,259,
        1,0,0,0,257,255,1,0,0,0,258,260,5,301,0,0,259,258,1,0,0,0,259,260,
        1,0,0,0,260,261,1,0,0,0,261,262,5,0,0,1,262,1,1,0,0,0,263,265,3,
        6,3,0,264,266,5,301,0,0,265,264,1,0,0,0,265,266,1,0,0,0,266,267,
        1,0,0,0,267,268,5,0,0,1,268,3,1,0,0,0,269,270,3,58,29,0,270,271,
        5,0,0,1,271,5,1,0,0,0,272,646,3,14,7,0,273,275,5,143,0,0,274,276,
        7,0,0,0,275,274,1,0,0,0,275,276,1,0,0,0,276,287,1,0,0,0,277,284,
        3,240,120,0,278,280,5,303,0,0,279,278,1,0,0,0,279,280,1,0,0,0,280,
        281,1,0,0,0,281,283,3,240,120,0,282,279,1,0,0,0,283,286,1,0,0,0,
        284,282,1,0,0,0,284,285,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,
        287,277,1,0,0,0,287,288,1,0,0,0,288,646,1,0,0,0,289,290,5,144,0,
        0,290,301,5,147,0,0,291,298,3,240,120,0,292,294,5,303,0,0,293,292,
        1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,297,3,240,120,0,296,
        293,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,
        302,1,0,0,0,300,298,1,0,0,0,301,291,1,0,0,0,301,302,1,0,0,0,302,
        646,1,0,0,0,303,305,5,145,0,0,304,306,7,0,0,0,305,304,1,0,0,0,305,
        306,1,0,0,0,306,646,1,0,0,0,307,309,5,68,0,0,308,310,7,0,0,0,309,
        308,1,0,0,0,309,310,1,0,0,0,310,646,1,0,0,0,311,320,5,176,0,0,312,
        321,5,165,0,0,313,321,5,167,0,0,314,316,3,212,106,0,315,314,1,0,
        0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,321,1,0,
        0,0,319,317,1,0,0,0,320,312,1,0,0,0,320,313,1,0,0,0,320,317,1,0,
        0,0,321,322,1,0,0,0,322,646,3,6,3,0,323,324,5,194,0,0,324,325,5,
        97,0,0,325,327,3,230,115,0,326,328,3,206,103,0,327,326,1,0,0,0,327,
        328,1,0,0,0,328,646,1,0,0,0,329,330,5,195,0,0,330,331,5,97,0,0,331,
        646,3,230,115,0,332,333,5,210,0,0,333,334,3,44,22,0,334,335,5,216,
        0,0,335,340,3,158,79,0,336,337,5,303,0,0,337,339,3,158,79,0,338,
        336,1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,
        344,1,0,0,0,342,340,1,0,0,0,343,345,3,32,16,0,344,343,1,0,0,0,344,
        345,1,0,0,0,345,347,1,0,0,0,346,348,3,34,17,0,347,346,1,0,0,0,347,
        348,1,0,0,0,348,646,1,0,0,0,349,350,5,209,0,0,350,351,5,3,0,0,351,
        353,3,44,22,0,352,354,3,32,16,0,353,352,1,0,0,0,353,354,1,0,0,0,
        354,646,1,0,0,0,355,360,5,185,0,0,356,357,5,147,0,0,357,358,5,150,
        0,0,358,361,5,151,0,0,359,361,5,148,0,0,360,356,1,0,0,0,360,359,
        1,0,0,0,361,646,1,0,0,0,362,363,5,185,0,0,363,364,5,95,0,0,364,365,
        5,97,0,0,365,646,3,50,25,0,366,367,5,185,0,0,367,370,5,186,0,0,368,
        369,7,1,0,0,369,371,3,116,58,0,370,368,1,0,0,0,370,371,1,0,0,0,371,
        375,1,0,0,0,372,373,5,26,0,0,373,376,3,92,46,0,374,376,3,32,16,0,
        375,372,1,0,0,0,375,374,1,0,0,0,375,376,1,0,0,0,376,646,1,0,0,0,
        377,378,5,185,0,0,378,382,5,187,0,0,379,380,5,26,0,0,380,383,3,92,
        46,0,381,383,3,32,16,0,382,379,1,0,0,0,382,381,1,0,0,0,382,383,1,
        0,0,0,383,646,1,0,0,0,384,385,5,185,0,0,385,386,5,189,0,0,386,387,
        7,1,0,0,387,390,3,116,58,0,388,389,7,1,0,0,389,391,3,116,58,0,390,
        388,1,0,0,0,390,391,1,0,0,0,391,395,1,0,0,0,392,393,5,26,0,0,393,
        396,3,92,46,0,394,396,3,32,16,0,395,392,1,0,0,0,395,394,1,0,0,0,
        395,396,1,0,0,0,396,646,1,0,0,0,397,400,5,185,0,0,398,401,3,116,
        58,0,399,401,5,7,0,0,400,398,1,0,0,0,400,399,1,0,0,0,401,646,1,0,
        0,0,402,646,3,10,5,0,403,404,5,217,0,0,404,405,5,140,0,0,405,410,
        3,68,34,0,406,407,5,303,0,0,407,409,3,68,34,0,408,406,1,0,0,0,409,
        412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,646,1,0,0,0,412,
        410,1,0,0,0,413,417,5,216,0,0,414,415,5,141,0,0,415,416,5,149,0,
        0,416,418,5,5,0,0,417,414,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,
        0,419,420,5,147,0,0,420,425,3,240,120,0,421,422,5,303,0,0,422,424,
        3,240,120,0,423,421,1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,425,
        426,1,0,0,0,426,646,1,0,0,0,427,425,1,0,0,0,428,430,5,216,0,0,429,
        431,7,2,0,0,430,429,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,
        433,5,141,0,0,433,436,5,1,0,0,434,437,5,218,0,0,435,437,3,130,65,
        0,436,434,1,0,0,0,436,435,1,0,0,0,437,646,1,0,0,0,438,439,5,217,
        0,0,439,440,5,141,0,0,440,646,5,1,0,0,441,443,5,216,0,0,442,444,
        7,2,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,446,
        3,116,58,0,446,456,7,3,0,0,447,457,5,218,0,0,448,453,3,234,117,0,
        449,450,5,303,0,0,450,452,3,234,117,0,451,449,1,0,0,0,452,455,1,
        0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,457,1,0,0,0,455,453,1,
        0,0,0,456,447,1,0,0,0,456,448,1,0,0,0,457,646,1,0,0,0,458,459,5,
        216,0,0,459,461,5,140,0,0,460,462,7,4,0,0,461,460,1,0,0,0,461,462,
        1,0,0,0,462,463,1,0,0,0,463,468,3,232,116,0,464,465,5,303,0,0,465,
        467,3,232,116,0,466,464,1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,
        468,469,1,0,0,0,469,646,1,0,0,0,470,468,1,0,0,0,471,472,5,216,0,
        0,472,473,5,48,0,0,473,477,5,49,0,0,474,478,5,142,0,0,475,478,5,
        218,0,0,476,478,3,92,46,0,477,474,1,0,0,0,477,475,1,0,0,0,477,476,
        1,0,0,0,478,646,1,0,0,0,479,482,5,107,0,0,480,483,5,7,0,0,481,483,
        3,82,41,0,482,480,1,0,0,0,482,481,1,0,0,0,483,646,1,0,0,0,484,485,
        5,206,0,0,485,486,5,207,0,0,486,498,3,50,25,0,487,488,5,305,0,0,
        488,493,3,124,62,0,489,490,5,303,0,0,490,492,3,124,62,0,491,489,
        1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,496,
        1,0,0,0,495,493,1,0,0,0,496,497,5,306,0,0,497,499,1,0,0,0,498,487,
        1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,502,3,148,74,0,501,503,
        3,150,75,0,502,501,1,0,0,0,502,503,1,0,0,0,503,505,1,0,0,0,504,506,
        3,34,17,0,505,504,1,0,0,0,505,506,1,0,0,0,506,646,1,0,0,0,507,508,
        5,196,0,0,508,509,5,105,0,0,509,515,3,116,58,0,510,516,5,7,0,0,511,
        516,5,255,0,0,512,513,5,97,0,0,513,516,3,230,115,0,514,516,3,122,
        61,0,515,510,1,0,0,0,515,511,1,0,0,0,515,512,1,0,0,0,515,514,1,0,
        0,0,516,518,1,0,0,0,517,519,3,206,103,0,518,517,1,0,0,0,518,519,
        1,0,0,0,519,646,1,0,0,0,520,521,5,219,0,0,521,533,3,48,24,0,522,
        523,5,305,0,0,523,528,3,124,62,0,524,525,5,303,0,0,525,527,3,124,
        62,0,526,524,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,
        0,0,529,531,1,0,0,0,530,528,1,0,0,0,531,532,5,306,0,0,532,534,1,
        0,0,0,533,522,1,0,0,0,533,534,1,0,0,0,534,535,1,0,0,0,535,536,5,
        3,0,0,536,538,3,58,29,0,537,539,3,206,103,0,538,537,1,0,0,0,538,
        539,1,0,0,0,539,542,1,0,0,0,540,541,5,253,0,0,541,543,5,254,0,0,
        542,540,1,0,0,0,542,543,1,0,0,0,543,646,1,0,0,0,544,545,5,219,0,
        0,545,547,3,48,24,0,546,548,3,156,78,0,547,546,1,0,0,0,547,548,1,
        0,0,0,548,550,1,0,0,0,549,551,3,32,16,0,550,549,1,0,0,0,550,551,
        1,0,0,0,551,552,1,0,0,0,552,554,5,4,0,0,553,555,5,11,0,0,554,553,
        1,0,0,0,554,555,1,0,0,0,555,556,1,0,0,0,556,558,3,58,29,0,557,559,
        3,206,103,0,558,557,1,0,0,0,558,559,1,0,0,0,559,646,1,0,0,0,560,
        646,3,8,4,0,561,567,5,248,0,0,562,568,3,122,61,0,563,565,5,7,0,0,
        564,566,5,251,0,0,565,564,1,0,0,0,565,566,1,0,0,0,566,568,1,0,0,
        0,567,562,1,0,0,0,567,563,1,0,0,0,568,573,1,0,0,0,569,570,5,80,0,
        0,570,571,3,238,119,0,571,572,3,114,57,0,572,574,1,0,0,0,573,569,
        1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,576,5,4,0,0,576,646,
        3,122,61,0,577,583,5,249,0,0,578,584,3,122,61,0,579,581,5,7,0,0,
        580,582,5,251,0,0,581,580,1,0,0,0,581,582,1,0,0,0,582,584,1,0,0,
        0,583,578,1,0,0,0,583,579,1,0,0,0,584,589,1,0,0,0,585,586,5,80,0,
        0,586,587,3,238,119,0,587,588,3,114,57,0,588,590,1,0,0,0,589,585,
        1,0,0,0,589,590,1,0,0,0,590,591,1,0,0,0,591,592,5,4,0,0,592,646,
        3,122,61,0,593,599,5,250,0,0,594,600,3,122,61,0,595,597,5,7,0,0,
        596,598,5,251,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,600,1,0,0,
        0,599,594,1,0,0,0,599,595,1,0,0,0,600,605,1,0,0,0,601,602,5,80,0,
        0,602,603,3,238,119,0,603,604,3,114,57,0,604,606,1,0,0,0,605,601,
        1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,607,608,5,3,0,0,608,646,
        3,122,61,0,609,646,3,160,80,0,610,612,5,10,0,0,611,613,5,240,0,0,
        612,611,1,0,0,0,612,613,1,0,0,0,613,616,1,0,0,0,614,617,5,7,0,0,
        615,617,3,132,66,0,616,614,1,0,0,0,616,615,1,0,0,0,617,646,1,0,0,
        0,618,646,5,165,0,0,619,620,5,168,0,0,620,646,7,5,0,0,621,622,5,
        261,0,0,622,623,3,124,62,0,623,624,3,246,123,0,624,627,5,262,0,0,
        625,626,7,6,0,0,626,628,5,268,0,0,627,625,1,0,0,0,627,628,1,0,0,
        0,628,629,1,0,0,0,629,630,5,47,0,0,630,631,3,16,8,0,631,646,1,0,
        0,0,632,634,5,35,0,0,633,635,3,244,122,0,634,633,1,0,0,0,634,635,
        1,0,0,0,635,637,1,0,0,0,636,638,7,1,0,0,637,636,1,0,0,0,637,638,
        1,0,0,0,638,639,1,0,0,0,639,646,3,124,62,0,640,643,5,112,0,0,641,
        644,3,124,62,0,642,644,5,7,0,0,643,641,1,0,0,0,643,642,1,0,0,0,644,
        646,1,0,0,0,645,272,1,0,0,0,645,273,1,0,0,0,645,289,1,0,0,0,645,
        303,1,0,0,0,645,307,1,0,0,0,645,311,1,0,0,0,645,323,1,0,0,0,645,
        329,1,0,0,0,645,332,1,0,0,0,645,349,1,0,0,0,645,355,1,0,0,0,645,
        362,1,0,0,0,645,366,1,0,0,0,645,377,1,0,0,0,645,384,1,0,0,0,645,
        397,1,0,0,0,645,402,1,0,0,0,645,403,1,0,0,0,645,413,1,0,0,0,645,
        428,1,0,0,0,645,438,1,0,0,0,645,441,1,0,0,0,645,458,1,0,0,0,645,
        471,1,0,0,0,645,479,1,0,0,0,645,484,1,0,0,0,645,507,1,0,0,0,645,
        520,1,0,0,0,645,544,1,0,0,0,645,560,1,0,0,0,645,561,1,0,0,0,645,
        577,1,0,0,0,645,593,1,0,0,0,645,609,1,0,0,0,645,610,1,0,0,0,645,
        618,1,0,0,0,645,619,1,0,0,0,645,621,1,0,0,0,645,632,1,0,0,0,645,
        640,1,0,0,0,646,7,1,0,0,0,647,648,5,197,0,0,648,649,5,96,0,0,649,
        652,5,97,0,0,650,651,5,69,0,0,651,653,5,24,0,0,652,650,1,0,0,0,652,
        653,1,0,0,0,653,654,1,0,0,0,654,756,3,50,25,0,655,656,5,197,0,0,
        656,659,5,97,0,0,657,658,5,69,0,0,658,660,5,24,0,0,659,657,1,0,0,
        0,659,660,1,0,0,0,660,661,1,0,0,0,661,756,3,50,25,0,662,663,5,197,
        0,0,663,664,5,198,0,0,664,756,3,116,58,0,665,666,5,197,0,0,666,667,
        5,104,0,0,667,756,3,124,62,0,668,669,5,197,0,0,669,670,5,105,0,0,
        670,756,3,116,58,0,671,672,5,197,0,0,672,675,5,162,0,0,673,674,5,
        69,0,0,674,676,5,24,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,677,
        1,0,0,0,677,678,3,116,58,0,678,687,5,305,0,0,679,684,3,168,84,0,
        680,681,5,303,0,0,681,683,3,168,84,0,682,680,1,0,0,0,683,686,1,0,
        0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,688,1,0,0,0,686,684,1,0,
        0,0,687,679,1,0,0,0,687,688,1,0,0,0,688,689,1,0,0,0,689,690,5,306,
        0,0,690,756,1,0,0,0,691,692,5,197,0,0,692,695,7,7,0,0,693,694,5,
        69,0,0,694,696,5,24,0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,697,
        1,0,0,0,697,756,3,124,62,0,698,699,5,197,0,0,699,702,5,193,0,0,700,
        701,5,69,0,0,701,703,5,24,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,
        704,1,0,0,0,704,756,3,114,57,0,705,706,5,197,0,0,706,707,5,234,0,
        0,707,756,3,124,62,0,708,709,5,197,0,0,709,712,5,256,0,0,710,711,
        5,69,0,0,711,713,5,24,0,0,712,710,1,0,0,0,712,713,1,0,0,0,713,714,
        1,0,0,0,714,756,3,124,62,0,715,716,5,197,0,0,716,719,5,257,0,0,717,
        718,5,69,0,0,718,720,5,24,0,0,719,717,1,0,0,0,719,720,1,0,0,0,720,
        721,1,0,0,0,721,756,3,124,62,0,722,723,5,197,0,0,723,726,5,274,0,
        0,724,725,5,69,0,0,725,727,5,24,0,0,726,724,1,0,0,0,726,727,1,0,
        0,0,727,728,1,0,0,0,728,730,3,122,61,0,729,731,7,8,0,0,730,729,1,
        0,0,0,730,731,1,0,0,0,731,756,1,0,0,0,732,733,5,197,0,0,733,734,
        5,275,0,0,734,737,5,97,0,0,735,736,5,69,0,0,736,738,5,24,0,0,737,
        735,1,0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,741,3,114,57,0,740,
        742,7,8,0,0,741,740,1,0,0,0,741,742,1,0,0,0,742,756,1,0,0,0,743,
        744,5,197,0,0,744,745,5,246,0,0,745,748,5,279,0,0,746,747,5,69,0,
        0,747,749,5,24,0,0,748,746,1,0,0,0,748,749,1,0,0,0,749,750,1,0,0,
        0,750,751,5,47,0,0,751,752,3,162,81,0,752,753,5,274,0,0,753,754,
        3,124,62,0,754,756,1,0,0,0,755,647,1,0,0,0,755,655,1,0,0,0,755,662,
        1,0,0,0,755,665,1,0,0,0,755,668,1,0,0,0,755,671,1,0,0,0,755,691,
        1,0,0,0,755,698,1,0,0,0,755,705,1,0,0,0,755,708,1,0,0,0,755,715,
        1,0,0,0,755,722,1,0,0,0,755,732,1,0,0,0,755,743,1,0,0,0,756,9,1,
        0,0,0,757,758,5,106,0,0,758,759,5,97,0,0,759,760,3,170,85,0,760,
        765,3,186,93,0,761,762,5,303,0,0,762,764,3,186,93,0,763,761,1,0,
        0,0,764,767,1,0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,766,933,1,0,
        0,0,767,765,1,0,0,0,768,769,5,106,0,0,769,770,5,97,0,0,770,771,3,
        170,85,0,771,776,3,188,94,0,772,773,5,303,0,0,773,775,3,188,94,0,
        774,772,1,0,0,0,775,778,1,0,0,0,776,774,1,0,0,0,776,777,1,0,0,0,
        777,933,1,0,0,0,778,776,1,0,0,0,779,780,5,106,0,0,780,781,5,97,0,
        0,781,782,3,170,85,0,782,783,5,197,0,0,783,784,5,173,0,0,784,785,
        3,124,62,0,785,933,1,0,0,0,786,787,5,106,0,0,787,788,5,97,0,0,788,
        808,3,170,85,0,789,790,5,216,0,0,790,791,5,305,0,0,791,792,3,208,
        104,0,792,793,5,306,0,0,793,809,1,0,0,0,794,806,5,217,0,0,795,796,
        5,305,0,0,796,801,3,124,62,0,797,798,5,303,0,0,798,800,3,124,62,
        0,799,797,1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,0,801,802,1,0,0,
        0,802,804,1,0,0,0,803,801,1,0,0,0,804,805,5,306,0,0,805,807,1,0,
        0,0,806,795,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,808,789,1,0,
        0,0,808,794,1,0,0,0,809,933,1,0,0,0,810,811,5,106,0,0,811,812,5,
        96,0,0,812,813,5,97,0,0,813,833,3,170,85,0,814,815,5,216,0,0,815,
        816,5,305,0,0,816,817,3,208,104,0,817,818,5,306,0,0,818,834,1,0,
        0,0,819,831,5,217,0,0,820,821,5,305,0,0,821,826,3,124,62,0,822,823,
        5,303,0,0,823,825,3,124,62,0,824,822,1,0,0,0,825,828,1,0,0,0,826,
        824,1,0,0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,826,1,0,0,0,829,
        830,5,306,0,0,830,832,1,0,0,0,831,820,1,0,0,0,831,832,1,0,0,0,832,
        834,1,0,0,0,833,814,1,0,0,0,833,819,1,0,0,0,834,933,1,0,0,0,835,
        837,5,106,0,0,836,838,5,96,0,0,837,836,1,0,0,0,837,838,1,0,0,0,838,
        839,1,0,0,0,839,840,5,97,0,0,840,841,3,170,85,0,841,842,7,9,0,0,
        842,933,1,0,0,0,843,845,5,106,0,0,844,846,5,96,0,0,845,844,1,0,0,
        0,845,846,1,0,0,0,846,847,1,0,0,0,847,848,5,97,0,0,848,849,3,170,
        85,0,849,850,5,113,0,0,850,851,5,4,0,0,851,852,3,116,58,0,852,933,
        1,0,0,0,853,855,5,106,0,0,854,856,5,96,0,0,855,854,1,0,0,0,855,856,
        1,0,0,0,856,857,1,0,0,0,857,858,5,97,0,0,858,859,3,170,85,0,859,
        861,5,113,0,0,860,862,5,110,0,0,861,860,1,0,0,0,861,862,1,0,0,0,
        862,863,1,0,0,0,863,864,3,96,48,0,864,865,5,4,0,0,865,866,3,96,48,
        0,866,933,1,0,0,0,867,869,5,106,0,0,868,870,5,96,0,0,869,868,1,0,
        0,0,869,870,1,0,0,0,870,871,1,0,0,0,871,872,5,97,0,0,872,873,3,170,
        85,0,873,874,5,114,0,0,874,875,3,190,95,0,875,933,1,0,0,0,876,877,
        5,106,0,0,877,878,5,103,0,0,878,879,5,114,0,0,879,880,5,120,0,0,
        880,933,5,121,0,0,881,882,5,106,0,0,882,883,5,103,0,0,883,884,5,
        98,0,0,884,885,5,97,0,0,885,886,3,116,58,0,886,887,5,4,0,0,887,889,
        3,116,58,0,888,890,3,206,103,0,889,888,1,0,0,0,889,890,1,0,0,0,890,
        933,1,0,0,0,891,892,5,106,0,0,892,893,5,103,0,0,893,894,5,102,0,
        0,894,933,3,58,29,0,895,896,5,106,0,0,896,897,5,103,0,0,897,898,
        5,99,0,0,898,899,5,100,0,0,899,933,5,101,0,0,900,901,5,106,0,0,901,
        902,7,7,0,0,902,903,3,124,62,0,903,904,5,216,0,0,904,905,5,305,0,
        0,905,906,3,208,104,0,906,907,5,306,0,0,907,933,1,0,0,0,908,909,
        5,106,0,0,909,910,5,256,0,0,910,911,3,124,62,0,911,912,7,10,0,0,
        912,913,5,97,0,0,913,915,3,116,58,0,914,916,5,295,0,0,915,914,1,
        0,0,0,915,916,1,0,0,0,916,924,1,0,0,0,917,918,5,303,0,0,918,920,
        3,116,58,0,919,921,5,295,0,0,920,919,1,0,0,0,920,921,1,0,0,0,921,
        923,1,0,0,0,922,917,1,0,0,0,923,926,1,0,0,0,924,922,1,0,0,0,924,
        925,1,0,0,0,925,933,1,0,0,0,926,924,1,0,0,0,927,928,5,106,0,0,928,
        929,5,257,0,0,929,930,3,124,62,0,930,931,3,172,86,0,931,933,1,0,
        0,0,932,757,1,0,0,0,932,768,1,0,0,0,932,779,1,0,0,0,932,786,1,0,
        0,0,932,810,1,0,0,0,932,835,1,0,0,0,932,843,1,0,0,0,932,853,1,0,
        0,0,932,867,1,0,0,0,932,876,1,0,0,0,932,881,1,0,0,0,932,891,1,0,
        0,0,932,895,1,0,0,0,932,900,1,0,0,0,932,908,1,0,0,0,932,927,1,0,
        0,0,933,11,1,0,0,0,934,935,5,305,0,0,935,936,3,14,7,0,936,937,5,
        306,0,0,937,944,1,0,0,0,938,944,3,14,7,0,939,940,5,305,0,0,940,941,
        3,12,6,0,941,942,5,306,0,0,942,944,1,0,0,0,943,934,1,0,0,0,943,938,
        1,0,0,0,943,939,1,0,0,0,944,13,1,0,0,0,945,947,3,54,27,0,946,945,
        1,0,0,0,946,947,1,0,0,0,947,948,1,0,0,0,948,949,3,16,8,0,949,15,
        1,0,0,0,950,961,3,22,11,0,951,952,5,16,0,0,952,953,5,15,0,0,953,
        958,3,26,13,0,954,955,5,303,0,0,955,957,3,26,13,0,956,954,1,0,0,
        0,957,960,1,0,0,0,958,956,1,0,0,0,958,959,1,0,0,0,959,962,1,0,0,
        0,960,958,1,0,0,0,961,951,1,0,0,0,961,962,1,0,0,0,962,975,1,0,0,
        0,963,965,3,18,9,0,964,963,1,0,0,0,964,965,1,0,0,0,965,967,1,0,0,
        0,966,968,3,20,10,0,967,966,1,0,0,0,967,968,1,0,0,0,968,976,1,0,
        0,0,969,971,3,20,10,0,970,969,1,0,0,0,970,971,1,0,0,0,971,973,1,
        0,0,0,972,974,3,18,9,0,973,972,1,0,0,0,973,974,1,0,0,0,974,976,1,
        0,0,0,975,964,1,0,0,0,975,970,1,0,0,0,976,17,1,0,0,0,977,980,5,18,
        0,0,978,981,3,78,39,0,979,981,5,7,0,0,980,978,1,0,0,0,980,979,1,
        0,0,0,981,989,1,0,0,0,982,983,5,35,0,0,983,984,7,11,0,0,984,985,
        3,78,39,0,985,986,7,12,0,0,986,987,5,108,0,0,987,989,1,0,0,0,988,
        977,1,0,0,0,988,982,1,0,0,0,989,19,1,0,0,0,990,991,5,19,0,0,991,
        993,3,78,39,0,992,994,7,12,0,0,993,992,1,0,0,0,993,994,1,0,0,0,994,
        21,1,0,0,0,995,996,6,11,-1,0,996,1002,3,28,14,0,997,998,3,28,14,
        0,998,999,7,13,0,0,999,1000,3,28,14,0,1000,1002,1,0,0,0,1001,995,
        1,0,0,0,1001,997,1,0,0,0,1002,1011,1,0,0,0,1003,1004,10,1,0,0,1004,
        1006,5,199,0,0,1005,1007,3,24,12,0,1006,1005,1,0,0,0,1006,1007,1,
        0,0,0,1007,1008,1,0,0,0,1008,1010,3,22,11,2,1009,1003,1,0,0,0,1010,
        1013,1,0,0,0,1011,1009,1,0,0,0,1011,1012,1,0,0,0,1012,23,1,0,0,0,
        1013,1011,1,0,0,0,1014,1015,7,14,0,0,1015,25,1,0,0,0,1016,1018,3,
        58,29,0,1017,1019,7,15,0,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,
        1022,1,0,0,0,1020,1021,5,34,0,0,1021,1023,7,16,0,0,1022,1020,1,0,
        0,0,1022,1023,1,0,0,0,1023,27,1,0,0,0,1024,1026,5,2,0,0,1025,1027,
        3,24,12,0,1026,1025,1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,0,
        1028,1033,3,30,15,0,1029,1030,5,303,0,0,1030,1032,3,30,15,0,1031,
        1029,1,0,0,0,1032,1035,1,0,0,0,1033,1031,1,0,0,0,1033,1034,1,0,0,
        0,1034,1045,1,0,0,0,1035,1033,1,0,0,0,1036,1037,5,3,0,0,1037,1042,
        3,38,19,0,1038,1039,5,303,0,0,1039,1041,3,38,19,0,1040,1038,1,0,
        0,0,1041,1044,1,0,0,0,1042,1040,1,0,0,0,1042,1043,1,0,0,0,1043,1046,
        1,0,0,0,1044,1042,1,0,0,0,1045,1036,1,0,0,0,1045,1046,1,0,0,0,1046,
        1048,1,0,0,0,1047,1049,3,32,16,0,1048,1047,1,0,0,0,1048,1049,1,0,
        0,0,1049,1060,1,0,0,0,1050,1051,5,14,0,0,1051,1052,5,15,0,0,1052,
        1057,3,58,29,0,1053,1054,5,303,0,0,1054,1056,3,58,29,0,1055,1053,
        1,0,0,0,1056,1059,1,0,0,0,1057,1055,1,0,0,0,1057,1058,1,0,0,0,1058,
        1061,1,0,0,0,1059,1057,1,0,0,0,1060,1050,1,0,0,0,1060,1061,1,0,0,
        0,1061,1064,1,0,0,0,1062,1063,5,17,0,0,1063,1065,3,60,30,0,1064,
        1062,1,0,0,0,1064,1065,1,0,0,0,1065,1075,1,0,0,0,1066,1067,5,82,
        0,0,1067,1072,3,104,52,0,1068,1069,5,303,0,0,1069,1071,3,104,52,
        0,1070,1068,1,0,0,0,1071,1074,1,0,0,0,1072,1070,1,0,0,0,1072,1073,
        1,0,0,0,1073,1076,1,0,0,0,1074,1072,1,0,0,0,1075,1066,1,0,0,0,1075,
        1076,1,0,0,0,1076,1087,1,0,0,0,1077,1078,5,208,0,0,1078,1083,3,154,
        77,0,1079,1080,5,303,0,0,1080,1082,3,154,77,0,1081,1079,1,0,0,0,
        1082,1085,1,0,0,0,1083,1081,1,0,0,0,1083,1084,1,0,0,0,1084,1087,
        1,0,0,0,1085,1083,1,0,0,0,1086,1024,1,0,0,0,1086,1077,1,0,0,0,1087,
        29,1,0,0,0,1088,1093,3,58,29,0,1089,1091,5,5,0,0,1090,1089,1,0,0,
        0,1090,1091,1,0,0,0,1091,1092,1,0,0,0,1092,1094,3,124,62,0,1093,
        1090,1,0,0,0,1093,1094,1,0,0,0,1094,1101,1,0,0,0,1095,1096,3,116,
        58,0,1096,1097,5,304,0,0,1097,1098,5,295,0,0,1098,1101,1,0,0,0,1099,
        1101,5,295,0,0,1100,1088,1,0,0,0,1100,1095,1,0,0,0,1100,1099,1,0,
        0,0,1101,31,1,0,0,0,1102,1103,5,13,0,0,1103,1104,3,60,30,0,1104,
        33,1,0,0,0,1105,1106,5,229,0,0,1106,1111,3,30,15,0,1107,1108,5,303,
        0,0,1108,1110,3,30,15,0,1109,1107,1,0,0,0,1110,1113,1,0,0,0,1111,
        1109,1,0,0,0,1111,1112,1,0,0,0,1112,35,1,0,0,0,1113,1111,1,0,0,0,
        1114,1115,5,225,0,0,1115,1116,5,305,0,0,1116,1117,3,32,16,0,1117,
        1118,5,306,0,0,1118,37,1,0,0,0,1119,1120,6,19,-1,0,1120,1121,3,44,
        22,0,1121,1140,1,0,0,0,1122,1136,10,2,0,0,1123,1124,5,72,0,0,1124,
        1125,5,71,0,0,1125,1137,3,44,22,0,1126,1127,3,40,20,0,1127,1128,
        5,71,0,0,1128,1129,3,38,19,0,1129,1130,3,42,21,0,1130,1137,1,0,0,
        0,1131,1132,5,78,0,0,1132,1133,3,40,20,0,1133,1134,5,71,0,0,1134,
        1135,3,44,22,0,1135,1137,1,0,0,0,1136,1123,1,0,0,0,1136,1126,1,0,
        0,0,1136,1131,1,0,0,0,1137,1139,1,0,0,0,1138,1122,1,0,0,0,1139,1142,
        1,0,0,0,1140,1138,1,0,0,0,1140,1141,1,0,0,0,1141,39,1,0,0,0,1142,
        1140,1,0,0,0,1143,1145,5,74,0,0,1144,1143,1,0,0,0,1144,1145,1,0,
        0,0,1145,1159,1,0,0,0,1146,1148,5,75,0,0,1147,1149,5,73,0,0,1148,
        1147,1,0,0,0,1148,1149,1,0,0,0,1149,1159,1,0,0,0,1150,1152,5,76,
        0,0,1151,1153,5,73,0,0,1152,1151,1,0,0,0,1152,1153,1,0,0,0,1153,
        1159,1,0,0,0,1154,1156,5,77,0,0,1155,1157,5,73,0,0,1156,1155,1,0,
        0,0,1156,1157,1,0,0,0,1157,1159,1,0,0,0,1158,1144,1,0,0,0,1158,1146,
        1,0,0,0,1158,1150,1,0,0,0,1158,1154,1,0,0,0,1159,41,1,0,0,0,1160,
        1161,5,80,0,0,1161,1175,3,60,30,0,1162,1163,5,79,0,0,1163,1164,5,
        305,0,0,1164,1169,3,124,62,0,1165,1166,5,303,0,0,1166,1168,3,124,
        62,0,1167,1165,1,0,0,0,1168,1171,1,0,0,0,1169,1167,1,0,0,0,1169,
        1170,1,0,0,0,1170,1172,1,0,0,0,1171,1169,1,0,0,0,1172,1173,5,306,
        0,0,1173,1175,1,0,0,0,1174,1160,1,0,0,0,1174,1162,1,0,0,0,1175,43,
        1,0,0,0,1176,1184,3,46,23,0,1177,1179,5,5,0,0,1178,1177,1,0,0,0,
        1178,1179,1,0,0,0,1179,1180,1,0,0,0,1180,1182,3,124,62,0,1181,1183,
        3,52,26,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1185,1,0,0,0,
        1184,1178,1,0,0,0,1184,1185,1,0,0,0,1185,45,1,0,0,0,1186,1196,3,
        50,25,0,1187,1188,5,305,0,0,1188,1189,3,14,7,0,1189,1190,5,306,0,
        0,1190,1196,1,0,0,0,1191,1192,5,305,0,0,1192,1193,3,38,19,0,1193,
        1194,5,306,0,0,1194,1196,1,0,0,0,1195,1186,1,0,0,0,1195,1187,1,0,
        0,0,1195,1191,1,0,0,0,1196,47,1,0,0,0,1197,1210,3,116,58,0,1198,
        1199,5,83,0,0,1199,1200,5,305,0,0,1200,1205,3,158,79,0,1201,1202,
        5,303,0,0,1202,1204,3,158,79,0,1203,1201,1,0,0,0,1204,1207,1,0,0,
        0,1205,1203,1,0,0,0,1205,1206,1,0,0,0,1206,1208,1,0,0,0,1207,1205,
        1,0,0,0,1208,1209,5,306,0,0,1209,1211,1,0,0,0,1210,1198,1,0,0,0,
        1210,1211,1,0,0,0,1211,49,1,0,0,0,1212,1228,3,116,58,0,1213,1214,
        3,116,58,0,1214,1216,5,305,0,0,1215,1217,3,66,33,0,1216,1215,1,0,
        0,0,1216,1217,1,0,0,0,1217,1222,1,0,0,0,1218,1219,5,303,0,0,1219,
        1221,3,66,33,0,1220,1218,1,0,0,0,1221,1224,1,0,0,0,1222,1220,1,0,
        0,0,1222,1223,1,0,0,0,1223,1225,1,0,0,0,1224,1222,1,0,0,0,1225,1226,
        5,306,0,0,1226,1228,1,0,0,0,1227,1212,1,0,0,0,1227,1213,1,0,0,0,
        1228,51,1,0,0,0,1229,1230,5,305,0,0,1230,1235,3,124,62,0,1231,1232,
        5,303,0,0,1232,1234,3,124,62,0,1233,1231,1,0,0,0,1234,1237,1,0,0,
        0,1235,1233,1,0,0,0,1235,1236,1,0,0,0,1236,1238,1,0,0,0,1237,1235,
        1,0,0,0,1238,1239,5,306,0,0,1239,53,1,0,0,0,1240,1241,5,92,0,0,1241,
        1246,3,56,28,0,1242,1243,5,303,0,0,1243,1245,3,56,28,0,1244,1242,
        1,0,0,0,1245,1248,1,0,0,0,1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,
        55,1,0,0,0,1248,1246,1,0,0,0,1249,1251,3,124,62,0,1250,1252,3,52,
        26,0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1253,1,0,0,0,1253,
        1254,5,5,0,0,1254,1255,5,305,0,0,1255,1256,3,14,7,0,1256,1257,5,
        306,0,0,1257,57,1,0,0,0,1258,1259,3,60,30,0,1259,59,1,0,0,0,1260,
        1261,6,30,-1,0,1261,1278,3,62,31,0,1262,1263,5,23,0,0,1263,1278,
        3,60,30,4,1264,1265,5,243,0,0,1265,1266,5,305,0,0,1266,1267,3,216,
        108,0,1267,1268,5,303,0,0,1268,1269,3,68,34,0,1269,1275,5,306,0,
        0,1270,1271,5,79,0,0,1271,1273,3,124,62,0,1272,1274,3,206,103,0,
        1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1276,1,0,0,0,1275,1270,
        1,0,0,0,1275,1276,1,0,0,0,1276,1278,1,0,0,0,1277,1260,1,0,0,0,1277,
        1262,1,0,0,0,1277,1264,1,0,0,0,1278,1287,1,0,0,0,1279,1280,10,3,
        0,0,1280,1281,5,21,0,0,1281,1286,3,60,30,4,1282,1283,10,2,0,0,1283,
        1284,5,20,0,0,1284,1286,3,60,30,3,1285,1279,1,0,0,0,1285,1282,1,
        0,0,0,1286,1289,1,0,0,0,1287,1285,1,0,0,0,1287,1288,1,0,0,0,1288,
        61,1,0,0,0,1289,1287,1,0,0,0,1290,1292,3,66,33,0,1291,1293,3,64,
        32,0,1292,1291,1,0,0,0,1292,1293,1,0,0,0,1293,63,1,0,0,0,1294,1295,
        3,98,49,0,1295,1296,3,66,33,0,1296,1363,1,0,0,0,1297,1298,3,98,49,
        0,1298,1299,3,100,50,0,1299,1300,3,68,34,0,1300,1363,1,0,0,0,1301,
        1303,5,23,0,0,1302,1301,1,0,0,0,1302,1303,1,0,0,0,1303,1304,1,0,
        0,0,1304,1305,5,25,0,0,1305,1306,3,66,33,0,1306,1307,5,21,0,0,1307,
        1308,3,66,33,0,1308,1363,1,0,0,0,1309,1311,5,23,0,0,1310,1309,1,
        0,0,0,1310,1311,1,0,0,0,1311,1312,1,0,0,0,1312,1313,5,22,0,0,1313,
        1314,5,305,0,0,1314,1319,3,58,29,0,1315,1316,5,303,0,0,1316,1318,
        3,58,29,0,1317,1315,1,0,0,0,1318,1321,1,0,0,0,1319,1317,1,0,0,0,
        1319,1320,1,0,0,0,1320,1322,1,0,0,0,1321,1319,1,0,0,0,1322,1323,
        5,306,0,0,1323,1363,1,0,0,0,1324,1326,5,23,0,0,1325,1324,1,0,0,0,
        1325,1326,1,0,0,0,1326,1327,1,0,0,0,1327,1328,5,22,0,0,1328,1363,
        3,72,36,0,1329,1331,5,23,0,0,1330,1329,1,0,0,0,1330,1331,1,0,0,0,
        1331,1332,1,0,0,0,1332,1333,7,17,0,0,1333,1336,3,66,33,0,1334,1335,
        5,39,0,0,1335,1337,3,74,37,0,1336,1334,1,0,0,0,1336,1337,1,0,0,0,
        1337,1363,1,0,0,0,1338,1340,5,23,0,0,1339,1338,1,0,0,0,1339,1340,
        1,0,0,0,1340,1341,1,0,0,0,1341,1342,7,17,0,0,1342,1343,3,100,50,
        0,1343,1344,5,305,0,0,1344,1345,3,66,33,0,1345,1348,5,306,0,0,1346,
        1347,5,39,0,0,1347,1349,3,66,33,0,1348,1346,1,0,0,0,1348,1349,1,
        0,0,0,1349,1363,1,0,0,0,1350,1352,5,28,0,0,1351,1353,5,23,0,0,1352,
        1351,1,0,0,0,1352,1353,1,0,0,0,1353,1354,1,0,0,0,1354,1363,5,29,
        0,0,1355,1357,5,28,0,0,1356,1358,5,23,0,0,1357,1356,1,0,0,0,1357,
        1358,1,0,0,0,1358,1359,1,0,0,0,1359,1360,5,12,0,0,1360,1361,5,3,
        0,0,1361,1363,3,66,33,0,1362,1294,1,0,0,0,1362,1297,1,0,0,0,1362,
        1302,1,0,0,0,1362,1310,1,0,0,0,1362,1325,1,0,0,0,1362,1330,1,0,0,
        0,1362,1339,1,0,0,0,1362,1350,1,0,0,0,1362,1355,1,0,0,0,1363,65,
        1,0,0,0,1364,1365,6,33,-1,0,1365,1372,3,68,34,0,1366,1367,7,18,0,
        0,1367,1372,3,66,33,7,1368,1369,3,192,96,0,1369,1370,3,92,46,0,1370,
        1372,1,0,0,0,1371,1364,1,0,0,0,1371,1366,1,0,0,0,1371,1368,1,0,0,
        0,1372,1390,1,0,0,0,1373,1374,10,6,0,0,1374,1375,5,296,0,0,1375,
        1389,3,66,33,7,1376,1377,10,5,0,0,1377,1378,7,19,0,0,1378,1389,3,
        66,33,6,1379,1380,10,4,0,0,1380,1381,7,18,0,0,1381,1389,3,66,33,
        5,1382,1383,10,3,0,0,1383,1384,7,20,0,0,1384,1389,3,66,33,4,1385,
        1386,10,2,0,0,1386,1387,5,299,0,0,1387,1389,3,66,33,3,1388,1373,
        1,0,0,0,1388,1376,1,0,0,0,1388,1379,1,0,0,0,1388,1382,1,0,0,0,1388,
        1385,1,0,0,0,1389,1392,1,0,0,0,1390,1388,1,0,0,0,1390,1391,1,0,0,
        0,1391,67,1,0,0,0,1392,1390,1,0,0,0,1393,1394,6,34,-1,0,1394,1462,
        3,74,37,0,1395,1462,3,70,35,0,1396,1397,3,116,58,0,1397,1398,5,305,
        0,0,1398,1399,5,295,0,0,1399,1401,5,306,0,0,1400,1402,3,36,18,0,
        1401,1400,1,0,0,0,1401,1402,1,0,0,0,1402,1404,1,0,0,0,1403,1405,
        3,106,53,0,1404,1403,1,0,0,0,1404,1405,1,0,0,0,1405,1462,1,0,0,0,
        1406,1462,3,124,62,0,1407,1408,3,116,58,0,1408,1420,5,305,0,0,1409,
        1411,3,24,12,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,1412,1,0,
        0,0,1412,1417,3,58,29,0,1413,1414,5,303,0,0,1414,1416,3,58,29,0,
        1415,1413,1,0,0,0,1416,1419,1,0,0,0,1417,1415,1,0,0,0,1417,1418,
        1,0,0,0,1418,1421,1,0,0,0,1419,1417,1,0,0,0,1420,1410,1,0,0,0,1420,
        1421,1,0,0,0,1421,1422,1,0,0,0,1422,1424,5,306,0,0,1423,1425,3,36,
        18,0,1424,1423,1,0,0,0,1424,1425,1,0,0,0,1425,1428,1,0,0,0,1426,
        1427,7,21,0,0,1427,1429,5,34,0,0,1428,1426,1,0,0,0,1428,1429,1,0,
        0,0,1429,1431,1,0,0,0,1430,1432,3,106,53,0,1431,1430,1,0,0,0,1431,
        1432,1,0,0,0,1432,1462,1,0,0,0,1433,1462,3,72,36,0,1434,1435,5,305,
        0,0,1435,1436,3,68,34,0,1436,1437,5,306,0,0,1437,1438,5,304,0,0,
        1438,1439,3,124,62,0,1439,1462,1,0,0,0,1440,1441,5,305,0,0,1441,
        1442,3,58,29,0,1442,1443,5,306,0,0,1443,1462,1,0,0,0,1444,1445,5,
        24,0,0,1445,1446,5,305,0,0,1446,1447,3,14,7,0,1447,1448,5,306,0,
        0,1448,1462,1,0,0,0,1449,1454,3,124,62,0,1450,1451,5,304,0,0,1451,
        1453,3,124,62,0,1452,1450,1,0,0,0,1453,1456,1,0,0,0,1454,1452,1,
        0,0,0,1454,1455,1,0,0,0,1455,1462,1,0,0,0,1456,1454,1,0,0,0,1457,
        1459,5,233,0,0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,1460,1,0,
        0,0,1460,1462,5,311,0,0,1461,1393,1,0,0,0,1461,1395,1,0,0,0,1461,
        1396,1,0,0,0,1461,1406,1,0,0,0,1461,1407,1,0,0,0,1461,1433,1,0,0,
        0,1461,1434,1,0,0,0,1461,1440,1,0,0,0,1461,1444,1,0,0,0,1461,1449,
        1,0,0,0,1461,1458,1,0,0,0,1462,1488,1,0,0,0,1463,1464,10,2,0,0,1464,
        1465,5,6,0,0,1465,1466,5,48,0,0,1466,1467,5,49,0,0,1467,1487,3,68,
        34,3,1468,1469,10,6,0,0,1469,1470,5,309,0,0,1470,1471,3,66,33,0,
        1471,1472,5,310,0,0,1472,1487,1,0,0,0,1473,1474,10,5,0,0,1474,1476,
        5,309,0,0,1475,1477,3,66,33,0,1476,1475,1,0,0,0,1476,1477,1,0,0,
        0,1477,1478,1,0,0,0,1478,1480,5,302,0,0,1479,1481,3,66,33,0,1480,
        1479,1,0,0,0,1480,1481,1,0,0,0,1481,1482,1,0,0,0,1482,1487,5,310,
        0,0,1483,1484,10,3,0,0,1484,1485,5,300,0,0,1485,1487,3,192,96,0,
        1486,1463,1,0,0,0,1486,1468,1,0,0,0,1486,1473,1,0,0,0,1486,1483,
        1,0,0,0,1487,1490,1,0,0,0,1488,1486,1,0,0,0,1488,1489,1,0,0,0,1489,
        69,1,0,0,0,1490,1488,1,0,0,0,1491,1608,5,56,0,0,1492,1497,5,57,0,
        0,1493,1494,5,305,0,0,1494,1495,3,144,72,0,1495,1496,5,306,0,0,1496,
        1498,1,0,0,0,1497,1493,1,0,0,0,1497,1498,1,0,0,0,1498,1608,1,0,0,
        0,1499,1504,5,58,0,0,1500,1501,5,305,0,0,1501,1502,3,144,72,0,1502,
        1503,5,306,0,0,1503,1505,1,0,0,0,1504,1500,1,0,0,0,1504,1505,1,0,
        0,0,1505,1608,1,0,0,0,1506,1608,5,59,0,0,1507,1608,7,22,0,0,1508,
        1608,5,62,0,0,1509,1510,5,75,0,0,1510,1511,5,305,0,0,1511,1512,3,
        58,29,0,1512,1513,5,303,0,0,1513,1514,3,58,29,0,1514,1515,5,306,
        0,0,1515,1608,1,0,0,0,1516,1517,5,76,0,0,1517,1518,5,305,0,0,1518,
        1519,3,58,29,0,1519,1520,5,303,0,0,1520,1521,3,58,29,0,1521,1522,
        5,306,0,0,1522,1608,1,0,0,0,1523,1524,5,42,0,0,1524,1525,5,305,0,
        0,1525,1526,3,58,29,0,1526,1527,5,3,0,0,1527,1530,3,58,29,0,1528,
        1529,5,47,0,0,1529,1531,3,58,29,0,1530,1528,1,0,0,0,1530,1531,1,
        0,0,0,1531,1532,1,0,0,0,1532,1533,5,306,0,0,1533,1608,1,0,0,0,1534,
        1535,5,43,0,0,1535,1543,5,305,0,0,1536,1538,7,23,0,0,1537,1536,1,
        0,0,0,1537,1538,1,0,0,0,1538,1540,1,0,0,0,1539,1541,3,58,29,0,1540,
        1539,1,0,0,0,1540,1541,1,0,0,0,1541,1542,1,0,0,0,1542,1544,5,3,0,
        0,1543,1537,1,0,0,0,1543,1544,1,0,0,0,1544,1545,1,0,0,0,1545,1546,
        3,58,29,0,1546,1547,5,306,0,0,1547,1608,1,0,0,0,1548,1549,5,63,0,
        0,1549,1550,5,305,0,0,1550,1551,3,130,65,0,1551,1552,5,3,0,0,1552,
        1553,3,58,29,0,1553,1554,5,306,0,0,1554,1608,1,0,0,0,1555,1556,5,
        183,0,0,1556,1557,5,305,0,0,1557,1558,3,58,29,0,1558,1559,5,5,0,
        0,1559,1560,3,192,96,0,1560,1561,5,306,0,0,1561,1608,1,0,0,0,1562,
        1563,5,184,0,0,1563,1564,5,305,0,0,1564,1565,3,58,29,0,1565,1566,
        5,5,0,0,1566,1567,3,192,96,0,1567,1568,5,306,0,0,1568,1608,1,0,0,
        0,1569,1570,5,64,0,0,1570,1572,3,58,29,0,1571,1573,3,102,51,0,1572,
        1571,1,0,0,0,1573,1574,1,0,0,0,1574,1572,1,0,0,0,1574,1575,1,0,0,
        0,1575,1578,1,0,0,0,1576,1577,5,67,0,0,1577,1579,3,58,29,0,1578,
        1576,1,0,0,0,1578,1579,1,0,0,0,1579,1580,1,0,0,0,1580,1581,5,68,
        0,0,1581,1608,1,0,0,0,1582,1584,5,64,0,0,1583,1585,3,102,51,0,1584,
        1583,1,0,0,0,1585,1586,1,0,0,0,1586,1584,1,0,0,0,1586,1587,1,0,0,
        0,1587,1590,1,0,0,0,1588,1589,5,67,0,0,1589,1591,3,58,29,0,1590,
        1588,1,0,0,0,1590,1591,1,0,0,0,1591,1592,1,0,0,0,1592,1593,5,68,
        0,0,1593,1608,1,0,0,0,1594,1595,5,69,0,0,1595,1596,5,305,0,0,1596,
        1597,3,58,29,0,1597,1598,5,303,0,0,1598,1601,3,58,29,0,1599,1600,
        5,303,0,0,1600,1602,3,58,29,0,1601,1599,1,0,0,0,1601,1602,1,0,0,
        0,1602,1603,1,0,0,0,1603,1604,5,306,0,0,1604,1608,1,0,0,0,1605,1606,
        5,233,0,0,1606,1608,3,72,36,0,1607,1491,1,0,0,0,1607,1492,1,0,0,
        0,1607,1499,1,0,0,0,1607,1506,1,0,0,0,1607,1507,1,0,0,0,1607,1508,
        1,0,0,0,1607,1509,1,0,0,0,1607,1516,1,0,0,0,1607,1523,1,0,0,0,1607,
        1534,1,0,0,0,1607,1548,1,0,0,0,1607,1555,1,0,0,0,1607,1562,1,0,0,
        0,1607,1569,1,0,0,0,1607,1582,1,0,0,0,1607,1594,1,0,0,0,1607,1605,
        1,0,0,0,1608,71,1,0,0,0,1609,1610,5,305,0,0,1610,1611,3,14,7,0,1611,
        1612,5,306,0,0,1612,73,1,0,0,0,1613,1642,3,76,38,0,1614,1616,5,233,
        0,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,1617,1,0,0,0,1617,1626,
        5,309,0,0,1618,1623,3,58,29,0,1619,1620,5,303,0,0,1620,1622,3,58,
        29,0,1621,1619,1,0,0,0,1622,1625,1,0,0,0,1623,1621,1,0,0,0,1623,
        1624,1,0,0,0,1624,1627,1,0,0,0,1625,1623,1,0,0,0,1626,1618,1,0,0,
        0,1626,1627,1,0,0,0,1627,1628,1,0,0,0,1628,1642,5,310,0,0,1629,1638,
        5,307,0,0,1630,1635,3,146,73,0,1631,1632,5,303,0,0,1632,1634,3,146,
        73,0,1633,1631,1,0,0,0,1634,1637,1,0,0,0,1635,1633,1,0,0,0,1635,
        1636,1,0,0,0,1636,1639,1,0,0,0,1637,1635,1,0,0,0,1638,1630,1,0,0,
        0,1638,1639,1,0,0,0,1639,1640,1,0,0,0,1640,1642,5,308,0,0,1641,1613,
        1,0,0,0,1641,1615,1,0,0,0,1641,1629,1,0,0,0,1642,75,1,0,0,0,1643,
        1652,3,86,43,0,1644,1652,3,136,68,0,1645,1652,3,88,44,0,1646,1652,
        3,92,46,0,1647,1652,3,134,67,0,1648,1652,3,140,70,0,1649,1652,3,
        94,47,0,1650,1652,3,84,42,0,1651,1643,1,0,0,0,1651,1644,1,0,0,0,
        1651,1645,1,0,0,0,1651,1646,1,0,0,0,1651,1647,1,0,0,0,1651,1648,
        1,0,0,0,1651,1649,1,0,0,0,1651,1650,1,0,0,0,1652,77,1,0,0,0,1653,
        1675,3,84,42,0,1654,1675,3,144,72,0,1655,1675,3,86,43,0,1656,1657,
        3,74,37,0,1657,1658,5,300,0,0,1658,1659,3,192,96,0,1659,1675,1,0,
        0,0,1660,1661,5,183,0,0,1661,1662,5,305,0,0,1662,1663,3,58,29,0,
        1663,1664,5,5,0,0,1664,1665,3,192,96,0,1665,1666,5,306,0,0,1666,
        1675,1,0,0,0,1667,1668,5,184,0,0,1668,1669,5,305,0,0,1669,1670,3,
        58,29,0,1670,1671,5,5,0,0,1671,1672,3,192,96,0,1672,1673,5,306,0,
        0,1673,1675,1,0,0,0,1674,1653,1,0,0,0,1674,1654,1,0,0,0,1674,1655,
        1,0,0,0,1674,1656,1,0,0,0,1674,1660,1,0,0,0,1674,1667,1,0,0,0,1675,
        79,1,0,0,0,1676,1679,3,84,42,0,1677,1679,3,124,62,0,1678,1676,1,
        0,0,0,1678,1677,1,0,0,0,1679,81,1,0,0,0,1680,1683,3,84,42,0,1681,
        1683,3,92,46,0,1682,1680,1,0,0,0,1682,1681,1,0,0,0,1683,83,1,0,0,
        0,1684,1685,5,313,0,0,1685,1688,3,144,72,0,1686,1688,5,312,0,0,1687,
        1684,1,0,0,0,1687,1686,1,0,0,0,1688,85,1,0,0,0,1689,1690,5,29,0,
        0,1690,87,1,0,0,0,1691,1692,5,318,0,0,1692,89,1,0,0,0,1693,1697,
        5,326,0,0,1694,1696,5,330,0,0,1695,1694,1,0,0,0,1696,1699,1,0,0,
        0,1697,1695,1,0,0,0,1697,1698,1,0,0,0,1698,1700,1,0,0,0,1699,1697,
        1,0,0,0,1700,1701,5,331,0,0,1701,91,1,0,0,0,1702,1705,5,317,0,0,
        1703,1705,3,90,45,0,1704,1702,1,0,0,0,1704,1703,1,0,0,0,1705,93,
        1,0,0,0,1706,1707,5,319,0,0,1707,95,1,0,0,0,1708,1709,6,48,-1,0,
        1709,1710,3,116,58,0,1710,1718,1,0,0,0,1711,1712,10,2,0,0,1712,1713,
        5,309,0,0,1713,1714,3,66,33,0,1714,1715,5,310,0,0,1715,1717,1,0,
        0,0,1716,1711,1,0,0,0,1717,1720,1,0,0,0,1718,1716,1,0,0,0,1718,1719,
        1,0,0,0,1719,97,1,0,0,0,1720,1718,1,0,0,0,1721,1722,7,24,0,0,1722,
        99,1,0,0,0,1723,1724,7,25,0,0,1724,101,1,0,0,0,1725,1726,5,65,0,
        0,1726,1727,3,58,29,0,1727,1728,5,66,0,0,1728,1729,3,58,29,0,1729,
        103,1,0,0,0,1730,1731,3,124,62,0,1731,1732,5,5,0,0,1732,1733,3,108,
        54,0,1733,105,1,0,0,0,1734,1735,5,81,0,0,1735,1736,3,108,54,0,1736,
        107,1,0,0,0,1737,1771,3,124,62,0,1738,1740,5,305,0,0,1739,1741,3,
        124,62,0,1740,1739,1,0,0,0,1740,1741,1,0,0,0,1741,1752,1,0,0,0,1742,
        1743,5,83,0,0,1743,1744,5,15,0,0,1744,1749,3,58,29,0,1745,1746,5,
        303,0,0,1746,1748,3,58,29,0,1747,1745,1,0,0,0,1748,1751,1,0,0,0,
        1749,1747,1,0,0,0,1749,1750,1,0,0,0,1750,1753,1,0,0,0,1751,1749,
        1,0,0,0,1752,1742,1,0,0,0,1752,1753,1,0,0,0,1753,1764,1,0,0,0,1754,
        1755,5,16,0,0,1755,1756,5,15,0,0,1756,1761,3,26,13,0,1757,1758,5,
        303,0,0,1758,1760,3,26,13,0,1759,1757,1,0,0,0,1760,1763,1,0,0,0,
        1761,1759,1,0,0,0,1761,1762,1,0,0,0,1762,1765,1,0,0,0,1763,1761,
        1,0,0,0,1764,1754,1,0,0,0,1764,1765,1,0,0,0,1765,1767,1,0,0,0,1766,
        1768,3,110,55,0,1767,1766,1,0,0,0,1767,1768,1,0,0,0,1768,1769,1,
        0,0,0,1769,1771,5,306,0,0,1770,1737,1,0,0,0,1770,1738,1,0,0,0,1771,
        109,1,0,0,0,1772,1773,5,85,0,0,1773,1789,3,112,56,0,1774,1775,5,
        86,0,0,1775,1789,3,112,56,0,1776,1777,5,85,0,0,1777,1778,5,25,0,
        0,1778,1779,3,112,56,0,1779,1780,5,21,0,0,1780,1781,3,112,56,0,1781,
        1789,1,0,0,0,1782,1783,5,86,0,0,1783,1784,5,25,0,0,1784,1785,3,112,
        56,0,1785,1786,5,21,0,0,1786,1787,3,112,56,0,1787,1789,1,0,0,0,1788,
        1772,1,0,0,0,1788,1774,1,0,0,0,1788,1776,1,0,0,0,1788,1782,1,0,0,
        0,1789,111,1,0,0,0,1790,1791,5,87,0,0,1791,1800,5,88,0,0,1792,1793,
        5,87,0,0,1793,1800,5,89,0,0,1794,1795,5,90,0,0,1795,1800,5,91,0,
        0,1796,1797,3,58,29,0,1797,1798,7,26,0,0,1798,1800,1,0,0,0,1799,
        1790,1,0,0,0,1799,1792,1,0,0,0,1799,1794,1,0,0,0,1799,1796,1,0,0,
        0,1800,113,1,0,0,0,1801,1806,3,116,58,0,1802,1803,5,303,0,0,1803,
        1805,3,116,58,0,1804,1802,1,0,0,0,1805,1808,1,0,0,0,1806,1804,1,
        0,0,0,1806,1807,1,0,0,0,1807,115,1,0,0,0,1808,1806,1,0,0,0,1809,
        1814,3,124,62,0,1810,1811,5,304,0,0,1811,1813,3,124,62,0,1812,1810,
        1,0,0,0,1813,1816,1,0,0,0,1814,1812,1,0,0,0,1814,1815,1,0,0,0,1815,
        117,1,0,0,0,1816,1814,1,0,0,0,1817,1821,3,120,60,0,1818,1820,3,120,
        60,0,1819,1818,1,0,0,0,1820,1823,1,0,0,0,1821,1819,1,0,0,0,1821,
        1822,1,0,0,0,1822,119,1,0,0,0,1823,1821,1,0,0,0,1824,1826,3,124,
        62,0,1825,1827,3,76,38,0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,1827,
        121,1,0,0,0,1828,1833,3,124,62,0,1829,1830,5,303,0,0,1830,1832,3,
        124,62,0,1831,1829,1,0,0,0,1832,1835,1,0,0,0,1833,1831,1,0,0,0,1833,
        1834,1,0,0,0,1834,123,1,0,0,0,1835,1833,1,0,0,0,1836,1839,3,126,
        63,0,1837,1839,3,128,64,0,1838,1836,1,0,0,0,1838,1837,1,0,0,0,1839,
        125,1,0,0,0,1840,1844,5,322,0,0,1841,1844,3,248,124,0,1842,1844,
        5,323,0,0,1843,1840,1,0,0,0,1843,1841,1,0,0,0,1843,1842,1,0,0,0,
        1844,127,1,0,0,0,1845,1848,5,324,0,0,1846,1848,5,325,0,0,1847,1845,
        1,0,0,0,1847,1846,1,0,0,0,1848,129,1,0,0,0,1849,1852,3,124,62,0,
        1850,1852,3,92,46,0,1851,1849,1,0,0,0,1851,1850,1,0,0,0,1852,131,
        1,0,0,0,1853,1857,3,124,62,0,1854,1857,3,116,58,0,1855,1857,3,92,
        46,0,1856,1853,1,0,0,0,1856,1854,1,0,0,0,1856,1855,1,0,0,0,1857,
        133,1,0,0,0,1858,1861,3,142,71,0,1859,1861,3,144,72,0,1860,1858,
        1,0,0,0,1860,1859,1,0,0,0,1861,135,1,0,0,0,1862,1864,5,70,0,0,1863,
        1865,7,18,0,0,1864,1863,1,0,0,0,1864,1865,1,0,0,0,1865,1866,1,0,
        0,0,1866,1867,3,92,46,0,1867,1870,3,138,69,0,1868,1869,5,4,0,0,1869,
        1871,3,138,69,0,1870,1868,1,0,0,0,1870,1871,1,0,0,0,1871,137,1,0,
        0,0,1872,1873,7,27,0,0,1873,139,1,0,0,0,1874,1875,7,28,0,0,1875,
        141,1,0,0,0,1876,1877,5,321,0,0,1877,143,1,0,0,0,1878,1879,5,320,
        0,0,1879,145,1,0,0,0,1880,1881,3,124,62,0,1881,1882,5,282,0,0,1882,
        1883,3,58,29,0,1883,147,1,0,0,0,1884,1890,3,14,7,0,1885,1886,5,305,
        0,0,1886,1887,3,14,7,0,1887,1888,5,306,0,0,1888,1890,1,0,0,0,1889,
        1884,1,0,0,0,1889,1885,1,0,0,0,1890,149,1,0,0,0,1891,1892,5,80,0,
        0,1892,1894,5,213,0,0,1893,1895,3,152,76,0,1894,1893,1,0,0,0,1894,
        1895,1,0,0,0,1895,1896,1,0,0,0,1896,1897,5,214,0,0,1897,1913,5,215,
        0,0,1898,1899,5,80,0,0,1899,1900,5,213,0,0,1900,1901,3,152,76,0,
        1901,1902,5,214,0,0,1902,1903,5,210,0,0,1903,1904,5,216,0,0,1904,
        1909,3,158,79,0,1905,1906,5,303,0,0,1906,1908,3,158,79,0,1907,1905,
        1,0,0,0,1908,1911,1,0,0,0,1909,1907,1,0,0,0,1909,1910,1,0,0,0,1910,
        1913,1,0,0,0,1911,1909,1,0,0,0,1912,1891,1,0,0,0,1912,1898,1,0,0,
        0,1913,151,1,0,0,0,1914,1915,5,305,0,0,1915,1920,3,96,48,0,1916,
        1917,5,303,0,0,1917,1919,3,96,48,0,1918,1916,1,0,0,0,1919,1922,1,
        0,0,0,1920,1918,1,0,0,0,1920,1921,1,0,0,0,1921,1923,1,0,0,0,1922,
        1920,1,0,0,0,1923,1924,5,306,0,0,1924,153,1,0,0,0,1925,1926,5,305,
        0,0,1926,1931,3,58,29,0,1927,1928,5,303,0,0,1928,1930,3,58,29,0,
        1929,1927,1,0,0,0,1930,1933,1,0,0,0,1931,1929,1,0,0,0,1931,1932,
        1,0,0,0,1932,1934,1,0,0,0,1933,1931,1,0,0,0,1934,1935,5,306,0,0,
        1935,155,1,0,0,0,1936,1937,5,305,0,0,1937,1942,3,68,34,0,1938,1939,
        5,303,0,0,1939,1941,3,68,34,0,1940,1938,1,0,0,0,1941,1944,1,0,0,
        0,1942,1940,1,0,0,0,1942,1943,1,0,0,0,1943,1945,1,0,0,0,1944,1942,
        1,0,0,0,1945,1946,5,306,0,0,1946,157,1,0,0,0,1947,1948,3,68,34,0,
        1948,1949,5,282,0,0,1949,1950,3,58,29,0,1950,159,1,0,0,0,1951,1952,
        5,95,0,0,1952,1956,5,97,0,0,1953,1954,5,69,0,0,1954,1955,5,23,0,
        0,1955,1957,5,24,0,0,1956,1953,1,0,0,0,1956,1957,1,0,0,0,1957,1958,
        1,0,0,0,1958,1959,3,50,25,0,1959,1960,5,305,0,0,1960,1965,3,182,
        91,0,1961,1962,5,303,0,0,1962,1964,3,182,91,0,1963,1961,1,0,0,0,
        1964,1967,1,0,0,0,1965,1963,1,0,0,0,1965,1966,1,0,0,0,1966,1968,
        1,0,0,0,1967,1965,1,0,0,0,1968,1969,5,306,0,0,1969,1971,3,174,87,
        0,1970,1972,3,206,103,0,1971,1970,1,0,0,0,1971,1972,1,0,0,0,1972,
        2177,1,0,0,0,1973,1974,5,95,0,0,1974,1978,5,97,0,0,1975,1976,5,69,
        0,0,1976,1977,5,23,0,0,1977,1979,5,24,0,0,1978,1975,1,0,0,0,1978,
        1979,1,0,0,0,1979,1980,1,0,0,0,1980,1981,3,50,25,0,1981,1982,5,5,
        0,0,1982,1983,3,148,74,0,1983,2177,1,0,0,0,1984,1985,5,95,0,0,1985,
        1986,5,275,0,0,1986,1990,5,97,0,0,1987,1988,5,69,0,0,1988,1989,5,
        23,0,0,1989,1991,5,24,0,0,1990,1987,1,0,0,0,1990,1991,1,0,0,0,1991,
        1992,1,0,0,0,1992,1993,3,116,58,0,1993,1994,5,305,0,0,1994,1999,
        3,182,91,0,1995,1996,5,303,0,0,1996,1998,3,182,91,0,1997,1995,1,
        0,0,0,1998,2001,1,0,0,0,1999,1997,1,0,0,0,1999,2000,1,0,0,0,2000,
        2002,1,0,0,0,2001,1999,1,0,0,0,2002,2003,5,306,0,0,2003,2004,5,274,
        0,0,2004,2006,3,124,62,0,2005,2007,3,164,82,0,2006,2005,1,0,0,0,
        2006,2007,1,0,0,0,2007,2177,1,0,0,0,2008,2009,5,95,0,0,2009,2010,
        5,96,0,0,2010,2011,5,97,0,0,2011,2013,3,50,25,0,2012,2014,3,180,
        90,0,2013,2012,1,0,0,0,2013,2014,1,0,0,0,2014,2016,1,0,0,0,2015,
        2017,3,206,103,0,2016,2015,1,0,0,0,2016,2017,1,0,0,0,2017,2177,1,
        0,0,0,2018,2019,5,95,0,0,2019,2020,5,104,0,0,2020,2021,3,124,62,
        0,2021,2022,5,178,0,0,2022,2024,3,124,62,0,2023,2025,3,206,103,0,
        2024,2023,1,0,0,0,2024,2025,1,0,0,0,2025,2177,1,0,0,0,2026,2027,
        5,95,0,0,2027,2028,5,105,0,0,2028,2032,3,116,58,0,2029,2033,5,7,
        0,0,2030,2031,5,97,0,0,2031,2033,3,230,115,0,2032,2029,1,0,0,0,2032,
        2030,1,0,0,0,2033,2035,1,0,0,0,2034,2036,3,206,103,0,2035,2034,1,
        0,0,0,2035,2036,1,0,0,0,2036,2177,1,0,0,0,2037,2038,5,95,0,0,2038,
        2039,5,234,0,0,2039,2042,3,124,62,0,2040,2041,5,235,0,0,2041,2043,
        3,124,62,0,2042,2040,1,0,0,0,2042,2043,1,0,0,0,2043,2045,1,0,0,0,
        2044,2046,5,92,0,0,2045,2044,1,0,0,0,2045,2046,1,0,0,0,2046,2047,
        1,0,0,0,2047,2048,5,305,0,0,2048,2053,3,220,110,0,2049,2050,5,303,
        0,0,2050,2052,3,220,110,0,2051,2049,1,0,0,0,2052,2055,1,0,0,0,2053,
        2051,1,0,0,0,2053,2054,1,0,0,0,2054,2056,1,0,0,0,2055,2053,1,0,0,
        0,2056,2057,5,306,0,0,2057,2177,1,0,0,0,2058,2061,5,95,0,0,2059,
        2060,5,20,0,0,2060,2062,5,161,0,0,2061,2059,1,0,0,0,2061,2062,1,
        0,0,0,2062,2063,1,0,0,0,2063,2064,5,162,0,0,2064,2065,3,116,58,0,
        2065,2074,5,305,0,0,2066,2071,3,168,84,0,2067,2068,5,303,0,0,2068,
        2070,3,168,84,0,2069,2067,1,0,0,0,2070,2073,1,0,0,0,2071,2069,1,
        0,0,0,2071,2072,1,0,0,0,2072,2075,1,0,0,0,2073,2071,1,0,0,0,2074,
        2066,1,0,0,0,2074,2075,1,0,0,0,2075,2076,1,0,0,0,2076,2077,5,306,
        0,0,2077,2078,5,159,0,0,2078,2079,3,192,96,0,2079,2080,5,163,0,0,
        2080,2081,3,80,40,0,2081,2082,5,5,0,0,2082,2083,3,82,41,0,2083,2177,
        1,0,0,0,2084,2085,5,95,0,0,2085,2086,5,246,0,0,2086,2090,5,279,0,
        0,2087,2088,5,69,0,0,2088,2089,5,23,0,0,2089,2091,5,24,0,0,2090,
        2087,1,0,0,0,2090,2091,1,0,0,0,2091,2092,1,0,0,0,2092,2093,5,47,
        0,0,2093,2094,3,162,81,0,2094,2095,5,274,0,0,2095,2097,3,124,62,
        0,2096,2098,3,164,82,0,2097,2096,1,0,0,0,2097,2098,1,0,0,0,2098,
        2177,1,0,0,0,2099,2100,5,95,0,0,2100,2101,7,7,0,0,2101,2115,3,124,
        62,0,2102,2114,3,206,103,0,2103,2105,5,92,0,0,2104,2103,1,0,0,0,
        2104,2105,1,0,0,0,2105,2107,1,0,0,0,2106,2108,5,305,0,0,2107,2106,
        1,0,0,0,2107,2108,1,0,0,0,2108,2109,1,0,0,0,2109,2111,3,118,59,0,
        2110,2112,5,306,0,0,2111,2110,1,0,0,0,2111,2112,1,0,0,0,2112,2114,
        1,0,0,0,2113,2102,1,0,0,0,2113,2104,1,0,0,0,2114,2116,1,0,0,0,2115,
        2113,1,0,0,0,2115,2116,1,0,0,0,2116,2177,1,0,0,0,2117,2120,5,95,
        0,0,2118,2119,5,20,0,0,2119,2121,5,161,0,0,2120,2118,1,0,0,0,2120,
        2121,1,0,0,0,2121,2122,1,0,0,0,2122,2123,5,193,0,0,2123,2124,3,116,
        58,0,2124,2125,5,5,0,0,2125,2126,3,12,6,0,2126,2177,1,0,0,0,2127,
        2128,5,95,0,0,2128,2129,5,256,0,0,2129,2149,3,124,62,0,2130,2131,
        5,47,0,0,2131,2132,5,7,0,0,2132,2150,5,186,0,0,2133,2134,5,47,0,
        0,2134,2135,5,97,0,0,2135,2137,3,116,58,0,2136,2138,5,295,0,0,2137,
        2136,1,0,0,0,2137,2138,1,0,0,0,2138,2146,1,0,0,0,2139,2140,5,303,
        0,0,2140,2142,3,116,58,0,2141,2143,5,295,0,0,2142,2141,1,0,0,0,2142,
        2143,1,0,0,0,2143,2145,1,0,0,0,2144,2139,1,0,0,0,2145,2148,1,0,0,
        0,2146,2144,1,0,0,0,2146,2147,1,0,0,0,2147,2150,1,0,0,0,2148,2146,
        1,0,0,0,2149,2130,1,0,0,0,2149,2133,1,0,0,0,2149,2150,1,0,0,0,2150,
        2177,1,0,0,0,2151,2152,5,95,0,0,2152,2153,5,257,0,0,2153,2154,3,
        124,62,0,2154,2155,5,258,0,0,2155,2156,3,58,29,0,2156,2157,5,256,
        0,0,2157,2159,3,122,61,0,2158,2160,3,206,103,0,2159,2158,1,0,0,0,
        2159,2160,1,0,0,0,2160,2177,1,0,0,0,2161,2162,5,95,0,0,2162,2166,
        5,274,0,0,2163,2164,5,69,0,0,2164,2165,5,23,0,0,2165,2167,5,24,0,
        0,2166,2163,1,0,0,0,2166,2167,1,0,0,0,2167,2168,1,0,0,0,2168,2169,
        3,124,62,0,2169,2170,5,275,0,0,2170,2171,5,276,0,0,2171,2172,5,277,
        0,0,2172,2174,3,124,62,0,2173,2175,3,164,82,0,2174,2173,1,0,0,0,
        2174,2175,1,0,0,0,2175,2177,1,0,0,0,2176,1951,1,0,0,0,2176,1973,
        1,0,0,0,2176,1984,1,0,0,0,2176,2008,1,0,0,0,2176,2018,1,0,0,0,2176,
        2026,1,0,0,0,2176,2037,1,0,0,0,2176,2058,1,0,0,0,2176,2084,1,0,0,
        0,2176,2099,1,0,0,0,2176,2117,1,0,0,0,2176,2127,1,0,0,0,2176,2151,
        1,0,0,0,2176,2161,1,0,0,0,2177,161,1,0,0,0,2178,2183,3,124,62,0,
        2179,2183,5,246,0,0,2180,2183,5,61,0,0,2181,2183,5,60,0,0,2182,2178,
        1,0,0,0,2182,2179,1,0,0,0,2182,2180,1,0,0,0,2182,2181,1,0,0,0,2183,
        163,1,0,0,0,2184,2185,5,278,0,0,2185,2186,5,305,0,0,2186,2191,3,
        166,83,0,2187,2188,5,303,0,0,2188,2190,3,166,83,0,2189,2187,1,0,
        0,0,2190,2193,1,0,0,0,2191,2189,1,0,0,0,2191,2192,1,0,0,0,2192,2194,
        1,0,0,0,2193,2191,1,0,0,0,2194,2195,5,306,0,0,2195,165,1,0,0,0,2196,
        2197,3,124,62,0,2197,2198,3,74,37,0,2198,167,1,0,0,0,2199,2201,3,
        124,62,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,2202,1,0,0,0,2202,
        2203,3,192,96,0,2203,169,1,0,0,0,2204,2205,5,108,0,0,2205,2208,3,
        116,58,0,2206,2208,3,48,24,0,2207,2204,1,0,0,0,2207,2206,1,0,0,0,
        2208,171,1,0,0,0,2209,2210,7,29,0,0,2210,173,1,0,0,0,2211,2213,3,
        176,88,0,2212,2211,1,0,0,0,2212,2213,1,0,0,0,2213,2215,1,0,0,0,2214,
        2216,3,178,89,0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,2224,1,
        0,0,0,2217,2219,3,178,89,0,2218,2217,1,0,0,0,2218,2219,1,0,0,0,2219,
        2221,1,0,0,0,2220,2222,3,176,88,0,2221,2220,1,0,0,0,2221,2222,1,
        0,0,0,2222,2224,1,0,0,0,2223,2212,1,0,0,0,2223,2218,1,0,0,0,2224,
        175,1,0,0,0,2225,2226,5,239,0,0,2226,2227,5,15,0,0,2227,2228,3,156,
        78,0,2228,177,1,0,0,0,2229,2235,5,220,0,0,2230,2231,5,15,0,0,2231,
        2232,5,305,0,0,2232,2233,3,68,34,0,2233,2234,5,306,0,0,2234,2236,
        1,0,0,0,2235,2230,1,0,0,0,2235,2236,1,0,0,0,2236,2241,1,0,0,0,2237,
        2238,5,207,0,0,2238,2239,3,78,39,0,2239,2240,5,221,0,0,2240,2242,
        1,0,0,0,2241,2237,1,0,0,0,2241,2242,1,0,0,0,2242,179,1,0,0,0,2243,
        2244,5,220,0,0,2244,2245,5,207,0,0,2245,2246,3,78,39,0,2246,2247,
        5,221,0,0,2247,181,1,0,0,0,2248,2262,3,184,92,0,2249,2250,3,202,
        101,0,2250,2251,3,156,78,0,2251,2262,1,0,0,0,2252,2253,5,227,0,0,
        2253,2254,3,124,62,0,2254,2255,5,79,0,0,2255,2256,3,124,62,0,2256,
        2258,3,156,78,0,2257,2259,3,206,103,0,2258,2257,1,0,0,0,2258,2259,
        1,0,0,0,2259,2262,1,0,0,0,2260,2262,3,204,102,0,2261,2248,1,0,0,
        0,2261,2249,1,0,0,0,2261,2252,1,0,0,0,2261,2260,1,0,0,0,2262,183,
        1,0,0,0,2263,2265,3,124,62,0,2264,2266,3,192,96,0,2265,2264,1,0,
        0,0,2265,2266,1,0,0,0,2266,2270,1,0,0,0,2267,2269,3,200,100,0,2268,
        2267,1,0,0,0,2269,2272,1,0,0,0,2270,2268,1,0,0,0,2270,2271,1,0,0,
        0,2271,185,1,0,0,0,2272,2270,1,0,0,0,2273,2275,5,109,0,0,2274,2276,
        5,110,0,0,2275,2274,1,0,0,0,2275,2276,1,0,0,0,2276,2277,1,0,0,0,
        2277,2279,3,96,48,0,2278,2280,3,192,96,0,2279,2278,1,0,0,0,2279,
        2280,1,0,0,0,2280,2284,1,0,0,0,2281,2283,3,200,100,0,2282,2281,1,
        0,0,0,2283,2286,1,0,0,0,2284,2282,1,0,0,0,2284,2285,1,0,0,0,2285,
        187,1,0,0,0,2286,2284,1,0,0,0,2287,2289,5,197,0,0,2288,2290,5,110,
        0,0,2289,2288,1,0,0,0,2289,2290,1,0,0,0,2290,2293,1,0,0,0,2291,2292,
        5,69,0,0,2292,2294,5,24,0,0,2293,2291,1,0,0,0,2293,2294,1,0,0,0,
        2294,2295,1,0,0,0,2295,2296,3,96,48,0,2296,189,1,0,0,0,2297,2298,
        5,115,0,0,2298,2299,5,116,0,0,2299,2300,3,78,39,0,2300,2301,5,3,
        0,0,2301,2302,3,82,41,0,2302,2303,5,4,0,0,2303,2304,3,82,41,0,2304,
        2330,1,0,0,0,2305,2306,5,117,0,0,2306,2307,5,118,0,0,2307,2308,5,
        116,0,0,2308,2309,3,78,39,0,2309,2310,5,80,0,0,2310,2311,3,82,41,
        0,2311,2330,1,0,0,0,2312,2313,5,84,0,0,2313,2314,5,118,0,0,2314,
        2315,5,116,0,0,2315,2316,3,78,39,0,2316,2317,5,80,0,0,2317,2319,
        3,82,41,0,2318,2320,3,206,103,0,2319,2318,1,0,0,0,2319,2320,1,0,
        0,0,2320,2330,1,0,0,0,2321,2322,5,119,0,0,2322,2323,5,116,0,0,2323,
        2324,3,78,39,0,2324,2325,5,80,0,0,2325,2327,3,82,41,0,2326,2328,
        3,206,103,0,2327,2326,1,0,0,0,2327,2328,1,0,0,0,2328,2330,1,0,0,
        0,2329,2297,1,0,0,0,2329,2305,1,0,0,0,2329,2312,1,0,0,0,2329,2321,
        1,0,0,0,2330,191,1,0,0,0,2331,2332,6,96,-1,0,2332,2344,3,194,97,
        0,2333,2334,5,305,0,0,2334,2339,3,144,72,0,2335,2336,5,303,0,0,2336,
        2338,3,144,72,0,2337,2335,1,0,0,0,2338,2341,1,0,0,0,2339,2337,1,
        0,0,0,2339,2340,1,0,0,0,2340,2342,1,0,0,0,2341,2339,1,0,0,0,2342,
        2343,5,306,0,0,2343,2345,1,0,0,0,2344,2333,1,0,0,0,2344,2345,1,0,
        0,0,2345,2353,1,0,0,0,2346,2353,3,198,99,0,2347,2348,5,233,0,0,2348,
        2349,5,305,0,0,2349,2350,3,192,96,0,2350,2351,5,306,0,0,2351,2353,
        1,0,0,0,2352,2331,1,0,0,0,2352,2346,1,0,0,0,2352,2347,1,0,0,0,2353,
        2358,1,0,0,0,2354,2355,10,1,0,0,2355,2357,5,311,0,0,2356,2354,1,
        0,0,0,2357,2360,1,0,0,0,2358,2356,1,0,0,0,2358,2359,1,0,0,0,2359,
        193,1,0,0,0,2360,2358,1,0,0,0,2361,2364,3,196,98,0,2362,2364,3,124,
        62,0,2363,2361,1,0,0,0,2363,2362,1,0,0,0,2364,195,1,0,0,0,2365,2366,
        5,129,0,0,2366,2383,5,130,0,0,2367,2368,5,131,0,0,2368,2369,5,93,
        0,0,2369,2370,5,48,0,0,2370,2383,5,49,0,0,2371,2372,5,131,0,0,2372,
        2373,5,92,0,0,2373,2374,5,48,0,0,2374,2383,5,49,0,0,2375,2376,5,
        48,0,0,2376,2377,5,92,0,0,2377,2378,5,48,0,0,2378,2383,5,49,0,0,
        2379,2380,5,133,0,0,2380,2383,5,135,0,0,2381,2383,5,134,0,0,2382,
        2365,1,0,0,0,2382,2367,1,0,0,0,2382,2371,1,0,0,0,2382,2375,1,0,0,
        0,2382,2379,1,0,0,0,2382,2381,1,0,0,0,2383,197,1,0,0,0,2384,2388,
        5,136,0,0,2385,2386,5,305,0,0,2386,2387,7,30,0,0,2387,2389,5,306,
        0,0,2388,2385,1,0,0,0,2388,2389,1,0,0,0,2389,2402,1,0,0,0,2390,2391,
        5,5,0,0,2391,2392,5,305,0,0,2392,2397,3,184,92,0,2393,2394,5,303,
        0,0,2394,2396,3,184,92,0,2395,2393,1,0,0,0,2396,2399,1,0,0,0,2397,
        2395,1,0,0,0,2397,2398,1,0,0,0,2398,2400,1,0,0,0,2399,2397,1,0,0,
        0,2400,2401,5,306,0,0,2401,2403,1,0,0,0,2402,2390,1,0,0,0,2402,2403,
        1,0,0,0,2403,199,1,0,0,0,2404,2436,3,202,101,0,2405,2406,5,23,0,
        0,2406,2436,5,29,0,0,2407,2436,5,29,0,0,2408,2409,5,227,0,0,2409,
        2410,5,79,0,0,2410,2412,3,124,62,0,2411,2413,3,206,103,0,2412,2411,
        1,0,0,0,2412,2413,1,0,0,0,2413,2436,1,0,0,0,2414,2415,5,227,0,0,
        2415,2436,5,223,0,0,2416,2417,5,228,0,0,2417,2436,3,206,103,0,2418,
        2419,5,173,0,0,2419,2421,3,124,62,0,2420,2418,1,0,0,0,2420,2421,
        1,0,0,0,2421,2422,1,0,0,0,2422,2423,5,218,0,0,2423,2436,3,58,29,
        0,2424,2425,5,173,0,0,2425,2427,3,124,62,0,2426,2424,1,0,0,0,2426,
        2427,1,0,0,0,2427,2430,1,0,0,0,2428,2429,5,244,0,0,2429,2431,5,245,
        0,0,2430,2428,1,0,0,0,2430,2431,1,0,0,0,2431,2432,1,0,0,0,2432,2433,
        5,5,0,0,2433,2436,3,58,29,0,2434,2436,3,204,102,0,2435,2404,1,0,
        0,0,2435,2405,1,0,0,0,2435,2407,1,0,0,0,2435,2408,1,0,0,0,2435,2414,
        1,0,0,0,2435,2416,1,0,0,0,2435,2420,1,0,0,0,2435,2426,1,0,0,0,2435,
        2434,1,0,0,0,2436,201,1,0,0,0,2437,2438,5,173,0,0,2438,2440,3,124,
        62,0,2439,2437,1,0,0,0,2439,2440,1,0,0,0,2440,2441,1,0,0,0,2441,
        2442,5,222,0,0,2442,203,1,0,0,0,2443,2444,5,173,0,0,2444,2446,3,
        124,62,0,2445,2443,1,0,0,0,2445,2446,1,0,0,0,2446,2447,1,0,0,0,2447,
        2448,5,174,0,0,2448,2449,5,305,0,0,2449,2450,3,60,30,0,2450,2451,
        5,306,0,0,2451,205,1,0,0,0,2452,2453,5,92,0,0,2453,2454,5,305,0,
        0,2454,2455,3,208,104,0,2455,2456,5,306,0,0,2456,207,1,0,0,0,2457,
        2462,3,210,105,0,2458,2459,5,303,0,0,2459,2461,3,210,105,0,2460,
        2458,1,0,0,0,2461,2464,1,0,0,0,2462,2460,1,0,0,0,2462,2463,1,0,0,
        0,2463,209,1,0,0,0,2464,2462,1,0,0,0,2465,2466,3,124,62,0,2466,2467,
        5,282,0,0,2467,2468,3,58,29,0,2468,211,1,0,0,0,2469,2470,5,305,0,
        0,2470,2475,3,214,107,0,2471,2472,5,303,0,0,2472,2474,3,214,107,
        0,2473,2471,1,0,0,0,2474,2477,1,0,0,0,2475,2473,1,0,0,0,2475,2476,
        1,0,0,0,2476,2478,1,0,0,0,2477,2475,1,0,0,0,2478,2479,5,306,0,0,
        2479,213,1,0,0,0,2480,2482,7,31,0,0,2481,2483,3,140,70,0,2482,2481,
        1,0,0,0,2482,2483,1,0,0,0,2483,215,1,0,0,0,2484,2497,3,218,109,0,
        2485,2486,5,305,0,0,2486,2491,3,218,109,0,2487,2488,5,303,0,0,2488,
        2490,3,218,109,0,2489,2487,1,0,0,0,2490,2493,1,0,0,0,2491,2489,1,
        0,0,0,2491,2492,1,0,0,0,2492,2494,1,0,0,0,2493,2491,1,0,0,0,2494,
        2495,5,306,0,0,2495,2497,1,0,0,0,2496,2484,1,0,0,0,2496,2485,1,0,
        0,0,2497,217,1,0,0,0,2498,2500,3,96,48,0,2499,2501,3,76,38,0,2500,
        2499,1,0,0,0,2500,2501,1,0,0,0,2501,219,1,0,0,0,2502,2507,3,222,
        111,0,2503,2507,3,224,112,0,2504,2507,3,226,113,0,2505,2507,3,210,
        105,0,2506,2502,1,0,0,0,2506,2503,1,0,0,0,2506,2504,1,0,0,0,2506,
        2505,1,0,0,0,2507,221,1,0,0,0,2508,2509,5,236,0,0,2509,2510,3,228,
        114,0,2510,223,1,0,0,0,2511,2512,5,237,0,0,2512,2513,5,305,0,0,2513,
        2518,3,228,114,0,2514,2515,5,303,0,0,2515,2517,3,228,114,0,2516,
        2514,1,0,0,0,2517,2520,1,0,0,0,2518,2516,1,0,0,0,2518,2519,1,0,0,
        0,2519,2521,1,0,0,0,2520,2518,1,0,0,0,2521,2522,5,306,0,0,2522,225,
        1,0,0,0,2523,2524,5,238,0,0,2524,2525,5,305,0,0,2525,2530,3,228,
        114,0,2526,2527,5,303,0,0,2527,2529,3,228,114,0,2528,2526,1,0,0,
        0,2529,2532,1,0,0,0,2530,2528,1,0,0,0,2530,2531,1,0,0,0,2531,2533,
        1,0,0,0,2532,2530,1,0,0,0,2533,2534,5,306,0,0,2534,227,1,0,0,0,2535,
        2537,3,124,62,0,2536,2538,3,206,103,0,2537,2536,1,0,0,0,2537,2538,
        1,0,0,0,2538,229,1,0,0,0,2539,2544,3,48,24,0,2540,2541,5,303,0,0,
        2541,2543,3,48,24,0,2542,2540,1,0,0,0,2543,2546,1,0,0,0,2544,2542,
        1,0,0,0,2544,2545,1,0,0,0,2545,231,1,0,0,0,2546,2544,1,0,0,0,2547,
        2548,3,68,34,0,2548,2549,7,3,0,0,2549,2550,3,58,29,0,2550,233,1,
        0,0,0,2551,2557,3,92,46,0,2552,2557,3,140,70,0,2553,2557,3,134,67,
        0,2554,2557,3,124,62,0,2555,2557,3,236,118,0,2556,2551,1,0,0,0,2556,
        2552,1,0,0,0,2556,2553,1,0,0,0,2556,2554,1,0,0,0,2556,2555,1,0,0,
        0,2557,235,1,0,0,0,2558,2559,5,80,0,0,2559,237,1,0,0,0,2560,2561,
        7,32,0,0,2561,239,1,0,0,0,2562,2563,5,150,0,0,2563,2564,5,151,0,
        0,2564,2576,3,242,121,0,2565,2566,5,156,0,0,2566,2570,5,157,0,0,
        2567,2568,5,156,0,0,2568,2570,5,108,0,0,2569,2565,1,0,0,0,2569,2567,
        1,0,0,0,2570,2576,1,0,0,0,2571,2573,5,23,0,0,2572,2571,1,0,0,0,2572,
        2573,1,0,0,0,2573,2574,1,0,0,0,2574,2576,5,158,0,0,2575,2562,1,0,
        0,0,2575,2569,1,0,0,0,2575,2572,1,0,0,0,2576,241,1,0,0,0,2577,2585,
        5,152,0,0,2578,2579,5,153,0,0,2579,2585,5,156,0,0,2580,2581,5,156,
        0,0,2581,2585,5,154,0,0,2582,2583,5,156,0,0,2583,2585,5,155,0,0,
        2584,2577,1,0,0,0,2584,2578,1,0,0,0,2584,2580,1,0,0,0,2584,2582,
        1,0,0,0,2585,243,1,0,0,0,2586,2610,5,38,0,0,2587,2610,5,273,0,0,
        2588,2610,5,36,0,0,2589,2610,5,37,0,0,2590,2591,5,269,0,0,2591,2610,
        3,144,72,0,2592,2594,5,272,0,0,2593,2595,5,294,0,0,2594,2593,1,0,
        0,0,2594,2595,1,0,0,0,2595,2596,1,0,0,0,2596,2610,3,144,72,0,2597,
        2610,3,144,72,0,2598,2610,5,7,0,0,2599,2610,5,270,0,0,2600,2601,
        5,270,0,0,2601,2610,3,144,72,0,2602,2603,5,270,0,0,2603,2610,5,7,
        0,0,2604,2610,5,271,0,0,2605,2606,5,271,0,0,2606,2610,3,144,72,0,
        2607,2608,5,271,0,0,2608,2610,5,7,0,0,2609,2586,1,0,0,0,2609,2587,
        1,0,0,0,2609,2588,1,0,0,0,2609,2589,1,0,0,0,2609,2590,1,0,0,0,2609,
        2592,1,0,0,0,2609,2597,1,0,0,0,2609,2598,1,0,0,0,2609,2599,1,0,0,
        0,2609,2600,1,0,0,0,2609,2602,1,0,0,0,2609,2604,1,0,0,0,2609,2605,
        1,0,0,0,2609,2607,1,0,0,0,2610,245,1,0,0,0,2611,2619,5,263,0,0,2612,
        2619,5,265,0,0,2613,2619,5,264,0,0,2614,2616,5,266,0,0,2615,2614,
        1,0,0,0,2615,2616,1,0,0,0,2616,2617,1,0,0,0,2617,2619,5,267,0,0,
        2618,2611,1,0,0,0,2618,2612,1,0,0,0,2618,2613,1,0,0,0,2618,2615,
        1,0,0,0,2619,2622,1,0,0,0,2620,2618,1,0,0,0,2620,2621,1,0,0,0,2621,
        247,1,0,0,0,2622,2620,1,0,0,0,2623,2624,7,33,0,0,2624,249,1,0,0,
        0,339,255,259,265,275,279,284,287,293,298,301,305,309,317,320,327,
        340,344,347,353,360,370,375,382,390,395,400,410,417,425,430,436,
        443,453,456,461,468,477,482,493,498,502,505,515,518,528,533,538,
        542,547,550,554,558,565,567,573,581,583,589,597,599,605,612,616,
        627,634,637,643,645,652,659,675,684,687,695,702,712,719,726,730,
        737,741,748,755,765,776,801,806,808,826,831,833,837,845,855,861,
        869,889,915,920,924,932,943,946,958,961,964,967,970,973,975,980,
        988,993,1001,1006,1011,1018,1022,1026,1033,1042,1045,1048,1057,1060,
        1064,1072,1075,1083,1086,1090,1093,1100,1111,1136,1140,1144,1148,
        1152,1156,1158,1169,1174,1178,1182,1184,1195,1205,1210,1216,1222,
        1227,1235,1246,1251,1273,1275,1277,1285,1287,1292,1302,1310,1319,
        1325,1330,1336,1339,1348,1352,1357,1362,1371,1388,1390,1401,1404,
        1410,1417,1420,1424,1428,1431,1454,1458,1461,1476,1480,1486,1488,
        1497,1504,1530,1537,1540,1543,1574,1578,1586,1590,1601,1607,1615,
        1623,1626,1635,1638,1641,1651,1674,1678,1682,1687,1697,1704,1718,
        1740,1749,1752,1761,1764,1767,1770,1788,1799,1806,1814,1821,1826,
        1833,1838,1843,1847,1851,1856,1860,1864,1870,1889,1894,1909,1912,
        1920,1931,1942,1956,1965,1971,1978,1990,1999,2006,2013,2016,2024,
        2032,2035,2042,2045,2053,2061,2071,2074,2090,2097,2104,2107,2111,
        2113,2115,2120,2137,2142,2146,2149,2159,2166,2174,2176,2182,2191,
        2200,2207,2212,2215,2218,2221,2223,2235,2241,2258,2261,2265,2270,
        2275,2279,2284,2289,2293,2319,2327,2329,2339,2344,2352,2358,2363,
        2382,2388,2397,2402,2412,2420,2426,2430,2435,2439,2445,2462,2475,
        2482,2491,2496,2500,2506,2518,2530,2537,2544,2556,2569,2572,2575,
        2584,2594,2609,2615,2618,2620
    ]

class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBaseParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'AUTHORIZATION'", "'SELECT'", "'FROM'", 
                     "'TO'", "'AS'", "'AT'", "'ALL'", "'ANY'", "'SOME'", 
                     "'DEALLOCATE'", "'DIRECTORY'", "'DISTINCT'", "'WHERE'", 
                     "'GROUP'", "'BY'", "'ORDER'", "'HAVING'", "'LIMIT'", 
                     "'OFFSET'", "'OR'", "'AND'", "'IN'", "'NOT'", "'EXISTS'", 
                     "'BETWEEN'", "'LIKE'", "'ILIKE'", "'IS'", "'NULL'", 
                     "'TRUE'", "'FALSE'", "'IGNORE'", "'RESPECT'", "'NULLS'", 
                     "'FETCH'", "'FIRST'", "'LAST'", "'NEXT'", "'ESCAPE'", 
                     "'ASC'", "'DESC'", "'SUBSTRING'", "'TRIM'", "'LEADING'", 
                     "'TRAILING'", "'BOTH'", "'FOR'", "'TIME'", "'ZONE'", 
                     "'YEAR'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
                     "'SECOND'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'CURRENT_SCHEMA'", "'CURRENT_USER'", "'CURRENT_ROLE'", 
                     "'SESSION_USER'", "'EXTRACT'", "'CASE'", "'WHEN'", 
                     "'THEN'", "'ELSE'", "'END'", "'IF'", "'INTERVAL'", 
                     "'JOIN'", "'CROSS'", "'OUTER'", "'INNER'", "'LEFT'", 
                     "'RIGHT'", "'FULL'", "'NATURAL'", "'USING'", "'ON'", 
                     "'OVER'", "'WINDOW'", "'PARTITION'", "'PROMOTE'", "'RANGE'", 
                     "'ROWS'", "'UNBOUNDED'", "'PRECEDING'", "'FOLLOWING'", 
                     "'CURRENT'", "'ROW'", "'WITH'", "'WITHOUT'", "'RECURSIVE'", 
                     "'CREATE'", "'BLOB'", "'TABLE'", "'SWAP'", "'GC'", 
                     "'DANGLING'", "'ARTIFACTS'", "'DECOMMISSION'", "'CLUSTER'", 
                     "'REPOSITORY'", "'SNAPSHOT'", "'ALTER'", "'KILL'", 
                     "'ONLY'", "'ADD'", "'COLUMN'", "'OPEN'", "'CLOSE'", 
                     "'RENAME'", "'REROUTE'", "'MOVE'", "'SHARD'", "'ALLOCATE'", 
                     "'REPLICA'", "'CANCEL'", "'RETRY'", "'FAILED'", "'BOOLEAN'", 
                     "'BYTE'", "'SHORT'", "'INTEGER'", "'INT'", "'LONG'", 
                     "'FLOAT'", "'DOUBLE'", "'PRECISION'", "'TIMESTAMP'", 
                     "'IP'", "'CHARACTER'", "'\"CHAR\"'", "'VARYING'", "'OBJECT'", 
                     "'STRING'", "'GEO_POINT'", "'GEO_SHAPE'", "'GLOBAL'", 
                     "'SESSION'", "'LOCAL'", "'BEGIN'", "'START'", "'COMMIT'", 
                     "'WORK'", "'TRANSACTION'", "'TRANSACTION_ISOLATION'", 
                     "'CHARACTERISTICS'", "'ISOLATION'", "'LEVEL'", "'SERIALIZABLE'", 
                     "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'READ'", 
                     "'WRITE'", "'DEFERRABLE'", "'RETURNS'", "'CALLED'", 
                     "'REPLACE'", "'FUNCTION'", "'LANGUAGE'", "'INPUT'", 
                     "'ANALYZE'", "'COSTS'", "'VERBOSE'", "'DISCARD'", "'PLANS'", 
                     "'SEQUENCES'", "'TEMPORARY'", "'TEMP'", "'CONSTRAINT'", 
                     "'CHECK'", "'DESCRIBE'", "'EXPLAIN'", "'FORMAT'", "'TYPE'", 
                     "'TEXT'", "'GRAPHVIZ'", "'LOGICAL'", "'DISTRIBUTED'", 
                     "'CAST'", "'TRY_CAST'", "'SHOW'", "'TABLES'", "'SCHEMAS'", 
                     "'CATALOGS'", "'COLUMNS'", "'PARTITIONS'", "'FUNCTIONS'", 
                     "'MATERIALIZED'", "'VIEW'", "'OPTIMIZE'", "'REFRESH'", 
                     "'RESTORE'", "'DROP'", "'ALIAS'", "'UNION'", "'EXCEPT'", 
                     "'INTERSECT'", "'SYSTEM'", "'BERNOULLI'", "'TABLESAMPLE'", 
                     "'STRATIFY'", "'INSERT'", "'INTO'", "'VALUES'", "'DELETE'", 
                     "'UPDATE'", "'KEY'", "'DUPLICATE'", "'CONFLICT'", "'DO'", 
                     "'NOTHING'", "'SET'", "'RESET'", "'DEFAULT'", "'COPY'", 
                     "'CLUSTERED'", "'SHARDS'", "'PRIMARY KEY'", "'OFF'", 
                     "'FULLTEXT'", "'FILTER'", "'PLAIN'", "'INDEX'", "'STORAGE'", 
                     "'RETURNING'", "'DYNAMIC'", "'STRICT'", "'IGNORED'", 
                     "'ARRAY'", "'ANALYZER'", "'EXTENDS'", "'TOKENIZER'", 
                     "'TOKEN_FILTERS'", "'CHAR_FILTERS'", "'PARTITIONED'", 
                     "'PREPARE'", "'TRANSIENT'", "'PERSISTENT'", "'MATCH'", 
                     "'GENERATED'", "'ALWAYS'", "'USER'", "'ROLE'", "'GRANT'", 
                     "'DENY'", "'REVOKE'", "'PRIVILEGES'", "'SCHEMA'", "'RETURN'", 
                     "'SUMMARY'", "'METADATA'", "'PUBLICATION'", "'SUBSCRIPTION'", 
                     "'CONNECTION'", "'ENABLE'", "'DISABLE'", "'DECLARE'", 
                     "'CURSOR'", "'ASENSITIVE'", "'INSENSITIVE'", "'BINARY'", 
                     "'NO'", "'SCROLL'", "'HOLD'", "'ABSOLUTE'", "'FORWARD'", 
                     "'BACKWARD'", "'RELATIVE'", "'PRIOR'", "'SERVER'", 
                     "'FOREIGN'", "'DATA'", "'WRAPPER'", "'OPTIONS'", "'MAPPING'", 
                     "'CASCADE'", "'RESTRICT'", "'='", "<INVALID>", "'<'", 
                     "'<='", "'>'", "'>='", "'<<'", "'~'", "'!~'", "'~*'", 
                     "'!~*'", "'+'", "'-'", "'*'", "'^'", "'/'", "'%'", 
                     "'||'", "'::'", "';'", "':'", "','", "'.'", "'('", 
                     "')'", "'{'", "'}'", "'['", "']'", "'[]'", "'?'", "'$'", 
                     "'&'", "'|'", "'#'" ]

    symbolicNames = [ "<INVALID>", "AUTHORIZATION", "SELECT", "FROM", "TO", 
                      "AS", "AT", "ALL", "ANY", "SOME", "DEALLOCATE", "DIRECTORY", 
                      "DISTINCT", "WHERE", "GROUP", "BY", "ORDER", "HAVING", 
                      "LIMIT", "OFFSET", "OR", "AND", "IN", "NOT", "EXISTS", 
                      "BETWEEN", "LIKE", "ILIKE", "IS", "NULL", "TRUE", 
                      "FALSE", "IGNORE", "RESPECT", "NULLS", "FETCH", "FIRST", 
                      "LAST", "NEXT", "ESCAPE", "ASC", "DESC", "SUBSTRING", 
                      "TRIM", "LEADING", "TRAILING", "BOTH", "FOR", "TIME", 
                      "ZONE", "YEAR", "MONTH", "DAY", "HOUR", "MINUTE", 
                      "SECOND", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "CURRENT_SCHEMA", "CURRENT_USER", "CURRENT_ROLE", 
                      "SESSION_USER", "EXTRACT", "CASE", "WHEN", "THEN", 
                      "ELSE", "END", "IF", "INTERVAL", "JOIN", "CROSS", 
                      "OUTER", "INNER", "LEFT", "RIGHT", "FULL", "NATURAL", 
                      "USING", "ON", "OVER", "WINDOW", "PARTITION", "PROMOTE", 
                      "RANGE", "ROWS", "UNBOUNDED", "PRECEDING", "FOLLOWING", 
                      "CURRENT", "ROW", "WITH", "WITHOUT", "RECURSIVE", 
                      "CREATE", "BLOB", "TABLE", "SWAP", "GC", "DANGLING", 
                      "ARTIFACTS", "DECOMMISSION", "CLUSTER", "REPOSITORY", 
                      "SNAPSHOT", "ALTER", "KILL", "ONLY", "ADD", "COLUMN", 
                      "OPEN", "CLOSE", "RENAME", "REROUTE", "MOVE", "SHARD", 
                      "ALLOCATE", "REPLICA", "CANCEL", "RETRY", "FAILED", 
                      "BOOLEAN", "BYTE", "SHORT", "INTEGER", "INT", "LONG", 
                      "FLOAT", "DOUBLE", "PRECISION", "TIMESTAMP", "IP", 
                      "CHARACTER", "CHAR_SPECIAL", "VARYING", "OBJECT", 
                      "STRING_TYPE", "GEO_POINT", "GEO_SHAPE", "GLOBAL", 
                      "SESSION", "LOCAL", "BEGIN", "START", "COMMIT", "WORK", 
                      "TRANSACTION", "TRANSACTION_ISOLATION", "CHARACTERISTICS", 
                      "ISOLATION", "LEVEL", "SERIALIZABLE", "REPEATABLE", 
                      "COMMITTED", "UNCOMMITTED", "READ", "WRITE", "DEFERRABLE", 
                      "RETURNS", "CALLED", "REPLACE", "FUNCTION", "LANGUAGE", 
                      "INPUT", "ANALYZE", "COSTS", "VERBOSE", "DISCARD", 
                      "PLANS", "SEQUENCES", "TEMPORARY", "TEMP", "CONSTRAINT", 
                      "CHECK", "DESCRIBE", "EXPLAIN", "FORMAT", "TYPE", 
                      "TEXT", "GRAPHVIZ", "LOGICAL", "DISTRIBUTED", "CAST", 
                      "TRY_CAST", "SHOW", "TABLES", "SCHEMAS", "CATALOGS", 
                      "COLUMNS", "PARTITIONS", "FUNCTIONS", "MATERIALIZED", 
                      "VIEW", "OPTIMIZE", "REFRESH", "RESTORE", "DROP", 
                      "ALIAS", "UNION", "EXCEPT", "INTERSECT", "SYSTEM", 
                      "BERNOULLI", "TABLESAMPLE", "STRATIFY", "INSERT", 
                      "INTO", "VALUES", "DELETE", "UPDATE", "KEY", "DUPLICATE", 
                      "CONFLICT", "DO", "NOTHING", "SET", "RESET", "DEFAULT", 
                      "COPY", "CLUSTERED", "SHARDS", "PRIMARY_KEY", "OFF", 
                      "FULLTEXT", "FILTER", "PLAIN", "INDEX", "STORAGE", 
                      "RETURNING", "DYNAMIC", "STRICT", "IGNORED", "ARRAY", 
                      "ANALYZER", "EXTENDS", "TOKENIZER", "TOKEN_FILTERS", 
                      "CHAR_FILTERS", "PARTITIONED", "PREPARE", "TRANSIENT", 
                      "PERSISTENT", "MATCH", "GENERATED", "ALWAYS", "USER", 
                      "ROLE", "GRANT", "DENY", "REVOKE", "PRIVILEGES", "SCHEMA", 
                      "RETURN", "SUMMARY", "METADATA", "PUBLICATION", "SUBSCRIPTION", 
                      "CONNECTION", "ENABLE", "DISABLE", "DECLARE", "CURSOR", 
                      "ASENSITIVE", "INSENSITIVE", "BINARY", "NO", "SCROLL", 
                      "HOLD", "ABSOLUTE", "FORWARD", "BACKWARD", "RELATIVE", 
                      "PRIOR", "SERVER", "FOREIGN", "DATA", "WRAPPER", "OPTIONS", 
                      "MAPPING", "CASCADE", "RESTRICT", "EQ", "NEQ", "LT", 
                      "LTE", "GT", "GTE", "LLT", "REGEX_MATCH", "REGEX_NO_MATCH", 
                      "REGEX_MATCH_CI", "REGEX_NO_MATCH_CI", "PLUS", "MINUS", 
                      "ASTERISK", "CARET", "SLASH", "PERCENT", "CONCAT", 
                      "CAST_OPERATOR", "SEMICOLON", "COLON", "COMMA", "DOT", 
                      "OPEN_ROUND_BRACKET", "CLOSE_ROUND_BRACKET", "OPEN_CURLY_BRACKET", 
                      "CLOSE_CURLY_BRACKET", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", 
                      "EMPTY_SQUARE_BRACKET", "QUESTION", "DOLLAR", "BITWISE_AND", 
                      "BITWISE_OR", "BITWISE_XOR", "STRING", "ESCAPED_STRING", 
                      "BIT_STRING", "INTEGER_VALUE", "DECIMAL_VALUE", "IDENTIFIER", 
                      "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
                      "BEGIN_DOLLAR_QUOTED_STRING", "COMMENT", "WS", "UNRECOGNIZED", 
                      "DOLLAR_QUOTED_STRING_BODY", "END_DOLLAR_QUOTED_STRING" ]

    RULE_statements = 0
    RULE_singleStatement = 1
    RULE_singleExpression = 2
    RULE_statement = 3
    RULE_dropStmt = 4
    RULE_alterStmt = 5
    RULE_queryOptParens = 6
    RULE_query = 7
    RULE_queryNoWith = 8
    RULE_limitClause = 9
    RULE_offsetClause = 10
    RULE_queryTerm = 11
    RULE_setQuant = 12
    RULE_sortItem = 13
    RULE_querySpec = 14
    RULE_selectItem = 15
    RULE_where = 16
    RULE_returning = 17
    RULE_filter = 18
    RULE_relation = 19
    RULE_joinType = 20
    RULE_joinCriteria = 21
    RULE_aliasedRelation = 22
    RULE_relationPrimary = 23
    RULE_tableWithPartition = 24
    RULE_table = 25
    RULE_aliasedColumns = 26
    RULE_with = 27
    RULE_namedQuery = 28
    RULE_expr = 29
    RULE_booleanExpression = 30
    RULE_predicated = 31
    RULE_predicate = 32
    RULE_valueExpression = 33
    RULE_primaryExpression = 34
    RULE_explicitFunction = 35
    RULE_subqueryExpression = 36
    RULE_parameterOrLiteral = 37
    RULE_parameterOrSimpleLiteral = 38
    RULE_parameterOrInteger = 39
    RULE_parameterOrIdent = 40
    RULE_parameterOrString = 41
    RULE_parameterExpr = 42
    RULE_nullLiteral = 43
    RULE_escapedCharsStringLiteral = 44
    RULE_dollarQuotedStringLiteral = 45
    RULE_stringLiteral = 46
    RULE_bitString = 47
    RULE_subscriptSafe = 48
    RULE_cmpOp = 49
    RULE_setCmpQuantifier = 50
    RULE_whenClause = 51
    RULE_namedWindow = 52
    RULE_over = 53
    RULE_windowDefinition = 54
    RULE_windowFrame = 55
    RULE_frameBound = 56
    RULE_qnames = 57
    RULE_qname = 58
    RULE_spaceSeparatedIdents = 59
    RULE_identWithOrWithoutValue = 60
    RULE_idents = 61
    RULE_ident = 62
    RULE_unquotedIdent = 63
    RULE_quotedIdent = 64
    RULE_stringLiteralOrIdentifier = 65
    RULE_stringLiteralOrIdentifierOrQname = 66
    RULE_numericLiteral = 67
    RULE_intervalLiteral = 68
    RULE_intervalField = 69
    RULE_booleanLiteral = 70
    RULE_decimalLiteral = 71
    RULE_integerLiteral = 72
    RULE_objectKeyValue = 73
    RULE_insertSource = 74
    RULE_onConflict = 75
    RULE_conflictTarget = 76
    RULE_values = 77
    RULE_columns = 78
    RULE_assignment = 79
    RULE_createStmt = 80
    RULE_mappedUser = 81
    RULE_kvOptions = 82
    RULE_kvOption = 83
    RULE_functionArgument = 84
    RULE_alterTableDefinition = 85
    RULE_alterSubscriptionMode = 86
    RULE_partitionedByOrClusteredInto = 87
    RULE_partitionedBy = 88
    RULE_clusteredBy = 89
    RULE_blobClusteredInto = 90
    RULE_tableElement = 91
    RULE_columnDefinition = 92
    RULE_addColumnDefinition = 93
    RULE_dropColumnDefinition = 94
    RULE_rerouteOption = 95
    RULE_dataType = 96
    RULE_baseDataType = 97
    RULE_definedDataType = 98
    RULE_objectTypeDefinition = 99
    RULE_columnConstraint = 100
    RULE_primaryKeyContraint = 101
    RULE_checkConstraint = 102
    RULE_withProperties = 103
    RULE_genericProperties = 104
    RULE_genericProperty = 105
    RULE_explainOptions = 106
    RULE_explainOption = 107
    RULE_matchPredicateIdents = 108
    RULE_matchPredicateIdent = 109
    RULE_analyzerElement = 110
    RULE_tokenizer = 111
    RULE_tokenFilters = 112
    RULE_charFilters = 113
    RULE_namedProperties = 114
    RULE_tableWithPartitions = 115
    RULE_setGlobalAssignment = 116
    RULE_setExpr = 117
    RULE_on = 118
    RULE_securable = 119
    RULE_transactionMode = 120
    RULE_isolationLevel = 121
    RULE_direction = 122
    RULE_declareCursorParams = 123
    RULE_nonReserved = 124

    ruleNames =  [ "statements", "singleStatement", "singleExpression", 
                   "statement", "dropStmt", "alterStmt", "queryOptParens", 
                   "query", "queryNoWith", "limitClause", "offsetClause", 
                   "queryTerm", "setQuant", "sortItem", "querySpec", "selectItem", 
                   "where", "returning", "filter", "relation", "joinType", 
                   "joinCriteria", "aliasedRelation", "relationPrimary", 
                   "tableWithPartition", "table", "aliasedColumns", "with", 
                   "namedQuery", "expr", "booleanExpression", "predicated", 
                   "predicate", "valueExpression", "primaryExpression", 
                   "explicitFunction", "subqueryExpression", "parameterOrLiteral", 
                   "parameterOrSimpleLiteral", "parameterOrInteger", "parameterOrIdent", 
                   "parameterOrString", "parameterExpr", "nullLiteral", 
                   "escapedCharsStringLiteral", "dollarQuotedStringLiteral", 
                   "stringLiteral", "bitString", "subscriptSafe", "cmpOp", 
                   "setCmpQuantifier", "whenClause", "namedWindow", "over", 
                   "windowDefinition", "windowFrame", "frameBound", "qnames", 
                   "qname", "spaceSeparatedIdents", "identWithOrWithoutValue", 
                   "idents", "ident", "unquotedIdent", "quotedIdent", "stringLiteralOrIdentifier", 
                   "stringLiteralOrIdentifierOrQname", "numericLiteral", 
                   "intervalLiteral", "intervalField", "booleanLiteral", 
                   "decimalLiteral", "integerLiteral", "objectKeyValue", 
                   "insertSource", "onConflict", "conflictTarget", "values", 
                   "columns", "assignment", "createStmt", "mappedUser", 
                   "kvOptions", "kvOption", "functionArgument", "alterTableDefinition", 
                   "alterSubscriptionMode", "partitionedByOrClusteredInto", 
                   "partitionedBy", "clusteredBy", "blobClusteredInto", 
                   "tableElement", "columnDefinition", "addColumnDefinition", 
                   "dropColumnDefinition", "rerouteOption", "dataType", 
                   "baseDataType", "definedDataType", "objectTypeDefinition", 
                   "columnConstraint", "primaryKeyContraint", "checkConstraint", 
                   "withProperties", "genericProperties", "genericProperty", 
                   "explainOptions", "explainOption", "matchPredicateIdents", 
                   "matchPredicateIdent", "analyzerElement", "tokenizer", 
                   "tokenFilters", "charFilters", "namedProperties", "tableWithPartitions", 
                   "setGlobalAssignment", "setExpr", "on", "securable", 
                   "transactionMode", "isolationLevel", "direction", "declareCursorParams", 
                   "nonReserved" ]

    EOF = Token.EOF
    AUTHORIZATION=1
    SELECT=2
    FROM=3
    TO=4
    AS=5
    AT=6
    ALL=7
    ANY=8
    SOME=9
    DEALLOCATE=10
    DIRECTORY=11
    DISTINCT=12
    WHERE=13
    GROUP=14
    BY=15
    ORDER=16
    HAVING=17
    LIMIT=18
    OFFSET=19
    OR=20
    AND=21
    IN=22
    NOT=23
    EXISTS=24
    BETWEEN=25
    LIKE=26
    ILIKE=27
    IS=28
    NULL=29
    TRUE=30
    FALSE=31
    IGNORE=32
    RESPECT=33
    NULLS=34
    FETCH=35
    FIRST=36
    LAST=37
    NEXT=38
    ESCAPE=39
    ASC=40
    DESC=41
    SUBSTRING=42
    TRIM=43
    LEADING=44
    TRAILING=45
    BOTH=46
    FOR=47
    TIME=48
    ZONE=49
    YEAR=50
    MONTH=51
    DAY=52
    HOUR=53
    MINUTE=54
    SECOND=55
    CURRENT_DATE=56
    CURRENT_TIME=57
    CURRENT_TIMESTAMP=58
    CURRENT_SCHEMA=59
    CURRENT_USER=60
    CURRENT_ROLE=61
    SESSION_USER=62
    EXTRACT=63
    CASE=64
    WHEN=65
    THEN=66
    ELSE=67
    END=68
    IF=69
    INTERVAL=70
    JOIN=71
    CROSS=72
    OUTER=73
    INNER=74
    LEFT=75
    RIGHT=76
    FULL=77
    NATURAL=78
    USING=79
    ON=80
    OVER=81
    WINDOW=82
    PARTITION=83
    PROMOTE=84
    RANGE=85
    ROWS=86
    UNBOUNDED=87
    PRECEDING=88
    FOLLOWING=89
    CURRENT=90
    ROW=91
    WITH=92
    WITHOUT=93
    RECURSIVE=94
    CREATE=95
    BLOB=96
    TABLE=97
    SWAP=98
    GC=99
    DANGLING=100
    ARTIFACTS=101
    DECOMMISSION=102
    CLUSTER=103
    REPOSITORY=104
    SNAPSHOT=105
    ALTER=106
    KILL=107
    ONLY=108
    ADD=109
    COLUMN=110
    OPEN=111
    CLOSE=112
    RENAME=113
    REROUTE=114
    MOVE=115
    SHARD=116
    ALLOCATE=117
    REPLICA=118
    CANCEL=119
    RETRY=120
    FAILED=121
    BOOLEAN=122
    BYTE=123
    SHORT=124
    INTEGER=125
    INT=126
    LONG=127
    FLOAT=128
    DOUBLE=129
    PRECISION=130
    TIMESTAMP=131
    IP=132
    CHARACTER=133
    CHAR_SPECIAL=134
    VARYING=135
    OBJECT=136
    STRING_TYPE=137
    GEO_POINT=138
    GEO_SHAPE=139
    GLOBAL=140
    SESSION=141
    LOCAL=142
    BEGIN=143
    START=144
    COMMIT=145
    WORK=146
    TRANSACTION=147
    TRANSACTION_ISOLATION=148
    CHARACTERISTICS=149
    ISOLATION=150
    LEVEL=151
    SERIALIZABLE=152
    REPEATABLE=153
    COMMITTED=154
    UNCOMMITTED=155
    READ=156
    WRITE=157
    DEFERRABLE=158
    RETURNS=159
    CALLED=160
    REPLACE=161
    FUNCTION=162
    LANGUAGE=163
    INPUT=164
    ANALYZE=165
    COSTS=166
    VERBOSE=167
    DISCARD=168
    PLANS=169
    SEQUENCES=170
    TEMPORARY=171
    TEMP=172
    CONSTRAINT=173
    CHECK=174
    DESCRIBE=175
    EXPLAIN=176
    FORMAT=177
    TYPE=178
    TEXT=179
    GRAPHVIZ=180
    LOGICAL=181
    DISTRIBUTED=182
    CAST=183
    TRY_CAST=184
    SHOW=185
    TABLES=186
    SCHEMAS=187
    CATALOGS=188
    COLUMNS=189
    PARTITIONS=190
    FUNCTIONS=191
    MATERIALIZED=192
    VIEW=193
    OPTIMIZE=194
    REFRESH=195
    RESTORE=196
    DROP=197
    ALIAS=198
    UNION=199
    EXCEPT=200
    INTERSECT=201
    SYSTEM=202
    BERNOULLI=203
    TABLESAMPLE=204
    STRATIFY=205
    INSERT=206
    INTO=207
    VALUES=208
    DELETE=209
    UPDATE=210
    KEY=211
    DUPLICATE=212
    CONFLICT=213
    DO=214
    NOTHING=215
    SET=216
    RESET=217
    DEFAULT=218
    COPY=219
    CLUSTERED=220
    SHARDS=221
    PRIMARY_KEY=222
    OFF=223
    FULLTEXT=224
    FILTER=225
    PLAIN=226
    INDEX=227
    STORAGE=228
    RETURNING=229
    DYNAMIC=230
    STRICT=231
    IGNORED=232
    ARRAY=233
    ANALYZER=234
    EXTENDS=235
    TOKENIZER=236
    TOKEN_FILTERS=237
    CHAR_FILTERS=238
    PARTITIONED=239
    PREPARE=240
    TRANSIENT=241
    PERSISTENT=242
    MATCH=243
    GENERATED=244
    ALWAYS=245
    USER=246
    ROLE=247
    GRANT=248
    DENY=249
    REVOKE=250
    PRIVILEGES=251
    SCHEMA=252
    RETURN=253
    SUMMARY=254
    METADATA=255
    PUBLICATION=256
    SUBSCRIPTION=257
    CONNECTION=258
    ENABLE=259
    DISABLE=260
    DECLARE=261
    CURSOR=262
    ASENSITIVE=263
    INSENSITIVE=264
    BINARY=265
    NO=266
    SCROLL=267
    HOLD=268
    ABSOLUTE=269
    FORWARD=270
    BACKWARD=271
    RELATIVE=272
    PRIOR=273
    SERVER=274
    FOREIGN=275
    DATA=276
    WRAPPER=277
    OPTIONS=278
    MAPPING=279
    CASCADE=280
    RESTRICT=281
    EQ=282
    NEQ=283
    LT=284
    LTE=285
    GT=286
    GTE=287
    LLT=288
    REGEX_MATCH=289
    REGEX_NO_MATCH=290
    REGEX_MATCH_CI=291
    REGEX_NO_MATCH_CI=292
    PLUS=293
    MINUS=294
    ASTERISK=295
    CARET=296
    SLASH=297
    PERCENT=298
    CONCAT=299
    CAST_OPERATOR=300
    SEMICOLON=301
    COLON=302
    COMMA=303
    DOT=304
    OPEN_ROUND_BRACKET=305
    CLOSE_ROUND_BRACKET=306
    OPEN_CURLY_BRACKET=307
    CLOSE_CURLY_BRACKET=308
    OPEN_SQUARE_BRACKET=309
    CLOSE_SQUARE_BRACKET=310
    EMPTY_SQUARE_BRACKET=311
    QUESTION=312
    DOLLAR=313
    BITWISE_AND=314
    BITWISE_OR=315
    BITWISE_XOR=316
    STRING=317
    ESCAPED_STRING=318
    BIT_STRING=319
    INTEGER_VALUE=320
    DECIMAL_VALUE=321
    IDENTIFIER=322
    DIGIT_IDENTIFIER=323
    QUOTED_IDENTIFIER=324
    BACKQUOTED_IDENTIFIER=325
    BEGIN_DOLLAR_QUOTED_STRING=326
    COMMENT=327
    WS=328
    UNRECOGNIZED=329
    DOLLAR_QUOTED_STRING_BODY=330
    END_DOLLAR_QUOTED_STRING=331

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StatementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StatementContext,i)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.SEMICOLON)
            else:
                return self.getToken(SqlBaseParser.SEMICOLON, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = SqlBaseParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.statement()
            self.state = 255
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 251
                    self.match(SqlBaseParser.SEMICOLON)
                    self.state = 252
                    self.statement() 
                self.state = 257
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==301:
                self.state = 258
                self.match(SqlBaseParser.SEMICOLON)


            self.state = 261
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def SEMICOLON(self):
            return self.getToken(SqlBaseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_singleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.statement()
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==301:
                self.state = 264
                self.match(SqlBaseParser.SEMICOLON)


            self.state = 267
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExpression" ):
                listener.enterSingleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExpression" ):
                listener.exitSingleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleExpression" ):
                return visitor.visitSingleExpression(self)
            else:
                return visitor.visitChildren(self)




    def singleExpression(self):

        localctx = SqlBaseParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.expr()
            self.state = 270
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)
        def explainOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExplainOptionsContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExplainOptionsContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class SetTransactionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransactionModeContext,i)

        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def CHARACTERISTICS(self):
            return self.getToken(SqlBaseParser.CHARACTERISTICS, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransaction" ):
                listener.enterSetTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransaction" ):
                listener.exitSetTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTransaction" ):
                return visitor.visitSetTransaction(self)
            else:
                return visitor.visitChildren(self)


    class DropContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dropStmt(self):
            return self.getTypedRuleContext(SqlBaseParser.DropStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop" ):
                listener.enterDrop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop" ):
                listener.exitDrop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop" ):
                return visitor.visitDrop(self)
            else:
                return visitor.visitChildren(self)


    class DiscardContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(SqlBaseParser.DISCARD, 0)
        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PLANS(self):
            return self.getToken(SqlBaseParser.PLANS, 0)
        def SEQUENCES(self):
            return self.getToken(SqlBaseParser.SEQUENCES, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def TEMP(self):
            return self.getToken(SqlBaseParser.TEMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscard" ):
                listener.enterDiscard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscard" ):
                listener.exitDiscard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiscard" ):
                return visitor.visitDiscard(self)
            else:
                return visitor.visitChildren(self)


    class StartTransactionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransactionModeContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartTransaction" ):
                return visitor.visitStartTransaction(self)
            else:
                return visitor.visitChildren(self)


    class DeclareContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECLARE(self):
            return self.getToken(SqlBaseParser.DECLARE, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def declareCursorParams(self):
            return self.getTypedRuleContext(SqlBaseParser.DeclareCursorParamsContext,0)

        def CURSOR(self):
            return self.getToken(SqlBaseParser.CURSOR, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)

        def HOLD(self):
            return self.getToken(SqlBaseParser.HOLD, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare" ):
                listener.enterDeclare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare" ):
                listener.exitDeclare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare" ):
                return visitor.visitDeclare(self)
            else:
                return visitor.visitChildren(self)


    class DeallocateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.prepStmt = None # StringLiteralOrIdentifierOrQnameContext
            self.copyFrom(ctx)

        def DEALLOCATE(self):
            return self.getToken(SqlBaseParser.DEALLOCATE, 0)
        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)
        def stringLiteralOrIdentifierOrQname(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralOrIdentifierOrQnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate" ):
                listener.enterDeallocate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate" ):
                listener.exitDeallocate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeallocate" ):
                return visitor.visitDeallocate(self)
            else:
                return visitor.visitChildren(self)


    class CommitContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)
        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit" ):
                listener.enterCommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit" ):
                listener.exitCommit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommit" ):
                return visitor.visitCommit(self)
            else:
                return visitor.visitChildren(self)


    class UpdateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def aliasedRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedRelationContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AssignmentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)

        def returning(self):
            return self.getTypedRuleContext(SqlBaseParser.ReturningContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate" ):
                listener.enterUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate" ):
                listener.exitUpdate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate" ):
                return visitor.visitUpdate(self)
            else:
                return visitor.visitChildren(self)


    class InsertContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)

        def insertSource(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertSourceContext,0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def onConflict(self):
            return self.getTypedRuleContext(SqlBaseParser.OnConflictContext,0)

        def returning(self):
            return self.getTypedRuleContext(SqlBaseParser.ReturningContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert" ):
                listener.enterInsert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert" ):
                listener.exitInsert(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert" ):
                return visitor.visitInsert(self)
            else:
                return visitor.visitChildren(self)


    class DeleteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def aliasedRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedRelationContext,0)

        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete" ):
                listener.enterDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete" ):
                listener.exitDelete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete" ):
                return visitor.visitDelete(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class SetGlobalContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)
        def setGlobalAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SetGlobalAssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SetGlobalAssignmentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def PERSISTENT(self):
            return self.getToken(SqlBaseParser.PERSISTENT, 0)
        def TRANSIENT(self):
            return self.getToken(SqlBaseParser.TRANSIENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetGlobal" ):
                listener.enterSetGlobal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetGlobal" ):
                listener.exitSetGlobal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetGlobal" ):
                return visitor.visitSetGlobal(self)
            else:
                return visitor.visitChildren(self)


    class CopyToContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.path = None # ExprContext
            self.copyFrom(ctx)

        def COPY(self):
            return self.getToken(SqlBaseParser.COPY, 0)
        def tableWithPartition(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def columns(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnsContext,0)

        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)
        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyTo" ):
                listener.enterCopyTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyTo" ):
                listener.exitCopyTo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyTo" ):
                return visitor.visitCopyTo(self)
            else:
                return visitor.visitChildren(self)


    class ShowSessionParameterContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSessionParameter" ):
                listener.enterShowSessionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSessionParameter" ):
                listener.exitShowSessionParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSessionParameter" ):
                return visitor.visitShowSessionParameter(self)
            else:
                return visitor.visitChildren(self)


    class DefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault" ):
                listener.enterDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault" ):
                listener.exitDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault" ):
                return visitor.visitDefault(self)
            else:
                return visitor.visitChildren(self)


    class OptimizeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTIMIZE(self):
            return self.getToken(SqlBaseParser.OPTIMIZE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableWithPartitions(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionsContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimize" ):
                listener.enterOptimize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimize" ):
                listener.exitOptimize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptimize" ):
                return visitor.visitOptimize(self)
            else:
                return visitor.visitChildren(self)


    class ResetGlobalContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)
        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetGlobal" ):
                listener.enterResetGlobal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetGlobal" ):
                listener.exitResetGlobal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetGlobal" ):
                return visitor.visitResetGlobal(self)
            else:
                return visitor.visitChildren(self)


    class RevokePrivilegeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.privileges = None # IdentsContext
            self.users = None # IdentsContext
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def idents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentsContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentsContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def securable(self):
            return self.getTypedRuleContext(SqlBaseParser.SecurableContext,0)

        def qnames(self):
            return self.getTypedRuleContext(SqlBaseParser.QnamesContext,0)

        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokePrivilege" ):
                listener.enterRevokePrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokePrivilege" ):
                listener.exitRevokePrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokePrivilege" ):
                return visitor.visitRevokePrivilege(self)
            else:
                return visitor.visitChildren(self)


    class SetTimeZoneContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTimeZone" ):
                listener.enterSetTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTimeZone" ):
                listener.exitSetTimeZone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTimeZone" ):
                return visitor.visitSetTimeZone(self)
            else:
                return visitor.visitChildren(self)


    class CreateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createStmt(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate" ):
                return visitor.visitCreate(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowSchemasContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemas" ):
                listener.enterShowSchemas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemas" ):
                listener.exitShowSchemas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSchemas" ):
                return visitor.visitShowSchemas(self)
            else:
                return visitor.visitChildren(self)


    class CloseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(SqlBaseParser.CLOSE, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose" ):
                listener.enterClose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose" ):
                listener.exitClose(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClose" ):
                return visitor.visitClose(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QnameContext
            self.schema = None # QnameContext
            self.pattern = None # StringLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.FROM)
            else:
                return self.getToken(SqlBaseParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IN)
            else:
                return self.getToken(SqlBaseParser.IN, i)
        def qname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QnameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QnameContext,i)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class AlterContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def alterStmt(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter" ):
                listener.enterAlter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter" ):
                listener.exitAlter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter" ):
                return visitor.visitAlter(self)
            else:
                return visitor.visitChildren(self)


    class SetContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)
        def setExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SetExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SetExprContext,i)

        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet" ):
                listener.enterSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet" ):
                listener.exitSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet" ):
                return visitor.visitSet(self)
            else:
                return visitor.visitChildren(self)


    class RestoreContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.metatypes = None # IdentsContext
            self.copyFrom(ctx)

        def RESTORE(self):
            return self.getToken(SqlBaseParser.RESTORE, 0)
        def SNAPSHOT(self):
            return self.getToken(SqlBaseParser.SNAPSHOT, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def METADATA(self):
            return self.getToken(SqlBaseParser.METADATA, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableWithPartitions(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionsContext,0)

        def idents(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentsContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestore" ):
                listener.enterRestore(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestore" ):
                listener.exitRestore(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRestore" ):
                return visitor.visitRestore(self)
            else:
                return visitor.visitChildren(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableWithPartitions(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshTable" ):
                listener.enterRefreshTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshTable" ):
                listener.exitRefreshTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshTable" ):
                return visitor.visitRefreshTable(self)
            else:
                return visitor.visitChildren(self)


    class GrantPrivilegeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.priviliges = None # IdentsContext
            self.users = None # IdentsContext
            self.copyFrom(ctx)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def idents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentsContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentsContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def securable(self):
            return self.getTypedRuleContext(SqlBaseParser.SecurableContext,0)

        def qnames(self):
            return self.getTypedRuleContext(SqlBaseParser.QnamesContext,0)

        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantPrivilege" ):
                listener.enterGrantPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantPrivilege" ):
                listener.exitGrantPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantPrivilege" ):
                return visitor.visitGrantPrivilege(self)
            else:
                return visitor.visitChildren(self)


    class DenyPrivilegeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.priviliges = None # IdentsContext
            self.users = None # IdentsContext
            self.copyFrom(ctx)

        def DENY(self):
            return self.getToken(SqlBaseParser.DENY, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def idents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentsContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentsContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def securable(self):
            return self.getTypedRuleContext(SqlBaseParser.SecurableContext,0)

        def qnames(self):
            return self.getTypedRuleContext(SqlBaseParser.QnamesContext,0)

        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDenyPrivilege" ):
                listener.enterDenyPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDenyPrivilege" ):
                listener.exitDenyPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDenyPrivilege" ):
                return visitor.visitDenyPrivilege(self)
            else:
                return visitor.visitChildren(self)


    class SetSessionAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.username = None # StringLiteralOrIdentifierContext
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.SESSION)
            else:
                return self.getToken(SqlBaseParser.SESSION, i)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)
        def stringLiteralOrIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralOrIdentifierContext,0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSessionAuthorization" ):
                listener.enterSetSessionAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSessionAuthorization" ):
                listener.exitSetSessionAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetSessionAuthorization" ):
                return visitor.visitSetSessionAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class KillContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.jobId = None # ParameterOrStringContext
            self.copyFrom(ctx)

        def KILL(self):
            return self.getToken(SqlBaseParser.KILL, 0)
        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def parameterOrString(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrStringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKill" ):
                listener.enterKill(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKill" ):
                listener.exitKill(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKill" ):
                return visitor.visitKill(self)
            else:
                return visitor.visitChildren(self)


    class CopyFromContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.path = None # ExprContext
            self.copyFrom(ctx)

        def COPY(self):
            return self.getToken(SqlBaseParser.COPY, 0)
        def tableWithPartition(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)

        def RETURN(self):
            return self.getToken(SqlBaseParser.RETURN, 0)
        def SUMMARY(self):
            return self.getToken(SqlBaseParser.SUMMARY, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyFrom" ):
                listener.enterCopyFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyFrom" ):
                listener.exitCopyFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyFrom" ):
                return visitor.visitCopyFrom(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class FetchContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def direction(self):
            return self.getTypedRuleContext(SqlBaseParser.DirectionContext,0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch" ):
                listener.enterFetch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch" ):
                listener.exitFetch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch" ):
                return visitor.visitFetch(self)
            else:
                return visitor.visitChildren(self)


    class ShowTransactionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)
        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)
        def TRANSACTION_ISOLATION(self):
            return self.getToken(SqlBaseParser.TRANSACTION_ISOLATION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTransaction" ):
                listener.enterShowTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTransaction" ):
                listener.exitShowTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTransaction" ):
                return visitor.visitShowTransaction(self)
            else:
                return visitor.visitChildren(self)


    class ResetSessionAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSessionAuthorization" ):
                listener.enterResetSessionAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSessionAuthorization" ):
                listener.exitResetSessionAuthorization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetSessionAuthorization" ):
                return visitor.visitResetSessionAuthorization(self)
            else:
                return visitor.visitChildren(self)


    class BeginContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BEGIN(self):
            return self.getToken(SqlBaseParser.BEGIN, 0)
        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransactionModeContext,i)

        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin" ):
                listener.enterBegin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin" ):
                listener.exitBegin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBegin" ):
                return visitor.visitBegin(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 272
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.BeginContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.match(SqlBaseParser.BEGIN)
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146 or _la==147:
                    self.state = 274
                    _la = self._input.LA(1)
                    if not(_la==146 or _la==147):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23 or ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 321) != 0):
                    self.state = 277
                    self.transactionMode()
                    self.state = 284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==23 or ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 321) != 0) or _la==303:
                        self.state = 279
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==303:
                            self.state = 278
                            self.match(SqlBaseParser.COMMA)


                        self.state = 281
                        self.transactionMode()
                        self.state = 286
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 3:
                localctx = SqlBaseParser.StartTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 289
                self.match(SqlBaseParser.START)
                self.state = 290
                self.match(SqlBaseParser.TRANSACTION)
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23 or ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 321) != 0):
                    self.state = 291
                    self.transactionMode()
                    self.state = 298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==23 or ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 321) != 0) or _la==303:
                        self.state = 293
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==303:
                            self.state = 292
                            self.match(SqlBaseParser.COMMA)


                        self.state = 295
                        self.transactionMode()
                        self.state = 300
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CommitContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 303
                self.match(SqlBaseParser.COMMIT)
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146 or _la==147:
                    self.state = 304
                    _la = self._input.LA(1)
                    if not(_la==146 or _la==147):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.CommitContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 307
                self.match(SqlBaseParser.END)
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146 or _la==147:
                    self.state = 308
                    _la = self._input.LA(1)
                    if not(_la==146 or _la==147):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 311
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 320
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 312
                    self.match(SqlBaseParser.ANALYZE)
                    pass

                elif la_ == 2:
                    self.state = 313
                    self.match(SqlBaseParser.VERBOSE)
                    pass

                elif la_ == 3:
                    self.state = 317
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==305:
                        self.state = 314
                        self.explainOptions()
                        self.state = 319
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 322
                self.statement()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.OptimizeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 323
                self.match(SqlBaseParser.OPTIMIZE)
                self.state = 324
                self.match(SqlBaseParser.TABLE)
                self.state = 325
                self.tableWithPartitions()
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 326
                    self.withProperties()


                pass

            elif la_ == 8:
                localctx = SqlBaseParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 329
                self.match(SqlBaseParser.REFRESH)
                self.state = 330
                self.match(SqlBaseParser.TABLE)
                self.state = 331
                self.tableWithPartitions()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.UpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 332
                self.match(SqlBaseParser.UPDATE)
                self.state = 333
                self.aliasedRelation()
                self.state = 334
                self.match(SqlBaseParser.SET)
                self.state = 335
                self.assignment()
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 336
                    self.match(SqlBaseParser.COMMA)
                    self.state = 337
                    self.assignment()
                    self.state = 342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 343
                    self.where()


                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==229:
                    self.state = 346
                    self.returning()


                pass

            elif la_ == 10:
                localctx = SqlBaseParser.DeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 349
                self.match(SqlBaseParser.DELETE)
                self.state = 350
                self.match(SqlBaseParser.FROM)
                self.state = 351
                self.aliasedRelation()
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 352
                    self.where()


                pass

            elif la_ == 11:
                localctx = SqlBaseParser.ShowTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 355
                self.match(SqlBaseParser.SHOW)
                self.state = 360
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [147]:
                    self.state = 356
                    self.match(SqlBaseParser.TRANSACTION)
                    self.state = 357
                    self.match(SqlBaseParser.ISOLATION)
                    self.state = 358
                    self.match(SqlBaseParser.LEVEL)
                    pass
                elif token in [148]:
                    self.state = 359
                    self.match(SqlBaseParser.TRANSACTION_ISOLATION)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 362
                self.match(SqlBaseParser.SHOW)
                self.state = 363
                self.match(SqlBaseParser.CREATE)
                self.state = 364
                self.match(SqlBaseParser.TABLE)
                self.state = 365
                self.table()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 366
                self.match(SqlBaseParser.SHOW)
                self.state = 367
                self.match(SqlBaseParser.TABLES)
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==22:
                    self.state = 368
                    _la = self._input.LA(1)
                    if not(_la==3 or _la==22):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 369
                    self.qname()


                self.state = 375
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26]:
                    self.state = 372
                    self.match(SqlBaseParser.LIKE)
                    self.state = 373
                    localctx.pattern = self.stringLiteral()
                    pass
                elif token in [13]:
                    self.state = 374
                    self.where()
                    pass
                elif token in [-1, 301]:
                    pass
                else:
                    pass
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.ShowSchemasContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 377
                self.match(SqlBaseParser.SHOW)
                self.state = 378
                self.match(SqlBaseParser.SCHEMAS)
                self.state = 382
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26]:
                    self.state = 379
                    self.match(SqlBaseParser.LIKE)
                    self.state = 380
                    localctx.pattern = self.stringLiteral()
                    pass
                elif token in [13]:
                    self.state = 381
                    self.where()
                    pass
                elif token in [-1, 301]:
                    pass
                else:
                    pass
                pass

            elif la_ == 15:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 384
                self.match(SqlBaseParser.SHOW)
                self.state = 385
                self.match(SqlBaseParser.COLUMNS)
                self.state = 386
                _la = self._input.LA(1)
                if not(_la==3 or _la==22):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 387
                localctx.tableName = self.qname()
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==22:
                    self.state = 388
                    _la = self._input.LA(1)
                    if not(_la==3 or _la==22):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 389
                    localctx.schema = self.qname()


                self.state = 395
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26]:
                    self.state = 392
                    self.match(SqlBaseParser.LIKE)
                    self.state = 393
                    localctx.pattern = self.stringLiteral()
                    pass
                elif token in [13]:
                    self.state = 394
                    self.where()
                    pass
                elif token in [-1, 301]:
                    pass
                else:
                    pass
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.ShowSessionParameterContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 397
                self.match(SqlBaseParser.SHOW)
                self.state = 400
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 322, 323, 324, 325]:
                    self.state = 398
                    self.qname()
                    pass
                elif token in [7]:
                    self.state = 399
                    self.match(SqlBaseParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 17:
                localctx = SqlBaseParser.AlterContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 402
                self.alterStmt()
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.ResetGlobalContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 403
                self.match(SqlBaseParser.RESET)
                self.state = 404
                self.match(SqlBaseParser.GLOBAL)
                self.state = 405
                self.primaryExpression(0)
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 406
                    self.match(SqlBaseParser.COMMA)
                    self.state = 407
                    self.primaryExpression(0)
                    self.state = 412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 19:
                localctx = SqlBaseParser.SetTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 413
                self.match(SqlBaseParser.SET)
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 414
                    self.match(SqlBaseParser.SESSION)
                    self.state = 415
                    self.match(SqlBaseParser.CHARACTERISTICS)
                    self.state = 416
                    self.match(SqlBaseParser.AS)


                self.state = 419
                self.match(SqlBaseParser.TRANSACTION)
                self.state = 420
                self.transactionMode()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 421
                    self.match(SqlBaseParser.COMMA)
                    self.state = 422
                    self.transactionMode()
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 20:
                localctx = SqlBaseParser.SetSessionAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 428
                self.match(SqlBaseParser.SET)
                self.state = 430
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 429
                    _la = self._input.LA(1)
                    if not(_la==141 or _la==142):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 432
                self.match(SqlBaseParser.SESSION)
                self.state = 433
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 436
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [218]:
                    self.state = 434
                    self.match(SqlBaseParser.DEFAULT)
                    pass
                elif token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 317, 322, 323, 324, 325, 326]:
                    self.state = 435
                    localctx.username = self.stringLiteralOrIdentifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                localctx = SqlBaseParser.ResetSessionAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 438
                self.match(SqlBaseParser.RESET)
                self.state = 439
                self.match(SqlBaseParser.SESSION)
                self.state = 440
                self.match(SqlBaseParser.AUTHORIZATION)
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.SetContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 441
                self.match(SqlBaseParser.SET)
                self.state = 443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 442
                    _la = self._input.LA(1)
                    if not(_la==141 or _la==142):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 445
                self.qname()
                self.state = 446
                _la = self._input.LA(1)
                if not(_la==4 or _la==282):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 456
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [218]:
                    self.state = 447
                    self.match(SqlBaseParser.DEFAULT)
                    pass
                elif token in [1, 4, 6, 10, 27, 30, 31, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 317, 320, 321, 322, 323, 324, 325, 326]:
                    self.state = 448
                    self.setExpr()
                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==303:
                        self.state = 449
                        self.match(SqlBaseParser.COMMA)
                        self.state = 450
                        self.setExpr()
                        self.state = 455
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                localctx = SqlBaseParser.SetGlobalContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 458
                self.match(SqlBaseParser.SET)
                self.state = 459
                self.match(SqlBaseParser.GLOBAL)
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==241 or _la==242:
                    self.state = 460
                    _la = self._input.LA(1)
                    if not(_la==241 or _la==242):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 463
                self.setGlobalAssignment()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 464
                    self.match(SqlBaseParser.COMMA)
                    self.state = 465
                    self.setGlobalAssignment()
                    self.state = 470
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 24:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 471
                self.match(SqlBaseParser.SET)
                self.state = 472
                self.match(SqlBaseParser.TIME)
                self.state = 473
                self.match(SqlBaseParser.ZONE)
                self.state = 477
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [142]:
                    self.state = 474
                    self.match(SqlBaseParser.LOCAL)
                    pass
                elif token in [218]:
                    self.state = 475
                    self.match(SqlBaseParser.DEFAULT)
                    pass
                elif token in [317, 326]:
                    self.state = 476
                    self.stringLiteral()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 25:
                localctx = SqlBaseParser.KillContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 479
                self.match(SqlBaseParser.KILL)
                self.state = 482
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7]:
                    self.state = 480
                    self.match(SqlBaseParser.ALL)
                    pass
                elif token in [312, 313, 317, 326]:
                    self.state = 481
                    localctx.jobId = self.parameterOrString()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 26:
                localctx = SqlBaseParser.InsertContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 484
                self.match(SqlBaseParser.INSERT)
                self.state = 485
                self.match(SqlBaseParser.INTO)
                self.state = 486
                self.table()
                self.state = 498
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 487
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 488
                    self.ident()
                    self.state = 493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==303:
                        self.state = 489
                        self.match(SqlBaseParser.COMMA)
                        self.state = 490
                        self.ident()
                        self.state = 495
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 496
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                self.state = 500
                self.insertSource()
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 501
                    self.onConflict()


                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==229:
                    self.state = 504
                    self.returning()


                pass

            elif la_ == 27:
                localctx = SqlBaseParser.RestoreContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 507
                self.match(SqlBaseParser.RESTORE)
                self.state = 508
                self.match(SqlBaseParser.SNAPSHOT)
                self.state = 509
                self.qname()
                self.state = 515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 510
                    self.match(SqlBaseParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 511
                    self.match(SqlBaseParser.METADATA)
                    pass

                elif la_ == 3:
                    self.state = 512
                    self.match(SqlBaseParser.TABLE)
                    self.state = 513
                    self.tableWithPartitions()
                    pass

                elif la_ == 4:
                    self.state = 514
                    localctx.metatypes = self.idents()
                    pass


                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 517
                    self.withProperties()


                pass

            elif la_ == 28:
                localctx = SqlBaseParser.CopyFromContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 520
                self.match(SqlBaseParser.COPY)
                self.state = 521
                self.tableWithPartition()
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==305:
                    self.state = 522
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 523
                    self.ident()
                    self.state = 528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==303:
                        self.state = 524
                        self.match(SqlBaseParser.COMMA)
                        self.state = 525
                        self.ident()
                        self.state = 530
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 531
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                self.state = 535
                self.match(SqlBaseParser.FROM)
                self.state = 536
                localctx.path = self.expr()
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 537
                    self.withProperties()


                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==253:
                    self.state = 540
                    self.match(SqlBaseParser.RETURN)
                    self.state = 541
                    self.match(SqlBaseParser.SUMMARY)


                pass

            elif la_ == 29:
                localctx = SqlBaseParser.CopyToContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 544
                self.match(SqlBaseParser.COPY)
                self.state = 545
                self.tableWithPartition()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==305:
                    self.state = 546
                    self.columns()


                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 549
                    self.where()


                self.state = 552
                self.match(SqlBaseParser.TO)
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 553
                    self.match(SqlBaseParser.DIRECTORY)


                self.state = 556
                localctx.path = self.expr()
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 557
                    self.withProperties()


                pass

            elif la_ == 30:
                localctx = SqlBaseParser.DropContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 560
                self.dropStmt()
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.GrantPrivilegeContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 561
                self.match(SqlBaseParser.GRANT)
                self.state = 567
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 322, 323, 324, 325]:
                    self.state = 562
                    localctx.priviliges = self.idents()
                    pass
                elif token in [7]:
                    self.state = 563
                    self.match(SqlBaseParser.ALL)
                    self.state = 565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==251:
                        self.state = 564
                        self.match(SqlBaseParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 569
                    self.match(SqlBaseParser.ON)
                    self.state = 570
                    self.securable()
                    self.state = 571
                    self.qnames()


                self.state = 575
                self.match(SqlBaseParser.TO)
                self.state = 576
                localctx.users = self.idents()
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.DenyPrivilegeContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 577
                self.match(SqlBaseParser.DENY)
                self.state = 583
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 322, 323, 324, 325]:
                    self.state = 578
                    localctx.priviliges = self.idents()
                    pass
                elif token in [7]:
                    self.state = 579
                    self.match(SqlBaseParser.ALL)
                    self.state = 581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==251:
                        self.state = 580
                        self.match(SqlBaseParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 585
                    self.match(SqlBaseParser.ON)
                    self.state = 586
                    self.securable()
                    self.state = 587
                    self.qnames()


                self.state = 591
                self.match(SqlBaseParser.TO)
                self.state = 592
                localctx.users = self.idents()
                pass

            elif la_ == 33:
                localctx = SqlBaseParser.RevokePrivilegeContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 593
                self.match(SqlBaseParser.REVOKE)
                self.state = 599
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 322, 323, 324, 325]:
                    self.state = 594
                    localctx.privileges = self.idents()
                    pass
                elif token in [7]:
                    self.state = 595
                    self.match(SqlBaseParser.ALL)
                    self.state = 597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==251:
                        self.state = 596
                        self.match(SqlBaseParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 601
                    self.match(SqlBaseParser.ON)
                    self.state = 602
                    self.securable()
                    self.state = 603
                    self.qnames()


                self.state = 607
                self.match(SqlBaseParser.FROM)
                self.state = 608
                localctx.users = self.idents()
                pass

            elif la_ == 34:
                localctx = SqlBaseParser.CreateContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 609
                self.createStmt()
                pass

            elif la_ == 35:
                localctx = SqlBaseParser.DeallocateContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 610
                self.match(SqlBaseParser.DEALLOCATE)
                self.state = 612
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 611
                    self.match(SqlBaseParser.PREPARE)


                self.state = 616
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7]:
                    self.state = 614
                    self.match(SqlBaseParser.ALL)
                    pass
                elif token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 317, 322, 323, 324, 325, 326]:
                    self.state = 615
                    localctx.prepStmt = self.stringLiteralOrIdentifierOrQname()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 36:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 618
                self.match(SqlBaseParser.ANALYZE)
                pass

            elif la_ == 37:
                localctx = SqlBaseParser.DiscardContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 619
                self.match(SqlBaseParser.DISCARD)
                self.state = 620
                _la = self._input.LA(1)
                if not(_la==7 or ((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 38:
                localctx = SqlBaseParser.DeclareContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 621
                self.match(SqlBaseParser.DECLARE)
                self.state = 622
                self.ident()
                self.state = 623
                self.declareCursorParams()
                self.state = 624
                self.match(SqlBaseParser.CURSOR)
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92 or _la==93:
                    self.state = 625
                    _la = self._input.LA(1)
                    if not(_la==92 or _la==93):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 626
                    self.match(SqlBaseParser.HOLD)


                self.state = 629
                self.match(SqlBaseParser.FOR)
                self.state = 630
                self.queryNoWith()
                pass

            elif la_ == 39:
                localctx = SqlBaseParser.FetchContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 632
                self.match(SqlBaseParser.FETCH)
                self.state = 634
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 633
                    self.direction()


                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==22:
                    self.state = 636
                    _la = self._input.LA(1)
                    if not(_la==3 or _la==22):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 639
                self.ident()
                pass

            elif la_ == 40:
                localctx = SqlBaseParser.CloseContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 640
                self.match(SqlBaseParser.CLOSE)
                self.state = 643
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 322, 323, 324, 325]:
                    self.state = 641
                    self.ident()
                    pass
                elif token in [7]:
                    self.state = 642
                    self.match(SqlBaseParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dropStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DropSubscriptionContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def SUBSCRIPTION(self):
            return self.getToken(SqlBaseParser.SUBSCRIPTION, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSubscription" ):
                listener.enterDropSubscription(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSubscription" ):
                listener.exitDropSubscription(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropSubscription" ):
                return visitor.visitDropSubscription(self)
            else:
                return visitor.visitChildren(self)


    class DropSnapshotContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def SNAPSHOT(self):
            return self.getToken(SqlBaseParser.SNAPSHOT, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSnapshot" ):
                listener.enterDropSnapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSnapshot" ):
                listener.exitDropSnapshot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropSnapshot" ):
                return visitor.visitDropSnapshot(self)
            else:
                return visitor.visitChildren(self)


    class DropFunctionContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.name = None # QnameContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def functionArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FunctionArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FunctionArgumentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunction" ):
                return visitor.visitDropFunction(self)
            else:
                return visitor.visitChildren(self)


    class DropViewContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.names = None # QnamesContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qnames(self):
            return self.getTypedRuleContext(SqlBaseParser.QnamesContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)


    class DropUserMappingContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.server = None # IdentContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def MAPPING(self):
            return self.getToken(SqlBaseParser.MAPPING, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def mappedUser(self):
            return self.getTypedRuleContext(SqlBaseParser.MappedUserContext,0)

        def SERVER(self):
            return self.getToken(SqlBaseParser.SERVER, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUserMapping" ):
                listener.enterDropUserMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUserMapping" ):
                listener.exitDropUserMapping(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropUserMapping" ):
                return visitor.visitDropUserMapping(self)
            else:
                return visitor.visitChildren(self)


    class DropRepositoryContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def REPOSITORY(self):
            return self.getToken(SqlBaseParser.REPOSITORY, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRepository" ):
                listener.enterDropRepository(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRepository" ):
                listener.exitDropRepository(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropRepository" ):
                return visitor.visitDropRepository(self)
            else:
                return visitor.visitChildren(self)


    class DropRoleContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropRole" ):
                return visitor.visitDropRole(self)
            else:
                return visitor.visitChildren(self)


    class DropForeignTableContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.names = None # QnamesContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def FOREIGN(self):
            return self.getToken(SqlBaseParser.FOREIGN, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qnames(self):
            return self.getTypedRuleContext(SqlBaseParser.QnamesContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropForeignTable" ):
                listener.enterDropForeignTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropForeignTable" ):
                listener.exitDropForeignTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropForeignTable" ):
                return visitor.visitDropForeignTable(self)
            else:
                return visitor.visitChildren(self)


    class DropBlobTableContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropBlobTable" ):
                listener.enterDropBlobTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropBlobTable" ):
                listener.exitDropBlobTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropBlobTable" ):
                return visitor.visitDropBlobTable(self)
            else:
                return visitor.visitChildren(self)


    class DropAnalyzerContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def ANALYZER(self):
            return self.getToken(SqlBaseParser.ANALYZER, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropAnalyzer" ):
                listener.enterDropAnalyzer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropAnalyzer" ):
                listener.exitDropAnalyzer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropAnalyzer" ):
                return visitor.visitDropAnalyzer(self)
            else:
                return visitor.visitChildren(self)


    class DropAliasContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def ALIAS(self):
            return self.getToken(SqlBaseParser.ALIAS, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropAlias" ):
                listener.enterDropAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropAlias" ):
                listener.exitDropAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropAlias" ):
                return visitor.visitDropAlias(self)
            else:
                return visitor.visitChildren(self)


    class DropPublicationContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def PUBLICATION(self):
            return self.getToken(SqlBaseParser.PUBLICATION, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropPublication" ):
                listener.enterDropPublication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropPublication" ):
                listener.exitDropPublication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropPublication" ):
                return visitor.visitDropPublication(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class DropServerContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.names = None # IdentsContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def SERVER(self):
            return self.getToken(SqlBaseParser.SERVER, 0)
        def idents(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentsContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropServer" ):
                listener.enterDropServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropServer" ):
                listener.exitDropServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropServer" ):
                return visitor.visitDropServer(self)
            else:
                return visitor.visitChildren(self)



    def dropStmt(self):

        localctx = SqlBaseParser.DropStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dropStmt)
        self._la = 0 # Token type
        try:
            self.state = 755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DropBlobTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                self.match(SqlBaseParser.DROP)
                self.state = 648
                self.match(SqlBaseParser.BLOB)
                self.state = 649
                self.match(SqlBaseParser.TABLE)
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 650
                    self.match(SqlBaseParser.IF)
                    self.state = 651
                    self.match(SqlBaseParser.EXISTS)


                self.state = 654
                self.table()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 655
                self.match(SqlBaseParser.DROP)
                self.state = 656
                self.match(SqlBaseParser.TABLE)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 657
                    self.match(SqlBaseParser.IF)
                    self.state = 658
                    self.match(SqlBaseParser.EXISTS)


                self.state = 661
                self.table()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.DropAliasContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 662
                self.match(SqlBaseParser.DROP)
                self.state = 663
                self.match(SqlBaseParser.ALIAS)
                self.state = 664
                self.qname()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.DropRepositoryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 665
                self.match(SqlBaseParser.DROP)
                self.state = 666
                self.match(SqlBaseParser.REPOSITORY)
                self.state = 667
                self.ident()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DropSnapshotContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 668
                self.match(SqlBaseParser.DROP)
                self.state = 669
                self.match(SqlBaseParser.SNAPSHOT)
                self.state = 670
                self.qname()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 671
                self.match(SqlBaseParser.DROP)
                self.state = 672
                self.match(SqlBaseParser.FUNCTION)
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 673
                    self.match(SqlBaseParser.IF)
                    self.state = 674
                    self.match(SqlBaseParser.EXISTS)


                self.state = 677
                localctx.name = self.qname()
                self.state = 678
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152776691328746578) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -1718175795199) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 9221680432477634559) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -8224347531254671) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & -1152921504605798401) != 0):
                    self.state = 679
                    self.functionArgument()
                    self.state = 684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==303:
                        self.state = 680
                        self.match(SqlBaseParser.COMMA)
                        self.state = 681
                        self.functionArgument()
                        self.state = 686
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 689
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.DropRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 691
                self.match(SqlBaseParser.DROP)
                self.state = 692
                _la = self._input.LA(1)
                if not(_la==246 or _la==247):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 693
                    self.match(SqlBaseParser.IF)
                    self.state = 694
                    self.match(SqlBaseParser.EXISTS)


                self.state = 697
                localctx.name = self.ident()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 698
                self.match(SqlBaseParser.DROP)
                self.state = 699
                self.match(SqlBaseParser.VIEW)
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 700
                    self.match(SqlBaseParser.IF)
                    self.state = 701
                    self.match(SqlBaseParser.EXISTS)


                self.state = 704
                localctx.names = self.qnames()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.DropAnalyzerContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 705
                self.match(SqlBaseParser.DROP)
                self.state = 706
                self.match(SqlBaseParser.ANALYZER)
                self.state = 707
                localctx.name = self.ident()
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.DropPublicationContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 708
                self.match(SqlBaseParser.DROP)
                self.state = 709
                self.match(SqlBaseParser.PUBLICATION)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 710
                    self.match(SqlBaseParser.IF)
                    self.state = 711
                    self.match(SqlBaseParser.EXISTS)


                self.state = 714
                localctx.name = self.ident()
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.DropSubscriptionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 715
                self.match(SqlBaseParser.DROP)
                self.state = 716
                self.match(SqlBaseParser.SUBSCRIPTION)
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 717
                    self.match(SqlBaseParser.IF)
                    self.state = 718
                    self.match(SqlBaseParser.EXISTS)


                self.state = 721
                localctx.name = self.ident()
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.DropServerContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 722
                self.match(SqlBaseParser.DROP)
                self.state = 723
                self.match(SqlBaseParser.SERVER)
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 724
                    self.match(SqlBaseParser.IF)
                    self.state = 725
                    self.match(SqlBaseParser.EXISTS)


                self.state = 728
                localctx.names = self.idents()
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==280 or _la==281:
                    self.state = 729
                    _la = self._input.LA(1)
                    if not(_la==280 or _la==281):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 13:
                localctx = SqlBaseParser.DropForeignTableContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 732
                self.match(SqlBaseParser.DROP)
                self.state = 733
                self.match(SqlBaseParser.FOREIGN)
                self.state = 734
                self.match(SqlBaseParser.TABLE)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 735
                    self.match(SqlBaseParser.IF)
                    self.state = 736
                    self.match(SqlBaseParser.EXISTS)


                self.state = 739
                localctx.names = self.qnames()
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==280 or _la==281:
                    self.state = 740
                    _la = self._input.LA(1)
                    if not(_la==280 or _la==281):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 14:
                localctx = SqlBaseParser.DropUserMappingContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 743
                self.match(SqlBaseParser.DROP)
                self.state = 744
                self.match(SqlBaseParser.USER)
                self.state = 745
                self.match(SqlBaseParser.MAPPING)
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 746
                    self.match(SqlBaseParser.IF)
                    self.state = 747
                    self.match(SqlBaseParser.EXISTS)


                self.state = 750
                self.match(SqlBaseParser.FOR)
                self.state = 751
                self.mappedUser()
                self.state = 752
                self.match(SqlBaseParser.SERVER)
                self.state = 753
                localctx.server = self.ident()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_alterStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AddColumnContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def addColumnDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AddColumnDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AddColumnDefinitionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddColumn" ):
                listener.enterAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddColumn" ):
                listener.exitAddColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddColumn" ):
                return visitor.visitAddColumn(self)
            else:
                return visitor.visitChildren(self)


    class AlterClusterGCDanglingArtifactsContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def GC(self):
            return self.getToken(SqlBaseParser.GC, 0)
        def DANGLING(self):
            return self.getToken(SqlBaseParser.DANGLING, 0)
        def ARTIFACTS(self):
            return self.getToken(SqlBaseParser.ARTIFACTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterClusterGCDanglingArtifacts" ):
                listener.enterAlterClusterGCDanglingArtifacts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterClusterGCDanglingArtifacts" ):
                listener.exitAlterClusterGCDanglingArtifacts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterClusterGCDanglingArtifacts" ):
                return visitor.visitAlterClusterGCDanglingArtifacts(self)
            else:
                return visitor.visitChildren(self)


    class AlterTablePropertiesContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def genericProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.GenericPropertiesContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableProperties" ):
                listener.enterAlterTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableProperties" ):
                listener.exitAlterTableProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableProperties" ):
                return visitor.visitAlterTableProperties(self)
            else:
                return visitor.visitChildren(self)


    class AlterRoleContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def genericProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.GenericPropertiesContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRole" ):
                listener.enterAlterRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRole" ):
                listener.exitAlterRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterRole" ):
                return visitor.visitAlterRole(self)
            else:
                return visitor.visitChildren(self)


    class DropColumnContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def dropColumnDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.DropColumnDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.DropColumnDefinitionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropColumn" ):
                listener.enterDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropColumn" ):
                listener.exitDropColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropColumn" ):
                return visitor.visitDropColumn(self)
            else:
                return visitor.visitChildren(self)


    class DropCheckConstraintContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropCheckConstraint" ):
                listener.enterDropCheckConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropCheckConstraint" ):
                listener.exitDropCheckConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropCheckConstraint" ):
                return visitor.visitDropCheckConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableOpenCloseContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def OPEN(self):
            return self.getToken(SqlBaseParser.OPEN, 0)
        def CLOSE(self):
            return self.getToken(SqlBaseParser.CLOSE, 0)
        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableOpenClose" ):
                listener.enterAlterTableOpenClose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableOpenClose" ):
                listener.exitAlterTableOpenClose(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableOpenClose" ):
                return visitor.visitAlterTableOpenClose(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableRenameTableContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableRenameTable" ):
                listener.enterAlterTableRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableRenameTable" ):
                listener.exitAlterTableRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableRenameTable" ):
                return visitor.visitAlterTableRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class AlterPublicationContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def PUBLICATION(self):
            return self.getToken(SqlBaseParser.PUBLICATION, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QnameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QnameContext,i)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ASTERISK)
            else:
                return self.getToken(SqlBaseParser.ASTERISK, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterPublication" ):
                listener.enterAlterPublication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterPublication" ):
                listener.exitAlterPublication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterPublication" ):
                return visitor.visitAlterPublication(self)
            else:
                return visitor.visitChildren(self)


    class AlterClusterDecommissionNodeContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.node = None # ExprContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def DECOMMISSION(self):
            return self.getToken(SqlBaseParser.DECOMMISSION, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterClusterDecommissionNode" ):
                listener.enterAlterClusterDecommissionNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterClusterDecommissionNode" ):
                listener.exitAlterClusterDecommissionNode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterClusterDecommissionNode" ):
                return visitor.visitAlterClusterDecommissionNode(self)
            else:
                return visitor.visitChildren(self)


    class AlterClusterRerouteRetryFailedContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def REROUTE(self):
            return self.getToken(SqlBaseParser.REROUTE, 0)
        def RETRY(self):
            return self.getToken(SqlBaseParser.RETRY, 0)
        def FAILED(self):
            return self.getToken(SqlBaseParser.FAILED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterClusterRerouteRetryFailed" ):
                listener.enterAlterClusterRerouteRetryFailed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterClusterRerouteRetryFailed" ):
                listener.exitAlterClusterRerouteRetryFailed(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterClusterRerouteRetryFailed" ):
                return visitor.visitAlterClusterRerouteRetryFailed(self)
            else:
                return visitor.visitChildren(self)


    class AlterBlobTablePropertiesContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def genericProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.GenericPropertiesContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterBlobTableProperties" ):
                listener.enterAlterBlobTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterBlobTableProperties" ):
                listener.exitAlterBlobTableProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterBlobTableProperties" ):
                return visitor.visitAlterBlobTableProperties(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableRerouteContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def REROUTE(self):
            return self.getToken(SqlBaseParser.REROUTE, 0)
        def rerouteOption(self):
            return self.getTypedRuleContext(SqlBaseParser.RerouteOptionContext,0)

        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableReroute" ):
                listener.enterAlterTableReroute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableReroute" ):
                listener.exitAlterTableReroute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableReroute" ):
                return visitor.visitAlterTableReroute(self)
            else:
                return visitor.visitChildren(self)


    class AlterClusterSwapTableContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.source = None # QnameContext
            self.target = None # QnameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def SWAP(self):
            return self.getToken(SqlBaseParser.SWAP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QnameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QnameContext,i)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterClusterSwapTable" ):
                listener.enterAlterClusterSwapTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterClusterSwapTable" ):
                listener.exitAlterClusterSwapTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterClusterSwapTable" ):
                return visitor.visitAlterClusterSwapTable(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableRenameColumnContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.source = None # SubscriptSafeContext
            self.target = None # SubscriptSafeContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def subscriptSafe(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SubscriptSafeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SubscriptSafeContext,i)

        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableRenameColumn" ):
                listener.enterAlterTableRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableRenameColumn" ):
                listener.exitAlterTableRenameColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableRenameColumn" ):
                return visitor.visitAlterTableRenameColumn(self)
            else:
                return visitor.visitChildren(self)


    class AlterSubscriptionContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def SUBSCRIPTION(self):
            return self.getToken(SqlBaseParser.SUBSCRIPTION, 0)
        def alterSubscriptionMode(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterSubscriptionModeContext,0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterSubscription" ):
                listener.enterAlterSubscription(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterSubscription" ):
                listener.exitAlterSubscription(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterSubscription" ):
                return visitor.visitAlterSubscription(self)
            else:
                return visitor.visitChildren(self)



    def alterStmt(self):

        localctx = SqlBaseParser.AlterStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_alterStmt)
        self._la = 0 # Token type
        try:
            self.state = 932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.AddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                self.match(SqlBaseParser.ALTER)
                self.state = 758
                self.match(SqlBaseParser.TABLE)
                self.state = 759
                self.alterTableDefinition()
                self.state = 760
                self.addColumnDefinition()
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 761
                    self.match(SqlBaseParser.COMMA)
                    self.state = 762
                    self.addColumnDefinition()
                    self.state = 767
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SqlBaseParser.DropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 768
                self.match(SqlBaseParser.ALTER)
                self.state = 769
                self.match(SqlBaseParser.TABLE)
                self.state = 770
                self.alterTableDefinition()
                self.state = 771
                self.dropColumnDefinition()
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 772
                    self.match(SqlBaseParser.COMMA)
                    self.state = 773
                    self.dropColumnDefinition()
                    self.state = 778
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = SqlBaseParser.DropCheckConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 779
                self.match(SqlBaseParser.ALTER)
                self.state = 780
                self.match(SqlBaseParser.TABLE)
                self.state = 781
                self.alterTableDefinition()
                self.state = 782
                self.match(SqlBaseParser.DROP)
                self.state = 783
                self.match(SqlBaseParser.CONSTRAINT)
                self.state = 784
                self.ident()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.AlterTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 786
                self.match(SqlBaseParser.ALTER)
                self.state = 787
                self.match(SqlBaseParser.TABLE)
                self.state = 788
                self.alterTableDefinition()
                self.state = 808
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [216]:
                    self.state = 789
                    self.match(SqlBaseParser.SET)
                    self.state = 790
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 791
                    self.genericProperties()
                    self.state = 792
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                    pass
                elif token in [217]:
                    self.state = 794
                    self.match(SqlBaseParser.RESET)
                    self.state = 806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==305:
                        self.state = 795
                        self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                        self.state = 796
                        self.ident()
                        self.state = 801
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==303:
                            self.state = 797
                            self.match(SqlBaseParser.COMMA)
                            self.state = 798
                            self.ident()
                            self.state = 803
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 804
                        self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = SqlBaseParser.AlterBlobTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 810
                self.match(SqlBaseParser.ALTER)
                self.state = 811
                self.match(SqlBaseParser.BLOB)
                self.state = 812
                self.match(SqlBaseParser.TABLE)
                self.state = 813
                self.alterTableDefinition()
                self.state = 833
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [216]:
                    self.state = 814
                    self.match(SqlBaseParser.SET)
                    self.state = 815
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 816
                    self.genericProperties()
                    self.state = 817
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                    pass
                elif token in [217]:
                    self.state = 819
                    self.match(SqlBaseParser.RESET)
                    self.state = 831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==305:
                        self.state = 820
                        self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                        self.state = 821
                        self.ident()
                        self.state = 826
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==303:
                            self.state = 822
                            self.match(SqlBaseParser.COMMA)
                            self.state = 823
                            self.ident()
                            self.state = 828
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 829
                        self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                localctx = SqlBaseParser.AlterTableOpenCloseContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 835
                self.match(SqlBaseParser.ALTER)
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 836
                    self.match(SqlBaseParser.BLOB)


                self.state = 839
                self.match(SqlBaseParser.TABLE)
                self.state = 840
                self.alterTableDefinition()
                self.state = 841
                _la = self._input.LA(1)
                if not(_la==111 or _la==112):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.AlterTableRenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 843
                self.match(SqlBaseParser.ALTER)
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 844
                    self.match(SqlBaseParser.BLOB)


                self.state = 847
                self.match(SqlBaseParser.TABLE)
                self.state = 848
                self.alterTableDefinition()
                self.state = 849
                self.match(SqlBaseParser.RENAME)
                self.state = 850
                self.match(SqlBaseParser.TO)
                self.state = 851
                self.qname()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.AlterTableRenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 853
                self.match(SqlBaseParser.ALTER)
                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 854
                    self.match(SqlBaseParser.BLOB)


                self.state = 857
                self.match(SqlBaseParser.TABLE)
                self.state = 858
                self.alterTableDefinition()
                self.state = 859
                self.match(SqlBaseParser.RENAME)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 860
                    self.match(SqlBaseParser.COLUMN)


                self.state = 863
                localctx.source = self.subscriptSafe(0)
                self.state = 864
                self.match(SqlBaseParser.TO)
                self.state = 865
                localctx.target = self.subscriptSafe(0)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.AlterTableRerouteContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 867
                self.match(SqlBaseParser.ALTER)
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96:
                    self.state = 868
                    self.match(SqlBaseParser.BLOB)


                self.state = 871
                self.match(SqlBaseParser.TABLE)
                self.state = 872
                self.alterTableDefinition()
                self.state = 873
                self.match(SqlBaseParser.REROUTE)
                self.state = 874
                self.rerouteOption()
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.AlterClusterRerouteRetryFailedContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 876
                self.match(SqlBaseParser.ALTER)
                self.state = 877
                self.match(SqlBaseParser.CLUSTER)
                self.state = 878
                self.match(SqlBaseParser.REROUTE)
                self.state = 879
                self.match(SqlBaseParser.RETRY)
                self.state = 880
                self.match(SqlBaseParser.FAILED)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.AlterClusterSwapTableContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 881
                self.match(SqlBaseParser.ALTER)
                self.state = 882
                self.match(SqlBaseParser.CLUSTER)
                self.state = 883
                self.match(SqlBaseParser.SWAP)
                self.state = 884
                self.match(SqlBaseParser.TABLE)
                self.state = 885
                localctx.source = self.qname()
                self.state = 886
                self.match(SqlBaseParser.TO)
                self.state = 887
                localctx.target = self.qname()
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 888
                    self.withProperties()


                pass

            elif la_ == 12:
                localctx = SqlBaseParser.AlterClusterDecommissionNodeContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 891
                self.match(SqlBaseParser.ALTER)
                self.state = 892
                self.match(SqlBaseParser.CLUSTER)
                self.state = 893
                self.match(SqlBaseParser.DECOMMISSION)
                self.state = 894
                localctx.node = self.expr()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.AlterClusterGCDanglingArtifactsContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 895
                self.match(SqlBaseParser.ALTER)
                self.state = 896
                self.match(SqlBaseParser.CLUSTER)
                self.state = 897
                self.match(SqlBaseParser.GC)
                self.state = 898
                self.match(SqlBaseParser.DANGLING)
                self.state = 899
                self.match(SqlBaseParser.ARTIFACTS)
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.AlterRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 900
                self.match(SqlBaseParser.ALTER)
                self.state = 901
                _la = self._input.LA(1)
                if not(_la==246 or _la==247):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 902
                localctx.name = self.ident()
                self.state = 903
                self.match(SqlBaseParser.SET)
                self.state = 904
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 905
                self.genericProperties()
                self.state = 906
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 15:
                localctx = SqlBaseParser.AlterPublicationContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 908
                self.match(SqlBaseParser.ALTER)
                self.state = 909
                self.match(SqlBaseParser.PUBLICATION)
                self.state = 910
                localctx.name = self.ident()

                self.state = 911
                _la = self._input.LA(1)
                if not(_la==109 or _la==197 or _la==216):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 912
                self.match(SqlBaseParser.TABLE)
                self.state = 913
                self.qname()
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==295:
                    self.state = 914
                    self.match(SqlBaseParser.ASTERISK)


                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 917
                    self.match(SqlBaseParser.COMMA)
                    self.state = 918
                    self.qname()
                    self.state = 920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==295:
                        self.state = 919
                        self.match(SqlBaseParser.ASTERISK)


                    self.state = 926
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 16:
                localctx = SqlBaseParser.AlterSubscriptionContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 927
                self.match(SqlBaseParser.ALTER)
                self.state = 928
                self.match(SqlBaseParser.SUBSCRIPTION)
                self.state = 929
                localctx.name = self.ident()
                self.state = 930
                self.alterSubscriptionMode()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOptParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def queryOptParens(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOptParensContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryOptParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOptParens" ):
                listener.enterQueryOptParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOptParens" ):
                listener.exitQueryOptParens(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryOptParens" ):
                return visitor.visitQueryOptParens(self)
            else:
                return visitor.visitChildren(self)




    def queryOptParens(self):

        localctx = SqlBaseParser.QueryOptParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_queryOptParens)
        try:
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 934
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 935
                self.query()
                self.state = 936
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 938
                self.query()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 939
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 940
                self.queryOptParens()
                self.state = 941
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def with_(self):
            return self.getTypedRuleContext(SqlBaseParser.WithContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 945
                self.with_()


            self.state = 948
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)


        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def limitClause(self):
            return self.getTypedRuleContext(SqlBaseParser.LimitClauseContext,0)


        def offsetClause(self):
            return self.getTypedRuleContext(SqlBaseParser.OffsetClauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryNoWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryNoWith" ):
                listener.enterQueryNoWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryNoWith" ):
                listener.exitQueryNoWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryNoWith" ):
                return visitor.visitQueryNoWith(self)
            else:
                return visitor.visitChildren(self)




    def queryNoWith(self):

        localctx = SqlBaseParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_queryNoWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.queryTerm(0)
            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 951
                self.match(SqlBaseParser.ORDER)
                self.state = 952
                self.match(SqlBaseParser.BY)
                self.state = 953
                self.sortItem()
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 954
                    self.match(SqlBaseParser.COMMA)
                    self.state = 955
                    self.sortItem()
                    self.state = 960
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18 or _la==35:
                    self.state = 963
                    self.limitClause()


                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 966
                    self.offsetClause()


                pass

            elif la_ == 2:
                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 969
                    self.offsetClause()


                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18 or _la==35:
                    self.state = 972
                    self.limitClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.limit = None # ParameterOrIntegerContext

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)


        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitClause" ):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def limitClause(self):

        localctx = SqlBaseParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_limitClause)
        self._la = 0 # Token type
        try:
            self.state = 988
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 977
                self.match(SqlBaseParser.LIMIT)
                self.state = 980
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29, 30, 31, 70, 183, 184, 233, 307, 309, 312, 313, 317, 318, 319, 320, 321, 326]:
                    self.state = 978
                    localctx.limit = self.parameterOrInteger()
                    pass
                elif token in [7]:
                    self.state = 979
                    self.match(SqlBaseParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 982
                self.match(SqlBaseParser.FETCH)
                self.state = 983
                _la = self._input.LA(1)
                if not(_la==36 or _la==38):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

                self.state = 984
                localctx.limit = self.parameterOrInteger()
                self.state = 985
                _la = self._input.LA(1)
                if not(_la==86 or _la==91):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 986
                self.match(SqlBaseParser.ONLY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # ParameterOrIntegerContext

        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)


        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_offsetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffsetClause" ):
                listener.enterOffsetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffsetClause" ):
                listener.exitOffsetClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffsetClause" ):
                return visitor.visitOffsetClause(self)
            else:
                return visitor.visitChildren(self)




    def offsetClause(self):

        localctx = SqlBaseParser.OffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_offsetClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(SqlBaseParser.OFFSET)
            self.state = 991
            localctx.offset = self.parameterOrInteger()
            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86 or _la==91:
                self.state = 992
                _la = self._input.LA(1)
                if not(_la==86 or _la==91):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpec(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.first = None # QuerySpecContext
            self.operator = None # Token
            self.second = None # QuerySpecContext
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def querySpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QuerySpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QuerySpecContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)
        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def setQuant(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 996
                self.querySpec()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SetOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 997
                localctx.first = self.querySpec()
                self.state = 998
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==200 or _la==201):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 999
                localctx.second = self.querySpec()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1011
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                    self.state = 1003
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1004
                    localctx.operator = self.match(SqlBaseParser.UNION)
                    self.state = 1006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==7 or _la==12:
                        self.state = 1005
                        self.setQuant()


                    self.state = 1008
                    localctx.right = self.queryTerm(2) 
                self.state = 1013
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SetQuantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuant" ):
                listener.enterSetQuant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuant" ):
                listener.exitSetQuant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuant" ):
                return visitor.visitSetQuant(self)
            else:
                return visitor.visitChildren(self)




    def setQuant(self):

        localctx = SqlBaseParser.SetQuantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_setQuant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            _la = self._input.LA(1)
            if not(_la==7 or _la==12):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrdering = None # Token

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.expr()
            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40 or _la==41:
                self.state = 1017
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==40 or _la==41):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 1020
                self.match(SqlBaseParser.NULLS)
                self.state = 1021
                localctx.nullOrdering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==36 or _la==37):
                    localctx.nullOrdering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefaultQuerySpecContext(QuerySpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuerySpecContext
            super().__init__(parser)
            self.having = None # BooleanExpressionContext
            self._namedWindow = None # NamedWindowContext
            self.windows = list() # of NamedWindowContexts
            self.copyFrom(ctx)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)
        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SelectItemContext,i)

        def setQuant(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)

        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)
        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedWindowContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultQuerySpec" ):
                listener.enterDefaultQuerySpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultQuerySpec" ):
                listener.exitDefaultQuerySpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultQuerySpec" ):
                return visitor.visitDefaultQuerySpec(self)
            else:
                return visitor.visitChildren(self)


    class ValuesRelationContext(QuerySpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuerySpecContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)
        def values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValuesContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValuesContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesRelation" ):
                listener.enterValuesRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesRelation" ):
                listener.exitValuesRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValuesRelation" ):
                return visitor.visitValuesRelation(self)
            else:
                return visitor.visitChildren(self)



    def querySpec(self):

        localctx = SqlBaseParser.QuerySpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_querySpec)
        self._la = 0 # Token type
        try:
            self.state = 1086
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                localctx = SqlBaseParser.DefaultQuerySpecContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1024
                self.match(SqlBaseParser.SELECT)
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7 or _la==12:
                    self.state = 1025
                    self.setQuant()


                self.state = 1028
                self.selectItem()
                self.state = 1033
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1029
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1030
                        self.selectItem() 
                    self.state = 1035
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                self.state = 1045
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 1036
                    self.match(SqlBaseParser.FROM)
                    self.state = 1037
                    self.relation(0)
                    self.state = 1042
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1038
                            self.match(SqlBaseParser.COMMA)
                            self.state = 1039
                            self.relation(0) 
                        self.state = 1044
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,120,self._ctx)



                self.state = 1048
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 1047
                    self.where()


                self.state = 1060
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 1050
                    self.match(SqlBaseParser.GROUP)
                    self.state = 1051
                    self.match(SqlBaseParser.BY)
                    self.state = 1052
                    self.expr()
                    self.state = 1057
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1053
                            self.match(SqlBaseParser.COMMA)
                            self.state = 1054
                            self.expr() 
                        self.state = 1059
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,123,self._ctx)



                self.state = 1064
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1062
                    self.match(SqlBaseParser.HAVING)
                    self.state = 1063
                    localctx.having = self.booleanExpression(0)


                self.state = 1075
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                if la_ == 1:
                    self.state = 1066
                    self.match(SqlBaseParser.WINDOW)
                    self.state = 1067
                    localctx._namedWindow = self.namedWindow()
                    localctx.windows.append(localctx._namedWindow)
                    self.state = 1072
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1068
                            self.match(SqlBaseParser.COMMA)
                            self.state = 1069
                            localctx._namedWindow = self.namedWindow()
                            localctx.windows.append(localctx._namedWindow) 
                        self.state = 1074
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,126,self._ctx)



                pass
            elif token in [208]:
                localctx = SqlBaseParser.ValuesRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1077
                self.match(SqlBaseParser.VALUES)
                self.state = 1078
                self.values()
                self.state = 1083
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1079
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1080
                        self.values() 
                    self.state = 1085
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_selectItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectAllContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)
        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAll" ):
                listener.enterSelectAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAll" ):
                listener.exitSelectAll(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectAll" ):
                return visitor.visitSelectAll(self)
            else:
                return visitor.visitChildren(self)


    class SelectSingleContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSingle" ):
                listener.enterSelectSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSingle" ):
                listener.exitSelectSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectSingle" ):
                return visitor.visitSelectSingle(self)
            else:
                return visitor.visitChildren(self)



    def selectItem(self):

        localctx = SqlBaseParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SelectSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1088
                self.expr()
                self.state = 1093
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==5:
                        self.state = 1089
                        self.match(SqlBaseParser.AS)


                    self.state = 1092
                    self.ident()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                self.qname()
                self.state = 1096
                self.match(SqlBaseParser.DOT)
                self.state = 1097
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1099
                self.match(SqlBaseParser.ASTERISK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # BooleanExpressionContext

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere" ):
                listener.enterWhere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere" ):
                listener.exitWhere(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhere" ):
                return visitor.visitWhere(self)
            else:
                return visitor.visitChildren(self)




    def where(self):

        localctx = SqlBaseParser.WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(SqlBaseParser.WHERE)
            self.state = 1103
            localctx.condition = self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturningContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SelectItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_returning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturning" ):
                listener.enterReturning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturning" ):
                listener.exitReturning(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturning" ):
                return visitor.visitReturning(self)
            else:
                return visitor.visitChildren(self)




    def returning(self):

        localctx = SqlBaseParser.ReturningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_returning)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.match(SqlBaseParser.RETURNING)
            self.state = 1106
            self.selectItem()
            self.state = 1111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 1107
                self.match(SqlBaseParser.COMMA)
                self.state = 1108
                self.selectItem()
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter" ):
                listener.enterFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter" ):
                listener.exitFilter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilter" ):
                return visitor.visitFilter(self)
            else:
                return visitor.visitChildren(self)




    def filter_(self):

        localctx = SqlBaseParser.FilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.match(SqlBaseParser.FILTER)
            self.state = 1115
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1116
            self.where()
            self.state = 1117
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RelationDefaultContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aliasedRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationDefault" ):
                listener.enterRelationDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationDefault" ):
                listener.exitRelationDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationDefault" ):
                return visitor.visitRelationDefault(self)
            else:
                return visitor.visitChildren(self)


    class JoinRelationContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.left = None # RelationContext
            self.right = None # AliasedRelationContext
            self.rightRelation = None # RelationContext
            self.copyFrom(ctx)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)
        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)
        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)

        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)
        def aliasedRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.RelationDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1120
            self.aliasedRelation()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1140
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.JoinRelationContext(self, SqlBaseParser.RelationContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 1122
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1136
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [72]:
                        self.state = 1123
                        self.match(SqlBaseParser.CROSS)
                        self.state = 1124
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1125
                        localctx.right = self.aliasedRelation()
                        pass
                    elif token in [71, 74, 75, 76, 77]:
                        self.state = 1126
                        self.joinType()
                        self.state = 1127
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1128
                        localctx.rightRelation = self.relation(0)
                        self.state = 1129
                        self.joinCriteria()
                        pass
                    elif token in [78]:
                        self.state = 1131
                        self.match(SqlBaseParser.NATURAL)
                        self.state = 1132
                        self.joinType()
                        self.state = 1133
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1134
                        localctx.right = self.aliasedRelation()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1142
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 1158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 1143
                    self.match(SqlBaseParser.INNER)


                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1146
                self.match(SqlBaseParser.LEFT)
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1147
                    self.match(SqlBaseParser.OUTER)


                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1150
                self.match(SqlBaseParser.RIGHT)
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1151
                    self.match(SqlBaseParser.OUTER)


                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1154
                self.match(SqlBaseParser.FULL)
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1155
                    self.match(SqlBaseParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 1174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1160
                self.match(SqlBaseParser.ON)
                self.state = 1161
                self.booleanExpression(0)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1162
                self.match(SqlBaseParser.USING)
                self.state = 1163
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1164
                self.ident()
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 1165
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1166
                    self.ident()
                    self.state = 1171
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1172
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasedRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def aliasedColumns(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedColumnsContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_aliasedRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)




    def aliasedRelation(self):

        localctx = SqlBaseParser.AliasedRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_aliasedRelation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.relationPrimary()
            self.state = 1184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 1177
                    self.match(SqlBaseParser.AS)


                self.state = 1180
                self.ident()
                self.state = 1182
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 1181
                    self.aliasedColumns()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryRelation" ):
                listener.enterSubqueryRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryRelation" ):
                listener.exitSubqueryRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryRelation" ):
                return visitor.visitSubqueryRelation(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedRelation" ):
                listener.enterParenthesizedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedRelation" ):
                listener.exitParenthesizedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedRelation" ):
                return visitor.visitParenthesizedRelation(self)
            else:
                return visitor.visitChildren(self)


    class TableRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRelation" ):
                listener.enterTableRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRelation" ):
                listener.exitTableRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableRelation" ):
                return visitor.visitTableRelation(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_relationPrimary)
        try:
            self.state = 1195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1186
                self.table()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SubqueryRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1187
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1188
                self.query()
                self.state = 1189
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ParenthesizedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1191
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1192
                self.relation(0)
                self.state = 1193
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableWithPartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AssignmentContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableWithPartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableWithPartition" ):
                listener.enterTableWithPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableWithPartition" ):
                listener.exitTableWithPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableWithPartition" ):
                return visitor.visitTableWithPartition(self)
            else:
                return visitor.visitChildren(self)




    def tableWithPartition(self):

        localctx = SqlBaseParser.TableWithPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_tableWithPartition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.qname()
            self.state = 1210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 1198
                self.match(SqlBaseParser.PARTITION)
                self.state = 1199
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1200
                self.assignment()
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 1201
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1202
                    self.assignment()
                    self.state = 1207
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1208
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_table

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFunctionContext(TableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunction" ):
                listener.enterTableFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunction" ):
                listener.exitTableFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunction" ):
                return visitor.visitTableFunction(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(TableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)



    def table(self):

        localctx = SqlBaseParser.TableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_table)
        self._la = 0 # Token type
        try:
            self.state = 1227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1212
                self.qname()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.TableFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1213
                self.qname()
                self.state = 1214
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144809503226798) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -109963250886559) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -176289080147969) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -508343843490816929) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -2041819068675129345) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 127) != 0):
                    self.state = 1215
                    self.valueExpression(0)


                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 1218
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1219
                    self.valueExpression(0)
                    self.state = 1224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1225
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasedColumnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_aliasedColumns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedColumns" ):
                listener.enterAliasedColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedColumns" ):
                listener.exitAliasedColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedColumns" ):
                return visitor.visitAliasedColumns(self)
            else:
                return visitor.visitChildren(self)




    def aliasedColumns(self):

        localctx = SqlBaseParser.AliasedColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_aliasedColumns)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1230
            self.ident()
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 1231
                self.match(SqlBaseParser.COMMA)
                self.state = 1232
                self.ident()
                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1238
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith" ):
                listener.enterWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith" ):
                listener.exitWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith" ):
                return visitor.visitWith(self)
            else:
                return visitor.visitChildren(self)




    def with_(self):

        localctx = SqlBaseParser.WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_with)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.match(SqlBaseParser.WITH)
            self.state = 1241
            self.namedQuery()
            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 1242
                self.match(SqlBaseParser.COMMA)
                self.state = 1243
                self.namedQuery()
                self.state = 1248
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def aliasedColumns(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedColumnsContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            localctx.name = self.ident()
            self.state = 1251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==305:
                self.state = 1250
                self.aliasedColumns()


            self.state = 1253
            self.match(SqlBaseParser.AS)
            self.state = 1254
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1255
            self.query()
            self.state = 1256
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = SqlBaseParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class BooleanDefaultContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicated(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicatedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanDefault" ):
                listener.enterBooleanDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanDefault" ):
                listener.exitBooleanDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanDefault" ):
                return visitor.visitBooleanDefault(self)
            else:
                return visitor.visitChildren(self)


    class MatchContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.term = None # PrimaryExpressionContext
            self.matchType = None # IdentContext
            self.copyFrom(ctx)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def matchPredicateIdents(self):
            return self.getTypedRuleContext(SqlBaseParser.MatchPredicateIdentsContext,0)

        def COMMA(self):
            return self.getToken(SqlBaseParser.COMMA, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch" ):
                listener.enterMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch" ):
                listener.exitMatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch" ):
                return visitor.visitMatch(self)
            else:
                return visitor.visitChildren(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalBinary" ):
                return visitor.visitLogicalBinary(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 6, 10, 24, 27, 29, 30, 31, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 70, 75, 76, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 293, 294, 305, 307, 309, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326]:
                localctx = SqlBaseParser.BooleanDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1261
                self.predicated()
                pass
            elif token in [23]:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1262
                self.match(SqlBaseParser.NOT)
                self.state = 1263
                self.booleanExpression(4)
                pass
            elif token in [243]:
                localctx = SqlBaseParser.MatchContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1264
                self.match(SqlBaseParser.MATCH)
                self.state = 1265
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1266
                self.matchPredicateIdents()
                self.state = 1267
                self.match(SqlBaseParser.COMMA)
                self.state = 1268
                localctx.term = self.primaryExpression(0)
                self.state = 1269
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 1275
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 1270
                    self.match(SqlBaseParser.USING)
                    self.state = 1271
                    localctx.matchType = self.ident()
                    self.state = 1273
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 1272
                        self.withProperties()




                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1287
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1285
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1279
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1280
                        localctx.operator = self.match(SqlBaseParser.AND)
                        self.state = 1281
                        localctx.right = self.booleanExpression(4)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1282
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1283
                        localctx.operator = self.match(SqlBaseParser.OR)
                        self.state = 1284
                        localctx.right = self.booleanExpression(3)
                        pass

             
                self.state = 1289
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._valueExpression = None # ValueExpressionContext

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)




    def predicated(self):

        localctx = SqlBaseParser.PredicatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_predicated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            localctx._valueExpression = self.valueExpression(0)
            self.state = 1292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1291
                self.predicate(localctx._valueExpression)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, value:ParserRuleContext=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None
            self.value = value


        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)
            self.value = ctx.value



    class ComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def cmpOp(self):
            return self.getTypedRuleContext(SqlBaseParser.CmpOpContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class LikeContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.pattern = None # ValueExpressionContext
            self.escape = None # ParameterOrLiteralContext
            self.copyFrom(ctx)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)
        def parameterOrLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike" ):
                listener.enterLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike" ):
                listener.exitLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike" ):
                return visitor.visitLike(self)
            else:
                return visitor.visitChildren(self)


    class InSubqueryContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def subqueryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.SubqueryExpressionContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSubquery" ):
                listener.enterInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSubquery" ):
                listener.exitInSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInSubquery" ):
                return visitor.visitInSubquery(self)
            else:
                return visitor.visitChildren(self)


    class DistinctFromContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctFrom" ):
                listener.enterDistinctFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctFrom" ):
                listener.exitDistinctFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistinctFrom" ):
                return visitor.visitDistinctFrom(self)
            else:
                return visitor.visitChildren(self)


    class InListContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInList" ):
                listener.enterInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInList" ):
                listener.exitInList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInList" ):
                return visitor.visitInList(self)
            else:
                return visitor.visitChildren(self)


    class ArrayLikeContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.quant = None # SetCmpQuantifierContext
            self.v = None # ValueExpressionContext
            self.escape = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)
        def setCmpQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetCmpQuantifierContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLike" ):
                listener.enterArrayLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLike" ):
                listener.exitArrayLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLike" ):
                return visitor.visitArrayLike(self)
            else:
                return visitor.visitChildren(self)


    class NullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullPredicate" ):
                listener.enterNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullPredicate" ):
                listener.exitNullPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullPredicate" ):
                return visitor.visitNullPredicate(self)
            else:
                return visitor.visitChildren(self)


    class BetweenContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween" ):
                return visitor.visitBetween(self)
            else:
                return visitor.visitChildren(self)


    class QuantifiedComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cmpOp(self):
            return self.getTypedRuleContext(SqlBaseParser.CmpOpContext,0)

        def setCmpQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetCmpQuantifierContext,0)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedComparison" ):
                listener.enterQuantifiedComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedComparison" ):
                listener.exitQuantifiedComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantifiedComparison" ):
                return visitor.visitQuantifiedComparison(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self, value:ParserRuleContext):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state, value)
        self.enterRule(localctx, 64, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 1362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1294
                self.cmpOp()
                self.state = 1295
                localctx.right = self.valueExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.QuantifiedComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1297
                self.cmpOp()
                self.state = 1298
                self.setCmpQuantifier()
                self.state = 1299
                self.primaryExpression(0)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.BetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1301
                    self.match(SqlBaseParser.NOT)


                self.state = 1304
                self.match(SqlBaseParser.BETWEEN)
                self.state = 1305
                localctx.lower = self.valueExpression(0)
                self.state = 1306
                self.match(SqlBaseParser.AND)
                self.state = 1307
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1309
                    self.match(SqlBaseParser.NOT)


                self.state = 1312
                self.match(SqlBaseParser.IN)
                self.state = 1313
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1314
                self.expr()
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 1315
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1316
                    self.expr()
                    self.state = 1321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1322
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.InSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1324
                    self.match(SqlBaseParser.NOT)


                self.state = 1327
                self.match(SqlBaseParser.IN)
                self.state = 1328
                self.subqueryExpression()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.LikeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1329
                    self.match(SqlBaseParser.NOT)


                self.state = 1332
                _la = self._input.LA(1)
                if not(_la==26 or _la==27):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1333
                localctx.pattern = self.valueExpression(0)
                self.state = 1336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1334
                    self.match(SqlBaseParser.ESCAPE)
                    self.state = 1335
                    localctx.escape = self.parameterOrLiteral()


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.ArrayLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1338
                    self.match(SqlBaseParser.NOT)


                self.state = 1341
                _la = self._input.LA(1)
                if not(_la==26 or _la==27):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1342
                localctx.quant = self.setCmpQuantifier()
                self.state = 1343
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1344
                localctx.v = self.valueExpression(0)
                self.state = 1345
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 1348
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1346
                    self.match(SqlBaseParser.ESCAPE)
                    self.state = 1347
                    localctx.escape = self.valueExpression(0)


                pass

            elif la_ == 8:
                localctx = SqlBaseParser.NullPredicateContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1350
                self.match(SqlBaseParser.IS)
                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1351
                    self.match(SqlBaseParser.NOT)


                self.state = 1354
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.DistinctFromContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1355
                self.match(SqlBaseParser.IS)
                self.state = 1357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1356
                    self.match(SqlBaseParser.NOT)


                self.state = 1359
                self.match(SqlBaseParser.DISTINCT)
                self.state = 1360
                self.match(SqlBaseParser.FROM)
                self.state = 1361
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class BitwiseBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def BITWISE_AND(self):
            return self.getToken(SqlBaseParser.BITWISE_AND, 0)
        def BITWISE_OR(self):
            return self.getToken(SqlBaseParser.BITWISE_OR, 0)
        def BITWISE_XOR(self):
            return self.getToken(SqlBaseParser.BITWISE_XOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseBinary" ):
                listener.enterBitwiseBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseBinary" ):
                listener.exitBitwiseBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseBinary" ):
                return visitor.visitBitwiseBinary(self)
            else:
                return visitor.visitChildren(self)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ConcatenationContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def CONCAT(self):
            return self.getToken(SqlBaseParser.CONCAT, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation" ):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)


    class FromStringLiteralCastContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStringLiteralCast" ):
                listener.enterFromStringLiteralCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStringLiteralCast" ):
                listener.exitFromStringLiteralCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStringLiteralCast" ):
                return visitor.visitFromStringLiteralCast(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def CARET(self):
            return self.getToken(SqlBaseParser.CARET, 0)
        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1365
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1366
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==293 or _la==294):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1367
                self.valueExpression(7)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.FromStringLiteralCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1368
                self.dataType(0)
                self.state = 1369
                self.stringLiteral()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1390
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1388
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1373
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1374
                        localctx.operator = self.match(SqlBaseParser.CARET)
                        self.state = 1375
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1376
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1377
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 295)) & ~0x3f) == 0 and ((1 << (_la - 295)) & 13) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1378
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1379
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1380
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==293 or _la==294):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1381
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.BitwiseBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1382
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1383
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & 7) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1384
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = SqlBaseParser.ConcatenationContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1385
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1386
                        self.match(SqlBaseParser.CONCAT)
                        self.state = 1387
                        localctx.right = self.valueExpression(3)
                        pass

             
                self.state = 1392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SubqueryExpressionDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subqueryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.SubqueryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpressionDefault" ):
                listener.enterSubqueryExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpressionDefault" ):
                listener.exitSubqueryExpressionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpressionDefault" ):
                return visitor.visitSubqueryExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class AtTimezoneContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.timestamp = None # PrimaryExpressionContext
            self.zone = None # PrimaryExpressionContext
            self.copyFrom(ctx)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)
        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtTimezone" ):
                listener.enterAtTimezone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtTimezone" ):
                listener.exitAtTimezone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtTimezone" ):
                return visitor.visitAtTimezone(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OPEN_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_SQUARE_BRACKET, 0)
        def CLOSE_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_SQUARE_BRACKET, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class RecordSubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentContext
            self.copyFrom(ctx)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordSubscript" ):
                listener.enterRecordSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordSubscript" ):
                listener.exitRecordSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordSubscript" ):
                return visitor.visitRecordSubscript(self)
            else:
                return visitor.visitChildren(self)


    class ExplicitFunctionDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def explicitFunction(self):
            return self.getTypedRuleContext(SqlBaseParser.ExplicitFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitFunctionDefault" ):
                listener.enterExplicitFunctionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitFunctionDefault" ):
                listener.exitExplicitFunctionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitFunctionDefault" ):
                return visitor.visitExplicitFunctionDefault(self)
            else:
                return visitor.visitChildren(self)


    class DoubleColonCastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def CAST_OPERATOR(self):
            return self.getToken(SqlBaseParser.CAST_OPERATOR, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleColonCast" ):
                listener.enterDoubleColonCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleColonCast" ):
                listener.exitDoubleColonCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleColonCast" ):
                return visitor.visitDoubleColonCast(self)
            else:
                return visitor.visitChildren(self)


    class DefaultParamOrLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterOrLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultParamOrLiteral" ):
                listener.enterDefaultParamOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultParamOrLiteral" ):
                listener.exitDefaultParamOrLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultParamOrLiteral" ):
                return visitor.visitDefaultParamOrLiteral(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def filter_(self):
            return self.getTypedRuleContext(SqlBaseParser.FilterContext,0)

        def over(self):
            return self.getTypedRuleContext(SqlBaseParser.OverContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)
        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)
        def setQuant(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class NestedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpression" ):
                listener.enterNestedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpression" ):
                listener.exitNestedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedExpression" ):
                return visitor.visitNestedExpression(self)
            else:
                return visitor.visitChildren(self)


    class ArraySliceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.from_ = None # ValueExpressionContext
            self.to = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OPEN_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_SQUARE_BRACKET, 0)
        def COLON(self):
            return self.getToken(SqlBaseParser.COLON, 0)
        def CLOSE_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_SQUARE_BRACKET, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArraySlice" ):
                listener.enterArraySlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArraySlice" ):
                listener.exitArraySlice(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArraySlice" ):
                return visitor.visitArraySlice(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class EmptyArrayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EMPTY_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.EMPTY_SQUARE_BRACKET, 0)
        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyArray" ):
                listener.enterEmptyArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyArray" ):
                listener.exitEmptyArray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyArray" ):
                return visitor.visitEmptyArray(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DefaultParamOrLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1394
                self.parameterOrLiteral()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ExplicitFunctionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1395
                self.explicitFunction()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1396
                self.qname()
                self.state = 1397
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1398
                self.match(SqlBaseParser.ASTERISK)
                self.state = 1399
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 1401
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1400
                    self.filter_()


                self.state = 1404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1403
                    self.over()


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1406
                self.ident()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1407
                self.qname()
                self.state = 1408
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144809494833966) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -109963250886559) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -176289080147969) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -506092043677131681) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -2041819068675129345) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 127) != 0):
                    self.state = 1410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==7 or _la==12:
                        self.state = 1409
                        self.setQuant()


                    self.state = 1412
                    self.expr()
                    self.state = 1417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==303:
                        self.state = 1413
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1414
                        self.expr()
                        self.state = 1419
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1422
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 1424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1423
                    self.filter_()


                self.state = 1428
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1426
                    _la = self._input.LA(1)
                    if not(_la==32 or _la==33):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1427
                    self.match(SqlBaseParser.NULLS)


                self.state = 1431
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1430
                    self.over()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.SubqueryExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1433
                self.subqueryExpression()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.RecordSubscriptContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1434
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1435
                localctx.base = self.primaryExpression(0)
                self.state = 1436
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 1437
                self.match(SqlBaseParser.DOT)
                self.state = 1438
                localctx.fieldName = self.ident()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.NestedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1440
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1441
                self.expr()
                self.state = 1442
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1444
                self.match(SqlBaseParser.EXISTS)
                self.state = 1445
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1446
                self.query()
                self.state = 1447
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.DereferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1449
                self.ident()
                self.state = 1454
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,183,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1450
                        self.match(SqlBaseParser.DOT)
                        self.state = 1451
                        self.ident() 
                    self.state = 1456
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,183,self._ctx)

                pass

            elif la_ == 11:
                localctx = SqlBaseParser.EmptyArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==233:
                    self.state = 1457
                    self.match(SqlBaseParser.ARRAY)


                self.state = 1460
                self.match(SqlBaseParser.EMPTY_SQUARE_BRACKET)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1488
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1486
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.AtTimezoneContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.timestamp = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1463
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1464
                        self.match(SqlBaseParser.AT)
                        self.state = 1465
                        self.match(SqlBaseParser.TIME)
                        self.state = 1466
                        self.match(SqlBaseParser.ZONE)
                        self.state = 1467
                        localctx.zone = self.primaryExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1468
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1469
                        self.match(SqlBaseParser.OPEN_SQUARE_BRACKET)
                        self.state = 1470
                        localctx.index = self.valueExpression(0)
                        self.state = 1471
                        self.match(SqlBaseParser.CLOSE_SQUARE_BRACKET)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ArraySliceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1473
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1474
                        self.match(SqlBaseParser.OPEN_SQUARE_BRACKET)
                        self.state = 1476
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144809503226798) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -109963250886559) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -176289080147969) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -508343843490816929) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -2041819068675129345) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 127) != 0):
                            self.state = 1475
                            localctx.from_ = self.valueExpression(0)


                        self.state = 1478
                        self.match(SqlBaseParser.COLON)
                        self.state = 1480
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144809503226798) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -109963250886559) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -176289080147969) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -508343843490816929) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -2041819068675129345) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 127) != 0):
                            self.state = 1479
                            localctx.to = self.valueExpression(0)


                        self.state = 1482
                        self.match(SqlBaseParser.CLOSE_SQUARE_BRACKET)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.DoubleColonCastContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1483
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1484
                        self.match(SqlBaseParser.CAST_OPERATOR)
                        self.state = 1485
                        self.dataType(0)
                        pass

             
                self.state = 1490
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExplicitFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_explicitFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleCaseContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.operand = None # ExprContext
            self.elseExpr = None # ExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class IfCaseContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.condition = None # ExprContext
            self.trueValue = None # ExprContext
            self.falseValue = None # ExprContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfCase" ):
                listener.enterIfCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfCase" ):
                listener.exitIfCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfCase" ):
                return visitor.visitIfCase(self)
            else:
                return visitor.visitChildren(self)


    class SpecialDateTimeFunctionContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.name = None # Token
            self.precision = None # IntegerLiteralContext
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(SqlBaseParser.CURRENT_TIME, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def integerLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.IntegerLiteralContext,0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialDateTimeFunction" ):
                listener.enterSpecialDateTimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialDateTimeFunction" ):
                listener.exitSpecialDateTimeFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialDateTimeFunction" ):
                return visitor.visitSpecialDateTimeFunction(self)
            else:
                return visitor.visitChildren(self)


    class SessionUserContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SESSION_USER(self):
            return self.getToken(SqlBaseParser.SESSION_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionUser" ):
                listener.enterSessionUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionUser" ):
                listener.exitSessionUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSessionUser" ):
                return visitor.visitSessionUser(self)
            else:
                return visitor.visitChildren(self)


    class ArraySubqueryContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def subqueryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.SubqueryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArraySubquery" ):
                listener.enterArraySubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArraySubquery" ):
                listener.exitArraySubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArraySubquery" ):
                return visitor.visitArraySubquery(self)
            else:
                return visitor.visitChildren(self)


    class RightContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.strOrColName = None # ExprContext
            self.len_ = None # ExprContext
            self.copyFrom(ctx)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def COMMA(self):
            return self.getToken(SqlBaseParser.COMMA, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight" ):
                listener.enterRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight" ):
                listener.exitRight(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRight" ):
                return visitor.visitRight(self)
            else:
                return visitor.visitChildren(self)


    class SubstringContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstring" ):
                return visitor.visitSubstring(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class CurrentUserContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)
        def CURRENT_ROLE(self):
            return self.getToken(SqlBaseParser.CURRENT_ROLE, 0)
        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUser" ):
                listener.enterCurrentUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUser" ):
                listener.exitCurrentUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentUser" ):
                return visitor.visitCurrentUser(self)
            else:
                return visitor.visitChildren(self)


    class ExtractContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def stringLiteralOrIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralOrIdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract" ):
                return visitor.visitExtract(self)
            else:
                return visitor.visitChildren(self)


    class TrimContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.trimMode = None # Token
            self.charsToTrim = None # ExprContext
            self.target = None # ExprContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)
        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim" ):
                listener.enterTrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim" ):
                listener.exitTrim(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrim" ):
                return visitor.visitTrim(self)
            else:
                return visitor.visitChildren(self)


    class LeftContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.strOrColName = None # ExprContext
            self.len_ = None # ExprContext
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def COMMA(self):
            return self.getToken(SqlBaseParser.COMMA, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeft" ):
                listener.enterLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeft" ):
                listener.exitLeft(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeft" ):
                return visitor.visitLeft(self)
            else:
                return visitor.visitChildren(self)


    class CurrentSchemaContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_SCHEMA(self):
            return self.getToken(SqlBaseParser.CURRENT_SCHEMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentSchema" ):
                listener.enterCurrentSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentSchema" ):
                listener.exitCurrentSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentSchema" ):
                return visitor.visitCurrentSchema(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.elseExpr = None # ExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)



    def explicitFunction(self):

        localctx = SqlBaseParser.ExplicitFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_explicitFunction)
        self._la = 0 # Token type
        try:
            self.state = 1607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1491
                localctx.name = self.match(SqlBaseParser.CURRENT_DATE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1492
                localctx.name = self.match(SqlBaseParser.CURRENT_TIME)
                self.state = 1497
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1493
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 1494
                    localctx.precision = self.integerLiteral()
                    self.state = 1495
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1499
                localctx.name = self.match(SqlBaseParser.CURRENT_TIMESTAMP)
                self.state = 1504
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1500
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 1501
                    localctx.precision = self.integerLiteral()
                    self.state = 1502
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CurrentSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1506
                self.match(SqlBaseParser.CURRENT_SCHEMA)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.CurrentUserContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1507
                _la = self._input.LA(1)
                if not(_la==60 or _la==61 or _la==246):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.SessionUserContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1508
                self.match(SqlBaseParser.SESSION_USER)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.LeftContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1509
                self.match(SqlBaseParser.LEFT)
                self.state = 1510
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1511
                localctx.strOrColName = self.expr()
                self.state = 1512
                self.match(SqlBaseParser.COMMA)
                self.state = 1513
                localctx.len_ = self.expr()
                self.state = 1514
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.RightContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1516
                self.match(SqlBaseParser.RIGHT)
                self.state = 1517
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1518
                localctx.strOrColName = self.expr()
                self.state = 1519
                self.match(SqlBaseParser.COMMA)
                self.state = 1520
                localctx.len_ = self.expr()
                self.state = 1521
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.SubstringContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1523
                self.match(SqlBaseParser.SUBSTRING)
                self.state = 1524
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1525
                self.expr()
                self.state = 1526
                self.match(SqlBaseParser.FROM)
                self.state = 1527
                self.expr()
                self.state = 1530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 1528
                    self.match(SqlBaseParser.FOR)
                    self.state = 1529
                    self.expr()


                self.state = 1532
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.TrimContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1534
                self.match(SqlBaseParser.TRIM)
                self.state = 1535
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1543
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1537
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                    if la_ == 1:
                        self.state = 1536
                        localctx.trimMode = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 123145302310912) != 0)):
                            localctx.trimMode = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144809494838190) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -109963250886559) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -176289080147969) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -506092043677131681) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -2041819068675129345) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 127) != 0):
                        self.state = 1539
                        localctx.charsToTrim = self.expr()


                    self.state = 1542
                    self.match(SqlBaseParser.FROM)


                self.state = 1545
                localctx.target = self.expr()
                self.state = 1546
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.ExtractContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1548
                self.match(SqlBaseParser.EXTRACT)
                self.state = 1549
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1550
                self.stringLiteralOrIdentifier()
                self.state = 1551
                self.match(SqlBaseParser.FROM)
                self.state = 1552
                self.expr()
                self.state = 1553
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1555
                self.match(SqlBaseParser.CAST)
                self.state = 1556
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1557
                self.expr()
                self.state = 1558
                self.match(SqlBaseParser.AS)
                self.state = 1559
                self.dataType(0)
                self.state = 1560
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1562
                self.match(SqlBaseParser.TRY_CAST)
                self.state = 1563
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1564
                self.expr()
                self.state = 1565
                self.match(SqlBaseParser.AS)
                self.state = 1566
                self.dataType(0)
                self.state = 1567
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1569
                self.match(SqlBaseParser.CASE)
                self.state = 1570
                localctx.operand = self.expr()
                self.state = 1572 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1571
                    self.whenClause()
                    self.state = 1574 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==65):
                        break

                self.state = 1578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 1576
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1577
                    localctx.elseExpr = self.expr()


                self.state = 1580
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 15:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1582
                self.match(SqlBaseParser.CASE)
                self.state = 1584 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1583
                    self.whenClause()
                    self.state = 1586 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==65):
                        break

                self.state = 1590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 1588
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1589
                    localctx.elseExpr = self.expr()


                self.state = 1592
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.IfCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1594
                self.match(SqlBaseParser.IF)
                self.state = 1595
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1596
                localctx.condition = self.expr()
                self.state = 1597
                self.match(SqlBaseParser.COMMA)
                self.state = 1598
                localctx.trueValue = self.expr()
                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 1599
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1600
                    localctx.falseValue = self.expr()


                self.state = 1603
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.ArraySubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1605
                self.match(SqlBaseParser.ARRAY)
                self.state = 1606
                self.subqueryExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_subqueryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)




    def subqueryExpression(self):

        localctx = SqlBaseParser.SubqueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_subqueryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1609
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1610
            self.query()
            self.state = 1611
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterOrLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_parameterOrLiteral

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ObjectLiteralContext(ParameterOrLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrLiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_CURLY_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_CURLY_BRACKET, 0)
        def CLOSE_CURLY_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_CURLY_BRACKET, 0)
        def objectKeyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ObjectKeyValueContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ObjectKeyValueContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteral" ):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteral" ):
                listener.exitObjectLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectLiteral" ):
                return visitor.visitObjectLiteral(self)
            else:
                return visitor.visitChildren(self)


    class SimpleLiteralContext(ParameterOrLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrLiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterOrSimpleLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrSimpleLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleLiteral" ):
                listener.enterSimpleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleLiteral" ):
                listener.exitSimpleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleLiteral" ):
                return visitor.visitSimpleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ArrayLiteralContext(ParameterOrLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrLiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_SQUARE_BRACKET, 0)
        def CLOSE_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_SQUARE_BRACKET, 0)
        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)



    def parameterOrLiteral(self):

        localctx = SqlBaseParser.ParameterOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_parameterOrLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29, 30, 31, 70, 312, 313, 317, 318, 319, 320, 321, 326]:
                localctx = SqlBaseParser.SimpleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1613
                self.parameterOrSimpleLiteral()
                pass
            elif token in [233, 309]:
                localctx = SqlBaseParser.ArrayLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==233:
                    self.state = 1614
                    self.match(SqlBaseParser.ARRAY)


                self.state = 1617
                self.match(SqlBaseParser.OPEN_SQUARE_BRACKET)
                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144809494838190) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -109963250886559) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -176289080147969) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -506092043677131681) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -2041819068675129345) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 127) != 0):
                    self.state = 1618
                    self.expr()
                    self.state = 1623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==303:
                        self.state = 1619
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1620
                        self.expr()
                        self.state = 1625
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1628
                self.match(SqlBaseParser.CLOSE_SQUARE_BRACKET)
                pass
            elif token in [307]:
                localctx = SqlBaseParser.ObjectLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1629
                self.match(SqlBaseParser.OPEN_CURLY_BRACKET)
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152776691328746578) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -1718175795199) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & -4612531820615958531) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -514023868187065) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1080863910568984575) != 0):
                    self.state = 1630
                    self.objectKeyValue()
                    self.state = 1635
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==303:
                        self.state = 1631
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1632
                        self.objectKeyValue()
                        self.state = 1637
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1640
                self.match(SqlBaseParser.CLOSE_CURLY_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterOrSimpleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nullLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.NullLiteralContext,0)


        def intervalLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalLiteralContext,0)


        def escapedCharsStringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.EscapedCharsStringLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def numericLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.NumericLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanLiteralContext,0)


        def bitString(self):
            return self.getTypedRuleContext(SqlBaseParser.BitStringContext,0)


        def parameterExpr(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterExprContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_parameterOrSimpleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterOrSimpleLiteral" ):
                listener.enterParameterOrSimpleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterOrSimpleLiteral" ):
                listener.exitParameterOrSimpleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterOrSimpleLiteral" ):
                return visitor.visitParameterOrSimpleLiteral(self)
            else:
                return visitor.visitChildren(self)




    def parameterOrSimpleLiteral(self):

        localctx = SqlBaseParser.ParameterOrSimpleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_parameterOrSimpleLiteral)
        try:
            self.state = 1651
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1643
                self.nullLiteral()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1644
                self.intervalLiteral()
                pass
            elif token in [318]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1645
                self.escapedCharsStringLiteral()
                pass
            elif token in [317, 326]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1646
                self.stringLiteral()
                pass
            elif token in [320, 321]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1647
                self.numericLiteral()
                pass
            elif token in [30, 31]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1648
                self.booleanLiteral()
                pass
            elif token in [319]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1649
                self.bitString()
                pass
            elif token in [312, 313]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1650
                self.parameterExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterOrIntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_parameterOrInteger

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IntegerParamOrLiteralCastContext(ParameterOrIntegerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrIntegerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerParamOrLiteralCast" ):
                listener.enterIntegerParamOrLiteralCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerParamOrLiteralCast" ):
                listener.exitIntegerParamOrLiteralCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerParamOrLiteralCast" ):
                return visitor.visitIntegerParamOrLiteralCast(self)
            else:
                return visitor.visitChildren(self)


    class IntegerParamOrLiteralDoubleColonCastContext(ParameterOrIntegerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrIntegerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterOrLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrLiteralContext,0)

        def CAST_OPERATOR(self):
            return self.getToken(SqlBaseParser.CAST_OPERATOR, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerParamOrLiteralDoubleColonCast" ):
                listener.enterIntegerParamOrLiteralDoubleColonCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerParamOrLiteralDoubleColonCast" ):
                listener.exitIntegerParamOrLiteralDoubleColonCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerParamOrLiteralDoubleColonCast" ):
                return visitor.visitIntegerParamOrLiteralDoubleColonCast(self)
            else:
                return visitor.visitChildren(self)


    class NullAsLiteralContext(ParameterOrIntegerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrIntegerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nullLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.NullLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullAsLiteral" ):
                listener.enterNullAsLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullAsLiteral" ):
                listener.exitNullAsLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullAsLiteral" ):
                return visitor.visitNullAsLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ParameterExpressionContext(ParameterOrIntegerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrIntegerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterExpr(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterExpression" ):
                listener.enterParameterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterExpression" ):
                listener.exitParameterExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterExpression" ):
                return visitor.visitParameterExpression(self)
            else:
                return visitor.visitChildren(self)


    class IntAsLiteralContext(ParameterOrIntegerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrIntegerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def integerLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.IntegerLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntAsLiteral" ):
                listener.enterIntAsLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntAsLiteral" ):
                listener.exitIntAsLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntAsLiteral" ):
                return visitor.visitIntAsLiteral(self)
            else:
                return visitor.visitChildren(self)



    def parameterOrInteger(self):

        localctx = SqlBaseParser.ParameterOrIntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_parameterOrInteger)
        try:
            self.state = 1674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ParameterExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1653
                self.parameterExpr()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntAsLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1654
                self.integerLiteral()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.NullAsLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1655
                self.nullLiteral()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.IntegerParamOrLiteralDoubleColonCastContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1656
                self.parameterOrLiteral()
                self.state = 1657
                self.match(SqlBaseParser.CAST_OPERATOR)
                self.state = 1658
                self.dataType(0)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.IntegerParamOrLiteralCastContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1660
                self.match(SqlBaseParser.CAST)
                self.state = 1661
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1662
                self.expr()
                self.state = 1663
                self.match(SqlBaseParser.AS)
                self.state = 1664
                self.dataType(0)
                self.state = 1665
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.IntegerParamOrLiteralCastContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1667
                self.match(SqlBaseParser.TRY_CAST)
                self.state = 1668
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1669
                self.expr()
                self.state = 1670
                self.match(SqlBaseParser.AS)
                self.state = 1671
                self.dataType(0)
                self.state = 1672
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterOrIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterExpr(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterExprContext,0)


        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_parameterOrIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterOrIdent" ):
                listener.enterParameterOrIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterOrIdent" ):
                listener.exitParameterOrIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterOrIdent" ):
                return visitor.visitParameterOrIdent(self)
            else:
                return visitor.visitChildren(self)




    def parameterOrIdent(self):

        localctx = SqlBaseParser.ParameterOrIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_parameterOrIdent)
        try:
            self.state = 1678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [312, 313]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1676
                self.parameterExpr()
                pass
            elif token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 322, 323, 324, 325]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1677
                self.ident()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterOrStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterExpr(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterExprContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_parameterOrString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterOrString" ):
                listener.enterParameterOrString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterOrString" ):
                listener.exitParameterOrString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterOrString" ):
                return visitor.visitParameterOrString(self)
            else:
                return visitor.visitChildren(self)




    def parameterOrString(self):

        localctx = SqlBaseParser.ParameterOrStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_parameterOrString)
        try:
            self.state = 1682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [312, 313]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1680
                self.parameterExpr()
                pass
            elif token in [317, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1681
                self.stringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_parameterExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ParameterPlaceholderContext(ParameterExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUESTION(self):
            return self.getToken(SqlBaseParser.QUESTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterPlaceholder" ):
                listener.enterParameterPlaceholder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterPlaceholder" ):
                listener.exitParameterPlaceholder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterPlaceholder" ):
                return visitor.visitParameterPlaceholder(self)
            else:
                return visitor.visitChildren(self)


    class PositionalParameterContext(ParameterExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOLLAR(self):
            return self.getToken(SqlBaseParser.DOLLAR, 0)
        def integerLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.IntegerLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalParameter" ):
                listener.enterPositionalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalParameter" ):
                listener.exitPositionalParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalParameter" ):
                return visitor.visitPositionalParameter(self)
            else:
                return visitor.visitChildren(self)



    def parameterExpr(self):

        localctx = SqlBaseParser.ParameterExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_parameterExpr)
        try:
            self.state = 1687
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [313]:
                localctx = SqlBaseParser.PositionalParameterContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1684
                self.match(SqlBaseParser.DOLLAR)
                self.state = 1685
                self.integerLiteral()
                pass
            elif token in [312]:
                localctx = SqlBaseParser.ParameterPlaceholderContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1686
                self.match(SqlBaseParser.QUESTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nullLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)




    def nullLiteral(self):

        localctx = SqlBaseParser.NullLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_nullLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1689
            self.match(SqlBaseParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EscapedCharsStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPED_STRING(self):
            return self.getToken(SqlBaseParser.ESCAPED_STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_escapedCharsStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscapedCharsStringLiteral" ):
                listener.enterEscapedCharsStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscapedCharsStringLiteral" ):
                listener.exitEscapedCharsStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEscapedCharsStringLiteral" ):
                return visitor.visitEscapedCharsStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def escapedCharsStringLiteral(self):

        localctx = SqlBaseParser.EscapedCharsStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_escapedCharsStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            self.match(SqlBaseParser.ESCAPED_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DollarQuotedStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_DOLLAR_QUOTED_STRING(self):
            return self.getToken(SqlBaseParser.BEGIN_DOLLAR_QUOTED_STRING, 0)

        def END_DOLLAR_QUOTED_STRING(self):
            return self.getToken(SqlBaseParser.END_DOLLAR_QUOTED_STRING, 0)

        def DOLLAR_QUOTED_STRING_BODY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOLLAR_QUOTED_STRING_BODY)
            else:
                return self.getToken(SqlBaseParser.DOLLAR_QUOTED_STRING_BODY, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_dollarQuotedStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollarQuotedStringLiteral" ):
                listener.enterDollarQuotedStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollarQuotedStringLiteral" ):
                listener.exitDollarQuotedStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDollarQuotedStringLiteral" ):
                return visitor.visitDollarQuotedStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def dollarQuotedStringLiteral(self):

        localctx = SqlBaseParser.DollarQuotedStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_dollarQuotedStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1693
            self.match(SqlBaseParser.BEGIN_DOLLAR_QUOTED_STRING)
            self.state = 1697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==330:
                self.state = 1694
                self.match(SqlBaseParser.DOLLAR_QUOTED_STRING_BODY)
                self.state = 1699
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1700
            self.match(SqlBaseParser.END_DOLLAR_QUOTED_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def dollarQuotedStringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.DollarQuotedStringLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = SqlBaseParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_stringLiteral)
        try:
            self.state = 1704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [317]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1702
                self.match(SqlBaseParser.STRING)
                pass
            elif token in [326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1703
                self.dollarQuotedStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT_STRING(self):
            return self.getToken(SqlBaseParser.BIT_STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_bitString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitString" ):
                listener.enterBitString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitString" ):
                listener.exitBitString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitString" ):
                return visitor.visitBitString(self)
            else:
                return visitor.visitChildren(self)




    def bitString(self):

        localctx = SqlBaseParser.BitStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_bitString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.match(SqlBaseParser.BIT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptSafeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # SubscriptSafeContext
            self.index = None # ValueExpressionContext

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def OPEN_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_SQUARE_BRACKET, 0)

        def CLOSE_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_SQUARE_BRACKET, 0)

        def subscriptSafe(self):
            return self.getTypedRuleContext(SqlBaseParser.SubscriptSafeContext,0)


        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_subscriptSafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptSafe" ):
                listener.enterSubscriptSafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptSafe" ):
                listener.exitSubscriptSafe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptSafe" ):
                return visitor.visitSubscriptSafe(self)
            else:
                return visitor.visitChildren(self)



    def subscriptSafe(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.SubscriptSafeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_subscriptSafe, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.qname()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1718
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.SubscriptSafeContext(self, _parentctx, _parentState)
                    localctx.value = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_subscriptSafe)
                    self.state = 1711
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1712
                    self.match(SqlBaseParser.OPEN_SQUARE_BRACKET)
                    self.state = 1713
                    localctx.index = self.valueExpression(0)
                    self.state = 1714
                    self.match(SqlBaseParser.CLOSE_SQUARE_BRACKET) 
                self.state = 1720
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CmpOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def LLT(self):
            return self.getToken(SqlBaseParser.LLT, 0)

        def REGEX_MATCH(self):
            return self.getToken(SqlBaseParser.REGEX_MATCH, 0)

        def REGEX_NO_MATCH(self):
            return self.getToken(SqlBaseParser.REGEX_NO_MATCH, 0)

        def REGEX_MATCH_CI(self):
            return self.getToken(SqlBaseParser.REGEX_MATCH_CI, 0)

        def REGEX_NO_MATCH_CI(self):
            return self.getToken(SqlBaseParser.REGEX_NO_MATCH_CI, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_cmpOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpOp" ):
                listener.enterCmpOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpOp" ):
                listener.exitCmpOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCmpOp" ):
                return visitor.visitCmpOp(self)
            else:
                return visitor.visitChildren(self)




    def cmpOp(self):

        localctx = SqlBaseParser.CmpOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_cmpOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1721
            _la = self._input.LA(1)
            if not(((((_la - 282)) & ~0x3f) == 0 and ((1 << (_la - 282)) & 2047) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetCmpQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setCmpQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCmpQuantifier" ):
                listener.enterSetCmpQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCmpQuantifier" ):
                listener.exitSetCmpQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetCmpQuantifier" ):
                return visitor.visitSetCmpQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setCmpQuantifier(self):

        localctx = SqlBaseParser.SetCmpQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_setCmpQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 896) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExprContext
            self.result = None # ExprContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1725
            self.match(SqlBaseParser.WHEN)
            self.state = 1726
            localctx.condition = self.expr()
            self.state = 1727
            self.match(SqlBaseParser.THEN)
            self.state = 1728
            localctx.result = self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowDefinitionContext,0)


        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedWindow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedWindow" ):
                listener.enterNamedWindow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedWindow" ):
                listener.exitNamedWindow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedWindow" ):
                return visitor.visitNamedWindow(self)
            else:
                return visitor.visitChildren(self)




    def namedWindow(self):

        localctx = SqlBaseParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            localctx.name = self.ident()
            self.state = 1731
            self.match(SqlBaseParser.AS)
            self.state = 1732
            self.windowDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def windowDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowDefinitionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_over

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver" ):
                listener.enterOver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver" ):
                listener.exitOver(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver" ):
                return visitor.visitOver(self)
            else:
                return visitor.visitChildren(self)




    def over(self):

        localctx = SqlBaseParser.OverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_over)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            self.match(SqlBaseParser.OVER)
            self.state = 1735
            self.windowDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.windowRef = None # IdentContext
            self._expr = None # ExprContext
            self.partition = list() # of ExprContexts

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDefinition" ):
                listener.enterWindowDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDefinition" ):
                listener.exitWindowDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDefinition" ):
                return visitor.visitWindowDefinition(self)
            else:
                return visitor.visitChildren(self)




    def windowDefinition(self):

        localctx = SqlBaseParser.WindowDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_windowDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1770
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 322, 323, 324, 325]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1737
                localctx.windowRef = self.ident()
                pass
            elif token in [305]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1738
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1740
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                if la_ == 1:
                    self.state = 1739
                    localctx.windowRef = self.ident()


                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 1742
                    self.match(SqlBaseParser.PARTITION)
                    self.state = 1743
                    self.match(SqlBaseParser.BY)
                    self.state = 1744
                    localctx._expr = self.expr()
                    localctx.partition.append(localctx._expr)
                    self.state = 1749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==303:
                        self.state = 1745
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1746
                        localctx._expr = self.expr()
                        localctx.partition.append(localctx._expr)
                        self.state = 1751
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 1754
                    self.match(SqlBaseParser.ORDER)
                    self.state = 1755
                    self.match(SqlBaseParser.BY)
                    self.state = 1756
                    self.sortItem()
                    self.state = 1761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==303:
                        self.state = 1757
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1758
                        self.sortItem()
                        self.state = 1763
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85 or _la==86:
                    self.state = 1766
                    self.windowFrame()


                self.state = 1769
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_windowFrame)
        try:
            self.state = 1788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1772
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 1773
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1774
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 1775
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1776
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 1777
                self.match(SqlBaseParser.BETWEEN)
                self.state = 1778
                localctx.start = self.frameBound()
                self.state = 1779
                self.match(SqlBaseParser.AND)
                self.state = 1780
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1782
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 1783
                self.match(SqlBaseParser.BETWEEN)
                self.state = 1784
                localctx.start = self.frameBound()
                self.state = 1785
                self.match(SqlBaseParser.AND)
                self.state = 1786
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BoundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundedFrame" ):
                listener.enterBoundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundedFrame" ):
                listener.exitBoundedFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoundedFrame" ):
                return visitor.visitBoundedFrame(self)
            else:
                return visitor.visitChildren(self)


    class UnboundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)
        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnboundedFrame" ):
                listener.enterUnboundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnboundedFrame" ):
                listener.exitUnboundedFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnboundedFrame" ):
                return visitor.visitUnboundedFrame(self)
            else:
                return visitor.visitChildren(self)


    class CurrentRowBoundContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRowBound" ):
                listener.enterCurrentRowBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRowBound" ):
                listener.exitCurrentRowBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentRowBound" ):
                return visitor.visitCurrentRowBound(self)
            else:
                return visitor.visitChildren(self)



    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 1799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1790
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 1791
                localctx.boundType = self.match(SqlBaseParser.PRECEDING)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1792
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 1793
                localctx.boundType = self.match(SqlBaseParser.FOLLOWING)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CurrentRowBoundContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1794
                self.match(SqlBaseParser.CURRENT)
                self.state = 1795
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.BoundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1796
                self.expr()
                self.state = 1797
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==88 or _la==89):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QnamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QnameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QnameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qnames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQnames" ):
                listener.enterQnames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQnames" ):
                listener.exitQnames(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQnames" ):
                return visitor.visitQnames(self)
            else:
                return visitor.visitChildren(self)




    def qnames(self):

        localctx = SqlBaseParser.QnamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_qnames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.qname()
            self.state = 1806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 1802
                self.match(SqlBaseParser.COMMA)
                self.state = 1803
                self.qname()
                self.state = 1808
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQname" ):
                listener.enterQname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQname" ):
                listener.exitQname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQname" ):
                return visitor.visitQname(self)
            else:
                return visitor.visitChildren(self)




    def qname(self):

        localctx = SqlBaseParser.QnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_qname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1809
            self.ident()
            self.state = 1814
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1810
                    self.match(SqlBaseParser.DOT)
                    self.state = 1811
                    self.ident() 
                self.state = 1816
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpaceSeparatedIdentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithOrWithoutValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentWithOrWithoutValueContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentWithOrWithoutValueContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_spaceSeparatedIdents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpaceSeparatedIdents" ):
                listener.enterSpaceSeparatedIdents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpaceSeparatedIdents" ):
                listener.exitSpaceSeparatedIdents(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpaceSeparatedIdents" ):
                return visitor.visitSpaceSeparatedIdents(self)
            else:
                return visitor.visitChildren(self)




    def spaceSeparatedIdents(self):

        localctx = SqlBaseParser.SpaceSeparatedIdentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_spaceSeparatedIdents)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1817
            self.identWithOrWithoutValue()
            self.state = 1821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152776691328746578) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -1718175795199) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & -4612531820615958531) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -514023868187065) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1080863910568984575) != 0):
                self.state = 1818
                self.identWithOrWithoutValue()
                self.state = 1823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentWithOrWithoutValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def parameterOrSimpleLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrSimpleLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identWithOrWithoutValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithOrWithoutValue" ):
                listener.enterIdentWithOrWithoutValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithOrWithoutValue" ):
                listener.exitIdentWithOrWithoutValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentWithOrWithoutValue" ):
                return visitor.visitIdentWithOrWithoutValue(self)
            else:
                return visitor.visitChildren(self)




    def identWithOrWithoutValue(self):

        localctx = SqlBaseParser.IdentWithOrWithoutValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_identWithOrWithoutValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.ident()
            self.state = 1826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1825
                self.parameterOrSimpleLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_idents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdents" ):
                listener.enterIdents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdents" ):
                listener.exitIdents(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdents" ):
                return visitor.visitIdents(self)
            else:
                return visitor.visitChildren(self)




    def idents(self):

        localctx = SqlBaseParser.IdentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_idents)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.ident()
            self.state = 1833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 1829
                self.match(SqlBaseParser.COMMA)
                self.state = 1830
                self.ident()
                self.state = 1835
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unquotedIdent(self):
            return self.getTypedRuleContext(SqlBaseParser.UnquotedIdentContext,0)


        def quotedIdent(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_ident

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdent" ):
                listener.enterIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdent" ):
                listener.exitIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdent" ):
                return visitor.visitIdent(self)
            else:
                return visitor.visitChildren(self)




    def ident(self):

        localctx = SqlBaseParser.IdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ident)
        try:
            self.state = 1838
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 322, 323]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1836
                self.unquotedIdent()
                pass
            elif token in [324, 325]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1837
                self.quotedIdent()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnquotedIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unquotedIdent

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DigitIdentifierContext(UnquotedIdentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.UnquotedIdentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DIGIT_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDigitIdentifier" ):
                listener.enterDigitIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDigitIdentifier" ):
                listener.exitDigitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDigitIdentifier" ):
                return visitor.visitDigitIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(UnquotedIdentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.UnquotedIdentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def unquotedIdent(self):

        localctx = SqlBaseParser.UnquotedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_unquotedIdent)
        try:
            self.state = 1843
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [322]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1840
                self.match(SqlBaseParser.IDENTIFIER)
                pass
            elif token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1841
                self.nonReserved()
                pass
            elif token in [323]:
                localctx = SqlBaseParser.DigitIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1842
                self.match(SqlBaseParser.DIGIT_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_quotedIdent

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BackQuotedIdentifierContext(QuotedIdentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuotedIdentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuotedIdentifier" ):
                listener.enterBackQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuotedIdentifier" ):
                listener.exitBackQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBackQuotedIdentifier" ):
                return visitor.visitBackQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class QuotedIdentifierContext(QuotedIdentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuotedIdentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def quotedIdent(self):

        localctx = SqlBaseParser.QuotedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_quotedIdent)
        try:
            self.state = 1847
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [324]:
                localctx = SqlBaseParser.QuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1845
                self.match(SqlBaseParser.QUOTED_IDENTIFIER)
                pass
            elif token in [325]:
                localctx = SqlBaseParser.BackQuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1846
                self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralOrIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_stringLiteralOrIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteralOrIdentifier" ):
                listener.enterStringLiteralOrIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteralOrIdentifier" ):
                listener.exitStringLiteralOrIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteralOrIdentifier" ):
                return visitor.visitStringLiteralOrIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteralOrIdentifier(self):

        localctx = SqlBaseParser.StringLiteralOrIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_stringLiteralOrIdentifier)
        try:
            self.state = 1851
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 322, 323, 324, 325]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1849
                self.ident()
                pass
            elif token in [317, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1850
                self.stringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralOrIdentifierOrQnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_stringLiteralOrIdentifierOrQname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteralOrIdentifierOrQname" ):
                listener.enterStringLiteralOrIdentifierOrQname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteralOrIdentifierOrQname" ):
                listener.exitStringLiteralOrIdentifierOrQname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteralOrIdentifierOrQname" ):
                return visitor.visitStringLiteralOrIdentifierOrQname(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteralOrIdentifierOrQname(self):

        localctx = SqlBaseParser.StringLiteralOrIdentifierOrQnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_stringLiteralOrIdentifierOrQname)
        try:
            self.state = 1856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1853
                self.ident()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1854
                self.qname()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1855
                self.stringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.DecimalLiteralContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_numericLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numericLiteral(self):

        localctx = SqlBaseParser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_numericLiteral)
        try:
            self.state = 1860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [321]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1858
                self.decimalLiteral()
                pass
            elif token in [320]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1859
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sign = None # Token
            self.from_ = None # IntervalFieldContext
            self.to = None # IntervalFieldContext

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)


        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)




    def intervalLiteral(self):

        localctx = SqlBaseParser.IntervalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_intervalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1862
            self.match(SqlBaseParser.INTERVAL)
            self.state = 1864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==293 or _la==294:
                self.state = 1863
                localctx.sign = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==293 or _la==294):
                    localctx.sign = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1866
            self.stringLiteral()
            self.state = 1867
            localctx.from_ = self.intervalField()
            self.state = 1870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.state = 1868
                self.match(SqlBaseParser.TO)
                self.state = 1869
                localctx.to = self.intervalField()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalField" ):
                listener.enterIntervalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalField" ):
                listener.exitIntervalField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalField" ):
                return visitor.visitIntervalField(self)
            else:
                return visitor.visitChildren(self)




    def intervalField(self):

        localctx = SqlBaseParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_intervalField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1872
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70931694131085312) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = SqlBaseParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1874
            _la = self._input.LA(1)
            if not(_la==30 or _la==31):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)




    def decimalLiteral(self):

        localctx = SqlBaseParser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_decimalLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1876
            self.match(SqlBaseParser.DECIMAL_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def integerLiteral(self):

        localctx = SqlBaseParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_integerLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1878
            self.match(SqlBaseParser.INTEGER_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # IdentContext
            self.value = None # ExprContext

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_objectKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectKeyValue" ):
                listener.enterObjectKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectKeyValue" ):
                listener.exitObjectKeyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectKeyValue" ):
                return visitor.visitObjectKeyValue(self)
            else:
                return visitor.visitChildren(self)




    def objectKeyValue(self):

        localctx = SqlBaseParser.ObjectKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_objectKeyValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1880
            localctx.key = self.ident()
            self.state = 1881
            self.match(SqlBaseParser.EQ)
            self.state = 1882
            localctx.value = self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_insertSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertSource" ):
                listener.enterInsertSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertSource" ):
                listener.exitInsertSource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertSource" ):
                return visitor.visitInsertSource(self)
            else:
                return visitor.visitChildren(self)




    def insertSource(self):

        localctx = SqlBaseParser.InsertSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_insertSource)
        try:
            self.state = 1889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 92, 208]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1884
                self.query()
                pass
            elif token in [305]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1885
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1886
                self.query()
                self.state = 1887
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnConflictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def CONFLICT(self):
            return self.getToken(SqlBaseParser.CONFLICT, 0)

        def DO(self):
            return self.getToken(SqlBaseParser.DO, 0)

        def NOTHING(self):
            return self.getToken(SqlBaseParser.NOTHING, 0)

        def conflictTarget(self):
            return self.getTypedRuleContext(SqlBaseParser.ConflictTargetContext,0)


        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AssignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_onConflict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnConflict" ):
                listener.enterOnConflict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnConflict" ):
                listener.exitOnConflict(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOnConflict" ):
                return visitor.visitOnConflict(self)
            else:
                return visitor.visitChildren(self)




    def onConflict(self):

        localctx = SqlBaseParser.OnConflictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_onConflict)
        self._la = 0 # Token type
        try:
            self.state = 1912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1891
                self.match(SqlBaseParser.ON)
                self.state = 1892
                self.match(SqlBaseParser.CONFLICT)
                self.state = 1894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==305:
                    self.state = 1893
                    self.conflictTarget()


                self.state = 1896
                self.match(SqlBaseParser.DO)
                self.state = 1897
                self.match(SqlBaseParser.NOTHING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1898
                self.match(SqlBaseParser.ON)
                self.state = 1899
                self.match(SqlBaseParser.CONFLICT)
                self.state = 1900
                self.conflictTarget()
                self.state = 1901
                self.match(SqlBaseParser.DO)
                self.state = 1902
                self.match(SqlBaseParser.UPDATE)
                self.state = 1903
                self.match(SqlBaseParser.SET)
                self.state = 1904
                self.assignment()
                self.state = 1909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 1905
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1906
                    self.assignment()
                    self.state = 1911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConflictTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def subscriptSafe(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SubscriptSafeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SubscriptSafeContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_conflictTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflictTarget" ):
                listener.enterConflictTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflictTarget" ):
                listener.exitConflictTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConflictTarget" ):
                return visitor.visitConflictTarget(self)
            else:
                return visitor.visitChildren(self)




    def conflictTarget(self):

        localctx = SqlBaseParser.ConflictTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_conflictTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1915
            self.subscriptSafe(0)
            self.state = 1920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 1916
                self.match(SqlBaseParser.COMMA)
                self.state = 1917
                self.subscriptSafe(0)
                self.state = 1922
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1923
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues" ):
                listener.enterValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues" ):
                listener.exitValues(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValues" ):
                return visitor.visitValues(self)
            else:
                return visitor.visitChildren(self)




    def values(self):

        localctx = SqlBaseParser.ValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_values)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1925
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1926
            self.expr()
            self.state = 1931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 1927
                self.match(SqlBaseParser.COMMA)
                self.state = 1928
                self.expr()
                self.state = 1933
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1934
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_columns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumns" ):
                listener.enterColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumns" ):
                listener.exitColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumns" ):
                return visitor.visitColumns(self)
            else:
                return visitor.visitChildren(self)




    def columns(self):

        localctx = SqlBaseParser.ColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_columns)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1937
            self.primaryExpression(0)
            self.state = 1942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 1938
                self.match(SqlBaseParser.COMMA)
                self.state = 1939
                self.primaryExpression(0)
                self.state = 1944
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1945
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = SqlBaseParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.primaryExpression(0)
            self.state = 1948
            self.match(SqlBaseParser.EQ)
            self.state = 1949
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CreateTableContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def tableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableElementContext,i)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def partitionedByOrClusteredInto(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionedByOrClusteredIntoContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateSubscriptionContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.conninfo = None # ExprContext
            self.publications = None # IdentsContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SUBSCRIPTION(self):
            return self.getToken(SqlBaseParser.SUBSCRIPTION, 0)
        def CONNECTION(self):
            return self.getToken(SqlBaseParser.CONNECTION, 0)
        def PUBLICATION(self):
            return self.getToken(SqlBaseParser.PUBLICATION, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def idents(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentsContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSubscription" ):
                listener.enterCreateSubscription(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSubscription" ):
                listener.exitCreateSubscription(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateSubscription" ):
                return visitor.visitCreateSubscription(self)
            else:
                return visitor.visitChildren(self)


    class CreateServerContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.fdw = None # IdentContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SERVER(self):
            return self.getToken(SqlBaseParser.SERVER, 0)
        def FOREIGN(self):
            return self.getToken(SqlBaseParser.FOREIGN, 0)
        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def WRAPPER(self):
            return self.getToken(SqlBaseParser.WRAPPER, 0)
        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def kvOptions(self):
            return self.getTypedRuleContext(SqlBaseParser.KvOptionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateServer" ):
                listener.enterCreateServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateServer" ):
                listener.exitCreateServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateServer" ):
                return visitor.visitCreateServer(self)
            else:
                return visitor.visitChildren(self)


    class CreateRoleContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.options = None # SpaceSeparatedIdentsContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)

        def spaceSeparatedIdents(self):
            return self.getTypedRuleContext(SqlBaseParser.SpaceSeparatedIdentsContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateRole" ):
                return visitor.visitCreateRole(self)
            else:
                return visitor.visitChildren(self)


    class CreatePublicationContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def PUBLICATION(self):
            return self.getToken(SqlBaseParser.PUBLICATION, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QnameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QnameContext,i)

        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ASTERISK)
            else:
                return self.getToken(SqlBaseParser.ASTERISK, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatePublication" ):
                listener.enterCreatePublication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatePublication" ):
                listener.exitCreatePublication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreatePublication" ):
                return visitor.visitCreatePublication(self)
            else:
                return visitor.visitChildren(self)


    class CreateUserMappingContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.server = None # IdentContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def MAPPING(self):
            return self.getToken(SqlBaseParser.MAPPING, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def mappedUser(self):
            return self.getTypedRuleContext(SqlBaseParser.MappedUserContext,0)

        def SERVER(self):
            return self.getToken(SqlBaseParser.SERVER, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def kvOptions(self):
            return self.getTypedRuleContext(SqlBaseParser.KvOptionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserMapping" ):
                listener.enterCreateUserMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserMapping" ):
                listener.exitCreateUserMapping(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUserMapping" ):
                return visitor.visitCreateUserMapping(self)
            else:
                return visitor.visitChildren(self)


    class CreateBlobTableContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.numShards = None # BlobClusteredIntoContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)

        def blobClusteredInto(self):
            return self.getTypedRuleContext(SqlBaseParser.BlobClusteredIntoContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateBlobTable" ):
                listener.enterCreateBlobTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateBlobTable" ):
                listener.exitCreateBlobTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateBlobTable" ):
                return visitor.visitCreateBlobTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateAnalyzerContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.extendedName = None # IdentContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def ANALYZER(self):
            return self.getToken(SqlBaseParser.ANALYZER, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def analyzerElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AnalyzerElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AnalyzerElementContext,i)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def EXTENDS(self):
            return self.getToken(SqlBaseParser.EXTENDS, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateAnalyzer" ):
                listener.enterCreateAnalyzer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateAnalyzer" ):
                listener.exitCreateAnalyzer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateAnalyzer" ):
                return visitor.visitCreateAnalyzer(self)
            else:
                return visitor.visitChildren(self)


    class CreateRepositoryContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.type_ = None # IdentContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def REPOSITORY(self):
            return self.getToken(SqlBaseParser.REPOSITORY, 0)
        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)
        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRepository" ):
                listener.enterCreateRepository(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRepository" ):
                listener.exitCreateRepository(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateRepository" ):
                return visitor.visitCreateRepository(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableAsContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def insertSource(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertSourceContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableAs" ):
                listener.enterCreateTableAs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableAs" ):
                listener.exitCreateTableAs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableAs" ):
                return visitor.visitCreateTableAs(self)
            else:
                return visitor.visitChildren(self)


    class CreateForeignTableContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.tableName = None # QnameContext
            self.server = None # IdentContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def FOREIGN(self):
            return self.getToken(SqlBaseParser.FOREIGN, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def tableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableElementContext,i)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def SERVER(self):
            return self.getToken(SqlBaseParser.SERVER, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def kvOptions(self):
            return self.getTypedRuleContext(SqlBaseParser.KvOptionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateForeignTable" ):
                listener.enterCreateForeignTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateForeignTable" ):
                listener.exitCreateForeignTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateForeignTable" ):
                return visitor.visitCreateForeignTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateSnapshotContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SNAPSHOT(self):
            return self.getToken(SqlBaseParser.SNAPSHOT, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableWithPartitions(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionsContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSnapshot" ):
                listener.enterCreateSnapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSnapshot" ):
                listener.exitCreateSnapshot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateSnapshot" ):
                return visitor.visitCreateSnapshot(self)
            else:
                return visitor.visitChildren(self)


    class CreateFunctionContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # QnameContext
            self.returnType = None # DataTypeContext
            self.language = None # ParameterOrIdentContext
            self.body = None # ParameterOrStringContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def RETURNS(self):
            return self.getToken(SqlBaseParser.RETURNS, 0)
        def LANGUAGE(self):
            return self.getToken(SqlBaseParser.LANGUAGE, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def parameterOrIdent(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIdentContext,0)

        def parameterOrString(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrStringContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def functionArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FunctionArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FunctionArgumentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunction" ):
                return visitor.visitCreateFunction(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # QnameContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def queryOptParens(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOptParensContext,0)

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)



    def createStmt(self):

        localctx = SqlBaseParser.CreateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_createStmt)
        self._la = 0 # Token type
        try:
            self.state = 2176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1951
                self.match(SqlBaseParser.CREATE)
                self.state = 1952
                self.match(SqlBaseParser.TABLE)
                self.state = 1956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 1953
                    self.match(SqlBaseParser.IF)
                    self.state = 1954
                    self.match(SqlBaseParser.NOT)
                    self.state = 1955
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1958
                self.table()
                self.state = 1959
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1960
                self.tableElement()
                self.state = 1965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 1961
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1962
                    self.tableElement()
                    self.state = 1967
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1968
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 1969
                self.partitionedByOrClusteredInto()
                self.state = 1971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 1970
                    self.withProperties()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.CreateTableAsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1973
                self.match(SqlBaseParser.CREATE)
                self.state = 1974
                self.match(SqlBaseParser.TABLE)
                self.state = 1978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 1975
                    self.match(SqlBaseParser.IF)
                    self.state = 1976
                    self.match(SqlBaseParser.NOT)
                    self.state = 1977
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1980
                self.table()
                self.state = 1981
                self.match(SqlBaseParser.AS)
                self.state = 1982
                self.insertSource()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CreateForeignTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1984
                self.match(SqlBaseParser.CREATE)
                self.state = 1985
                self.match(SqlBaseParser.FOREIGN)
                self.state = 1986
                self.match(SqlBaseParser.TABLE)
                self.state = 1990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 1987
                    self.match(SqlBaseParser.IF)
                    self.state = 1988
                    self.match(SqlBaseParser.NOT)
                    self.state = 1989
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1992
                localctx.tableName = self.qname()
                self.state = 1993
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1994
                self.tableElement()
                self.state = 1999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 1995
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1996
                    self.tableElement()
                    self.state = 2001
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2002
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 2003
                self.match(SqlBaseParser.SERVER)
                self.state = 2004
                localctx.server = self.ident()
                self.state = 2006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 2005
                    self.kvOptions()


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CreateBlobTableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2008
                self.match(SqlBaseParser.CREATE)
                self.state = 2009
                self.match(SqlBaseParser.BLOB)
                self.state = 2010
                self.match(SqlBaseParser.TABLE)
                self.state = 2011
                self.table()
                self.state = 2013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==220:
                    self.state = 2012
                    localctx.numShards = self.blobClusteredInto()


                self.state = 2016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2015
                    self.withProperties()


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.CreateRepositoryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2018
                self.match(SqlBaseParser.CREATE)
                self.state = 2019
                self.match(SqlBaseParser.REPOSITORY)
                self.state = 2020
                localctx.name = self.ident()
                self.state = 2021
                self.match(SqlBaseParser.TYPE)
                self.state = 2022
                localctx.type_ = self.ident()
                self.state = 2024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2023
                    self.withProperties()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.CreateSnapshotContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2026
                self.match(SqlBaseParser.CREATE)
                self.state = 2027
                self.match(SqlBaseParser.SNAPSHOT)
                self.state = 2028
                self.qname()
                self.state = 2032
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7]:
                    self.state = 2029
                    self.match(SqlBaseParser.ALL)
                    pass
                elif token in [97]:
                    self.state = 2030
                    self.match(SqlBaseParser.TABLE)
                    self.state = 2031
                    self.tableWithPartitions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2034
                    self.withProperties()


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.CreateAnalyzerContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2037
                self.match(SqlBaseParser.CREATE)
                self.state = 2038
                self.match(SqlBaseParser.ANALYZER)
                self.state = 2039
                localctx.name = self.ident()
                self.state = 2042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==235:
                    self.state = 2040
                    self.match(SqlBaseParser.EXTENDS)
                    self.state = 2041
                    localctx.extendedName = self.ident()


                self.state = 2045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2044
                    self.match(SqlBaseParser.WITH)


                self.state = 2047
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 2048
                self.analyzerElement()
                self.state = 2053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 2049
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2050
                    self.analyzerElement()
                    self.state = 2055
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2056
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2058
                self.match(SqlBaseParser.CREATE)
                self.state = 2061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 2059
                    self.match(SqlBaseParser.OR)
                    self.state = 2060
                    self.match(SqlBaseParser.REPLACE)


                self.state = 2063
                self.match(SqlBaseParser.FUNCTION)
                self.state = 2064
                localctx.name = self.qname()
                self.state = 2065
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 2074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152776691328746578) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -1718175795199) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 9221680432477634559) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & -8224347531254671) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & -1152921504605798401) != 0):
                    self.state = 2066
                    self.functionArgument()
                    self.state = 2071
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==303:
                        self.state = 2067
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2068
                        self.functionArgument()
                        self.state = 2073
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2076
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 2077
                self.match(SqlBaseParser.RETURNS)
                self.state = 2078
                localctx.returnType = self.dataType(0)
                self.state = 2079
                self.match(SqlBaseParser.LANGUAGE)
                self.state = 2080
                localctx.language = self.parameterOrIdent()
                self.state = 2081
                self.match(SqlBaseParser.AS)
                self.state = 2082
                localctx.body = self.parameterOrString()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.CreateUserMappingContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2084
                self.match(SqlBaseParser.CREATE)
                self.state = 2085
                self.match(SqlBaseParser.USER)
                self.state = 2086
                self.match(SqlBaseParser.MAPPING)
                self.state = 2090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 2087
                    self.match(SqlBaseParser.IF)
                    self.state = 2088
                    self.match(SqlBaseParser.NOT)
                    self.state = 2089
                    self.match(SqlBaseParser.EXISTS)


                self.state = 2092
                self.match(SqlBaseParser.FOR)
                self.state = 2093
                self.mappedUser()
                self.state = 2094
                self.match(SqlBaseParser.SERVER)
                self.state = 2095
                localctx.server = self.ident()
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 2096
                    self.kvOptions()


                pass

            elif la_ == 10:
                localctx = SqlBaseParser.CreateRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2099
                self.match(SqlBaseParser.CREATE)
                self.state = 2100
                _la = self._input.LA(1)
                if not(_la==246 or _la==247):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2101
                localctx.name = self.ident()
                self.state = 2115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152776691328746578) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -1718171600895) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & -4612531820615958531) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -514023868187065) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 1080864460324798463) != 0):
                    self.state = 2113
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                    if la_ == 1:
                        self.state = 2102
                        self.withProperties()
                        pass

                    elif la_ == 2:
                        self.state = 2104
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==92:
                            self.state = 2103
                            self.match(SqlBaseParser.WITH)


                        self.state = 2107
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==305:
                            self.state = 2106
                            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)


                        self.state = 2109
                        localctx.options = self.spaceSeparatedIdents()
                        self.state = 2111
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==306:
                            self.state = 2110
                            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                        pass




                pass

            elif la_ == 11:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2117
                self.match(SqlBaseParser.CREATE)
                self.state = 2120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 2118
                    self.match(SqlBaseParser.OR)
                    self.state = 2119
                    self.match(SqlBaseParser.REPLACE)


                self.state = 2122
                self.match(SqlBaseParser.VIEW)
                self.state = 2123
                localctx.name = self.qname()
                self.state = 2124
                self.match(SqlBaseParser.AS)
                self.state = 2125
                self.queryOptParens()
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.CreatePublicationContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2127
                self.match(SqlBaseParser.CREATE)
                self.state = 2128
                self.match(SqlBaseParser.PUBLICATION)
                self.state = 2129
                localctx.name = self.ident()
                self.state = 2149
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 2130
                    self.match(SqlBaseParser.FOR)
                    self.state = 2131
                    self.match(SqlBaseParser.ALL)
                    self.state = 2132
                    self.match(SqlBaseParser.TABLES)

                elif la_ == 2:
                    self.state = 2133
                    self.match(SqlBaseParser.FOR)
                    self.state = 2134
                    self.match(SqlBaseParser.TABLE)
                    self.state = 2135
                    self.qname()
                    self.state = 2137
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==295:
                        self.state = 2136
                        self.match(SqlBaseParser.ASTERISK)


                    self.state = 2146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==303:
                        self.state = 2139
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2140
                        self.qname()
                        self.state = 2142
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==295:
                            self.state = 2141
                            self.match(SqlBaseParser.ASTERISK)


                        self.state = 2148
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 13:
                localctx = SqlBaseParser.CreateSubscriptionContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2151
                self.match(SqlBaseParser.CREATE)
                self.state = 2152
                self.match(SqlBaseParser.SUBSCRIPTION)
                self.state = 2153
                localctx.name = self.ident()
                self.state = 2154
                self.match(SqlBaseParser.CONNECTION)
                self.state = 2155
                localctx.conninfo = self.expr()
                self.state = 2156
                self.match(SqlBaseParser.PUBLICATION)
                self.state = 2157
                localctx.publications = self.idents()
                self.state = 2159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2158
                    self.withProperties()


                pass

            elif la_ == 14:
                localctx = SqlBaseParser.CreateServerContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2161
                self.match(SqlBaseParser.CREATE)
                self.state = 2162
                self.match(SqlBaseParser.SERVER)
                self.state = 2166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 2163
                    self.match(SqlBaseParser.IF)
                    self.state = 2164
                    self.match(SqlBaseParser.NOT)
                    self.state = 2165
                    self.match(SqlBaseParser.EXISTS)


                self.state = 2168
                localctx.name = self.ident()
                self.state = 2169
                self.match(SqlBaseParser.FOREIGN)
                self.state = 2170
                self.match(SqlBaseParser.DATA)
                self.state = 2171
                self.match(SqlBaseParser.WRAPPER)
                self.state = 2172
                localctx.fdw = self.ident()
                self.state = 2174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 2173
                    self.kvOptions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappedUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.userName = None # IdentContext

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)

        def CURRENT_ROLE(self):
            return self.getToken(SqlBaseParser.CURRENT_ROLE, 0)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_mappedUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappedUser" ):
                listener.enterMappedUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappedUser" ):
                listener.exitMappedUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMappedUser" ):
                return visitor.visitMappedUser(self)
            else:
                return visitor.visitChildren(self)




    def mappedUser(self):

        localctx = SqlBaseParser.MappedUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_mappedUser)
        try:
            self.state = 2182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 322, 323, 324, 325]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2178
                localctx.userName = self.ident()
                pass
            elif token in [246]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2179
                self.match(SqlBaseParser.USER)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2180
                self.match(SqlBaseParser.CURRENT_ROLE)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2181
                self.match(SqlBaseParser.CURRENT_USER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def kvOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.KvOptionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.KvOptionContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_kvOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKvOptions" ):
                listener.enterKvOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKvOptions" ):
                listener.exitKvOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvOptions" ):
                return visitor.visitKvOptions(self)
            else:
                return visitor.visitChildren(self)




    def kvOptions(self):

        localctx = SqlBaseParser.KvOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_kvOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2184
            self.match(SqlBaseParser.OPTIONS)
            self.state = 2185
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 2186
            self.kvOption()
            self.state = 2191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 2187
                self.match(SqlBaseParser.COMMA)
                self.state = 2188
                self.kvOption()
                self.state = 2193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2194
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def parameterOrLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_kvOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKvOption" ):
                listener.enterKvOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKvOption" ):
                listener.exitKvOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvOption" ):
                return visitor.visitKvOption(self)
            else:
                return visitor.visitChildren(self)




    def kvOption(self):

        localctx = SqlBaseParser.KvOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_kvOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2196
            self.ident()
            self.state = 2197
            self.parameterOrLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext
            self.type_ = None # DataTypeContext

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgument" ):
                listener.enterFunctionArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgument" ):
                listener.exitFunctionArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArgument" ):
                return visitor.visitFunctionArgument(self)
            else:
                return visitor.visitChildren(self)




    def functionArgument(self):

        localctx = SqlBaseParser.FunctionArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_functionArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.state = 2199
                localctx.name = self.ident()


            self.state = 2202
            localctx.type_ = self.dataType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_alterTableDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableWithPartitionDefaultContext(AlterTableDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterTableDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableWithPartition(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableWithPartitionDefault" ):
                listener.enterTableWithPartitionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableWithPartitionDefault" ):
                listener.exitTableWithPartitionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableWithPartitionDefault" ):
                return visitor.visitTableWithPartitionDefault(self)
            else:
                return visitor.visitChildren(self)


    class TableOnlyContext(AlterTableDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterTableDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOnly" ):
                listener.enterTableOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOnly" ):
                listener.exitTableOnly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOnly" ):
                return visitor.visitTableOnly(self)
            else:
                return visitor.visitChildren(self)



    def alterTableDefinition(self):

        localctx = SqlBaseParser.AlterTableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_alterTableDefinition)
        try:
            self.state = 2207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableOnlyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2204
                self.match(SqlBaseParser.ONLY)
                self.state = 2205
                self.qname()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.TableWithPartitionDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2206
                self.tableWithPartition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterSubscriptionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(SqlBaseParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(SqlBaseParser.DISABLE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_alterSubscriptionMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterSubscriptionMode" ):
                listener.enterAlterSubscriptionMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterSubscriptionMode" ):
                listener.exitAlterSubscriptionMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterSubscriptionMode" ):
                return visitor.visitAlterSubscriptionMode(self)
            else:
                return visitor.visitChildren(self)




    def alterSubscriptionMode(self):

        localctx = SqlBaseParser.AlterSubscriptionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_alterSubscriptionMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2209
            _la = self._input.LA(1)
            if not(_la==259 or _la==260):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionedByOrClusteredIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionedBy(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionedByContext,0)


        def clusteredBy(self):
            return self.getTypedRuleContext(SqlBaseParser.ClusteredByContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionedByOrClusteredInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionedByOrClusteredInto" ):
                listener.enterPartitionedByOrClusteredInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionedByOrClusteredInto" ):
                listener.exitPartitionedByOrClusteredInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionedByOrClusteredInto" ):
                return visitor.visitPartitionedByOrClusteredInto(self)
            else:
                return visitor.visitChildren(self)




    def partitionedByOrClusteredInto(self):

        localctx = SqlBaseParser.PartitionedByOrClusteredIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_partitionedByOrClusteredInto)
        self._la = 0 # Token type
        try:
            self.state = 2223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==239:
                    self.state = 2211
                    self.partitionedBy()


                self.state = 2215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==220:
                    self.state = 2214
                    self.clusteredBy()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==220:
                    self.state = 2217
                    self.clusteredBy()


                self.state = 2221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==239:
                    self.state = 2220
                    self.partitionedBy()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionedByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def columns(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnsContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionedBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionedBy" ):
                listener.enterPartitionedBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionedBy" ):
                listener.exitPartitionedBy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionedBy" ):
                return visitor.visitPartitionedBy(self)
            else:
                return visitor.visitChildren(self)




    def partitionedBy(self):

        localctx = SqlBaseParser.PartitionedByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_partitionedBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2225
            self.match(SqlBaseParser.PARTITIONED)
            self.state = 2226
            self.match(SqlBaseParser.BY)
            self.state = 2227
            self.columns()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusteredByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.routing = None # PrimaryExpressionContext
            self.numShards = None # ParameterOrIntegerContext

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def SHARDS(self):
            return self.getToken(SqlBaseParser.SHARDS, 0)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_clusteredBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClusteredBy" ):
                listener.enterClusteredBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClusteredBy" ):
                listener.exitClusteredBy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClusteredBy" ):
                return visitor.visitClusteredBy(self)
            else:
                return visitor.visitChildren(self)




    def clusteredBy(self):

        localctx = SqlBaseParser.ClusteredByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_clusteredBy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2229
            self.match(SqlBaseParser.CLUSTERED)
            self.state = 2235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 2230
                self.match(SqlBaseParser.BY)
                self.state = 2231
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 2232
                localctx.routing = self.primaryExpression(0)
                self.state = 2233
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


            self.state = 2241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==207:
                self.state = 2237
                self.match(SqlBaseParser.INTO)
                self.state = 2238
                localctx.numShards = self.parameterOrInteger()
                self.state = 2239
                self.match(SqlBaseParser.SHARDS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlobClusteredIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.numShards = None # ParameterOrIntegerContext

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def SHARDS(self):
            return self.getToken(SqlBaseParser.SHARDS, 0)

        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_blobClusteredInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlobClusteredInto" ):
                listener.enterBlobClusteredInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlobClusteredInto" ):
                listener.exitBlobClusteredInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlobClusteredInto" ):
                return visitor.visitBlobClusteredInto(self)
            else:
                return visitor.visitChildren(self)




    def blobClusteredInto(self):

        localctx = SqlBaseParser.BlobClusteredIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_blobClusteredInto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2243
            self.match(SqlBaseParser.CLUSTERED)
            self.state = 2244
            self.match(SqlBaseParser.INTO)
            self.state = 2245
            localctx.numShards = self.parameterOrInteger()
            self.state = 2246
            self.match(SqlBaseParser.SHARDS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PrimaryKeyConstraintTableLevelContext(TableElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryKeyContraint(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryKeyContraintContext,0)

        def columns(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyConstraintTableLevel" ):
                listener.enterPrimaryKeyConstraintTableLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyConstraintTableLevel" ):
                listener.exitPrimaryKeyConstraintTableLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryKeyConstraintTableLevel" ):
                return visitor.visitPrimaryKeyConstraintTableLevel(self)
            else:
                return visitor.visitChildren(self)


    class TableCheckConstraintContext(TableElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def checkConstraint(self):
            return self.getTypedRuleContext(SqlBaseParser.CheckConstraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableCheckConstraint" ):
                listener.enterTableCheckConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableCheckConstraint" ):
                listener.exitTableCheckConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableCheckConstraint" ):
                return visitor.visitTableCheckConstraint(self)
            else:
                return visitor.visitChildren(self)


    class IndexDefinitionContext(TableElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableElementContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.method = None # IdentContext
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def columns(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnsContext,0)

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDefinition" ):
                listener.enterIndexDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDefinition" ):
                listener.exitIndexDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexDefinition" ):
                return visitor.visitIndexDefinition(self)
            else:
                return visitor.visitChildren(self)


    class ColumnDefinitionDefaultContext(TableElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinitionDefault" ):
                listener.enterColumnDefinitionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinitionDefault" ):
                listener.exitColumnDefinitionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefinitionDefault" ):
                return visitor.visitColumnDefinitionDefault(self)
            else:
                return visitor.visitChildren(self)



    def tableElement(self):

        localctx = SqlBaseParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_tableElement)
        self._la = 0 # Token type
        try:
            self.state = 2261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ColumnDefinitionDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2248
                self.columnDefinition()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.PrimaryKeyConstraintTableLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2249
                self.primaryKeyContraint()
                self.state = 2250
                self.columns()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.IndexDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2252
                self.match(SqlBaseParser.INDEX)
                self.state = 2253
                localctx.name = self.ident()
                self.state = 2254
                self.match(SqlBaseParser.USING)
                self.state = 2255
                localctx.method = self.ident()
                self.state = 2256
                self.columns()
                self.state = 2258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2257
                    self.withProperties()


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.TableCheckConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2260
                self.checkConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefinition" ):
                return visitor.visitColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def columnDefinition(self):

        localctx = SqlBaseParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2263
            self.ident()
            self.state = 2265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 2264
                self.dataType(0)


            self.state = 2270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 545259552) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 54641329853956099) != 0) or _la==244:
                self.state = 2267
                self.columnConstraint()
                self.state = 2272
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def subscriptSafe(self):
            return self.getTypedRuleContext(SqlBaseParser.SubscriptSafeContext,0)


        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_addColumnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddColumnDefinition" ):
                listener.enterAddColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddColumnDefinition" ):
                listener.exitAddColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddColumnDefinition" ):
                return visitor.visitAddColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def addColumnDefinition(self):

        localctx = SqlBaseParser.AddColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_addColumnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2273
            self.match(SqlBaseParser.ADD)
            self.state = 2275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 2274
                self.match(SqlBaseParser.COLUMN)


            self.state = 2277
            self.subscriptSafe(0)
            self.state = 2279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2278
                self.dataType(0)


            self.state = 2284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 545259552) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 54641329853956099) != 0) or _la==244:
                self.state = 2281
                self.columnConstraint()
                self.state = 2286
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def subscriptSafe(self):
            return self.getTypedRuleContext(SqlBaseParser.SubscriptSafeContext,0)


        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_dropColumnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropColumnDefinition" ):
                listener.enterDropColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropColumnDefinition" ):
                listener.exitDropColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropColumnDefinition" ):
                return visitor.visitDropColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def dropColumnDefinition(self):

        localctx = SqlBaseParser.DropColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_dropColumnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2287
            self.match(SqlBaseParser.DROP)
            self.state = 2289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 2288
                self.match(SqlBaseParser.COLUMN)


            self.state = 2293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 2291
                self.match(SqlBaseParser.IF)
                self.state = 2292
                self.match(SqlBaseParser.EXISTS)


            self.state = 2295
            self.subscriptSafe(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RerouteOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rerouteOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RerouteMoveShardContext(RerouteOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RerouteOptionContext
            super().__init__(parser)
            self.shardId = None # ParameterOrIntegerContext
            self.fromNodeId = None # ParameterOrStringContext
            self.toNodeId = None # ParameterOrStringContext
            self.copyFrom(ctx)

        def MOVE(self):
            return self.getToken(SqlBaseParser.MOVE, 0)
        def SHARD(self):
            return self.getToken(SqlBaseParser.SHARD, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)

        def parameterOrString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ParameterOrStringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ParameterOrStringContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRerouteMoveShard" ):
                listener.enterRerouteMoveShard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRerouteMoveShard" ):
                listener.exitRerouteMoveShard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRerouteMoveShard" ):
                return visitor.visitRerouteMoveShard(self)
            else:
                return visitor.visitChildren(self)


    class RerouteAllocateReplicaShardContext(RerouteOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RerouteOptionContext
            super().__init__(parser)
            self.shardId = None # ParameterOrIntegerContext
            self.nodeId = None # ParameterOrStringContext
            self.copyFrom(ctx)

        def ALLOCATE(self):
            return self.getToken(SqlBaseParser.ALLOCATE, 0)
        def REPLICA(self):
            return self.getToken(SqlBaseParser.REPLICA, 0)
        def SHARD(self):
            return self.getToken(SqlBaseParser.SHARD, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)

        def parameterOrString(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrStringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRerouteAllocateReplicaShard" ):
                listener.enterRerouteAllocateReplicaShard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRerouteAllocateReplicaShard" ):
                listener.exitRerouteAllocateReplicaShard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRerouteAllocateReplicaShard" ):
                return visitor.visitRerouteAllocateReplicaShard(self)
            else:
                return visitor.visitChildren(self)


    class ReroutePromoteReplicaContext(RerouteOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RerouteOptionContext
            super().__init__(parser)
            self.shardId = None # ParameterOrIntegerContext
            self.nodeId = None # ParameterOrStringContext
            self.copyFrom(ctx)

        def PROMOTE(self):
            return self.getToken(SqlBaseParser.PROMOTE, 0)
        def REPLICA(self):
            return self.getToken(SqlBaseParser.REPLICA, 0)
        def SHARD(self):
            return self.getToken(SqlBaseParser.SHARD, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)

        def parameterOrString(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrStringContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReroutePromoteReplica" ):
                listener.enterReroutePromoteReplica(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReroutePromoteReplica" ):
                listener.exitReroutePromoteReplica(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReroutePromoteReplica" ):
                return visitor.visitReroutePromoteReplica(self)
            else:
                return visitor.visitChildren(self)


    class RerouteCancelShardContext(RerouteOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RerouteOptionContext
            super().__init__(parser)
            self.shardId = None # ParameterOrIntegerContext
            self.nodeId = None # ParameterOrStringContext
            self.copyFrom(ctx)

        def CANCEL(self):
            return self.getToken(SqlBaseParser.CANCEL, 0)
        def SHARD(self):
            return self.getToken(SqlBaseParser.SHARD, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)

        def parameterOrString(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrStringContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRerouteCancelShard" ):
                listener.enterRerouteCancelShard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRerouteCancelShard" ):
                listener.exitRerouteCancelShard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRerouteCancelShard" ):
                return visitor.visitRerouteCancelShard(self)
            else:
                return visitor.visitChildren(self)



    def rerouteOption(self):

        localctx = SqlBaseParser.RerouteOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_rerouteOption)
        self._la = 0 # Token type
        try:
            self.state = 2329
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115]:
                localctx = SqlBaseParser.RerouteMoveShardContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2297
                self.match(SqlBaseParser.MOVE)
                self.state = 2298
                self.match(SqlBaseParser.SHARD)
                self.state = 2299
                localctx.shardId = self.parameterOrInteger()
                self.state = 2300
                self.match(SqlBaseParser.FROM)
                self.state = 2301
                localctx.fromNodeId = self.parameterOrString()
                self.state = 2302
                self.match(SqlBaseParser.TO)
                self.state = 2303
                localctx.toNodeId = self.parameterOrString()
                pass
            elif token in [117]:
                localctx = SqlBaseParser.RerouteAllocateReplicaShardContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2305
                self.match(SqlBaseParser.ALLOCATE)
                self.state = 2306
                self.match(SqlBaseParser.REPLICA)
                self.state = 2307
                self.match(SqlBaseParser.SHARD)
                self.state = 2308
                localctx.shardId = self.parameterOrInteger()
                self.state = 2309
                self.match(SqlBaseParser.ON)
                self.state = 2310
                localctx.nodeId = self.parameterOrString()
                pass
            elif token in [84]:
                localctx = SqlBaseParser.ReroutePromoteReplicaContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2312
                self.match(SqlBaseParser.PROMOTE)
                self.state = 2313
                self.match(SqlBaseParser.REPLICA)
                self.state = 2314
                self.match(SqlBaseParser.SHARD)
                self.state = 2315
                localctx.shardId = self.parameterOrInteger()
                self.state = 2316
                self.match(SqlBaseParser.ON)
                self.state = 2317
                localctx.nodeId = self.parameterOrString()
                self.state = 2319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2318
                    self.withProperties()


                pass
            elif token in [119]:
                localctx = SqlBaseParser.RerouteCancelShardContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2321
                self.match(SqlBaseParser.CANCEL)
                self.state = 2322
                self.match(SqlBaseParser.SHARD)
                self.state = 2323
                localctx.shardId = self.parameterOrInteger()
                self.state = 2324
                self.match(SqlBaseParser.ON)
                self.state = 2325
                localctx.nodeId = self.parameterOrString()
                self.state = 2327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2326
                    self.withProperties()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ObjectDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def objectTypeDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ObjectTypeDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectDataType" ):
                listener.enterObjectDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectDataType" ):
                listener.exitObjectDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectDataType" ):
                return visitor.visitObjectDataType(self)
            else:
                return visitor.visitChildren(self)


    class MaybeParametrizedDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def baseDataType(self):
            return self.getTypedRuleContext(SqlBaseParser.BaseDataTypeContext,0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def integerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntegerLiteralContext,i)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeParametrizedDataType" ):
                listener.enterMaybeParametrizedDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeParametrizedDataType" ):
                listener.exitMaybeParametrizedDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeParametrizedDataType" ):
                return visitor.visitMaybeParametrizedDataType(self)
            else:
                return visitor.visitChildren(self)


    class ArrayDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def EMPTY_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.EMPTY_SQUARE_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDataType" ):
                listener.enterArrayDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDataType" ):
                listener.exitArrayDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDataType" ):
                return visitor.visitArrayDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.DataTypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 192
        self.enterRecursionRule(localctx, 192, self.RULE_dataType, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2352
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 322, 323, 324, 325]:
                localctx = SqlBaseParser.MaybeParametrizedDataTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2332
                self.baseDataType()
                self.state = 2344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 2333
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 2334
                    self.integerLiteral()
                    self.state = 2339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==303:
                        self.state = 2335
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2336
                        self.integerLiteral()
                        self.state = 2341
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2342
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                pass
            elif token in [136]:
                localctx = SqlBaseParser.ObjectDataTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2346
                self.objectTypeDefinition()
                pass
            elif token in [233]:
                localctx = SqlBaseParser.ArrayDataTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2347
                self.match(SqlBaseParser.ARRAY)
                self.state = 2348
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 2349
                self.dataType(0)
                self.state = 2350
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,305,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.ArrayDataTypeContext(self, SqlBaseParser.DataTypeContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dataType)
                    self.state = 2354
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2355
                    self.match(SqlBaseParser.EMPTY_SQUARE_BRACKET) 
                self.state = 2360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,305,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BaseDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_baseDataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefinedDataTypeDefaultContext(BaseDataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BaseDataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def definedDataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DefinedDataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinedDataTypeDefault" ):
                listener.enterDefinedDataTypeDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinedDataTypeDefault" ):
                listener.exitDefinedDataTypeDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinedDataTypeDefault" ):
                return visitor.visitDefinedDataTypeDefault(self)
            else:
                return visitor.visitChildren(self)


    class IdentDataTypeContext(BaseDataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BaseDataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentDataType" ):
                listener.enterIdentDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentDataType" ):
                listener.exitIdentDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentDataType" ):
                return visitor.visitIdentDataType(self)
            else:
                return visitor.visitChildren(self)



    def baseDataType(self):

        localctx = SqlBaseParser.BaseDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_baseDataType)
        try:
            self.state = 2363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DefinedDataTypeDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2361
                self.definedDataType()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IdentDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2362
                self.ident()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinedDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def TIME(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TIME)
            else:
                return self.getToken(SqlBaseParser.TIME, i)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def CHARACTER(self):
            return self.getToken(SqlBaseParser.CHARACTER, 0)

        def VARYING(self):
            return self.getToken(SqlBaseParser.VARYING, 0)

        def CHAR_SPECIAL(self):
            return self.getToken(SqlBaseParser.CHAR_SPECIAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_definedDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinedDataType" ):
                listener.enterDefinedDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinedDataType" ):
                listener.exitDefinedDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefinedDataType" ):
                return visitor.visitDefinedDataType(self)
            else:
                return visitor.visitChildren(self)




    def definedDataType(self):

        localctx = SqlBaseParser.DefinedDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_definedDataType)
        try:
            self.state = 2382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2365
                self.match(SqlBaseParser.DOUBLE)
                self.state = 2366
                self.match(SqlBaseParser.PRECISION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2367
                self.match(SqlBaseParser.TIMESTAMP)
                self.state = 2368
                self.match(SqlBaseParser.WITHOUT)
                self.state = 2369
                self.match(SqlBaseParser.TIME)
                self.state = 2370
                self.match(SqlBaseParser.ZONE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2371
                self.match(SqlBaseParser.TIMESTAMP)
                self.state = 2372
                self.match(SqlBaseParser.WITH)
                self.state = 2373
                self.match(SqlBaseParser.TIME)
                self.state = 2374
                self.match(SqlBaseParser.ZONE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2375
                self.match(SqlBaseParser.TIME)
                self.state = 2376
                self.match(SqlBaseParser.WITH)
                self.state = 2377
                self.match(SqlBaseParser.TIME)
                self.state = 2378
                self.match(SqlBaseParser.ZONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2379
                self.match(SqlBaseParser.CHARACTER)
                self.state = 2380
                self.match(SqlBaseParser.VARYING)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2381
                self.match(SqlBaseParser.CHAR_SPECIAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectTypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def OBJECT(self):
            return self.getToken(SqlBaseParser.OBJECT, 0)

        def OPEN_ROUND_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.OPEN_ROUND_BRACKET)
            else:
                return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, i)

        def CLOSE_ROUND_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.CLOSE_ROUND_BRACKET)
            else:
                return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def columnDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColumnDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,i)


        def DYNAMIC(self):
            return self.getToken(SqlBaseParser.DYNAMIC, 0)

        def STRICT(self):
            return self.getToken(SqlBaseParser.STRICT, 0)

        def IGNORED(self):
            return self.getToken(SqlBaseParser.IGNORED, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_objectTypeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectTypeDefinition" ):
                listener.enterObjectTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectTypeDefinition" ):
                listener.exitObjectTypeDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectTypeDefinition" ):
                return visitor.visitObjectTypeDefinition(self)
            else:
                return visitor.visitChildren(self)




    def objectTypeDefinition(self):

        localctx = SqlBaseParser.ObjectTypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_objectTypeDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2384
            self.match(SqlBaseParser.OBJECT)
            self.state = 2388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.state = 2385
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 2386
                localctx.type_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & 7) != 0)):
                    localctx.type_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2387
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


            self.state = 2402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2390
                self.match(SqlBaseParser.AS)
                self.state = 2391
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 2392
                self.columnDefinition()
                self.state = 2397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 2393
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2394
                    self.columnDefinition()
                    self.state = 2399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2400
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnConstraintPrimaryKeyContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryKeyContraint(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryKeyContraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnConstraintPrimaryKey" ):
                listener.enterColumnConstraintPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnConstraintPrimaryKey" ):
                listener.exitColumnConstraintPrimaryKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnConstraintPrimaryKey" ):
                return visitor.visitColumnConstraintPrimaryKey(self)
            else:
                return visitor.visitChildren(self)


    class ColumnStorageDefinitionContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STORAGE(self):
            return self.getToken(SqlBaseParser.STORAGE, 0)
        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnStorageDefinition" ):
                listener.enterColumnStorageDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnStorageDefinition" ):
                listener.exitColumnStorageDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnStorageDefinition" ):
                return visitor.visitColumnStorageDefinition(self)
            else:
                return visitor.visitChildren(self)


    class ColumnCheckConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def checkConstraint(self):
            return self.getTypedRuleContext(SqlBaseParser.CheckConstraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnCheckConstraint" ):
                listener.enterColumnCheckConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnCheckConstraint" ):
                listener.exitColumnCheckConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnCheckConstraint" ):
                return visitor.visitColumnCheckConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ColumnConstraintNullContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnConstraintNull" ):
                listener.enterColumnConstraintNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnConstraintNull" ):
                listener.exitColumnConstraintNull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnConstraintNull" ):
                return visitor.visitColumnConstraintNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnIndexConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.method = None # IdentContext
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnIndexConstraint" ):
                listener.enterColumnIndexConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnIndexConstraint" ):
                listener.exitColumnIndexConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIndexConstraint" ):
                return visitor.visitColumnIndexConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ColumnDefaultConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.defaultExpr = None # ExprContext
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefaultConstraint" ):
                listener.enterColumnDefaultConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefaultConstraint" ):
                listener.exitColumnDefaultConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefaultConstraint" ):
                return visitor.visitColumnDefaultConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ColumnGeneratedConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.generatedExpr = None # ExprContext
            self.copyFrom(ctx)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)
        def GENERATED(self):
            return self.getToken(SqlBaseParser.GENERATED, 0)
        def ALWAYS(self):
            return self.getToken(SqlBaseParser.ALWAYS, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnGeneratedConstraint" ):
                listener.enterColumnGeneratedConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnGeneratedConstraint" ):
                listener.exitColumnGeneratedConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnGeneratedConstraint" ):
                return visitor.visitColumnGeneratedConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ColumnIndexOffContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)
        def OFF(self):
            return self.getToken(SqlBaseParser.OFF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnIndexOff" ):
                listener.enterColumnIndexOff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnIndexOff" ):
                listener.exitColumnIndexOff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIndexOff" ):
                return visitor.visitColumnIndexOff(self)
            else:
                return visitor.visitChildren(self)


    class ColumnConstraintNotNullContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnConstraintNotNull" ):
                listener.enterColumnConstraintNotNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnConstraintNotNull" ):
                listener.exitColumnConstraintNotNull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnConstraintNotNull" ):
                return visitor.visitColumnConstraintNotNull(self)
            else:
                return visitor.visitChildren(self)



    def columnConstraint(self):

        localctx = SqlBaseParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 2435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ColumnConstraintPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2404
                self.primaryKeyContraint()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ColumnConstraintNotNullContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2405
                self.match(SqlBaseParser.NOT)
                self.state = 2406
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ColumnConstraintNullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2407
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.ColumnIndexConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2408
                self.match(SqlBaseParser.INDEX)
                self.state = 2409
                self.match(SqlBaseParser.USING)
                self.state = 2410
                localctx.method = self.ident()
                self.state = 2412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 2411
                    self.withProperties()


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.ColumnIndexOffContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2414
                self.match(SqlBaseParser.INDEX)
                self.state = 2415
                self.match(SqlBaseParser.OFF)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.ColumnStorageDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2416
                self.match(SqlBaseParser.STORAGE)
                self.state = 2417
                self.withProperties()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.ColumnDefaultConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==173:
                    self.state = 2418
                    self.match(SqlBaseParser.CONSTRAINT)
                    self.state = 2419
                    localctx.name = self.ident()


                self.state = 2422
                self.match(SqlBaseParser.DEFAULT)
                self.state = 2423
                localctx.defaultExpr = self.expr()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.ColumnGeneratedConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==173:
                    self.state = 2424
                    self.match(SqlBaseParser.CONSTRAINT)
                    self.state = 2425
                    localctx.name = self.ident()


                self.state = 2430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==244:
                    self.state = 2428
                    self.match(SqlBaseParser.GENERATED)
                    self.state = 2429
                    self.match(SqlBaseParser.ALWAYS)


                self.state = 2432
                self.match(SqlBaseParser.AS)
                self.state = 2433
                localctx.generatedExpr = self.expr()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.ColumnCheckConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2434
                self.checkConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryKeyContraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext

        def PRIMARY_KEY(self):
            return self.getToken(SqlBaseParser.PRIMARY_KEY, 0)

        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryKeyContraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyContraint" ):
                listener.enterPrimaryKeyContraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyContraint" ):
                listener.exitPrimaryKeyContraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryKeyContraint" ):
                return visitor.visitPrimaryKeyContraint(self)
            else:
                return visitor.visitChildren(self)




    def primaryKeyContraint(self):

        localctx = SqlBaseParser.PrimaryKeyContraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_primaryKeyContraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==173:
                self.state = 2437
                self.match(SqlBaseParser.CONSTRAINT)
                self.state = 2438
                localctx.name = self.ident()


            self.state = 2441
            self.match(SqlBaseParser.PRIMARY_KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext
            self.expression = None # BooleanExpressionContext

        def CHECK(self):
            return self.getToken(SqlBaseParser.CHECK, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_checkConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckConstraint" ):
                listener.enterCheckConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckConstraint" ):
                listener.exitCheckConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckConstraint" ):
                return visitor.visitCheckConstraint(self)
            else:
                return visitor.visitChildren(self)




    def checkConstraint(self):

        localctx = SqlBaseParser.CheckConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_checkConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==173:
                self.state = 2443
                self.match(SqlBaseParser.CONSTRAINT)
                self.state = 2444
                localctx.name = self.ident()


            self.state = 2447
            self.match(SqlBaseParser.CHECK)
            self.state = 2448
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 2449
            localctx.expression = self.booleanExpression(0)
            self.state = 2450
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_withProperties

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithGenericPropertiesContext(WithPropertiesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WithPropertiesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def genericProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.GenericPropertiesContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithGenericProperties" ):
                listener.enterWithGenericProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithGenericProperties" ):
                listener.exitWithGenericProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithGenericProperties" ):
                return visitor.visitWithGenericProperties(self)
            else:
                return visitor.visitChildren(self)



    def withProperties(self):

        localctx = SqlBaseParser.WithPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_withProperties)
        try:
            localctx = SqlBaseParser.WithGenericPropertiesContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 2452
            self.match(SqlBaseParser.WITH)
            self.state = 2453
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 2454
            self.genericProperties()
            self.state = 2455
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GenericPropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GenericPropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_genericProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericProperties" ):
                listener.enterGenericProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericProperties" ):
                listener.exitGenericProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericProperties" ):
                return visitor.visitGenericProperties(self)
            else:
                return visitor.visitChildren(self)




    def genericProperties(self):

        localctx = SqlBaseParser.GenericPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_genericProperties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2457
            self.genericProperty()
            self.state = 2462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 2458
                self.match(SqlBaseParser.COMMA)
                self.state = 2459
                self.genericProperty()
                self.state = 2464
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_genericProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericProperty" ):
                listener.enterGenericProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericProperty" ):
                listener.exitGenericProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericProperty" ):
                return visitor.visitGenericProperty(self)
            else:
                return visitor.visitChildren(self)




    def genericProperty(self):

        localctx = SqlBaseParser.GenericPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_genericProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2465
            self.ident()
            self.state = 2466
            self.match(SqlBaseParser.EQ)
            self.state = 2467
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def explainOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExplainOptionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExplainOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_explainOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainOptions" ):
                listener.enterExplainOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainOptions" ):
                listener.exitExplainOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainOptions" ):
                return visitor.visitExplainOptions(self)
            else:
                return visitor.visitChildren(self)




    def explainOptions(self):

        localctx = SqlBaseParser.ExplainOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_explainOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2469
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)

            self.state = 2470
            self.explainOption()
            self.state = 2475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 2471
                self.match(SqlBaseParser.COMMA)
                self.state = 2472
                self.explainOption()
                self.state = 2477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2478
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def COSTS(self):
            return self.getToken(SqlBaseParser.COSTS, 0)

        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_explainOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainOption" ):
                listener.enterExplainOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainOption" ):
                listener.exitExplainOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainOption" ):
                return visitor.visitExplainOption(self)
            else:
                return visitor.visitChildren(self)




    def explainOption(self):

        localctx = SqlBaseParser.ExplainOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_explainOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2480
            _la = self._input.LA(1)
            if not(((((_la - 165)) & ~0x3f) == 0 and ((1 << (_la - 165)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30 or _la==31:
                self.state = 2481
                self.booleanLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPredicateIdentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchPred = None # MatchPredicateIdentContext

        def matchPredicateIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MatchPredicateIdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MatchPredicateIdentContext,i)


        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_matchPredicateIdents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPredicateIdents" ):
                listener.enterMatchPredicateIdents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPredicateIdents" ):
                listener.exitMatchPredicateIdents(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPredicateIdents" ):
                return visitor.visitMatchPredicateIdents(self)
            else:
                return visitor.visitChildren(self)




    def matchPredicateIdents(self):

        localctx = SqlBaseParser.MatchPredicateIdentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_matchPredicateIdents)
        self._la = 0 # Token type
        try:
            self.state = 2496
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 322, 323, 324, 325]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2484
                localctx.matchPred = self.matchPredicateIdent()
                pass
            elif token in [305]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2485
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 2486
                self.matchPredicateIdent()
                self.state = 2491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==303:
                    self.state = 2487
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2488
                    self.matchPredicateIdent()
                    self.state = 2493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2494
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPredicateIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boost = None # ParameterOrSimpleLiteralContext

        def subscriptSafe(self):
            return self.getTypedRuleContext(SqlBaseParser.SubscriptSafeContext,0)


        def parameterOrSimpleLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrSimpleLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_matchPredicateIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPredicateIdent" ):
                listener.enterMatchPredicateIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPredicateIdent" ):
                listener.exitMatchPredicateIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPredicateIdent" ):
                return visitor.visitMatchPredicateIdent(self)
            else:
                return visitor.visitChildren(self)




    def matchPredicateIdent(self):

        localctx = SqlBaseParser.MatchPredicateIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_matchPredicateIdent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2498
            self.subscriptSafe(0)
            self.state = 2500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 2199023255559) != 0) or ((((_la - 312)) & ~0x3f) == 0 and ((1 << (_la - 312)) & 17379) != 0):
                self.state = 2499
                localctx.boost = self.parameterOrSimpleLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzerElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokenizer(self):
            return self.getTypedRuleContext(SqlBaseParser.TokenizerContext,0)


        def tokenFilters(self):
            return self.getTypedRuleContext(SqlBaseParser.TokenFiltersContext,0)


        def charFilters(self):
            return self.getTypedRuleContext(SqlBaseParser.CharFiltersContext,0)


        def genericProperty(self):
            return self.getTypedRuleContext(SqlBaseParser.GenericPropertyContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_analyzerElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzerElement" ):
                listener.enterAnalyzerElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzerElement" ):
                listener.exitAnalyzerElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyzerElement" ):
                return visitor.visitAnalyzerElement(self)
            else:
                return visitor.visitChildren(self)




    def analyzerElement(self):

        localctx = SqlBaseParser.AnalyzerElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_analyzerElement)
        try:
            self.state = 2506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2502
                self.tokenizer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2503
                self.tokenFilters()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2504
                self.charFilters()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2505
                self.genericProperty()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokenizerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOKENIZER(self):
            return self.getToken(SqlBaseParser.TOKENIZER, 0)

        def namedProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedPropertiesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tokenizer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokenizer" ):
                listener.enterTokenizer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokenizer" ):
                listener.exitTokenizer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTokenizer" ):
                return visitor.visitTokenizer(self)
            else:
                return visitor.visitChildren(self)




    def tokenizer(self):

        localctx = SqlBaseParser.TokenizerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_tokenizer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2508
            self.match(SqlBaseParser.TOKENIZER)
            self.state = 2509
            self.namedProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokenFiltersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOKEN_FILTERS(self):
            return self.getToken(SqlBaseParser.TOKEN_FILTERS, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def namedProperties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedPropertiesContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedPropertiesContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tokenFilters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokenFilters" ):
                listener.enterTokenFilters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokenFilters" ):
                listener.exitTokenFilters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTokenFilters" ):
                return visitor.visitTokenFilters(self)
            else:
                return visitor.visitChildren(self)




    def tokenFilters(self):

        localctx = SqlBaseParser.TokenFiltersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_tokenFilters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2511
            self.match(SqlBaseParser.TOKEN_FILTERS)
            self.state = 2512
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 2513
            self.namedProperties()
            self.state = 2518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 2514
                self.match(SqlBaseParser.COMMA)
                self.state = 2515
                self.namedProperties()
                self.state = 2520
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2521
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharFiltersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_FILTERS(self):
            return self.getToken(SqlBaseParser.CHAR_FILTERS, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def namedProperties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedPropertiesContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedPropertiesContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_charFilters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharFilters" ):
                listener.enterCharFilters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharFilters" ):
                listener.exitCharFilters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharFilters" ):
                return visitor.visitCharFilters(self)
            else:
                return visitor.visitChildren(self)




    def charFilters(self):

        localctx = SqlBaseParser.CharFiltersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_charFilters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2523
            self.match(SqlBaseParser.CHAR_FILTERS)
            self.state = 2524
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 2525
            self.namedProperties()
            self.state = 2530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 2526
                self.match(SqlBaseParser.COMMA)
                self.state = 2527
                self.namedProperties()
                self.state = 2532
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2533
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedProperties" ):
                listener.enterNamedProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedProperties" ):
                listener.exitNamedProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedProperties" ):
                return visitor.visitNamedProperties(self)
            else:
                return visitor.visitChildren(self)




    def namedProperties(self):

        localctx = SqlBaseParser.NamedPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_namedProperties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2535
            self.ident()
            self.state = 2537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 2536
                self.withProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableWithPartitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableWithPartition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableWithPartitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableWithPartitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableWithPartitions" ):
                listener.enterTableWithPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableWithPartitions" ):
                listener.exitTableWithPartitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableWithPartitions" ):
                return visitor.visitTableWithPartitions(self)
            else:
                return visitor.visitChildren(self)




    def tableWithPartitions(self):

        localctx = SqlBaseParser.TableWithPartitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_tableWithPartitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2539
            self.tableWithPartition()
            self.state = 2544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==303:
                self.state = 2540
                self.match(SqlBaseParser.COMMA)
                self.state = 2541
                self.tableWithPartition()
                self.state = 2546
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetGlobalAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # PrimaryExpressionContext
            self.value = None # ExprContext

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_setGlobalAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetGlobalAssignment" ):
                listener.enterSetGlobalAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetGlobalAssignment" ):
                listener.exitSetGlobalAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetGlobalAssignment" ):
                return visitor.visitSetGlobalAssignment(self)
            else:
                return visitor.visitChildren(self)




    def setGlobalAssignment(self):

        localctx = SqlBaseParser.SetGlobalAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_setGlobalAssignment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2547
            localctx.name = self.primaryExpression(0)
            self.state = 2548
            _la = self._input.LA(1)
            if not(_la==4 or _la==282):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2549
            localctx.value = self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanLiteralContext,0)


        def numericLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.NumericLiteralContext,0)


        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def on(self):
            return self.getTypedRuleContext(SqlBaseParser.OnContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_setExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetExpr" ):
                listener.enterSetExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetExpr" ):
                listener.exitSetExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetExpr" ):
                return visitor.visitSetExpr(self)
            else:
                return visitor.visitChildren(self)




    def setExpr(self):

        localctx = SqlBaseParser.SetExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_setExpr)
        try:
            self.state = 2556
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [317, 326]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2551
                self.stringLiteral()
                pass
            elif token in [30, 31]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2552
                self.booleanLiteral()
                pass
            elif token in [320, 321]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2553
                self.numericLiteral()
                pass
            elif token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 208, 211, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 322, 323, 324, 325]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2554
                self.ident()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2555
                self.on()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_on

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn" ):
                listener.enterOn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn" ):
                listener.exitOn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn" ):
                return visitor.visitOn(self)
            else:
                return visitor.visitChildren(self)




    def on(self):

        localctx = SqlBaseParser.OnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_on)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2558
            self.match(SqlBaseParser.ON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SecurableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_securable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurable" ):
                listener.enterSecurable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurable" ):
                listener.exitSecurable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecurable" ):
                return visitor.visitSecurable(self)
            else:
                return visitor.visitChildren(self)




    def securable(self):

        localctx = SqlBaseParser.SecurableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_securable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2560
            _la = self._input.LA(1)
            if not(_la==97 or _la==193 or _la==252):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)

        def isolationLevel(self):
            return self.getTypedRuleContext(SqlBaseParser.IsolationLevelContext,0)


        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def DEFERRABLE(self):
            return self.getToken(SqlBaseParser.DEFERRABLE, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_transactionMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionMode" ):
                listener.enterTransactionMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionMode" ):
                listener.exitTransactionMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionMode" ):
                return visitor.visitTransactionMode(self)
            else:
                return visitor.visitChildren(self)




    def transactionMode(self):

        localctx = SqlBaseParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_transactionMode)
        self._la = 0 # Token type
        try:
            self.state = 2575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [150]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2562
                self.match(SqlBaseParser.ISOLATION)
                self.state = 2563
                self.match(SqlBaseParser.LEVEL)
                self.state = 2564
                self.isolationLevel()
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2569
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                if la_ == 1:
                    self.state = 2565
                    self.match(SqlBaseParser.READ)
                    self.state = 2566
                    self.match(SqlBaseParser.WRITE)
                    pass

                elif la_ == 2:
                    self.state = 2567
                    self.match(SqlBaseParser.READ)
                    self.state = 2568
                    self.match(SqlBaseParser.ONLY)
                    pass


                pass
            elif token in [23, 158]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 2571
                    self.match(SqlBaseParser.NOT)


                self.state = 2574
                self.match(SqlBaseParser.DEFERRABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsolationLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_isolationLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsolationLevel" ):
                return visitor.visitIsolationLevel(self)
            else:
                return visitor.visitChildren(self)




    def isolationLevel(self):

        localctx = SqlBaseParser.IsolationLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_isolationLevel)
        try:
            self.state = 2584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2577
                self.match(SqlBaseParser.SERIALIZABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2578
                self.match(SqlBaseParser.REPEATABLE)
                self.state = 2579
                self.match(SqlBaseParser.READ)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2580
                self.match(SqlBaseParser.READ)
                self.state = 2581
                self.match(SqlBaseParser.COMMITTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2582
                self.match(SqlBaseParser.READ)
                self.state = 2583
                self.match(SqlBaseParser.UNCOMMITTED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(SqlBaseParser.PRIOR, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def ABSOLUTE(self):
            return self.getToken(SqlBaseParser.ABSOLUTE, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.IntegerLiteralContext,0)


        def RELATIVE(self):
            return self.getToken(SqlBaseParser.RELATIVE, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def FORWARD(self):
            return self.getToken(SqlBaseParser.FORWARD, 0)

        def BACKWARD(self):
            return self.getToken(SqlBaseParser.BACKWARD, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_direction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirection" ):
                listener.enterDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirection" ):
                listener.exitDirection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirection" ):
                return visitor.visitDirection(self)
            else:
                return visitor.visitChildren(self)




    def direction(self):

        localctx = SqlBaseParser.DirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_direction)
        self._la = 0 # Token type
        try:
            self.state = 2609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2586
                self.match(SqlBaseParser.NEXT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2587
                self.match(SqlBaseParser.PRIOR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2588
                self.match(SqlBaseParser.FIRST)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2589
                self.match(SqlBaseParser.LAST)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2590
                self.match(SqlBaseParser.ABSOLUTE)
                self.state = 2591
                self.integerLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2592
                self.match(SqlBaseParser.RELATIVE)
                self.state = 2594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==294:
                    self.state = 2593
                    self.match(SqlBaseParser.MINUS)


                self.state = 2596
                self.integerLiteral()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2597
                self.integerLiteral()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2598
                self.match(SqlBaseParser.ALL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2599
                self.match(SqlBaseParser.FORWARD)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2600
                self.match(SqlBaseParser.FORWARD)
                self.state = 2601
                self.integerLiteral()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2602
                self.match(SqlBaseParser.FORWARD)
                self.state = 2603
                self.match(SqlBaseParser.ALL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2604
                self.match(SqlBaseParser.BACKWARD)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2605
                self.match(SqlBaseParser.BACKWARD)
                self.state = 2606
                self.integerLiteral()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2607
                self.match(SqlBaseParser.BACKWARD)
                self.state = 2608
                self.match(SqlBaseParser.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareCursorParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASENSITIVE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ASENSITIVE)
            else:
                return self.getToken(SqlBaseParser.ASENSITIVE, i)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BINARY)
            else:
                return self.getToken(SqlBaseParser.BINARY, i)

        def INSENSITIVE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INSENSITIVE)
            else:
                return self.getToken(SqlBaseParser.INSENSITIVE, i)

        def SCROLL(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.SCROLL)
            else:
                return self.getToken(SqlBaseParser.SCROLL, i)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.NO)
            else:
                return self.getToken(SqlBaseParser.NO, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_declareCursorParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCursorParams" ):
                listener.enterDeclareCursorParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCursorParams" ):
                listener.exitDeclareCursorParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareCursorParams" ):
                return visitor.visitDeclareCursorParams(self)
            else:
                return visitor.visitChildren(self)




    def declareCursorParams(self):

        localctx = SqlBaseParser.DeclareCursorParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_declareCursorParams)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & 31) != 0):
                self.state = 2618
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [263]:
                    self.state = 2611
                    self.match(SqlBaseParser.ASENSITIVE)
                    pass
                elif token in [265]:
                    self.state = 2612
                    self.match(SqlBaseParser.BINARY)
                    pass
                elif token in [264]:
                    self.state = 2613
                    self.match(SqlBaseParser.INSENSITIVE)
                    pass
                elif token in [266, 267]:
                    self.state = 2615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==266:
                        self.state = 2614
                        self.match(SqlBaseParser.NO)


                    self.state = 2617
                    self.match(SqlBaseParser.SCROLL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSOLUTE(self):
            return self.getToken(SqlBaseParser.ABSOLUTE, 0)

        def ALIAS(self):
            return self.getToken(SqlBaseParser.ALIAS, 0)

        def ALLOCATE(self):
            return self.getToken(SqlBaseParser.ALLOCATE, 0)

        def ALWAYS(self):
            return self.getToken(SqlBaseParser.ALWAYS, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def ANALYZER(self):
            return self.getToken(SqlBaseParser.ANALYZER, 0)

        def ARTIFACTS(self):
            return self.getToken(SqlBaseParser.ARTIFACTS, 0)

        def ASENSITIVE(self):
            return self.getToken(SqlBaseParser.ASENSITIVE, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)

        def BACKWARD(self):
            return self.getToken(SqlBaseParser.BACKWARD, 0)

        def BEGIN(self):
            return self.getToken(SqlBaseParser.BEGIN, 0)

        def BERNOULLI(self):
            return self.getToken(SqlBaseParser.BERNOULLI, 0)

        def BINARY(self):
            return self.getToken(SqlBaseParser.BINARY, 0)

        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)

        def BOOLEAN(self):
            return self.getToken(SqlBaseParser.BOOLEAN, 0)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def BYTE(self):
            return self.getToken(SqlBaseParser.BYTE, 0)

        def CANCEL(self):
            return self.getToken(SqlBaseParser.CANCEL, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)

        def CHARACTER(self):
            return self.getToken(SqlBaseParser.CHARACTER, 0)

        def CHARACTERISTICS(self):
            return self.getToken(SqlBaseParser.CHARACTERISTICS, 0)

        def CHAR_FILTERS(self):
            return self.getToken(SqlBaseParser.CHAR_FILTERS, 0)

        def CHECK(self):
            return self.getToken(SqlBaseParser.CHECK, 0)

        def CLOSE(self):
            return self.getToken(SqlBaseParser.CLOSE, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def CONFLICT(self):
            return self.getToken(SqlBaseParser.CONFLICT, 0)

        def CONNECTION(self):
            return self.getToken(SqlBaseParser.CONNECTION, 0)

        def COPY(self):
            return self.getToken(SqlBaseParser.COPY, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(SqlBaseParser.CURRENT_SCHEMA, 0)

        def CURRENT_TIME(self):
            return self.getToken(SqlBaseParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)

        def CURSOR(self):
            return self.getToken(SqlBaseParser.CURSOR, 0)

        def DANGLING(self):
            return self.getToken(SqlBaseParser.DANGLING, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DEALLOCATE(self):
            return self.getToken(SqlBaseParser.DEALLOCATE, 0)

        def DECLARE(self):
            return self.getToken(SqlBaseParser.DECLARE, 0)

        def DECOMMISSION(self):
            return self.getToken(SqlBaseParser.DECOMMISSION, 0)

        def DEFERRABLE(self):
            return self.getToken(SqlBaseParser.DEFERRABLE, 0)

        def DISABLE(self):
            return self.getToken(SqlBaseParser.DISABLE, 0)

        def DISCARD(self):
            return self.getToken(SqlBaseParser.DISCARD, 0)

        def DISTRIBUTED(self):
            return self.getToken(SqlBaseParser.DISTRIBUTED, 0)

        def DO(self):
            return self.getToken(SqlBaseParser.DO, 0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def DUPLICATE(self):
            return self.getToken(SqlBaseParser.DUPLICATE, 0)

        def DYNAMIC(self):
            return self.getToken(SqlBaseParser.DYNAMIC, 0)

        def ENABLE(self):
            return self.getToken(SqlBaseParser.ENABLE, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def EXTENDS(self):
            return self.getToken(SqlBaseParser.EXTENDS, 0)

        def FAILED(self):
            return self.getToken(SqlBaseParser.FAILED, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def FLOAT(self):
            return self.getToken(SqlBaseParser.FLOAT, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FOREIGN(self):
            return self.getToken(SqlBaseParser.FOREIGN, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FORWARD(self):
            return self.getToken(SqlBaseParser.FORWARD, 0)

        def FULLTEXT(self):
            return self.getToken(SqlBaseParser.FULLTEXT, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GC(self):
            return self.getToken(SqlBaseParser.GC, 0)

        def GENERATED(self):
            return self.getToken(SqlBaseParser.GENERATED, 0)

        def GEO_POINT(self):
            return self.getToken(SqlBaseParser.GEO_POINT, 0)

        def GEO_SHAPE(self):
            return self.getToken(SqlBaseParser.GEO_SHAPE, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def GRAPHVIZ(self):
            return self.getToken(SqlBaseParser.GRAPHVIZ, 0)

        def HOLD(self):
            return self.getToken(SqlBaseParser.HOLD, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def IGNORED(self):
            return self.getToken(SqlBaseParser.IGNORED, 0)

        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)

        def INSENSITIVE(self):
            return self.getToken(SqlBaseParser.INSENSITIVE, 0)

        def INT(self):
            return self.getToken(SqlBaseParser.INT, 0)

        def INTEGER(self):
            return self.getToken(SqlBaseParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def IP(self):
            return self.getToken(SqlBaseParser.IP, 0)

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)

        def KEY(self):
            return self.getToken(SqlBaseParser.KEY, 0)

        def KILL(self):
            return self.getToken(SqlBaseParser.KILL, 0)

        def LANGUAGE(self):
            return self.getToken(SqlBaseParser.LANGUAGE, 0)

        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)

        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def LONG(self):
            return self.getToken(SqlBaseParser.LONG, 0)

        def MAPPING(self):
            return self.getToken(SqlBaseParser.MAPPING, 0)

        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)

        def METADATA(self):
            return self.getToken(SqlBaseParser.METADATA, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def MOVE(self):
            return self.getToken(SqlBaseParser.MOVE, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NOTHING(self):
            return self.getToken(SqlBaseParser.NOTHING, 0)

        def OFF(self):
            return self.getToken(SqlBaseParser.OFF, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def OPEN(self):
            return self.getToken(SqlBaseParser.OPEN, 0)

        def OPTIMIZE(self):
            return self.getToken(SqlBaseParser.OPTIMIZE, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PLAIN(self):
            return self.getToken(SqlBaseParser.PLAIN, 0)

        def PLANS(self):
            return self.getToken(SqlBaseParser.PLANS, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)

        def PRIOR(self):
            return self.getToken(SqlBaseParser.PRIOR, 0)

        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)

        def PROMOTE(self):
            return self.getToken(SqlBaseParser.PROMOTE, 0)

        def PUBLICATION(self):
            return self.getToken(SqlBaseParser.PUBLICATION, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RELATIVE(self):
            return self.getToken(SqlBaseParser.RELATIVE, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(SqlBaseParser.REPLICA, 0)

        def REPOSITORY(self):
            return self.getToken(SqlBaseParser.REPOSITORY, 0)

        def REROUTE(self):
            return self.getToken(SqlBaseParser.REROUTE, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def RESTORE(self):
            return self.getToken(SqlBaseParser.RESTORE, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def RETRY(self):
            return self.getToken(SqlBaseParser.RETRY, 0)

        def RETURN(self):
            return self.getToken(SqlBaseParser.RETURN, 0)

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def SCROLL(self):
            return self.getToken(SqlBaseParser.SCROLL, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SEQUENCES(self):
            return self.getToken(SqlBaseParser.SEQUENCES, 0)

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(SqlBaseParser.SERVER, 0)

        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)

        def SHARD(self):
            return self.getToken(SqlBaseParser.SHARD, 0)

        def SHARDS(self):
            return self.getToken(SqlBaseParser.SHARDS, 0)

        def SHORT(self):
            return self.getToken(SqlBaseParser.SHORT, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SNAPSHOT(self):
            return self.getToken(SqlBaseParser.SNAPSHOT, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STORAGE(self):
            return self.getToken(SqlBaseParser.STORAGE, 0)

        def STRICT(self):
            return self.getToken(SqlBaseParser.STRICT, 0)

        def STRING_TYPE(self):
            return self.getToken(SqlBaseParser.STRING_TYPE, 0)

        def SUBSCRIPTION(self):
            return self.getToken(SqlBaseParser.SUBSCRIPTION, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def SUMMARY(self):
            return self.getToken(SqlBaseParser.SUMMARY, 0)

        def SWAP(self):
            return self.getToken(SqlBaseParser.SWAP, 0)

        def SYSTEM(self):
            return self.getToken(SqlBaseParser.SYSTEM, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TEMP(self):
            return self.getToken(SqlBaseParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def TEXT(self):
            return self.getToken(SqlBaseParser.TEXT, 0)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def TOKENIZER(self):
            return self.getToken(SqlBaseParser.TOKENIZER, 0)

        def TOKEN_FILTERS(self):
            return self.getToken(SqlBaseParser.TOKEN_FILTERS, 0)

        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRANSACTION_ISOLATION(self):
            return self.getToken(SqlBaseParser.TRANSACTION_ISOLATION, 0)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def VARYING(self):
            return self.getToken(SqlBaseParser.VARYING, 0)

        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(SqlBaseParser.WRAPPER, 0)

        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2623
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1152776691328746578) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & -1718175795199) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & -4612531820615958531) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & -514023868187065) != 0) or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & 65535) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[11] = self.queryTerm_sempred
        self._predicates[19] = self.relation_sempred
        self._predicates[30] = self.booleanExpression_sempred
        self._predicates[33] = self.valueExpression_sempred
        self._predicates[34] = self.primaryExpression_sempred
        self._predicates[48] = self.subscriptSafe_sempred
        self._predicates[96] = self.dataType_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

    def subscriptSafe_sempred(self, localctx:SubscriptSafeContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

    def dataType_sempred(self, localctx:DataTypeContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         




