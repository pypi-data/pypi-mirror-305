# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RegistryGenerativeLanguageModelInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_path': 'str',
        'system_prompt': 'str'
    }

    attribute_map = {
        'model_path': 'modelPath',
        'system_prompt': 'systemPrompt'
    }

    def __init__(self, model_path=None, system_prompt=None):  # noqa: E501
        """RegistryGenerativeLanguageModelInfo - a model defined in Swagger"""  # noqa: E501
        self._model_path = None
        self._system_prompt = None
        self.discriminator = None
        self.model_path = model_path
        if system_prompt is not None:
            self.system_prompt = system_prompt

    @property
    def model_path(self):
        """Gets the model_path of this RegistryGenerativeLanguageModelInfo.  # noqa: E501

        The path to the model.  This can be a local path or a path to a file in a configured integration.  # noqa: E501

        :return: The model_path of this RegistryGenerativeLanguageModelInfo.  # noqa: E501
        :rtype: str
        """
        return self._model_path

    @model_path.setter
    def model_path(self, model_path):
        """Sets the model_path of this RegistryGenerativeLanguageModelInfo.

        The path to the model.  This can be a local path or a path to a file in a configured integration.  # noqa: E501

        :param model_path: The model_path of this RegistryGenerativeLanguageModelInfo.  # noqa: E501
        :type: str
        """
        if model_path is None:
            raise ValueError("Invalid value for `model_path`, must not be `None`")  # noqa: E501

        self._model_path = model_path

    @property
    def system_prompt(self):
        """Gets the system_prompt of this RegistryGenerativeLanguageModelInfo.  # noqa: E501

        The prompt to use for the model during each request.  # noqa: E501

        :return: The system_prompt of this RegistryGenerativeLanguageModelInfo.  # noqa: E501
        :rtype: str
        """
        return self._system_prompt

    @system_prompt.setter
    def system_prompt(self, system_prompt):
        """Sets the system_prompt of this RegistryGenerativeLanguageModelInfo.

        The prompt to use for the model during each request.  # noqa: E501

        :param system_prompt: The system_prompt of this RegistryGenerativeLanguageModelInfo.  # noqa: E501
        :type: str
        """

        self._system_prompt = system_prompt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistryGenerativeLanguageModelInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistryGenerativeLanguageModelInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
