[build-system]
requires = ["setuptools>=42"]
build-backend = "setuptools.build_meta"


[project]
name="bluequbit"
description="Python SDK to BlueQubit app"
license = {text = "Apache 2.0"}
readme = "README.md"
authors=[{name = "BlueQubit", email = "hovnatan@bluequbit.io"}]
dynamic = ["version", "dependencies"]
requires-python = ">=3.9"

[project.entry-points."pennylane.plugins"]
"bluequbit.cpu" = "bluequbit.pennylane_plugin:BluequbitCPU"


[tool.pyright]
pythonVersion = "3.10"
exclude = [
  "**/node_modules",
  "**/__pycache__",
  "**/.*",
  "dist",
]
typeCheckingMode = "off"


[tool.black]
preview = false

[tool.codespell]
ignore-words-list = 'Braket,braket,ket,THIRDPARTY'
skip="jquery*.js,.git,./docs/build/html,./.venv,./.venv2,./.gitignore,notebooks,htmlcov,.tox"
check-filenames = true

[tool.isort]
profile = "black"
extend_skip_glob = [".venv*"]
skip_gitignore = true

[tool.pytest.ini_options]
timeout = "900"
timeout_method = "thread"
addopts = "--capture=tee-sys -v -p no:xdist --strict-markers --durations=20"
testpaths = [ "tests" ]
markers = [ "hier_circuit", "slow" ]

[tool.ruff]
preview = false
# See https://github.com/charliermarsh/ruff#rules for error code definitions.
lint.select = [ "ALL" ]
lint.extend-ignore = [
    "E501", # line-too-long
    "S101", # use of assert
    "PLR0912", # Too many branches
    "PLR2004", # Magic value used in comparison, consider replacing 2 with a constant variable
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PLR0911", # Too many return statements
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "D", # docstrings
    "ERA001", # commented-out code
    "T201", # print was found
    "ANN", # annotations
    "INP001", # is part of an implicit namespace package.
    "COM812", # Trailing comma missing
    "TD", # TODO stuff
    "I", # isort
    "FIX002", # todo fix warning
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY002", # Create your own exception
    "EM101", # exception must not use string literal
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "C901", # function is too complex
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT003", # Boolean positional value in function call
    "FBT002", # Boolean default positional value in function call
    "G004", # Logging statement uses f-string
    "RET504", # Unnecessary assignment to `` before `return` statement
    "TID252", # Prefer absolute imports over relative imports from parent modules
]
extend-exclude = ["debug", "notebooks", ".pytest_cache", ".mypy_cache", ".logs"]

target-version = "py39"

[tool.pylint.'BASIC']
good-names = "f,e,i,j,k,m,s,to,rp,d"

[tool.pylint.'SIMILARITIES']
min-similarity-lines = 7

[tool.pylint.'MASTER']
init-hook = "sys.path.append('./src/common'); sys.path.append('./src/backend'); sys.path.append('./src/task_runner')"

[tool.pylint.'MESSAGE_CONTROL']
disable = [
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "no-else-return",
  "too-many-lines",
  "too-many-arguments",
  "too-many-instance-attributes",
  "broad-except",
  "wrong-import-order",
  "too-many-branches",
  "too-many-statements",
  "too-many-locals",
  "too-many-nested-blocks",
  "not-callable"
]

[tool.pylint.'FORMAT']
max-line-length = 88

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    ]

[tool.mypy]
ignore_missing_imports = true
files = [ "src/" ]
check_untyped_defs = true
