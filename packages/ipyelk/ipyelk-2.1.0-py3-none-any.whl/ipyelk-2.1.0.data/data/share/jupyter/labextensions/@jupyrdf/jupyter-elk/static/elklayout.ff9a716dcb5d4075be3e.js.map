{"version":3,"file":"elklayout.ff9a716dcb5d4075be3e.js?v=ff9a716dcb5d4075be3e","mappings":"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","sources":["webpack://@jupyrdf/jupyter-elk/./js/measure_text.ts","webpack://@jupyrdf/jupyter-elk/./js/layout_widget.ts"],"sourcesContent":["/**\n * Copyright (c) 2024 ipyelk contributors.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { random } from 'lodash';\n\nimport { DOMWidgetModel, DOMWidgetView } from '@jupyter-widgets/base';\nimport { unpack_models as deserialize } from '@jupyter-widgets/base';\n\nimport { ElkLabel, ElkNode } from './sprotty/json/elkgraph-json';\nimport { ELK_CSS, ELK_DEBUG, IRunMessage, NAME, VERSION } from './tokens';\n\n// import { ElkNode } from './sprotty/sprotty-model';\n\nexport class ELKTextSizerModel extends DOMWidgetModel {\n  static model_name = 'ELKTextSizerModel';\n  static serializers = {\n    ...DOMWidgetModel.serializers,\n    inlet: { deserialize },\n    outlet: { deserialize },\n  };\n\n  defaults() {\n    let defaults = {\n      ...super.defaults(),\n\n      _model_name: ELKTextSizerModel.model_name,\n      _model_module_version: VERSION,\n      _view_module: NAME,\n      _view_name: ELKTextSizerView.view_name,\n      _view_module_version: VERSION,\n      id: String(Math.random()),\n      inlet: null,\n      outlet: null,\n    };\n    return defaults;\n  }\n\n  initialize(\n    attributes: any,\n    options: {\n      model_id: string;\n      comm?: any;\n      widget_manager: any;\n    },\n  ) {\n    super.initialize(attributes, options);\n    ELK_DEBUG && console.warn('ELK Test Sizer Init');\n    this.on('msg:custom', this.handleMessage, this);\n    ELK_DEBUG && console.warn('ELK Text Done Init');\n  }\n\n  make_container(): HTMLElement {\n    const el: HTMLElement = document.createElement('div');\n    const styledClass = this.get('_dom_classes').filter(\n      (dc: string) => dc.indexOf('styled-widget-') === 0,\n    )[0];\n    el.classList.add(\n      'lm-Widget',\n      ELK_CSS.widget_class,\n      ELK_CSS.sizer_class,\n      styledClass,\n    );\n    const raw_css: string = this.get('namespaced_css'); //TODO should this `raw_css` string be escaped?\n    el.innerHTML = `<div class=\"sprotty\"><style>${raw_css}</style><svg class=\"sprotty-graph\"><g></g></svg></div>`;\n    return el;\n  }\n\n  /**\n   * SVG Text Element for given text string\n   * @param text\n   */\n  make_label(label: ElkLabel): SVGElement {\n    ELK_DEBUG && console.warn('ELK Text Label for text', label);\n    let element: SVGElement = createSVGElement('text');\n    let classes: string[] = [ELK_CSS.label];\n    if (label.properties?.cssClasses.length > 0) {\n      classes = classes.concat(label.properties?.cssClasses.split(' '));\n    }\n\n    element.classList.add(...classes);\n    element.textContent = label.text;\n    ELK_DEBUG && console.warn('ELK Text Label', element);\n    return element;\n  }\n\n  handleMessage(content: IRunMessage) {\n    // check message and decide if should call `measure`\n    switch (content.action) {\n      case 'run':\n        this.measure();\n        break;\n    }\n  }\n\n  /**\n   * Method to take a list of texts and build SVG Text Elements to attach to the DOM\n   * @param content message measure request\n   */\n  measure() {\n    const rootNode: ElkNode = this.get('inlet')?.get('value');\n    let outlet: DOMWidgetModel = this.get('outlet'); // target output\n    if (rootNode == null || outlet == null) {\n      return null;\n    }\n    ELK_DEBUG && console.log('Root Node:', rootNode);\n    let texts: ElkLabel[] = get_labels(rootNode);\n\n    ELK_DEBUG && console.warn('ELK Text Sizer Measure', texts);\n    const el: HTMLElement = this.make_container();\n    const view: SVGElement = el.getElementsByTagName('g')[0];\n\n    const new_g: SVGElement = createSVGElement('g');\n    texts.forEach((text) => {\n      new_g.appendChild(this.make_label(text));\n    });\n    view.appendChild(new_g);\n\n    ELK_DEBUG && console.warn('ELK Text Sizer to add node', new_g);\n    ELK_DEBUG && console.warn('ELK Text Sizer node', view);\n\n    document.body.prepend(el);\n\n    let elements: SVGElement[] = Array.from(new_g.getElementsByTagName('text'));\n\n    ELK_DEBUG && console.warn('Sized Text');\n\n    // Callback to take measurements and remove element from DOM\n    window.requestAnimationFrame(() => {\n      this.read_sizes(texts, elements);\n      let output = { ...rootNode };\n      output['out'] = random();\n      outlet.set('value', output);\n      outlet.save_changes();\n      if (!ELK_DEBUG) {\n        document.body.removeChild(el);\n      }\n    });\n  }\n\n  /**\n   * Read the given SVG Text Elements sizes and generate TextSize Objects\n   * @param texts Original list of text strings requested to size\n   * @param elements List of SVG Text Elements to get their respective bounding boxes\n   */\n  read_sizes(labels: ElkLabel[], elements: SVGElement[]) {\n    let i = 0;\n    for (let element of elements) {\n      ELK_DEBUG && console.warn(element.innerHTML);\n      const label: ElkLabel = labels[i];\n      const size: DOMRect = element.getBoundingClientRect();\n\n      label.width = size.width;\n      label.height = size.height;\n\n      i++;\n    }\n  }\n}\n\nexport class ELKTextSizerView extends DOMWidgetView {\n  static view_name = 'ELKTextSizerView';\n  model: ELKTextSizerModel;\n  async render() {}\n}\n\n/**\n * SVG Required Namespaced Element\n */\nfunction createSVGElement(tag: string): SVGElement {\n  return document.createElementNS('http://www.w3.org/2000/svg', tag);\n}\n\nfunction get_labels(el: any): ElkLabel[] {\n  let labels: ElkLabel[] = [];\n  if (el?.labels) {\n    for (let label of el.labels as ElkLabel[]) {\n      // size only those labels without a width or a height set\n      if (!label?.properties?.shape?.width || !label?.properties?.shape?.height) {\n        labels.push(label);\n      }\n    }\n  }\n  for (let child of el?.ports || []) {\n    labels.push(...get_labels(child));\n  }\n  for (let child of el?.children || []) {\n    labels.push(...get_labels(child));\n  }\n  for (let edge of el?.edges || []) {\n    labels.push(...get_labels(edge));\n  }\n  for (let label of el?.labels || []) {\n    labels.push(...get_labels(label));\n  }\n\n  return labels;\n}\n","/**\n * Copyright (c) 2024 ipyelk contributors.\n * Distributed under the terms of the Modified BSD License.\n */\n// import Worker from '!!worker-loader!elkjs/lib/elk-worker.min.js';\nimport * as ELK from 'elkjs/lib/elk-api';\n\nimport { Signal } from '@lumino/signaling';\n\nimport { unpack_models as deserialize } from '@jupyter-widgets/base';\nimport { DOMWidgetModel } from '@jupyter-widgets/base';\n\nimport { ElkNode } from './sprotty/json/elkgraph-json';\nimport { ELK_DEBUG, IRunMessage, NAME, VERSION } from './tokens';\n\nimport Worker from '!!worker-loader!elkjs/lib/elk-worker.js';\n\nexport { ELKTextSizerModel, ELKTextSizerView } from './measure_text';\n\nconst TheElk = new ELK.default({\n  workerFactory: () => {\n    ELK_DEBUG && console.warn('ELK Worker created');\n    return new (Worker as any)();\n  },\n} as any);\n\nfunction collectProperties(node: ElkNode) {\n  let props: Map<string, any> = new Map();\n\n  function strip(node) {\n    props[node.id] = node.properties;\n    delete node['properties'];\n    // children\n    if (node.children) {\n      node.children.map(strip);\n    }\n    // ports\n    if (node.ports) {\n      node.ports.map(strip);\n    }\n    // labels\n    if (node.labels) {\n      node.labels.map(strip);\n    }\n    // edges\n    if (node.edges) {\n      node.edges.map(strip);\n    }\n  }\n  strip(node);\n  return props;\n}\n\nfunction applyProperties(node: ElkNode, props: Map<string, any>) {\n  function apply(node) {\n    node.properties = props[node.id];\n\n    // children\n    if (node.children) {\n      node.children.map(apply);\n    }\n    // ports\n    if (node.ports) {\n      node.ports.map(apply);\n    }\n    // labels\n    if (node.labels) {\n      node.labels.map(apply);\n    }\n    // edges\n    if (node.edges) {\n      node.edges.map(apply);\n    }\n  }\n  apply(node);\n  return node;\n}\n\nexport class ELKLayoutModel extends DOMWidgetModel {\n  static model_name = 'ELKLayoutModel';\n  static serializers = {\n    ...DOMWidgetModel.serializers,\n    inlet: { deserialize },\n    outlet: { deserialize },\n  };\n\n  protected _elk: ELK.ELK;\n\n  layoutUpdated = new Signal<ELKLayoutModel, void>(this);\n\n  defaults() {\n    let defaults = {\n      ...super.defaults(),\n      _view_module: NAME,\n      _model_name: ELKLayoutModel.model_name,\n      _model_module_version: VERSION,\n      inlet: null,\n      outlet: null,\n    };\n    return defaults;\n  }\n\n  initialize(attributes: any, options: any) {\n    super.initialize(attributes, options);\n    // this.on('change:inlet', this.onInletChanged, this);\n    // this.onInletChanged();\n    this.on('msg:custom', this.handleMessage, this);\n  }\n\n  protected ensureElk() {\n    if (this._elk == null) {\n      this._elk = TheElk;\n    }\n  }\n\n  handleMessage(content: IRunMessage) {\n    // check message and decide if should call `measure`\n    switch (content.action) {\n      case 'run':\n        this.layout();\n        break;\n    }\n  }\n\n  async layout() {\n    // There looks like a bug with how elkjs failing to process edge properties\n    // if they are anything more than simple strings. Elkjs doesnt need to operate\n    // on the information passed in `properties` from ipyelk to sprotty so this\n    // will strip them before calling elk and then reapply after\n    // const {rootNode} = this;\n    const rootNode: ELK.ElkNode = this.get('inlet')?.get('value');\n    let outlet: DOMWidgetModel = this.get('outlet'); // target output\n    if (rootNode == null || outlet == null) {\n      return null;\n    }\n    let propmap = collectProperties(rootNode);\n    // strip properties out\n    this.ensureElk();\n    let result;\n    try {\n      result = await this._elk.layout(rootNode);\n      // reapply properties\n      applyProperties(result, propmap);\n    } catch (error) {\n      result = {};\n      console.error(error);\n    }\n\n    outlet.set('value', { ...result });\n    outlet.save_changes();\n    return result;\n  }\n}\n"],"names":["ELKTextSizerModel","DOMWidgetModel","defaults","super","_model_name","model_name","_model_module_version","_view_module","_view_name","ELKTextSizerView","view_name","_view_module_version","id","String","Math","random","inlet","outlet","initialize","attributes","options","console","warn","this","on","handleMessage","make_container","el","document","createElement","styledClass","get","filter","dc","indexOf","classList","add","widget_class","sizer_class","raw_css","innerHTML","make_label","label","element","createSVGElement","classes","properties","cssClasses","length","concat","split","textContent","text","content","action","measure","rootNode","log","texts","get_labels","view","getElementsByTagName","new_g","forEach","appendChild","body","prepend","elements","Array","from","window","requestAnimationFrame","read_sizes","output","set","save_changes","removeChild","labels","i","size","getBoundingClientRect","width","height","serializers","deserialize","DOMWidgetView","render","tag","createElementNS","shape","push","child","ports","children","edge","edges","TheElk","workerFactory","ELKLayoutModel","layoutUpdated","Signal","ensureElk","_elk","layout","result","propmap","node","props","Map","strip","map","collectProperties","apply","error"],"sourceRoot":""}