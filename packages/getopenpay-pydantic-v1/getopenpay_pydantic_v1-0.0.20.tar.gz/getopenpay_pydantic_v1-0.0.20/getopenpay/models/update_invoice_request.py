# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Dict, Optional

from getopenpay.models.discounts import Discounts
from pydantic import BaseModel, Field, StrictStr


class UpdateInvoiceRequest(BaseModel):
  """
    UpdateInvoiceRequest
    """
  payment_method_id: Optional[StrictStr] = None
  description: Optional[StrictStr] = Field(
    'Manual creation of invoice', description='Description for newly created invoice'
  )
  discounts: Optional[Discounts] = None
  custom_fields: Optional[Dict[str, Any]] = None
  __properties = ['payment_method_id', 'description', 'discounts', 'custom_fields']

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> UpdateInvoiceRequest:
    """Create an instance of UpdateInvoiceRequest from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # override the default output from pydantic by calling `to_dict()` of discounts
    if self.discounts:
      _dict['discounts'] = self.discounts.to_dict()
    # set to None if payment_method_id (nullable) is None
    # and __fields_set__ contains the field
    if self.payment_method_id is None and 'payment_method_id' in self.__fields_set__:
      _dict['payment_method_id'] = None

    # set to None if discounts (nullable) is None
    # and __fields_set__ contains the field
    if self.discounts is None and 'discounts' in self.__fields_set__:
      _dict['discounts'] = None

    # set to None if custom_fields (nullable) is None
    # and __fields_set__ contains the field
    if self.custom_fields is None and 'custom_fields' in self.__fields_set__:
      _dict['custom_fields'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> UpdateInvoiceRequest:
    """Create an instance of UpdateInvoiceRequest from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return UpdateInvoiceRequest.parse_obj(obj)

    _obj = UpdateInvoiceRequest.parse_obj(
      {
        'payment_method_id': obj.get('payment_method_id'),
        'description':
          obj.get('description')
          if obj.get('description') is not None else 'Manual creation of invoice',
        'discounts':
          Discounts.from_dict(obj.get('discounts')) if obj.get('discounts') is not None else None,
        'custom_fields': obj.get('custom_fields')
      }
    )
    return _obj
