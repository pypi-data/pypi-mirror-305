
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jneqsim.neqsim.processsimulation.measurementdevice
import jneqsim.neqsim.processsimulation.processequipment.compressor
import jneqsim.neqsim.processsimulation.processequipment.heatexchanger
import jneqsim.neqsim.processsimulation.processequipment.pump
import jneqsim.neqsim.processsimulation.processequipment.separator
import jneqsim.neqsim.processsimulation.processequipment.stream
import jneqsim.neqsim.processsimulation.processequipment.valve
import jneqsim.neqsim.thermo.system
import typing



class CompressorResponse:
    name: java.lang.String = ...
    suctionTemperature: float = ...
    dischargeTemperature: float = ...
    suctionPressure: float = ...
    dischargePressure: float = ...
    polytropicHead: float = ...
    polytropicEfficiency: float = ...
    power: float = ...
    suctionVolumeFlow: float = ...
    internalVolumeFlow: float = ...
    dischargeVolumeFlow: float = ...
    molarMass: float = ...
    suctionMassDensity: float = ...
    dischargeMassDensity: float = ...
    massflow: float = ...
    speed: float = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, compressor: jneqsim.neqsim.processsimulation.processequipment.compressor.Compressor): ...

class FluidComponentResponse:
    name: java.lang.String = ...
    properties: java.util.HashMap = ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def print_(self) -> None: ...

class FluidResponse:
    name: java.lang.String = ...
    properties: java.util.HashMap = ...
    composition: java.util.HashMap = ...
    conditions: java.util.HashMap = ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def print_(self) -> None: ...

class HXResponse:
    name: java.lang.String = ...
    feedTemperature1: float = ...
    dischargeTemperature1: float = ...
    HXthermalEfectiveness: float = ...
    feedTemperature2: float = ...
    dischargeTemperature2: float = ...
    dutyBalance: float = ...
    duty: float = ...
    UAvalue: float = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, heatExchanger: jneqsim.neqsim.processsimulation.processequipment.heatexchanger.HeatExchanger): ...

class HeaterResponse:
    name: java.lang.String = ...
    feedTemperature: float = ...
    dischargeTemperature: float = ...
    duty: float = ...
    def __init__(self, heater: jneqsim.neqsim.processsimulation.processequipment.heatexchanger.Heater): ...

class MPMResponse:
    name: java.lang.String = ...
    massFLow: float = ...
    GOR: float = ...
    GOR_std: float = ...
    gasDensity: float = ...
    oilDensity: float = ...
    waterDensity: float = ...
    def __init__(self, multiPhaseMeter: jneqsim.neqsim.processsimulation.measurementdevice.MultiPhaseMeter): ...

class PumpResponse:
    name: java.lang.String = ...
    suctionTemperature: float = ...
    dischargeTemperature: float = ...
    suctionPressure: float = ...
    dischargePressure: float = ...
    power: float = ...
    duty: float = ...
    suctionVolumeFlow: float = ...
    internalVolumeFlow: float = ...
    dischargeVolumeFlow: float = ...
    molarMass: float = ...
    suctionMassDensity: float = ...
    dischargeMassDensity: float = ...
    massflow: float = ...
    speed: int = ...
    def __init__(self, pump: jneqsim.neqsim.processsimulation.processequipment.pump.Pump): ...

class SeparatorResponse:
    name: java.lang.String = ...
    gasLoadFactor: float = ...
    feed: 'StreamResponse' = ...
    gas: 'StreamResponse' = ...
    liquid: 'StreamResponse' = ...
    oil: 'StreamResponse' = ...
    water: 'StreamResponse' = ...
    @typing.overload
    def __init__(self, separator: jneqsim.neqsim.processsimulation.processequipment.separator.Separator): ...
    @typing.overload
    def __init__(self, threePhaseSeparator: jneqsim.neqsim.processsimulation.processequipment.separator.ThreePhaseSeparator): ...

class StreamResponse:
    name: java.lang.String = ...
    properties: java.util.HashMap = ...
    conditions: java.util.HashMap = ...
    composition: java.util.HashMap = ...
    def __init__(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface): ...
    def print_(self) -> None: ...

class ThreePhaseSeparatorResponse:
    name: java.lang.String = ...
    gasLoadFactor: float = ...
    massflow: float = ...
    gasFluid: FluidResponse = ...
    oilFluid: FluidResponse = ...
    @typing.overload
    def __init__(self, separator: jneqsim.neqsim.processsimulation.processequipment.separator.Separator): ...
    @typing.overload
    def __init__(self, threePhaseSeparator: jneqsim.neqsim.processsimulation.processequipment.separator.ThreePhaseSeparator): ...

class Value:
    value: java.lang.String = ...
    unit: java.lang.String = ...
    def __init__(self, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]): ...

class ValveResponse:
    name: java.lang.String = ...
    data: java.util.ArrayList = ...
    def __init__(self, valveInterface: jneqsim.neqsim.processsimulation.processequipment.valve.ValveInterface): ...
    def print_(self) -> None: ...

class WellAllocatorResponse:
    name: java.lang.String = ...
    gasExportRate: float = ...
    oilExportRate: float = ...
    totalExportRate: float = ...
    def __init__(self, wellAllocator: jneqsim.neqsim.processsimulation.measurementdevice.WellAllocator): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.processsimulation.util.monitor")``.

    CompressorResponse: typing.Type[CompressorResponse]
    FluidComponentResponse: typing.Type[FluidComponentResponse]
    FluidResponse: typing.Type[FluidResponse]
    HXResponse: typing.Type[HXResponse]
    HeaterResponse: typing.Type[HeaterResponse]
    MPMResponse: typing.Type[MPMResponse]
    PumpResponse: typing.Type[PumpResponse]
    SeparatorResponse: typing.Type[SeparatorResponse]
    StreamResponse: typing.Type[StreamResponse]
    ThreePhaseSeparatorResponse: typing.Type[ThreePhaseSeparatorResponse]
    Value: typing.Type[Value]
    ValveResponse: typing.Type[ValveResponse]
    WellAllocatorResponse: typing.Type[WellAllocatorResponse]
