
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import jneqsim.neqsim.processsimulation.mechanicaldesign.adsorber
import jneqsim.neqsim.processsimulation.processequipment
import jneqsim.neqsim.processsimulation.processequipment.stream
import typing



class SimpleAdsorber(jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentBaseClass):
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface): ...
    def displayResult(self) -> None: ...
    def getHTU(self) -> float: ...
    def getInTemperature(self, int: int) -> float: ...
    def getMechanicalDesign(self) -> jneqsim.neqsim.processsimulation.mechanicaldesign.adsorber.AdsorberMechanicalDesign: ...
    def getNTU(self) -> float: ...
    def getNumberOfStages(self) -> int: ...
    def getNumberOfTheoreticalStages(self) -> float: ...
    def getOutStream(self, int: int) -> jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface: ...
    def getOutTemperature(self, int: int) -> float: ...
    def getStageEfficiency(self) -> float: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setAproachToEquilibrium(self, double: float) -> None: ...
    def setHTU(self, double: float) -> None: ...
    def setNTU(self, double: float) -> None: ...
    def setName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setNumberOfStages(self, int: int) -> None: ...
    def setNumberOfTheoreticalStages(self, double: float) -> None: ...
    def setOutTemperature(self, double: float) -> None: ...
    def setStageEfficiency(self, double: float) -> None: ...
    def setdT(self, double: float) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.processsimulation.processequipment.adsorber")``.

    SimpleAdsorber: typing.Type[SimpleAdsorber]
