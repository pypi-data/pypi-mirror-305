
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.util
import jpype
import jneqsim.neqsim.processsimulation.processequipment
import jneqsim.neqsim.processsimulation.processequipment.mixer
import jneqsim.neqsim.processsimulation.processequipment.stream
import jneqsim.neqsim.processsimulation.processequipment.valve
import jneqsim.neqsim.processsimulation.processsystem
import jneqsim.neqsim.thermo.system
import typing



class Adjuster(jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentBaseClass):
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    def displayResult(self) -> None: ...
    def getError(self) -> float: ...
    def getMaxAdjustedValue(self) -> float: ...
    def getMinAdjustedValue(self) -> float: ...
    def getTolerance(self) -> float: ...
    def isActivateWhenLess(self) -> bool: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setActivateWhenLess(self, boolean: bool) -> None: ...
    @typing.overload
    def setAdjustedVariable(self, processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface, string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def setAdjustedVariable(self, processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]) -> None: ...
    def setError(self, double: float) -> None: ...
    def setMaxAdjustedValue(self, double: float) -> None: ...
    def setMinAdjustedValue(self, double: float) -> None: ...
    @typing.overload
    def setTargetVariable(self, processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface, string: typing.Union[java.lang.String, str], double: float, string2: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def setTargetVariable(self, processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface, string: typing.Union[java.lang.String, str], double: float, string2: typing.Union[java.lang.String, str], string3: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def setTargetVariable(self, processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface, string: typing.Union[java.lang.String, str], double: float, string2: typing.Union[java.lang.String, str], string3: typing.Union[java.lang.String, str], string4: typing.Union[java.lang.String, str]) -> None: ...
    def setTolerance(self, double: float) -> None: ...
    def solved(self) -> bool: ...

class Calculator(jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentBaseClass):
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    def addInputVariable(self, processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface) -> None: ...
    def getOutputVariable(self) -> jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface: ...
    def needRecalculation(self) -> bool: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def runAntiSurgeCalc(self, uUID: java.util.UUID) -> None: ...
    def setOutputVariable(self, processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface) -> None: ...

class FlowRateAdjuster(jneqsim.neqsim.processsimulation.processequipment.TwoPortEquipment):
    desiredGasFlow: float = ...
    desiredOilFlow: float = ...
    desiredWaterFlow: float = ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface): ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    @typing.overload
    def setAdjustedFlowRates(self, double: float, double2: float, double3: float, string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def setAdjustedFlowRates(self, double: float, double2: float, string: typing.Union[java.lang.String, str]) -> None: ...

class FlowSetter(jneqsim.neqsim.processsimulation.processequipment.TwoPortEquipment):
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface): ...
    def createReferenceProcess(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface) -> jneqsim.neqsim.processsimulation.processsystem.ProcessSystem: ...
    def getGasFlowRate(self, string: typing.Union[java.lang.String, str]) -> float: ...
    def getOilFlowRate(self, string: typing.Union[java.lang.String, str]) -> float: ...
    def getReferenceProcess(self) -> jneqsim.neqsim.processsimulation.processsystem.ProcessSystem: ...
    def getWaterFlowRate(self, string: typing.Union[java.lang.String, str]) -> float: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setGasFlowRate(self, double: float, string: typing.Union[java.lang.String, str]) -> None: ...
    def setInletStream(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface) -> None: ...
    def setOilFlowRate(self, double: float, string: typing.Union[java.lang.String, str]) -> None: ...
    def setSeparationPT(self, doubleArray: typing.Union[typing.List[float], jpype.JArray], string: typing.Union[java.lang.String, str], doubleArray2: typing.Union[typing.List[float], jpype.JArray], string2: typing.Union[java.lang.String, str]) -> None: ...
    def setWaterFlowRate(self, double: float, string: typing.Union[java.lang.String, str]) -> None: ...

class GORfitter(jneqsim.neqsim.processsimulation.processequipment.TwoPortEquipment):
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface): ...
    def getGFV(self) -> float: ...
    def getGOR(self) -> float: ...
    @typing.overload
    def getPressure(self, string: typing.Union[java.lang.String, str]) -> float: ...
    @typing.overload
    def getPressure(self) -> float: ...
    def getReferenceConditions(self) -> java.lang.String: ...
    def getTemperature(self) -> float: ...
    def isFitAsGVF(self) -> bool: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setFitAsGVF(self, boolean: bool) -> None: ...
    def setGOR(self, double: float) -> None: ...
    def setGVF(self, double: float) -> None: ...
    def setInletStream(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface) -> None: ...
    @typing.overload
    def setPressure(self, double: float) -> None: ...
    @typing.overload
    def setPressure(self, double: float, string: typing.Union[java.lang.String, str]) -> None: ...
    def setReferenceConditions(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setTemperature(self, double: float, string: typing.Union[java.lang.String, str]) -> None: ...

class MPFMfitter(jneqsim.neqsim.processsimulation.processequipment.TwoPortEquipment):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface): ...
    @typing.overload
    def __init__(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface): ...
    def getGFV(self) -> float: ...
    def getGOR(self) -> float: ...
    @typing.overload
    def getPressure(self, string: typing.Union[java.lang.String, str]) -> float: ...
    @typing.overload
    def getPressure(self) -> float: ...
    def getReferenceConditions(self) -> java.lang.String: ...
    def getReferenceFluidPackage(self) -> jneqsim.neqsim.thermo.system.SystemInterface: ...
    def getTemperature(self) -> float: ...
    def isFitAsGVF(self) -> bool: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setFitAsGVF(self, boolean: bool) -> None: ...
    def setGOR(self, double: float) -> None: ...
    def setGVF(self, double: float) -> None: ...
    def setInletStream(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface) -> None: ...
    @typing.overload
    def setPressure(self, double: float) -> None: ...
    @typing.overload
    def setPressure(self, double: float, string: typing.Union[java.lang.String, str]) -> None: ...
    def setReferenceConditions(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setReferenceFluidPackage(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface) -> None: ...
    def setTemperature(self, double: float, string: typing.Union[java.lang.String, str]) -> None: ...

class MoleFractionControllerUtil(jneqsim.neqsim.processsimulation.processequipment.TwoPortEquipment):
    def __init__(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface): ...
    def displayResult(self) -> None: ...
    def getMolesChange(self) -> float: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setComponentRate(self, string: typing.Union[java.lang.String, str], double: float, string2: typing.Union[java.lang.String, str]) -> None: ...
    def setInletStream(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface) -> None: ...
    def setMoleFraction(self, string: typing.Union[java.lang.String, str], double: float) -> None: ...
    def setRelativeMoleFractionReduction(self, string: typing.Union[java.lang.String, str], double: float) -> None: ...

class NeqSimUnit(jneqsim.neqsim.processsimulation.processequipment.TwoPortEquipment):
    numberOfNodes: int = ...
    interfacialArea: float = ...
    def __init__(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface, string: typing.Union[java.lang.String, str], string2: typing.Union[java.lang.String, str]): ...
    def getEquipment(self) -> java.lang.String: ...
    def getID(self) -> float: ...
    def getInterfacialArea(self) -> float: ...
    def getLength(self) -> float: ...
    def getNumberOfNodes(self) -> int: ...
    def getOuterTemperature(self) -> float: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def runAnnular(self) -> None: ...
    def runDroplet(self) -> None: ...
    def runStratified(self) -> None: ...
    def setEquipment(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setID(self, double: float) -> None: ...
    def setInletStream(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface) -> None: ...
    def setLength(self, double: float) -> None: ...
    def setNumberOfNodes(self, int: int) -> None: ...
    def setOuterTemperature(self, double: float) -> None: ...

class PressureDrop(jneqsim.neqsim.processsimulation.processequipment.valve.ThrottlingValve):
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface): ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setPressureDrop(self, double: float, string: typing.Union[java.lang.String, str]) -> None: ...

class Recycle(jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentBaseClass, jneqsim.neqsim.processsimulation.processequipment.mixer.MixerInterface):
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    def addStream(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface) -> None: ...
    def calcMixStreamEnthalpy(self) -> float: ...
    def displayResult(self) -> None: ...
    def getDownstreamProperty(self) -> java.util.ArrayList[java.lang.String]: ...
    def getError(self) -> float: ...
    def getErrorFlow(self) -> float: ...
    def getOutStream(self) -> jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface: ...
    def getOutletStream(self) -> jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface: ...
    def getPriority(self) -> int: ...
    def getStream(self, int: int) -> jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface: ...
    def getThermoSystem(self) -> jneqsim.neqsim.thermo.system.SystemInterface: ...
    def getTolerance(self) -> float: ...
    def guessTemperature(self) -> float: ...
    def initiateDownstreamProperties(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface) -> None: ...
    def massBalanceCheck(self) -> float: ...
    def massBalanceCheck2(self) -> float: ...
    def mixStream(self) -> None: ...
    def removeInputStream(self, int: int) -> None: ...
    def replaceStream(self, int: int, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface) -> None: ...
    def resetIterations(self) -> None: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setCompositionAccuracy(self, double: float) -> None: ...
    def setDownstreamProperties(self) -> None: ...
    @typing.overload
    def setDownstreamProperty(self, string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def setDownstreamProperty(self, arrayList: java.util.ArrayList[typing.Union[java.lang.String, str]]) -> None: ...
    def setError(self, double: float) -> None: ...
    def setErrorFlow(self, double: float) -> None: ...
    def setFlowAccuracy(self, double: float) -> None: ...
    def setOutletStream(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface) -> None: ...
    def setPressure(self, double: float) -> None: ...
    def setPriority(self, int: int) -> None: ...
    def setTemperature(self, double: float) -> None: ...
    def setTemperatureAccuracy(self, double: float) -> None: ...
    def setTolerance(self, double: float) -> None: ...
    def solved(self) -> bool: ...

class RecycleController(java.io.Serializable):
    def __init__(self): ...
    def addRecycle(self, recycle: Recycle) -> None: ...
    def clear(self) -> None: ...
    def doSolveRecycle(self, recycle: Recycle) -> bool: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getCurrentPriorityLevel(self) -> int: ...
    def hasHigherPriorityLevel(self) -> bool: ...
    def hasLoverPriorityLevel(self) -> bool: ...
    def hashCode(self) -> int: ...
    def init(self) -> None: ...
    def isHighestPriority(self, recycle: Recycle) -> bool: ...
    def nextPriorityLevel(self) -> None: ...
    def resetPriorityLevel(self) -> None: ...
    def setCurrentPriorityLevel(self, int: int) -> None: ...
    def solvedAll(self) -> bool: ...
    def solvedCurrentPriorityLevel(self) -> bool: ...

class SetPoint(jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentBaseClass):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str]): ...
    @typing.overload
    def __init__(self, string: typing.Union[java.lang.String, str], processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface, string2: typing.Union[java.lang.String, str], processEquipmentInterface2: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface): ...
    def displayResult(self) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    @typing.overload
    def setSourceVariable(self, processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface) -> None: ...
    @typing.overload
    def setSourceVariable(self, processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface, string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def setTargetVariable(self, processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface, string: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def setTargetVariable(self, processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface, string: typing.Union[java.lang.String, str], double: float, string2: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def setTargetVariable(self, processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface, string: typing.Union[java.lang.String, str], double: float, string2: typing.Union[java.lang.String, str], string3: typing.Union[java.lang.String, str]) -> None: ...
    @typing.overload
    def setTargetVariable(self, processEquipmentInterface: jneqsim.neqsim.processsimulation.processequipment.ProcessEquipmentInterface, string: typing.Union[java.lang.String, str], double: float, string2: typing.Union[java.lang.String, str], string3: typing.Union[java.lang.String, str], string4: typing.Union[java.lang.String, str]) -> None: ...

class StreamSaturatorUtil(jneqsim.neqsim.processsimulation.processequipment.TwoPortEquipment):
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface): ...
    def isMultiPhase(self) -> bool: ...
    def needRecalculation(self) -> bool: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...
    def setApprachToSaturation(self, double: float) -> None: ...
    def setInletStream(self, streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface) -> None: ...
    def setMultiPhase(self, boolean: bool) -> None: ...

class StreamTransition(jneqsim.neqsim.processsimulation.processequipment.TwoPortEquipment):
    def __init__(self, string: typing.Union[java.lang.String, str], streamInterface: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface, streamInterface2: jneqsim.neqsim.processsimulation.processequipment.stream.StreamInterface): ...
    def displayResult(self) -> None: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[java.lang.String], jpype.JArray]) -> None: ...
    @typing.overload
    def run(self) -> None: ...
    @typing.overload
    def run(self, uUID: java.util.UUID) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.processsimulation.processequipment.util")``.

    Adjuster: typing.Type[Adjuster]
    Calculator: typing.Type[Calculator]
    FlowRateAdjuster: typing.Type[FlowRateAdjuster]
    FlowSetter: typing.Type[FlowSetter]
    GORfitter: typing.Type[GORfitter]
    MPFMfitter: typing.Type[MPFMfitter]
    MoleFractionControllerUtil: typing.Type[MoleFractionControllerUtil]
    NeqSimUnit: typing.Type[NeqSimUnit]
    PressureDrop: typing.Type[PressureDrop]
    Recycle: typing.Type[Recycle]
    RecycleController: typing.Type[RecycleController]
    SetPoint: typing.Type[SetPoint]
    StreamSaturatorUtil: typing.Type[StreamSaturatorUtil]
    StreamTransition: typing.Type[StreamTransition]
