#!/usr/bin/env python
# -*- coding: utf-8 -*-
import math
import mindspore as ms
import numpy as np
from mindspore.common.initializer import initializer, Dirac, Orthogonal, _init_random_normal, _init_random_uniform
from mindtorch.torch.tensor import cast_to_adapter_tensor, tensor as msa_tensor
from mindtorch.torch.logging import warning

def _init_uniform(tensor, from_alias=0, to=1):
    output = ms.Tensor(_init_random_uniform(from_alias, to, tensor.shape), tensor.dtype)
    return cast_to_adapter_tensor(output)


def _init_normal(tensor, mean=0, std=1):
    output = ms.Tensor(_init_random_normal(mean, std, tensor.shape), tensor.dtype)
    return cast_to_adapter_tensor(output)


def _calculate_fan_in_and_fan_out(tensor):
    dimensions = tensor.dim()
    if dimensions < 2:
        raise ValueError("Fan in and fan out can not be computed for tensor with fewer than 2 dimensions")
    num_input_fmaps = tensor.size(1)
    num_output_fmaps = tensor.size(0)
    receptive_field_size = 1
    if tensor.dim() > 2:
        for s in tensor.shape[2:]:
            receptive_field_size *= s
    fan_in = num_input_fmaps * receptive_field_size
    fan_out = num_output_fmaps * receptive_field_size
    return fan_in, fan_out


def calculate_gain(nonlinearity, param=None):
    linear_fns = ['linear', 'conv1d', 'conv2d', 'conv3d', 'conv_transpose1d', 'conv_transpose2d', 'conv_transpose3d']
    if nonlinearity in linear_fns or nonlinearity == 'sigmoid':
        return 1
    elif nonlinearity == 'tanh':
        return 5.0 / 3
    elif nonlinearity == 'relu':
        return math.sqrt(2.0)
    elif nonlinearity == 'leaky_relu':
        if param is None:
            negative_slope = 0.01
        elif not isinstance(param, bool) and isinstance(param, int) or isinstance(param, float):
            # True/False are instances of int, hence check above
            negative_slope = param
        else:
            raise ValueError("negative_slope {} not a valid number".format(param))
        return math.sqrt(2.0 / (1 + negative_slope ** 2))
    elif nonlinearity == 'selu':
        return 3.0 / 4
    else:
        raise ValueError("Unsupported nonlinearity {}".format(nonlinearity))


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warning("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. " \
                "The distribution of values may be incorrect.")


    # Values are generated by using a truncated uniform distribution and
    # then using the inverse CDF for the normal distribution.
    # Get upper and lower cdf values
    l = norm_cdf((a - mean) / std)
    u = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [l, u], then translate to
    # [2l-1, 2u-1].
    tensor_outplace = _init_uniform(tensor, 2 * l - 1, 2 * u - 1)

    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal
    tensor_outplace = tensor_outplace.erfinv()

    # Transform to proper mean, std
    tensor_outplace = tensor_outplace.mul(std * math.sqrt(2.))
    tensor_outplace = tensor_outplace.add(mean)
    # Clamp to ensure it's in the proper range
    tensor_outplace = tensor_outplace.clamp(min=a, max=b)

    tensor.assign_value(tensor_outplace)
    return tensor

def _calculate_correct_fan(tensor, mode):
    mode = mode.lower()
    valid_modes = ['fan_in', 'fan_out']
    if mode not in valid_modes:
        raise ValueError("Mode {} not supported, please use one of {}".format(mode, valid_modes))

    fan_in, fan_out = _calculate_fan_in_and_fan_out(tensor)
    return fan_in if mode == 'fan_in' else fan_out


def kaiming_uniform_(tensor, a=0, mode='fan_in', nonlinearity='leaky_relu'):
    if 0 in tensor.shape:
        warning("Initializing zero-element tensors is a no-op")
        return tensor
    fan = _calculate_correct_fan(tensor, mode)
    gain = calculate_gain(nonlinearity, a)
    std = gain / math.sqrt(fan)
    bound = math.sqrt(3.0) * std  # Calculate uniform bounds from standard deviation
    tensor_outplace = _init_uniform(tensor, -bound, bound)
    return tensor.assign_value(tensor_outplace)

def kaiming_normal_(tensor, a=0, mode='fan_in', nonlinearity='leaky_relu'):
    if 0 in tensor.shape:
        warning("Initializing zero-element tensors is a no-op")
        return tensor
    fan = _calculate_correct_fan(tensor, mode)
    gain = calculate_gain(nonlinearity, a)
    std = gain / math.sqrt(fan)
    tensor_outplace = _init_normal(tensor, 0, std)
    return tensor.assign_value(tensor_outplace)

def xavier_normal_(tensor, gain = 1.):
    fan_in, fan_out = _calculate_fan_in_and_fan_out(tensor)
    std = gain * math.sqrt(2.0 / float(fan_in + fan_out))

    tensor_outplace = _init_normal(tensor, 0., std)
    return tensor.assign_value(tensor_outplace)

def xavier_uniform_(tensor, gain = 1.):
    fan_in, fan_out = _calculate_fan_in_and_fan_out(tensor)
    std = gain * math.sqrt(2.0 / float(fan_in + fan_out))
    a = math.sqrt(3.0) * std  # Calculate uniform bounds from standard deviation

    tensor_outplace = _init_uniform(tensor, -a, a)
    return tensor.assign_value(tensor_outplace)

def zeros_(tensor):
    tensor_outplace = tensor.zero_adapter()
    return tensor.assign_value(tensor_outplace)

def ones_(tensor):
    tensor_outplace = tensor.fill_adapter(1.0)
    return tensor.assign_value(tensor_outplace)

def constant_(tensor, val):
    tensor_outplace = tensor.fill_adapter(val)
    return tensor.assign_value(tensor_outplace)

def trunc_normal_(tensor, mean = 0., std = 1., a = -2., b = 2.):
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

def normal_(tensor, mean = 0., std = 1.):
    tensor_outplace = _init_normal(tensor, mean, std)
    return tensor.assign_value(tensor_outplace)

def uniform_(tensor, a = 0., b = 1.):
    tensor_outplace = _init_uniform(tensor, a, b)
    return tensor.assign_value(tensor_outplace)

def dirac_(tensor, groups=1):
    out = initializer(Dirac(groups=groups), tensor.shape, tensor.dtype).init_data()
    tensor.assign_value(out)
    return tensor

def orthogonal_(tensor, gain=1):
    out = initializer(Orthogonal(gain=gain), tensor.shape, tensor.dtype).init_data()
    tensor.assign_value(out)
    return tensor

def eye_(tensor):
    out = ms.ops.eye(tensor.shape[0], tensor.shape[1], dtype=tensor.dtype)
    tensor.assign_value(out)
    return tensor

def sparse_(tensor, sparsity, std=0.01):
    if tensor.ndimension() != 2:
        raise ValueError("Only tensors with 2 dimensions are supported")

    rows, cols = tensor.shape
    num_zeros = int(math.ceil(sparsity * rows))

    tensor_outplace = _init_normal(tensor, 0, std)
    tensor.assign_value(tensor_outplace)

    for col_idx in range(cols):
        row_indices = msa_tensor(np.random.permutation(rows), dtype=ms.int64)
        zero_indices = row_indices[:num_zeros]
        tensor[zero_indices, col_idx] = 0
    return tensor


# for backward compatibility
def _make_deprecate(meth):
    new_name = meth.__name__
    old_name = new_name[:-1]

    def deprecated_init(*args, **kwargs):
        warning("nn.init.{} is now deprecated in favor of nn.init.{}.".format(old_name, new_name))
        return meth(*args, **kwargs)

    deprecated_init.__doc__ = r"""
    {old_name}(...)

    .. warning::
        This method is now deprecated in favor of :func:`mindtorch.nn.init.{new_name}`.

    See :func:`~mindtorch.nn.init.{new_name}` for details.""".format(
        old_name=old_name, new_name=new_name)
    deprecated_init.__name__ = old_name
    return deprecated_init


uniform = _make_deprecate(uniform_)
normal = _make_deprecate(normal_)
constant = _make_deprecate(constant_)
eye = _make_deprecate(eye_)
dirac = _make_deprecate(dirac_)
xavier_uniform = _make_deprecate(xavier_uniform_)
xavier_normal = _make_deprecate(xavier_normal_)
kaiming_uniform = _make_deprecate(kaiming_uniform_)
kaiming_normal = _make_deprecate(kaiming_normal_)
orthogonal = _make_deprecate(orthogonal_)
sparse = _make_deprecate(sparse_)
