import modal.client
import modal_proto.api_pb2
import typing
import typing_extensions

def _sandbox_logs_iterator(
    sandbox_id: str, file_descriptor: int, last_entry_id: typing.Optional[str], client: modal.client._Client
) -> typing.AsyncIterator[typing.Tuple[typing.Optional[modal_proto.api_pb2.TaskLogs], str]]: ...
def _container_process_logs_iterator(
    process_id: str, file_descriptor: int, last_entry_id: typing.Optional[str], client: modal.client._Client
): ...

class _StreamReader:
    def __init__(
        self,
        file_descriptor: int,
        object_id: str,
        object_type: typing.Literal["sandbox", "container_process"],
        client: modal.client._Client,
        by_line: bool = False,
    ) -> None: ...
    @property
    def file_descriptor(self): ...
    async def read(self) -> str: ...
    def _get_logs(self) -> typing.AsyncIterator[typing.Optional[str]]: ...
    def _get_logs_by_line(self) -> typing.AsyncIterator[typing.Optional[str]]: ...
    def __aiter__(self): ...
    async def __anext__(self): ...

class _StreamWriter:
    def __init__(
        self, object_id: str, object_type: typing.Literal["sandbox", "container_process"], client: modal.client._Client
    ): ...
    def get_next_index(self): ...
    def write(self, data: typing.Union[bytes, bytearray, memoryview, str]): ...
    def write_eof(self): ...
    async def drain(self): ...

class StreamReader:
    def __init__(
        self,
        file_descriptor: int,
        object_id: str,
        object_type: typing.Literal["sandbox", "container_process"],
        client: modal.client.Client,
        by_line: bool = False,
    ) -> None: ...
    @property
    def file_descriptor(self): ...

    class __read_spec(typing_extensions.Protocol):
        def __call__(self) -> str: ...
        async def aio(self) -> str: ...

    read: __read_spec

    class ___get_logs_spec(typing_extensions.Protocol):
        def __call__(self) -> typing.Iterator[typing.Optional[str]]: ...
        def aio(self) -> typing.AsyncIterator[typing.Optional[str]]: ...

    _get_logs: ___get_logs_spec

    class ___get_logs_by_line_spec(typing_extensions.Protocol):
        def __call__(self) -> typing.Iterator[typing.Optional[str]]: ...
        def aio(self) -> typing.AsyncIterator[typing.Optional[str]]: ...

    _get_logs_by_line: ___get_logs_by_line_spec

    def __iter__(self): ...
    def __aiter__(self): ...
    def __next__(self): ...
    async def __anext__(self): ...

class StreamWriter:
    def __init__(
        self, object_id: str, object_type: typing.Literal["sandbox", "container_process"], client: modal.client.Client
    ): ...
    def get_next_index(self): ...
    def write(self, data: typing.Union[bytes, bytearray, memoryview, str]): ...
    def write_eof(self): ...

    class __drain_spec(typing_extensions.Protocol):
        def __call__(self): ...
        async def aio(self): ...

    drain: __drain_spec
