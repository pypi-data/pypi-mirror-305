Metadata-Version: 2.1
Name: elvis-repl
Version: 0.1.0
Summary: Elvis has left the building - A REPL template engine that remembers
Author-email: Kaspar Kallas <kaspar.kana.kallas@gmail.com>
License: BSD-3-Clause
Project-URL: Homepage, https://github.com/KKallas/elvis
Project-URL: Bug Tracker, https://github.com/KKallas/elvis/issues
Keywords: repl,template,development,jupyter
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Framework :: IPython
Classifier: Framework :: Jupyter
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: jupyter
Requires-Dist: ipython; extra == "jupyter"
Provides-Extra: test
Requires-Dist: pytest>=6.0; extra == "test"

# Elvis Has Left the Building
Some say it's pointless. Some say it's brilliant. Elvis doesn't care either way - Elvis has already left the building.

A REPL template engine that remembers your variables and helps you generate code in both Jupyter and CLI environments.

## Installation

```bash
pip install elvis-repl
```

## Usage

```python
from elvis_repl import elvis

# Create a template with variables
elvis("cube_{id} = cube(\"{name}\")", 
      id=1, 
      name="first_cube")

# Variables are remembered
elvis.vars()

# Render without showing
elvis.render()

# Show last rendered template
elvis.show()

# Execute when ready
elvis.run()

# Clear state
elvis.clear()
```

## Features

- Works in both Jupyter and regular Python REPL
- Remembers variables between template generations
- Separate render/show/run steps for control
- Chainable API
- Simple and intuitive interface
