# coding: utf-8

"""
    Coinbase Platform API

    This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

    The version of the OpenAPI document: 0.0.1-alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cdp.client.models.onchain_name_text_records_inner import OnchainNameTextRecordsInner
from typing import Optional, Set
from typing_extensions import Self

class OnchainName(BaseModel):
    """
    A representation of an onchain stored name from name systems i.e. ENS or Basenames
    """ # noqa: E501
    token_id: StrictStr = Field(description="The ID for the NFT related to this name")
    owner_address: StrictStr = Field(description="The onchain address of the owner of the name")
    manager_address: StrictStr = Field(description="The onchain address of the manager of the name")
    primary_address: Optional[StrictStr] = Field(default=None, description="The primary onchain address of the name")
    domain: StrictStr = Field(description="The readable format for the name in complete form")
    avatar: Optional[StrictStr] = Field(default=None, description="The visual representation attached to this name")
    network_id: StrictStr = Field(description="The ID of the blockchain network")
    text_records: Optional[List[OnchainNameTextRecordsInner]] = Field(default=None, description="The metadata attached to this name")
    __properties: ClassVar[List[str]] = ["token_id", "owner_address", "manager_address", "primary_address", "domain", "avatar", "network_id", "text_records"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OnchainName from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in text_records (list)
        _items = []
        if self.text_records:
            for _item_text_records in self.text_records:
                if _item_text_records:
                    _items.append(_item_text_records.to_dict())
            _dict['text_records'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OnchainName from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "token_id": obj.get("token_id"),
            "owner_address": obj.get("owner_address"),
            "manager_address": obj.get("manager_address"),
            "primary_address": obj.get("primary_address"),
            "domain": obj.get("domain"),
            "avatar": obj.get("avatar"),
            "network_id": obj.get("network_id"),
            "text_records": [OnchainNameTextRecordsInner.from_dict(_item) for _item in obj["text_records"]] if obj.get("text_records") is not None else None
        })
        return _obj


