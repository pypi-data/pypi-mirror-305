# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/enilm',
                'doc_host': 'https://mazenbesher.github.io',
                'git_url': 'https://github.com/mazenbesher/enilm',
                'lib_path': 'enilm'},
  'syms': { 'enilm.activations': {},
            'enilm.active': {},
            'enilm.appliances': {},
            'enilm.cache.dictc': { 'enilm.cache.dictc.append': ('cache/dictc.html#append', 'enilm/cache/dictc.py'),
                                   'enilm.cache.dictc.compute_or_load': ('cache/dictc.html#compute_or_load', 'enilm/cache/dictc.py'),
                                   'enilm.cache.dictc.decorator': ('cache/dictc.html#decorator', 'enilm/cache/dictc.py'),
                                   'enilm.cache.dictc.load': ('cache/dictc.html#load', 'enilm/cache/dictc.py'),
                                   'enilm.cache.dictc.rename': ('cache/dictc.html#rename', 'enilm/cache/dictc.py'),
                                   'enilm.cache.dictc.save': ('cache/dictc.html#save', 'enilm/cache/dictc.py'),
                                   'enilm.cache.dictc.sizeof_fmt': ('cache/dictc.html#sizeof_fmt', 'enilm/cache/dictc.py')},
            'enilm.cache.nparr': {},
            'enilm.cache.pdser': {},
            'enilm.checkers': {},
            'enilm.clip': {},
            'enilm.config': {},
            'enilm.config_file': { 'enilm.config_file.get_config_file_path': ( 'config_file.html#get_config_file_path',
                                                                               'enilm/config_file.py')},
            'enilm.constants': {},
            'enilm.context': {},
            'enilm.convert': {},
            'enilm.core': {'enilm.core.foo': ('core.html#foo', 'enilm/core.py')},
            'enilm.data.fake': {'enilm.data.fake.sin': ('data/fake.html#sin', 'enilm/data/fake.py')},
            'enilm.datasets.ac_types': { 'enilm.datasets.ac_types.get_preferred_ac_type': ( 'datasets/ac_types.html#get_preferred_ac_type',
                                                                                            'enilm/datasets/ac_types.py'),
                                         'enilm.datasets.ac_types.get_preferred_apps_ac_type': ( 'datasets/ac_types.html#get_preferred_apps_ac_type',
                                                                                                 'enilm/datasets/ac_types.py'),
                                         'enilm.datasets.ac_types.get_preferred_mains_ac_type': ( 'datasets/ac_types.html#get_preferred_mains_ac_type',
                                                                                                  'enilm/datasets/ac_types.py')},
            'enilm.datasets.availability': {},
            'enilm.datasets.coords': { 'enilm.datasets.coords._query_lat_lon': ( 'datasets/coords.html#_query_lat_lon',
                                                                                 'enilm/datasets/coords.py'),
                                       'enilm.datasets.coords.get_coords_cache_path': ( 'datasets/coords.html#get_coords_cache_path',
                                                                                        'enilm/datasets/coords.py'),
                                       'enilm.datasets.coords.get_lat_lon': ( 'datasets/coords.html#get_lat_lon',
                                                                              'enilm/datasets/coords.py')},
            'enilm.datasets.loaders': { 'enilm.datasets.loaders.DatasetInfo': ( 'datasets/loaders.html#datasetinfo',
                                                                                'enilm/datasets/loaders.py'),
                                        'enilm.datasets.loaders.LoadMultipleResult': ( 'datasets/loaders.html#loadmultipleresult',
                                                                                       'enilm/datasets/loaders.py'),
                                        'enilm.datasets.loaders.LoadResult': ( 'datasets/loaders.html#loadresult',
                                                                               'enilm/datasets/loaders.py'),
                                        'enilm.datasets.loaders.LoadResult.Config': ( 'datasets/loaders.html#loadresult.config',
                                                                                      'enilm/datasets/loaders.py'),
                                        'enilm.datasets.loaders.load': ('datasets/loaders.html#load', 'enilm/datasets/loaders.py'),
                                        'enilm.datasets.loaders.load_dsinfo': ( 'datasets/loaders.html#load_dsinfo',
                                                                                'enilm/datasets/loaders.py'),
                                        'enilm.datasets.loaders.load_multiple_seps': ( 'datasets/loaders.html#load_multiple_seps',
                                                                                       'enilm/datasets/loaders.py')},
            'enilm.dicthelpers.hashable': {},
            'enilm.dicthelpers.nested': {},
            'enilm.dicthelpers.save_load': {},
            'enilm.distance.cluster': { 'enilm.distance.cluster.compute_clusters_indices_by_distances_thresholds': ( 'distance/cluster.html#compute_clusters_indices_by_distances_thresholds',
                                                                                                                     'enilm/distance/cluster.py'),
                                        'enilm.distance.cluster.compute_clusters_indices_by_quantiles': ( 'distance/cluster.html#compute_clusters_indices_by_quantiles',
                                                                                                          'enilm/distance/cluster.py'),
                                        'enilm.distance.cluster.compute_thresholds_from_dist_limits': ( 'distance/cluster.html#compute_thresholds_from_dist_limits',
                                                                                                        'enilm/distance/cluster.py'),
                                        'enilm.distance.cluster.get_cluster_windows': ( 'distance/cluster.html#get_cluster_windows',
                                                                                        'enilm/distance/cluster.py')},
            'enilm.distance.dist': { 'enilm.distance.dist.compute_normalized_euclidean_distance': ( 'distance/dist.html#compute_normalized_euclidean_distance',
                                                                                                    'enilm/distance/dist.py'),
                                     'enilm.distance.dist.dist_to_df': ('distance/dist.html#dist_to_df', 'enilm/distance/dist.py'),
                                     'enilm.distance.dist.get_gpus': ('distance/dist.html#get_gpus', 'enilm/distance/dist.py')},
            'enilm.dt.common': { 'enilm.dt.common.get_dates_in_month': ('dt/common.html#get_dates_in_month', 'enilm/dt/common.py'),
                                 'enilm.dt.common.get_dates_in_year': ('dt/common.html#get_dates_in_year', 'enilm/dt/common.py'),
                                 'enilm.dt.common.get_last_day_of_month': ('dt/common.html#get_last_day_of_month', 'enilm/dt/common.py')},
            'enilm.dt.nilmtktf': { 'enilm.dt.nilmtktf.dates_to_timeframes': ( 'dt/nilmtktf.html#dates_to_timeframes',
                                                                              'enilm/dt/nilmtktf.py'),
                                   'enilm.dt.nilmtktf.get_day_timeframe': ('dt/nilmtktf.html#get_day_timeframe', 'enilm/dt/nilmtktf.py'),
                                   'enilm.dt.nilmtktf.get_month_timeframe': ( 'dt/nilmtktf.html#get_month_timeframe',
                                                                              'enilm/dt/nilmtktf.py'),
                                   'enilm.dt.nilmtktf.get_months_in_year': ('dt/nilmtktf.html#get_months_in_year', 'enilm/dt/nilmtktf.py'),
                                   'enilm.dt.nilmtktf.get_tzinfo_from_ds': ('dt/nilmtktf.html#get_tzinfo_from_ds', 'enilm/dt/nilmtktf.py'),
                                   'enilm.dt.nilmtktf.get_week': ('dt/nilmtktf.html#get_week', 'enilm/dt/nilmtktf.py'),
                                   'enilm.dt.nilmtktf.get_year_timeframe': ('dt/nilmtktf.html#get_year_timeframe', 'enilm/dt/nilmtktf.py'),
                                   'enilm.dt.nilmtktf.timeframe_to_str': ('dt/nilmtktf.html#timeframe_to_str', 'enilm/dt/nilmtktf.py')},
            'enilm.dt.sun': { 'enilm.dt.sun.SunTimes': ('dt/sun.html#suntimes', 'enilm/dt/sun.py'),
                              'enilm.dt.sun.get_suntimes_for_day': ('dt/sun.html#get_suntimes_for_day', 'enilm/dt/sun.py')},
            'enilm.dt.workday': { 'enilm.dt.workday.get_busdays_filter_for_datetime_index': ( 'dt/workday.html#get_busdays_filter_for_datetime_index',
                                                                                              'enilm/dt/workday.py'),
                                  'enilm.dt.workday.get_busdays_filter_with_np_is_busday': ( 'dt/workday.html#get_busdays_filter_with_np_is_busday',
                                                                                             'enilm/dt/workday.py'),
                                  'enilm.dt.workday.get_holidays_calendar_from_ds': ( 'dt/workday.html#get_holidays_calendar_from_ds',
                                                                                      'enilm/dt/workday.py'),
                                  'enilm.dt.workday.get_holidays_filter_for_datetime_index': ( 'dt/workday.html#get_holidays_filter_for_datetime_index',
                                                                                               'enilm/dt/workday.py'),
                                  'enilm.dt.workday.get_weekends_filter_for_datetime_index': ( 'dt/workday.html#get_weekends_filter_for_datetime_index',
                                                                                               'enilm/dt/workday.py')},
            'enilm.duplicate': {},
            'enilm.esp.demo.common': {},
            'enilm.esp.demo.mtl.http': {},
            'enilm.esp.demo.mtl.ser': {},
            'enilm.esp.demo.ser_interactive': {},
            'enilm.esp.http': {},
            'enilm.esp.http.interface': {},
            'enilm.esp.http.pred': {},
            'enilm.esp.ser': {},
            'enilm.etypes.arr': {},
            'enilm.etypes.esp': {},
            'enilm.etypes.measures': {},
            'enilm.etypes.ser': {},
            'enilm.etypes.xy': {},
            'enilm.feather': {},
            'enilm.gpu.tf': { 'enilm.gpu.tf.get_gpus': ('gpu/tf.html#get_gpus', 'enilm/gpu/tf.py'),
                              'enilm.gpu.tf.select_gpu': ('gpu/tf.html#select_gpu', 'enilm/gpu/tf.py'),
                              'enilm.gpu.tf.set_memory_growth': ('gpu/tf.html#set_memory_growth', 'enilm/gpu/tf.py'),
                              'enilm.gpu.tf.set_memory_limit': ('gpu/tf.html#set_memory_limit', 'enilm/gpu/tf.py')},
            'enilm.gpu.torch': { 'enilm.gpu.torch.clean_gpu_cache': ('gpu/torch.html#clean_gpu_cache', 'enilm/gpu/torch.py'),
                                 'enilm.gpu.torch.cuda_gpu_processes': ('gpu/torch.html#cuda_gpu_processes', 'enilm/gpu/torch.py'),
                                 'enilm.gpu.torch.get_device': ('gpu/torch.html#get_device', 'enilm/gpu/torch.py')},
            'enilm.ipython.load_train': {},
            'enilm.ipython.magic': {},
            'enilm.ipython.path': { 'enilm.ipython.path.get_curr_nb_path_vscode': ( 'ipython/path.html#get_curr_nb_path_vscode',
                                                                                    'enilm/ipython/path.py')},
            'enilm.ipython.section': {},
            'enilm.keras.metrics': {},
            'enilm.lite': {},
            'enilm.load_kwargs': {},
            'enilm.logger': {},
            'enilm.losses.f1': {},
            'enilm.losses.mae': {},
            'enilm.losses.sae': {},
            'enilm.losses.splitted': {},
            'enilm.losses.utils': {},
            'enilm.measures.measures': {},
            'enilm.measures.total': {},
            'enilm.metrics': { 'enilm.metrics.common': ('metrics.html#common', 'enilm/metrics.py'),
                               'enilm.metrics.denorm_mae': ('metrics.html#denorm_mae', 'enilm/metrics.py'),
                               'enilm.metrics.sizeof_fmt': ('metrics.html#sizeof_fmt', 'enilm/metrics.py')},
            'enilm.models.dae': {},
            'enilm.models.fcn': {},
            'enilm.models.rnn': {},
            'enilm.models.seq': {},
            'enilm.models.test': {},
            'enilm.models.torch.seq': { 'enilm.models.torch.seq.S2P': ('models/torch/seq.html#s2p', 'enilm/models/torch/seq.py'),
                                        'enilm.models.torch.seq.S2P.__init__': ( 'models/torch/seq.html#s2p.__init__',
                                                                                 'enilm/models/torch/seq.py'),
                                        'enilm.models.torch.seq.S2P.forward': ( 'models/torch/seq.html#s2p.forward',
                                                                                'enilm/models/torch/seq.py'),
                                        'enilm.models.torch.seq.S2PDataset': ( 'models/torch/seq.html#s2pdataset',
                                                                               'enilm/models/torch/seq.py'),
                                        'enilm.models.torch.seq.S2PDataset.__getitem__': ( 'models/torch/seq.html#s2pdataset.__getitem__',
                                                                                           'enilm/models/torch/seq.py'),
                                        'enilm.models.torch.seq.S2PDataset.__init__': ( 'models/torch/seq.html#s2pdataset.__init__',
                                                                                        'enilm/models/torch/seq.py'),
                                        'enilm.models.torch.seq.S2PDataset.__len__': ( 'models/torch/seq.html#s2pdataset.__len__',
                                                                                       'enilm/models/torch/seq.py'),
                                        'enilm.models.torch.seq.S2PDataset._reshape': ( 'models/torch/seq.html#s2pdataset._reshape',
                                                                                        'enilm/models/torch/seq.py'),
                                        'enilm.models.torch.seq.S2PDatasetMains': ( 'models/torch/seq.html#s2pdatasetmains',
                                                                                    'enilm/models/torch/seq.py'),
                                        'enilm.models.torch.seq.S2PDatasetMains.__getitem__': ( 'models/torch/seq.html#s2pdatasetmains.__getitem__',
                                                                                                'enilm/models/torch/seq.py'),
                                        'enilm.models.torch.seq.S2PDatasetMains.__init__': ( 'models/torch/seq.html#s2pdatasetmains.__init__',
                                                                                             'enilm/models/torch/seq.py'),
                                        'enilm.models.torch.seq.S2PDatasetMains.__len__': ( 'models/torch/seq.html#s2pdatasetmains.__len__',
                                                                                            'enilm/models/torch/seq.py'),
                                        'enilm.models.torch.seq.S2PDatasetMains._reshape': ( 'models/torch/seq.html#s2pdatasetmains._reshape',
                                                                                             'enilm/models/torch/seq.py')},
            'enilm.models.torch.utils': { 'enilm.models.torch.utils.get_padded_sequence': ( 'models/torch/utils.html#get_padded_sequence',
                                                                                            'enilm/models/torch/utils.py')},
            'enilm.models.trivial': {},
            'enilm.models.utils.file': {},
            'enilm.models.utils.flops': {},
            'enilm.models.utils.mem': {},
            'enilm.models.utils.params': {},
            'enilm.models.utils.paths': {},
            'enilm.models.utils.prune': {},
            'enilm.models.utils.summary': {},
            'enilm.models.utils.test': {},
            'enilm.models.utils.train': {},
            'enilm.models.utils.weights': {},
            'enilm.models.utils.zip': {},
            'enilm.norm.welford': {},
            'enilm.paths': {},
            'enilm.plot.with_bokeh': {},
            'enilm.plot.with_echarts': {},
            'enilm.plot.with_plotly': {},
            'enilm.plot.with_plt': {},
            'enilm.preprocessing.load': {'enilm.preprocessing.load.load': ('preprocessing/load.html#load', 'enilm/preprocessing/load.py')},
            'enilm.preprocessing.overlapping': { 'enilm.preprocessing.overlapping.overlapping': ( 'preprocessing/drop_non_overlapping.html#overlapping',
                                                                                                  'enilm/preprocessing/overlapping.py')},
            'enilm.preprocessing.resample': { 'enilm.preprocessing.resample.resample': ( 'preprocessing/resample.html#resample',
                                                                                         'enilm/preprocessing/resample.py')},
            'enilm.reports.appliance': {},
            'enilm.reports.common_metrics': {},
            'enilm.reports.notebooks': {},
            'enilm.reports.sample_rate': {},
            'enilm.reports.sys': {},
            'enilm.seasonal.data': {},
            'enilm.seed': { 'enilm.seed.set': ('seed.html#set', 'enilm/seed.py'),
                            'enilm.seed.set_np': ('seed.html#set_np', 'enilm/seed.py'),
                            'enilm.seed.set_python': ('seed.html#set_python', 'enilm/seed.py'),
                            'enilm.seed.set_tf': ('seed.html#set_tf', 'enilm/seed.py'),
                            'enilm.seed.set_torch': ('seed.html#set_torch', 'enilm/seed.py')},
            'enilm.ser': {},
            'enilm.split.busday': {},
            'enilm.tests.common': {},
            'enilm.tests.datasets.test_loaders': {},
            'enilm.tests.dicthelpers.test_nested': {},
            'enilm.tests.esp.http.test_interface': {},
            'enilm.tests.esp.http.test_pred': {},
            'enilm.tests.esp.test_http': {},
            'enilm.tests.keras.test_metrics': {},
            'enilm.tests.losses.test_sae': {},
            'enilm.tests.models.utils.test_prune': {},
            'enilm.tests.split.test_busday': {},
            'enilm.tests.test_activations': {},
            'enilm.tests.test_config': {},
            'enilm.tests.test_context': {},
            'enilm.tests.test_convert': {},
            'enilm.tests.test_lite': {},
            'enilm.tests.test_metrics': {},
            'enilm.tests.test_norm': {},
            'enilm.tests.test_windowing': {},
            'enilm.tests.xy.test_load': {},
            'enilm.tests.xy.test_load_gen': {},
            'enilm.tests.xy.test_multi': {},
            'enilm.tests.xy.test_multi_gen': {},
            'enilm.windowing': {},
            'enilm.xy.busday': {},
            'enilm.xy.cache': {},
            'enilm.xy.chunkize': {},
            'enilm.xy.expections': {},
            'enilm.xy.load': {},
            'enilm.xy.load_gen': {},
            'enilm.xy.metrics': {},
            'enilm.xy.multi': {},
            'enilm.xy.multi_gen': {},
            'enilm.xy.norm': {},
            'enilm.xy.single': {},
            'enilm.yaml.config': { 'enilm.yaml.config.ACTypes': ('yaml/config.html#actypes', 'enilm/yaml/config.py'),
                                   'enilm.yaml.config.Config': ('yaml/config.html#config', 'enilm/yaml/config.py'),
                                   'enilm.yaml.config.Config.__init__': ('yaml/config.html#config.__init__', 'enilm/yaml/config.py'),
                                   'enilm.yaml.config.Config.hash': ('yaml/config.html#config.hash', 'enilm/yaml/config.py'),
                                   'enilm.yaml.config.Config.valid_dataset': ( 'yaml/config.html#config.valid_dataset',
                                                                               'enilm/yaml/config.py'),
                                   'enilm.yaml.config.ResampleParams': ('yaml/config.html#resampleparams', 'enilm/yaml/config.py'),
                                   'enilm.yaml.config.ResampleParams.n_samples_per_day': ( 'yaml/config.html#resampleparams.n_samples_per_day',
                                                                                           'enilm/yaml/config.py'),
                                   'enilm.yaml.config.ResampleParams.rule_must_be_valid_duration': ( 'yaml/config.html#resampleparams.rule_must_be_valid_duration',
                                                                                                     'enilm/yaml/config.py'),
                                   'enilm.yaml.config.load': ('yaml/config.html#load', 'enilm/yaml/config.py')},
            'enilm.yaml.daily.split': { 'enilm.yaml.daily.split.DailySplit': ( 'yaml/daily_split.html#dailysplit',
                                                                               'enilm/yaml/daily/split.py'),
                                        'enilm.yaml.daily.split.XYNP': ('yaml/daily_split.html#xynp', 'enilm/yaml/daily/split.py'),
                                        'enilm.yaml.daily.split.XYPD': ('yaml/daily_split.html#xypd', 'enilm/yaml/daily/split.py'),
                                        'enilm.yaml.daily.split.train_test': ( 'yaml/daily_split.html#train_test',
                                                                               'enilm/yaml/daily/split.py'),
                                        'enilm.yaml.daily.split.traintest_xy': ( 'yaml/daily_split.html#traintest_xy',
                                                                                 'enilm/yaml/daily/split.py'),
                                        'enilm.yaml.daily.split.traintest_xy_pd': ( 'yaml/daily_split.html#traintest_xy_pd',
                                                                                    'enilm/yaml/daily/split.py')},
            'enilm.yaml.data': { 'enilm.yaml.data._raw': ('yaml/data.html#_raw', 'enilm/yaml/data.py'),
                                 'enilm.yaml.data.overlapping': ('yaml/data.html#overlapping', 'enilm/yaml/data.py'),
                                 'enilm.yaml.data.raw': ('yaml/data.html#raw', 'enilm/yaml/data.py'),
                                 'enilm.yaml.data.resample': ('yaml/data.html#resample', 'enilm/yaml/data.py')}}}
