# coding: utf-8

"""
    ParakeetSDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from parakeet-python.configuration import Configuration


class TtsRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'text': 'str',
        'lang': 'str',
        'spk_id': 'SpeakerId'
    }

    attribute_map = {
        'text': 'text',
        'lang': 'lang',
        'spk_id': 'spk_id'
    }

    def __init__(self, text=None, lang='ja', spk_id=None, local_vars_configuration=None):  # noqa: E501
        """TtsRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._text = None
        self._lang = None
        self._spk_id = None
        self.discriminator = None

        self.text = text
        if lang is not None:
            self.lang = lang
        if spk_id is not None:
            self.spk_id = spk_id

    @property
    def text(self):
        """Gets the text of this TtsRequest.  # noqa: E501

        Text, 変換したいテキスト  # noqa: E501

        :return: The text of this TtsRequest.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TtsRequest.

        Text, 変換したいテキスト  # noqa: E501

        :param text: The text of this TtsRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and text is None:  # noqa: E501
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def lang(self):
        """Gets the lang of this TtsRequest.  # noqa: E501

        Lang, 言語（ja: 日本語, en: 英語）  # noqa: E501

        :return: The lang of this TtsRequest.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this TtsRequest.

        Lang, 言語（ja: 日本語, en: 英語）  # noqa: E501

        :param lang: The lang of this TtsRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["ja", "en"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and lang not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `lang` ({0}), must be one of {1}"  # noqa: E501
                .format(lang, allowed_values)
            )

        self._lang = lang

    @property
    def spk_id(self):
        """Gets the spk_id of this TtsRequest.  # noqa: E501


        :return: The spk_id of this TtsRequest.  # noqa: E501
        :rtype: SpeakerId
        """
        return self._spk_id

    @spk_id.setter
    def spk_id(self, spk_id):
        """Sets the spk_id of this TtsRequest.


        :param spk_id: The spk_id of this TtsRequest.  # noqa: E501
        :type: SpeakerId
        """

        self._spk_id = spk_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TtsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TtsRequest):
            return True

        return self.to_dict() != other.to_dict()
