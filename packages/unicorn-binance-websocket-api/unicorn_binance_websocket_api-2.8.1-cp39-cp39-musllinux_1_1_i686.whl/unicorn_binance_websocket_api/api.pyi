import logging
from _typeshed import Incomplete
from typing_extensions import Literal

__logger__: logging.getLogger
logger = __logger__

class BinanceWebSocketApiApi:
    manager: Incomplete
    def __init__(self, manager: Incomplete | None = None) -> None: ...
    def cancel_open_orders(self, process_response: Incomplete | None = None, return_response: bool = False, symbol: str = None, recv_window: int = None, request_id: str = None, stream_id: str = None, stream_label: str = None) -> bool: ...
    def cancel_order(self, cancel_restrictions: Literal['ONLY_NEW', 'ONLY_PARTIALLY_FILLED'] | None = None, new_client_order_id: str = None, order_id: int = None, orig_client_order_id: str = None, process_response: Incomplete | None = None, recv_window: int = None, request_id: str = None, return_response: bool = False, stream_id: Incomplete | None = None, symbol: str = None, stream_label: str = None) -> bool: ...
    def create_order(self, iceberg_qty: float = None, new_client_order_id: str = None, new_order_resp_type: Literal['ACK', 'RESULT', 'FULL'] | None = None, order_type: Literal['LIMIT', 'LIMIT_MAKER', 'MARKET', 'STOP_LOSS', 'STOP_LOSS_LIMIT', 'TAKE_PROFIT', 'TAKE_PROFIT_LIMIT'] | None = None, price: float = 0.0, process_response: Incomplete | None = None, quantity: float = 0.0, quote_order_qty: float = None, recv_window: int = None, request_id: str = None, return_response: bool = False, self_trade_prevention_mode: Literal['EXPIRE_TAKER', 'EXPIRE_MAKER', 'EXPIRE_BOTH', 'NONE'] | None = None, side: Literal['BUY', 'SELL'] | None = None, stop_price: float = None, strategy_id: int = None, strategy_type: int = None, stream_id: Incomplete | None = None, stream_label: str = None, symbol: str = None, time_in_force: Literal['GTC', 'IOC', 'FOK'] | None = 'GTC', test: bool = False, trailing_delta: int = None) -> int | bool: ...
    def create_test_order(self, iceberg_qty: float = None, new_client_order_id: str = None, new_order_resp_type: Literal['ACK', 'RESULT', 'FULL'] | None = None, order_type: Literal['LIMIT', 'LIMIT_MAKER', 'MARKET', 'STOP_LOSS', 'STOP_LOSS_LIMIT', 'TAKE_PROFIT', 'TAKE_PROFIT_LIMIT'] | None = None, price: float = 0.0, process_response: Incomplete | None = None, quantity: float = 0.0, quote_order_qty: float = None, recv_window: int = None, request_id: str = None, return_response: bool = False, self_trade_prevention_mode: Literal['EXPIRE_TAKER', 'EXPIRE_MAKER', 'EXPIRE_BOTH', 'NONE'] | None = None, side: Literal['BUY', 'SELL'] | None = None, stop_price: float = None, strategy_id: int = None, strategy_type: int = None, stream_id: Incomplete | None = None, stream_label: str = None, symbol: str = None, time_in_force: Literal['GTC', 'IOC', 'FOK'] | None = 'GTC', trailing_delta: int = None) -> int | bool: ...
    def get_account_status(self, process_response: Incomplete | None = None, recv_window: int = None, request_id: str = None, return_response: bool = False, stream_id: Incomplete | None = None, stream_label: str = None) -> bool: ...
    def get_exchange_info(self, permissions: list = None, process_response: Incomplete | None = None, recv_window: int = None, request_id: str = None, return_response: bool = False, stream_id: Incomplete | None = None, stream_label: str = None, symbol: str = None, symbols: list = None) -> bool: ...
    def get_listen_key(self, process_response: Incomplete | None = None, request_id: str = None, return_response: bool = False, stream_id: Incomplete | None = None, stream_label: str = None) -> bool: ...
    def get_open_orders(self, process_response: Incomplete | None = None, recv_window: int = None, request_id: str = None, return_response: bool = False, stream_id: Incomplete | None = None, stream_label: str = None, symbol: str = None) -> bool: ...
    def get_order(self, order_id: int = None, orig_client_order_id: str = None, process_response: Incomplete | None = None, recv_window: int = None, request_id: str = None, return_response: bool = False, stream_id: Incomplete | None = None, stream_label: str = None, symbol: str = None) -> bool: ...
    def get_order_book(self, process_response: Incomplete | None = None, limit: int = None, recv_window: int = None, request_id: str = None, return_response: bool = False, stream_id: Incomplete | None = None, stream_label: str = None, symbol: str = None) -> bool: ...
    def get_server_time(self, process_response: Incomplete | None = None, request_id: str = None, return_response: bool = False, stream_id: Incomplete | None = None, stream_label: str = None) -> bool: ...
    def ping(self, process_response: Incomplete | None = None, request_id: str = None, return_response: bool = False, stream_id: Incomplete | None = None, stream_label: str = None) -> bool: ...
