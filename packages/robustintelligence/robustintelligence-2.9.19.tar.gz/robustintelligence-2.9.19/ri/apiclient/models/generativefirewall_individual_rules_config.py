# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from ri.apiclient.models.generativefirewall_code_detection_rule_config import GenerativefirewallCodeDetectionRuleConfig
from ri.apiclient.models.generativefirewall_language_detection_rule_config import GenerativefirewallLanguageDetectionRuleConfig
from ri.apiclient.models.generativefirewall_off_topic_rule_config import GenerativefirewallOffTopicRuleConfig
from ri.apiclient.models.generativefirewall_pii_detection_rule_config import GenerativefirewallPiiDetectionRuleConfig
from ri.apiclient.models.generativefirewall_prompt_injection_rule_config import GenerativefirewallPromptInjectionRuleConfig
from ri.apiclient.models.generativefirewall_token_counter_rule_config import GenerativefirewallTokenCounterRuleConfig
from ri.apiclient.models.generativefirewall_toxicity_rule_config import GenerativefirewallToxicityRuleConfig
from ri.apiclient.models.generativefirewall_unknown_external_source_rule_config import GenerativefirewallUnknownExternalSourceRuleConfig
from typing import Optional, Set
from typing_extensions import Self

class GenerativefirewallIndividualRulesConfig(BaseModel):
    """
    IndividualRulesConfig contains configuration parameters for each individual rule.
    """ # noqa: E501
    off_topic: Optional[GenerativefirewallOffTopicRuleConfig] = Field(default=None, alias="offTopic")
    pii_detection_input: Optional[GenerativefirewallPiiDetectionRuleConfig] = Field(default=None, alias="piiDetectionInput")
    pii_detection_output: Optional[GenerativefirewallPiiDetectionRuleConfig] = Field(default=None, alias="piiDetectionOutput")
    token_counter_input: Optional[GenerativefirewallTokenCounterRuleConfig] = Field(default=None, alias="tokenCounterInput")
    token_counter_output: Optional[GenerativefirewallTokenCounterRuleConfig] = Field(default=None, alias="tokenCounterOutput")
    unknown_external_source: Optional[GenerativefirewallUnknownExternalSourceRuleConfig] = Field(default=None, alias="unknownExternalSource")
    language_detection: Optional[GenerativefirewallLanguageDetectionRuleConfig] = Field(default=None, alias="languageDetection")
    prompt_injection: Optional[GenerativefirewallPromptInjectionRuleConfig] = Field(default=None, alias="promptInjection")
    toxicity_rule_config_input: Optional[GenerativefirewallToxicityRuleConfig] = Field(default=None, alias="toxicityRuleConfigInput")
    toxicity_rule_config_output: Optional[GenerativefirewallToxicityRuleConfig] = Field(default=None, alias="toxicityRuleConfigOutput")
    code_detection: Optional[GenerativefirewallCodeDetectionRuleConfig] = Field(default=None, alias="codeDetection")
    __properties: ClassVar[List[str]] = ["offTopic", "piiDetectionInput", "piiDetectionOutput", "tokenCounterInput", "tokenCounterOutput", "unknownExternalSource", "languageDetection", "promptInjection", "toxicityRuleConfigInput", "toxicityRuleConfigOutput", "codeDetection"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerativefirewallIndividualRulesConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of off_topic
        if self.off_topic:
            _dict['offTopic'] = self.off_topic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pii_detection_input
        if self.pii_detection_input:
            _dict['piiDetectionInput'] = self.pii_detection_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pii_detection_output
        if self.pii_detection_output:
            _dict['piiDetectionOutput'] = self.pii_detection_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_counter_input
        if self.token_counter_input:
            _dict['tokenCounterInput'] = self.token_counter_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_counter_output
        if self.token_counter_output:
            _dict['tokenCounterOutput'] = self.token_counter_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unknown_external_source
        if self.unknown_external_source:
            _dict['unknownExternalSource'] = self.unknown_external_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_detection
        if self.language_detection:
            _dict['languageDetection'] = self.language_detection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prompt_injection
        if self.prompt_injection:
            _dict['promptInjection'] = self.prompt_injection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of toxicity_rule_config_input
        if self.toxicity_rule_config_input:
            _dict['toxicityRuleConfigInput'] = self.toxicity_rule_config_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of toxicity_rule_config_output
        if self.toxicity_rule_config_output:
            _dict['toxicityRuleConfigOutput'] = self.toxicity_rule_config_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of code_detection
        if self.code_detection:
            _dict['codeDetection'] = self.code_detection.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerativefirewallIndividualRulesConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "offTopic": GenerativefirewallOffTopicRuleConfig.from_dict(obj["offTopic"]) if obj.get("offTopic") is not None else None,
            "piiDetectionInput": GenerativefirewallPiiDetectionRuleConfig.from_dict(obj["piiDetectionInput"]) if obj.get("piiDetectionInput") is not None else None,
            "piiDetectionOutput": GenerativefirewallPiiDetectionRuleConfig.from_dict(obj["piiDetectionOutput"]) if obj.get("piiDetectionOutput") is not None else None,
            "tokenCounterInput": GenerativefirewallTokenCounterRuleConfig.from_dict(obj["tokenCounterInput"]) if obj.get("tokenCounterInput") is not None else None,
            "tokenCounterOutput": GenerativefirewallTokenCounterRuleConfig.from_dict(obj["tokenCounterOutput"]) if obj.get("tokenCounterOutput") is not None else None,
            "unknownExternalSource": GenerativefirewallUnknownExternalSourceRuleConfig.from_dict(obj["unknownExternalSource"]) if obj.get("unknownExternalSource") is not None else None,
            "languageDetection": GenerativefirewallLanguageDetectionRuleConfig.from_dict(obj["languageDetection"]) if obj.get("languageDetection") is not None else None,
            "promptInjection": GenerativefirewallPromptInjectionRuleConfig.from_dict(obj["promptInjection"]) if obj.get("promptInjection") is not None else None,
            "toxicityRuleConfigInput": GenerativefirewallToxicityRuleConfig.from_dict(obj["toxicityRuleConfigInput"]) if obj.get("toxicityRuleConfigInput") is not None else None,
            "toxicityRuleConfigOutput": GenerativefirewallToxicityRuleConfig.from_dict(obj["toxicityRuleConfigOutput"]) if obj.get("toxicityRuleConfigOutput") is not None else None,
            "codeDetection": GenerativefirewallCodeDetectionRuleConfig.from_dict(obj["codeDetection"]) if obj.get("codeDetection") is not None else None
        })
        return _obj


