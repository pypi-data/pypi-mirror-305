# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ri.apiclient.models.detection_event_type import DetectionEventType
from ri.apiclient.models.rime_severity import RimeSeverity
from ri.apiclient.models.rime_sort_spec import RimeSortSpec
from ri.apiclient.models.rime_time_interval import RimeTimeInterval
from ri.apiclient.models.rime_uuid import RimeUUID
from ri.apiclient.models.riskscore_risk_category_type import RiskscoreRiskCategoryType
from ri.apiclient.models.testrun_test_category_type import TestrunTestCategoryType
from typing import Optional, Set
from typing_extensions import Self

class RimeListDetectionEventsRequestQuery(BaseModel):
    """
    RimeListDetectionEventsRequestQuery
    """ # noqa: E501
    firewall_id: Optional[RimeUUID] = Field(default=None, alias="firewallId")
    event_object_id: Optional[StrictStr] = Field(default=None, description="Optional: return a series of detection events for a single object.", alias="eventObjectId")
    event_time_range: Optional[RimeTimeInterval] = Field(default=None, alias="eventTimeRange")
    severity: Optional[RimeSeverity] = None
    event_types: Optional[List[DetectionEventType]] = Field(default=None, description="Optional: When the list is empty, returns all.", alias="eventTypes")
    risk_category_types: Optional[List[RiskscoreRiskCategoryType]] = Field(default=None, description="Optional: When the list is empty, returns all.", alias="riskCategoryTypes")
    test_categories: Optional[List[TestrunTestCategoryType]] = Field(default=None, description="Optional: When the list is empty, return all.", alias="testCategories")
    sort: Optional[RimeSortSpec] = None
    include_resolved: Optional[StrictBool] = Field(default=None, alias="includeResolved")
    __properties: ClassVar[List[str]] = ["firewallId", "eventObjectId", "eventTimeRange", "severity", "eventTypes", "riskCategoryTypes", "testCategories", "sort", "includeResolved"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RimeListDetectionEventsRequestQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of firewall_id
        if self.firewall_id:
            _dict['firewallId'] = self.firewall_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_time_range
        if self.event_time_range:
            _dict['eventTimeRange'] = self.event_time_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sort
        if self.sort:
            _dict['sort'] = self.sort.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RimeListDetectionEventsRequestQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firewallId": RimeUUID.from_dict(obj["firewallId"]) if obj.get("firewallId") is not None else None,
            "eventObjectId": obj.get("eventObjectId"),
            "eventTimeRange": RimeTimeInterval.from_dict(obj["eventTimeRange"]) if obj.get("eventTimeRange") is not None else None,
            "severity": obj.get("severity"),
            "eventTypes": obj.get("eventTypes"),
            "riskCategoryTypes": obj.get("riskCategoryTypes"),
            "testCategories": obj.get("testCategories"),
            "sort": RimeSortSpec.from_dict(obj["sort"]) if obj.get("sort") is not None else None,
            "includeResolved": obj.get("includeResolved")
        })
        return _obj


