# coding: utf-8

"""
    Robust Intelligence Firewall REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ri.fwclient.models.generativefirewall_rule_output import GenerativefirewallRuleOutput
from ri.fwclient.models.validate_response_processed_request import ValidateResponseProcessedRequest
from ri.fwclient.models.validate_response_product_metadata import ValidateResponseProductMetadata
from typing import Optional, Set
from typing_extensions import Self

class GenerativefirewallValidateResponse(BaseModel):
    """
    ValidateResponse is the response to a single validation request. Note: this does not follow the same RI API standards, because we want this to be easily consumed by security team's event frameworks.
    """ # noqa: E501
    input_results: Optional[Dict[str, GenerativefirewallRuleOutput]] = Field(default=None, description="Results of the firewall for user input. The key is a rule name.", alias="inputResults")
    output_results: Optional[Dict[str, GenerativefirewallRuleOutput]] = Field(default=None, description="Results of the firewall for model output. The key is a rule name.", alias="outputResults")
    metadata: Optional[ValidateResponseProductMetadata] = None
    processed_req: Optional[ValidateResponseProcessedRequest] = Field(default=None, alias="processedReq")
    api_schema_version: Optional[StrictStr] = Field(default=None, description="API schema version is the version of the API response. This should be updated whenever we make semantic changes to the response.", alias="apiSchemaVersion")
    __properties: ClassVar[List[str]] = ["inputResults", "outputResults", "metadata", "processedReq", "apiSchemaVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerativefirewallValidateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in input_results (dict)
        _field_dict = {}
        if self.input_results:
            for _key in self.input_results:
                if self.input_results[_key]:
                    _field_dict[_key] = self.input_results[_key].to_dict()
            _dict['inputResults'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in output_results (dict)
        _field_dict = {}
        if self.output_results:
            for _key in self.output_results:
                if self.output_results[_key]:
                    _field_dict[_key] = self.output_results[_key].to_dict()
            _dict['outputResults'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of processed_req
        if self.processed_req:
            _dict['processedReq'] = self.processed_req.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerativefirewallValidateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inputResults": dict(
                (_k, GenerativefirewallRuleOutput.from_dict(_v))
                for _k, _v in obj["inputResults"].items()
            )
            if obj.get("inputResults") is not None
            else None,
            "outputResults": dict(
                (_k, GenerativefirewallRuleOutput.from_dict(_v))
                for _k, _v in obj["outputResults"].items()
            )
            if obj.get("outputResults") is not None
            else None,
            "metadata": ValidateResponseProductMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "processedReq": ValidateResponseProcessedRequest.from_dict(obj["processedReq"]) if obj.get("processedReq") is not None else None,
            "apiSchemaVersion": obj.get("apiSchemaVersion")
        })
        return _obj


