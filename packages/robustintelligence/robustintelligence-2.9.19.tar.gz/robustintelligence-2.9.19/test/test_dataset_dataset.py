# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.dataset_dataset import DatasetDataset

class TestDatasetDataset(unittest.TestCase):
    """DatasetDataset unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatasetDataset:
        """Test DatasetDataset
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatasetDataset`
        """
        model = DatasetDataset()
        if include_optional:
            return DatasetDataset(
                name = '',
                dataset_id = '',
                project_ids = [
                    ri.apiclient.models.rime_uuid.rimeUUID(
                        uuid = '', )
                    ],
                creator_id = ri.apiclient.models.rime_uuid.rimeUUID(
                    uuid = '', ),
                creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user_metadata = ri.apiclient.models.registry_metadata.registryMetadata(
                    tags = [
                        ''
                        ], 
                    extra_info = '', ),
                integration_id = ri.apiclient.models.rime_uuid.rimeUUID(
                    uuid = '', ),
                data_info = ri.apiclient.models.registry_data_info.registryDataInfo(
                    connection_info = ri.apiclient.models.registry_connection_info.registryConnectionInfo(
                        data_file = ri.apiclient.models.registry_data_file_info.registryDataFileInfo(
                            path = '', 
                            data_type = 'DATA_TYPE_UNSPECIFIED', ), 
                        data_loading = ri.apiclient.models.registry_data_loading_info.registryDataLoadingInfo(
                            path = '', 
                            load_func_name = '', 
                            loader_kwargs_json = '', 
                            data_endpoint_integration_id = ri.apiclient.models.rime_uuid.rimeUUID(
                                uuid = '', ), ), 
                        data_collector = ri.apiclient.models.registry_data_collector_info.registryDataCollectorInfo(
                            data_stream_id = ri.apiclient.models.rime_uuid.rimeUUID(
                                uuid = '', ), ), 
                        databricks = ri.apiclient.models.registry_databricks_info.registryDatabricksInfo(
                            table_name = '', ), 
                        hugging_face = ri.apiclient.models.registry_hugging_face_data_info.registryHuggingFaceDataInfo(
                            dataset_uri = '', 
                            split_name = '', 
                            loading_params_json = '', ), ), 
                    data_params = ri.apiclient.models.registry_data_params.registryDataParams(
                        label_col = '', 
                        timestamp_col = '', 
                        class_names = [
                            ''
                            ], 
                        ranking_info = ri.apiclient.models.data_params_ranking_info.DataParamsRankingInfo(
                            query_col = '', 
                            nqueries = '', 
                            nrows_per_query = '', 
                            drop_query_id = True, ), 
                        nrows = '', 
                        nrows_per_time_bin = '', 
                        sample = True, 
                        categorical_features = [
                            ''
                            ], 
                        protected_features = [
                            ''
                            ], 
                        features_not_in_model = [
                            ''
                            ], 
                        text_features = [
                            ''
                            ], 
                        image_features = [
                            ''
                            ], 
                        prompt_col = '', 
                        intersections = [
                            ri.apiclient.models.data_params_feature_intersection.DataParamsFeatureIntersection(
                                features = [
                                    ''
                                    ], )
                            ], 
                        loading_kwargs = '', 
                        feature_type_path = '', 
                        image_load_path = '', 
                        experimental_fields = {
                            'key' : None
                            }, ), ),
                ct_info = ri.apiclient.models.dataset_ct_info.datasetCTInfo(
                    firewall_id = ri.apiclient.models.rime_uuid.rimeUUID(
                        uuid = '', ), 
                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    ct_dataset_type = 'CTDATASET_TYPE_UNSPECIFIED', ),
                validity_status = 'VALIDITY_STATUS_UNSPECIFIED',
                marked_for_delete_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                validity_status_message = '',
                size_bytes = ''
            )
        else:
            return DatasetDataset(
        )
        """

    def testDatasetDataset(self):
        """Test DatasetDataset"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()