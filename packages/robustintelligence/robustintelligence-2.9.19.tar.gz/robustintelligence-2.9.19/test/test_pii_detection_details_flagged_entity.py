# coding: utf-8

"""
    Robust Intelligence Firewall REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.fwclient.models.pii_detection_details_flagged_entity import PiiDetectionDetailsFlaggedEntity

class TestPiiDetectionDetailsFlaggedEntity(unittest.TestCase):
    """PiiDetectionDetailsFlaggedEntity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PiiDetectionDetailsFlaggedEntity:
        """Test PiiDetectionDetailsFlaggedEntity
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PiiDetectionDetailsFlaggedEntity`
        """
        model = PiiDetectionDetailsFlaggedEntity()
        if include_optional:
            return PiiDetectionDetailsFlaggedEntity(
                entity_type = 'PII_ENTITY_TYPE_UNSPECIFIED',
                custom_entity_name = '',
                flagged_substring = ri.fwclient.models.generativefirewall_flagged_substring.generativefirewallFlaggedSubstring(
                    request_body_component = 'REQUEST_BODY_COMPONENT_UNSPECIFIED', 
                    context_index = '', 
                    substring_start_index = '', 
                    substring_end_index = '', ),
                confidence_score = 1.337
            )
        else:
            return PiiDetectionDetailsFlaggedEntity(
        )
        """

    def testPiiDetectionDetailsFlaggedEntity(self):
        """Test PiiDetectionDetailsFlaggedEntity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()