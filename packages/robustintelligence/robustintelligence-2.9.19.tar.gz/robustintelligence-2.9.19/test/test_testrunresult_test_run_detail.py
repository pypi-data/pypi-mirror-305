# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.testrunresult_test_run_detail import TestrunresultTestRunDetail

class TestTestrunresultTestRunDetail(unittest.TestCase):
    """TestrunresultTestRunDetail unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TestrunresultTestRunDetail:
        """Test TestrunresultTestRunDetail
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TestrunresultTestRunDetail`
        """
        model = TestrunresultTestRunDetail()
        if include_optional:
            return TestrunresultTestRunDetail(
                test_run_id = '',
                name = '',
                project_id = ri.apiclient.models.rime_uuid.rimeUUID(
                    uuid = '', ),
                testing_type = 'TEST_TYPE_STRESS_TESTING_UNSPECIFIED',
                model_task = 'MODEL_TASK_UNSPECIFIED',
                ref_data_id = '',
                eval_data_id = '',
                model_id = ri.apiclient.models.rime_uuid.rimeUUID(
                    uuid = '', ),
                upload_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                web_app_url = ri.apiclient.models.rime_safe_url.rimeSafeURL(
                    url = '', ),
                test_categories = [
                    'TEST_CATEGORY_TYPE_UNSPECIFIED'
                    ],
                metrics = ri.apiclient.models.testrunresult_test_run_metrics.testrunresultTestRunMetrics(
                    model_perf = {
                        'key' : ri.apiclient.models.test_run_metrics_model_perf_metric.TestRunMetricsModelPerfMetric(
                            ref_metric = 1.337, 
                            eval_metric = 1.337, )
                        }, 
                    average_prediction = 1.337, 
                    num_inputs = '', 
                    num_failing_inputs = '', 
                    duration_millis = '', 
                    severity_counts = ri.apiclient.models.rime_severity_counts.rimeSeverityCounts(
                        num_none_severity = '', 
                        num_low_severity = '', 
                        num_high_severity = '', ), 
                    summary_counts = ri.apiclient.models.testrunresult_result_summary_counts.testrunresultResultSummaryCounts(
                        total = '', 
                        pass = '', 
                        warning = '', 
                        fail = '', 
                        skip = '', ), 
                    category_summary_metrics = [
                        ri.apiclient.models.test_run_metrics_category_summary_metric.TestRunMetricsCategorySummaryMetric(
                            test_category = 'TEST_CATEGORY_TYPE_UNSPECIFIED', 
                            category_id = '', 
                            name = '', 
                            value = 1.337, )
                        ], 
                    risk_scores = [
                        ri.apiclient.models.riskscore_risk_score.riskscoreRiskScore(
                            type = 'RISK_CATEGORY_TYPE_UNSPECIFIED', 
                            severity = 'SEVERITY_UNSPECIFIED', 
                            score = 1.337, )
                        ], ),
                status = 'TEST_TASK_STATUS_UNSPECIFIED',
                progress = '',
                rime_version = '',
                bin_time_interval = ri.apiclient.models.rime_time_interval.rimeTimeInterval(
                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                ref_data_sampling_pct = 1.337,
                eval_data_sampling_pct = 1.337,
                schedule_id = ri.apiclient.models.rime_uuid.rimeUUID(
                    uuid = '', )
            )
        else:
            return TestrunresultTestRunDetail(
        )
        """

    def testTestrunresultTestRunDetail(self):
        """Test TestrunresultTestRunDetail"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()