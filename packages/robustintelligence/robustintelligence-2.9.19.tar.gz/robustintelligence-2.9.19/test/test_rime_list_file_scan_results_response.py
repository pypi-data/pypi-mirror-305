# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.rime_list_file_scan_results_response import RimeListFileScanResultsResponse

class TestRimeListFileScanResultsResponse(unittest.TestCase):
    """RimeListFileScanResultsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RimeListFileScanResultsResponse:
        """Test RimeListFileScanResultsResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RimeListFileScanResultsResponse`
        """
        model = RimeListFileScanResultsResponse()
        if include_optional:
            return RimeListFileScanResultsResponse(
                results = [
                    ri.apiclient.models.schemafilescanning_file_scan_result.schemafilescanningFileScanResult(
                        file_scan_id = ri.apiclient.models.rime_uuid.rimeUUID(
                            uuid = '', ), 
                        project_id = ri.apiclient.models.rime_uuid.rimeUUID(
                            uuid = '', ), 
                        model_id = , 
                        rime_agent_version = '', 
                        upload_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        file_security_reports = [
                            ri.apiclient.models.schemafilescanning_file_security_report.schemafilescanningFileSecurityReport(
                                filename = '', 
                                path = '', 
                                size = '', 
                                sha256 = '', 
                                creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                last_modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                dependencies = [
                                    ''
                                    ], 
                                unexpected_dependencies = [
                                    ''
                                    ], 
                                unsafe_dependencies = [
                                    ''
                                    ], )
                            ], 
                        repo_metadata = ri.apiclient.models.schemafilescanning_repo_metadata.schemafilescanningRepoMetadata(
                            purl = ri.apiclient.models.filescanning_package_url.filescanningPackageURL(
                                type = 'PACKAGE_TYPE_UNSPECIFIED', 
                                namespace = '', 
                                name = '', 
                                version = '', 
                                qualifiers = {
                                    'key' : ''
                                    }, 
                                subpath = '', ), 
                            repo_last_modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            tags = [
                                ''
                                ], 
                            reputation = ri.apiclient.models.schemafilescanning_repo_metadata_reputation.schemafilescanningRepoMetadataReputation(
                                downloads = '', 
                                likes = '', 
                                stars = '', 
                                forks = '', ), 
                            license = ri.apiclient.models.schemafilescanning_repo_metadata_license.schemafilescanningRepoMetadataLicense(
                                name = '', ), 
                            author = '', ), 
                        unscanned_file_paths = [
                            ''
                            ], 
                        severity = 'SEVERITY_UNSPECIFIED', )
                    ],
                next_page_token = '',
                has_more = True
            )
        else:
            return RimeListFileScanResultsResponse(
        )
        """

    def testRimeListFileScanResultsResponse(self):
        """Test RimeListFileScanResultsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()