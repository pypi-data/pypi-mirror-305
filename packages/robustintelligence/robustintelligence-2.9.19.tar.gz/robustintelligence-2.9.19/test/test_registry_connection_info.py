# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.registry_connection_info import RegistryConnectionInfo

class TestRegistryConnectionInfo(unittest.TestCase):
    """RegistryConnectionInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RegistryConnectionInfo:
        """Test RegistryConnectionInfo
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RegistryConnectionInfo`
        """
        model = RegistryConnectionInfo()
        if include_optional:
            return RegistryConnectionInfo(
                data_file = ri.apiclient.models.registry_data_file_info.registryDataFileInfo(
                    path = '', 
                    data_type = 'DATA_TYPE_UNSPECIFIED', ),
                data_loading = ri.apiclient.models.registry_data_loading_info.registryDataLoadingInfo(
                    path = '', 
                    load_func_name = '', 
                    loader_kwargs_json = '', 
                    data_endpoint_integration_id = ri.apiclient.models.rime_uuid.rimeUUID(
                        uuid = '', ), ),
                data_collector = ri.apiclient.models.registry_data_collector_info.registryDataCollectorInfo(
                    data_stream_id = ri.apiclient.models.rime_uuid.rimeUUID(
                        uuid = '', ), ),
                databricks = ri.apiclient.models.registry_databricks_info.registryDatabricksInfo(
                    table_name = '', ),
                hugging_face = ri.apiclient.models.registry_hugging_face_data_info.registryHuggingFaceDataInfo(
                    dataset_uri = '', 
                    split_name = '', 
                    loading_params_json = '', )
            )
        else:
            return RegistryConnectionInfo(
        )
        """

    def testRegistryConnectionInfo(self):
        """Test RegistryConnectionInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()