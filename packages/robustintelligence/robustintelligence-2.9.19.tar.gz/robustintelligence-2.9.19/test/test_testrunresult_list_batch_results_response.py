# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.testrunresult_list_batch_results_response import TestrunresultListBatchResultsResponse

class TestTestrunresultListBatchResultsResponse(unittest.TestCase):
    """TestrunresultListBatchResultsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TestrunresultListBatchResultsResponse:
        """Test TestrunresultListBatchResultsResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TestrunresultListBatchResultsResponse`
        """
        model = TestrunresultListBatchResultsResponse()
        if include_optional:
            return TestrunresultListBatchResultsResponse(
                test_batches = [
                    ri.apiclient.models.testrunresult_test_batch_result.testrunresultTestBatchResult(
                        test_run_id = '', 
                        test_type = '', 
                        test_name = '', 
                        description = '', 
                        test_category = 'TEST_CATEGORY_TYPE_UNSPECIFIED', 
                        category = '', 
                        duration_in_millis = '', 
                        severity = 'SEVERITY_UNSPECIFIED', 
                        summary_counts = ri.apiclient.models.testrunresult_result_summary_counts.testrunresultResultSummaryCounts(
                            total = '', 
                            pass = '', 
                            warning = '', 
                            fail = '', 
                            skip = '', ), 
                        failing_features = [
                            ''
                            ], 
                        metrics = [
                            ri.apiclient.models.rime_test_metric.rimeTestMetric(
                                metric = '', 
                                category = 'TEST_METRIC_CATEGORY_UNSPECIFIED', 
                                int_value = '', 
                                float_value = 1.337, 
                                empty = ri.apiclient.models.empty.empty(), 
                                str_value = '', 
                                int_list = ri.apiclient.models.rime_int_list.rimeIntList(
                                    values = [
                                        ''
                                        ], ), 
                                float_list = ri.apiclient.models.rime_float_list.rimeFloatList(), 
                                str_list = ri.apiclient.models.rime_str_list.rimeStrList(), 
                                test_case_monitor_info = ri.apiclient.models.test_case_monitor_info_identifies_a_test_metric_as_a_default_monitor.TestCaseMonitorInfo identifies a TestMetric as a default monitor(
                                    threshold = ri.apiclient.models.thresholds_defined_for_the_monitor.Thresholds defined for the Monitor(
                                        low = 1.337, 
                                        high = 1.337, 
                                        type = 'TYPE_UNSPECIFIED', ), 
                                    is_subset_metric = True, 
                                    excluded_transforms = ri.apiclient.models.monitor_excluded_transforms.monitorExcludedTransforms(), ), )
                            ], 
                        show_in_test_comparisons = True, 
                        display = ri.apiclient.models.testrunresult_test_batch_result_display.testrunresultTestBatchResultDisplay(
                            summary_details = 'YQ==', 
                            table_columns_to_show = [
                                ri.apiclient.models.rime_table_column.rimeTableColumn(
                                    name = '', 
                                    description = '', )
                                ], 
                            long_description_tabs = [
                                ri.apiclient.models.rime_long_description_tab.rimeLongDescriptionTab(
                                    title = '', 
                                    contents = '', )
                                ], 
                            description_html = '', ), 
                        failing_rows_result = ri.apiclient.models.rime_failing_rows_result.rimeFailingRowsResult(
                            failing_rows = [
                                ri.apiclient.models.rime_failing_row.rimeFailingRow(
                                    row_id = '', 
                                    details = 'YQ==', )
                                ], 
                            top_count = '', 
                            total_count = '', 
                            all_included = True, 
                            description = '', ), 
                        security_test_details = ri.apiclient.models.detection_security_event_details.detectionSecurityEventDetails(
                            effect_on_model = [
                                ''
                                ], 
                            possible_intent = [
                                ''
                                ], 
                            evidence = , 
                            recommendations = [
                                ''
                                ], 
                            datapoints = [
                                ri.apiclient.models.security_event_details_flagged_datapoint.SecurityEventDetailsFlaggedDatapoint(
                                    row_id = '', 
                                    row_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], ), )
                    ],
                next_page_token = '',
                has_more = True
            )
        else:
            return TestrunresultListBatchResultsResponse(
        )
        """

    def testTestrunresultListBatchResultsResponse(self):
        """Test TestrunresultListBatchResultsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()