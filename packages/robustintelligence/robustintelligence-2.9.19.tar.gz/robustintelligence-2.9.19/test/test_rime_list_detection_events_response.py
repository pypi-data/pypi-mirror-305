# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.rime_list_detection_events_response import RimeListDetectionEventsResponse

class TestRimeListDetectionEventsResponse(unittest.TestCase):
    """RimeListDetectionEventsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RimeListDetectionEventsResponse:
        """Test RimeListDetectionEventsResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RimeListDetectionEventsResponse`
        """
        model = RimeListDetectionEventsResponse()
        if include_optional:
            return RimeListDetectionEventsResponse(
                events = [
                    ri.apiclient.models.detection_detection_event.detectionDetectionEvent(
                        id = ri.apiclient.models.rime_uuid.rimeUUID(
                            uuid = '', ), 
                        project_id = ri.apiclient.models.rime_uuid.rimeUUID(
                            uuid = '', ), 
                        firewall_id = , 
                        event_type = 'EVENT_TYPE_UNSPECIFIED', 
                        severity = 'SEVERITY_UNSPECIFIED', 
                        event_object_id = '', 
                        event_object_name = '', 
                        event_time_range = ri.apiclient.models.rime_time_interval.rimeTimeInterval(
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        last_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        risk_category_type = 'RISK_CATEGORY_TYPE_UNSPECIFIED', 
                        test_category = 'TEST_CATEGORY_TYPE_UNSPECIFIED', 
                        description = '', 
                        description_html = '', 
                        resolution = ri.apiclient.models.detection_resolution.detectionResolution(
                            resolve_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            resolved_by_user_id = , ), 
                        detail = ri.apiclient.models.detection_event_detail.detectionEventDetail(
                            metric_degradation = ri.apiclient.models.detection_metric_degradation_event_details.detectionMetricDegradationEventDetails(), 
                            security = ri.apiclient.models.detection_security_event_details.detectionSecurityEventDetails(
                                type = 'SECURITY_EVENT_TYPE_UNSPECIFIED', 
                                effect_on_model = [
                                    ''
                                    ], 
                                possible_intent = [
                                    ''
                                    ], 
                                evidence = , 
                                recommendations = [
                                    ''
                                    ], 
                                datapoints = [
                                    ri.apiclient.models.security_event_details_flagged_datapoint.SecurityEventDetailsFlaggedDatapoint(
                                        row_id = '', 
                                        row_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                    ], ), ), )
                    ],
                next_page_token = '',
                has_more = True
            )
        else:
            return RimeListDetectionEventsResponse(
        )
        """

    def testRimeListDetectionEventsResponse(self):
        """Test RimeListDetectionEventsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()