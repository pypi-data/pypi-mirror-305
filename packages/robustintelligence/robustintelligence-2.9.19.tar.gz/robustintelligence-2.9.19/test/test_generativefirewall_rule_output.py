# coding: utf-8

"""
    Robust Intelligence Firewall REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.fwclient.models.generativefirewall_rule_output import GenerativefirewallRuleOutput

class TestGenerativefirewallRuleOutput(unittest.TestCase):
    """GenerativefirewallRuleOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GenerativefirewallRuleOutput:
        """Test GenerativefirewallRuleOutput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GenerativefirewallRuleOutput`
        """
        model = GenerativefirewallRuleOutput()
        if include_optional:
            return GenerativefirewallRuleOutput(
                rule_name = '',
                action = 'FIREWALL_ACTION_UNSPECIFIED',
                risk_category = 'RISK_CATEGORY_TYPE_UNSPECIFIED',
                pii_detection_details = ri.fwclient.models.generativefirewall_pii_detection_details.generativefirewallPiiDetectionDetails(
                    flagged_entities = [
                        ri.fwclient.models.pii_detection_details_flagged_entity.PiiDetectionDetailsFlaggedEntity(
                            entity_type = 'PII_ENTITY_TYPE_UNSPECIFIED', 
                            custom_entity_name = '', 
                            flagged_substring = ri.fwclient.models.generativefirewall_flagged_substring.generativefirewallFlaggedSubstring(
                                request_body_component = 'REQUEST_BODY_COMPONENT_UNSPECIFIED', 
                                context_index = '', 
                                substring_start_index = '', 
                                substring_end_index = '', ), 
                            confidence_score = 1.337, )
                        ], 
                    sanitized_text = '', ),
                language_detection_details = ri.fwclient.models.generativefirewall_language_detection_details.generativefirewallLanguageDetectionDetails(
                    flagged_language_substrings = [
                        ri.fwclient.models.language_detection_details_language_substring.LanguageDetectionDetailsLanguageSubstring(
                            language_code = '', 
                            flagged_substring = ri.fwclient.models.generativefirewall_flagged_substring.generativefirewallFlaggedSubstring(
                                request_body_component = 'REQUEST_BODY_COMPONENT_UNSPECIFIED', 
                                context_index = '', 
                                substring_start_index = '', 
                                substring_end_index = '', ), )
                        ], ),
                prompt_injection_details = ri.fwclient.models.generativefirewall_prompt_injection_details.generativefirewallPromptInjectionDetails(
                    objectives = [
                        'ATTACK_OBJECTIVE_UNSPECIFIED'
                        ], 
                    techniques = [
                        'ATTACK_TECHNIQUE_UNSPECIFIED'
                        ], ),
                toxicity_detection_details = ri.fwclient.models.generativefirewall_toxicity_detection_details.generativefirewallToxicityDetectionDetails(
                    category = 'TOXICITY_THREAT_CATEGORY_UNSPECIFIED', ),
                code_detection_details = ri.fwclient.models.generativefirewall_code_detection_details.generativefirewallCodeDetectionDetails(
                    flagged_code_substrings = [
                        ri.fwclient.models.code_detection_details_code_substring.CodeDetectionDetailsCodeSubstring(
                            language = '', 
                            flagged_substring = ri.fwclient.models.generativefirewall_flagged_substring.generativefirewallFlaggedSubstring(
                                request_body_component = 'REQUEST_BODY_COMPONENT_UNSPECIFIED', 
                                context_index = '', 
                                substring_start_index = '', 
                                substring_end_index = '', ), )
                        ], ),
                rule_eval_metadata = ri.fwclient.models.rule_output_rule_evaluation_metadata.RuleOutputRuleEvaluationMetadata(
                    evaluation_models = {
                        'key' : ri.fwclient.models.rule_evaluation_metadata_model_info.RuleEvaluationMetadataModelInfo(
                            model_version = '', 
                            chunk_scores = [
                                ri.fwclient.models.generativefirewall_raw_model_prediction.generativefirewallRawModelPrediction(
                                    classification_pred = ri.fwclient.models.raw_model_prediction_text_classification_pred.RawModelPredictionTextClassificationPred(
                                        scores = [
                                            1.337
                                            ], ), )
                                ], )
                        }, 
                    yara_hotfix = ri.fwclient.models.rule_evaluation_metadata_yara_info.RuleEvaluationMetadataYaraInfo(
                        is_decisive_match = True, 
                        action = 'FIREWALL_ACTION_UNSPECIFIED', 
                        matched_by_rules = [
                            ''
                            ], ), ),
                security_standards = [
                    ri.fwclient.models.container_for_an_ai_risk_standard_(e/g/_nist).Container for an AI risk standard (e.g. NIST)(
                        description = '', )
                    ]
            )
        else:
            return GenerativefirewallRuleOutput(
        )
        """

    def testGenerativefirewallRuleOutput(self):
        """Test GenerativefirewallRuleOutput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()