# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.rime_get_file_scan_result_response import RimeGetFileScanResultResponse

class TestRimeGetFileScanResultResponse(unittest.TestCase):
    """RimeGetFileScanResultResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RimeGetFileScanResultResponse:
        """Test RimeGetFileScanResultResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RimeGetFileScanResultResponse`
        """
        model = RimeGetFileScanResultResponse()
        if include_optional:
            return RimeGetFileScanResultResponse(
                file_scan_result = ri.apiclient.models.schemafilescanning_file_scan_result.schemafilescanningFileScanResult(
                    file_scan_id = ri.apiclient.models.rime_uuid.rimeUUID(
                        uuid = '', ), 
                    project_id = ri.apiclient.models.rime_uuid.rimeUUID(
                        uuid = '', ), 
                    model_id = , 
                    rime_agent_version = '', 
                    upload_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    file_security_reports = [
                        ri.apiclient.models.schemafilescanning_file_security_report.schemafilescanningFileSecurityReport(
                            filename = '', 
                            path = '', 
                            size = '', 
                            sha256 = '', 
                            creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            dependencies = [
                                ''
                                ], 
                            unexpected_dependencies = [
                                ''
                                ], 
                            unsafe_dependencies = [
                                ''
                                ], )
                        ], 
                    repo_metadata = ri.apiclient.models.schemafilescanning_repo_metadata.schemafilescanningRepoMetadata(
                        purl = ri.apiclient.models.filescanning_package_url.filescanningPackageURL(
                            type = 'PACKAGE_TYPE_UNSPECIFIED', 
                            namespace = '', 
                            name = '', 
                            version = '', 
                            qualifiers = {
                                'key' : ''
                                }, 
                            subpath = '', ), 
                        repo_last_modified_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        tags = [
                            ''
                            ], 
                        reputation = ri.apiclient.models.schemafilescanning_repo_metadata_reputation.schemafilescanningRepoMetadataReputation(
                            downloads = '', 
                            likes = '', 
                            stars = '', 
                            forks = '', ), 
                        license = ri.apiclient.models.schemafilescanning_repo_metadata_license.schemafilescanningRepoMetadataLicense(
                            name = '', ), 
                        author = '', ), 
                    unscanned_file_paths = [
                        ''
                        ], 
                    severity = 'SEVERITY_UNSPECIFIED', )
            )
        else:
            return RimeGetFileScanResultResponse(
        )
        """

    def testRimeGetFileScanResultResponse(self):
        """Test RimeGetFileScanResultResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()