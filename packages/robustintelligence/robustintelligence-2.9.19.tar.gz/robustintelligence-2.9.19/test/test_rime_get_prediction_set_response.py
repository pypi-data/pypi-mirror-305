# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from ri.apiclient.models.rime_get_prediction_set_response import RimeGetPredictionSetResponse

class TestRimeGetPredictionSetResponse(unittest.TestCase):
    """RimeGetPredictionSetResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RimeGetPredictionSetResponse:
        """Test RimeGetPredictionSetResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RimeGetPredictionSetResponse`
        """
        model = RimeGetPredictionSetResponse()
        if include_optional:
            return RimeGetPredictionSetResponse(
                prediction = ri.apiclient.models.registryprediction_prediction.registrypredictionPrediction(
                    dataset_id = '', 
                    model_id = ri.apiclient.models.rime_uuid.rimeUUID(
                        uuid = '', ), 
                    project_ids = [
                        ri.apiclient.models.rime_uuid.rimeUUID(
                            uuid = '', )
                        ], 
                    creator_id = , 
                    creation_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    user_metadata = ri.apiclient.models.registry_metadata.registryMetadata(
                        tags = [
                            ''
                            ], 
                        extra_info = '', ), 
                    integration_id = , 
                    pred_info = ri.apiclient.models.registry_pred_info.registryPredInfo(
                        connection_info = ri.apiclient.models.registry_connection_info.registryConnectionInfo(
                            data_file = ri.apiclient.models.registry_data_file_info.registryDataFileInfo(
                                path = '', 
                                data_type = 'DATA_TYPE_UNSPECIFIED', ), 
                            data_loading = ri.apiclient.models.registry_data_loading_info.registryDataLoadingInfo(
                                path = '', 
                                load_func_name = '', 
                                loader_kwargs_json = '', 
                                data_endpoint_integration_id = , ), 
                            data_collector = ri.apiclient.models.registry_data_collector_info.registryDataCollectorInfo(
                                data_stream_id = , ), 
                            databricks = ri.apiclient.models.registry_databricks_info.registryDatabricksInfo(
                                table_name = '', ), 
                            hugging_face = ri.apiclient.models.registry_hugging_face_data_info.registryHuggingFaceDataInfo(
                                dataset_uri = '', 
                                split_name = '', 
                                loading_params_json = '', ), ), 
                        pred_params = ri.apiclient.models.registry_prediction_params.registryPredictionParams(
                            pred_col = '', 
                            timestamp_col = '', 
                            experimental_fields = {
                                'key' : None
                                }, ), ), 
                    validity_status = 'VALIDITY_STATUS_UNSPECIFIED', 
                    marked_for_delete_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    validity_status_message = '', )
            )
        else:
            return RimeGetPredictionSetResponse(
        )
        """

    def testRimeGetPredictionSetResponse(self):
        """Test RimeGetPredictionSetResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()