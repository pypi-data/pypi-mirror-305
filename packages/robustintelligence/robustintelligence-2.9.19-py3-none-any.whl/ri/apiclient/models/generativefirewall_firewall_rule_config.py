# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from ri.apiclient.models.generativefirewall_firewall_rule_type import GenerativefirewallFirewallRuleType
from ri.apiclient.models.generativefirewall_individual_rules_config import GenerativefirewallIndividualRulesConfig
from ri.apiclient.models.rime_language import RimeLanguage
from typing import Optional, Set
from typing_extensions import Self

class GenerativefirewallFirewallRuleConfig(BaseModel):
    """
    FirewallRuleConfig describes the firewall rule configuration of the firewall.
    """ # noqa: E501
    language: Optional[RimeLanguage] = None
    selected_rules: Optional[List[GenerativefirewallFirewallRuleType]] = Field(default=None, description="If this list is empty, all available firewall rules will be run. Otherwise, only the rules specified here will be run.", alias="selectedRules")
    individual_rules_config: Optional[GenerativefirewallIndividualRulesConfig] = Field(default=None, alias="individualRulesConfig")
    __properties: ClassVar[List[str]] = ["language", "selectedRules", "individualRulesConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerativefirewallFirewallRuleConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of individual_rules_config
        if self.individual_rules_config:
            _dict['individualRulesConfig'] = self.individual_rules_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerativefirewallFirewallRuleConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "language": obj.get("language"),
            "selectedRules": obj.get("selectedRules"),
            "individualRulesConfig": GenerativefirewallIndividualRulesConfig.from_dict(obj["individualRulesConfig"]) if obj.get("individualRulesConfig") is not None else None
        })
        return _obj


