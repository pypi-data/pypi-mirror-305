# coding: utf-8

"""
    Robust Intelligence Firewall REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ri.fwclient.models.generativefirewall_code_detection_details import GenerativefirewallCodeDetectionDetails
from ri.fwclient.models.generativefirewall_firewall_action import GenerativefirewallFirewallAction
from ri.fwclient.models.generativefirewall_language_detection_details import GenerativefirewallLanguageDetectionDetails
from ri.fwclient.models.generativefirewall_pii_detection_details import GenerativefirewallPiiDetectionDetails
from ri.fwclient.models.generativefirewall_prompt_injection_details import GenerativefirewallPromptInjectionDetails
from ri.fwclient.models.generativefirewall_standard_info import GenerativefirewallStandardInfo
from ri.fwclient.models.generativefirewall_toxicity_detection_details import GenerativefirewallToxicityDetectionDetails
from ri.fwclient.models.riskscore_risk_category_type import RiskscoreRiskCategoryType
from ri.fwclient.models.rule_output_rule_evaluation_metadata import RuleOutputRuleEvaluationMetadata
from typing import Optional, Set
from typing_extensions import Self

class GenerativefirewallRuleOutput(BaseModel):
    """
    RuleOutput represents a single output from a firewall rule.
    """ # noqa: E501
    rule_name: Optional[StrictStr] = Field(default=None, alias="ruleName")
    action: Optional[GenerativefirewallFirewallAction] = None
    risk_category: Optional[RiskscoreRiskCategoryType] = Field(default=None, alias="riskCategory")
    pii_detection_details: Optional[GenerativefirewallPiiDetectionDetails] = Field(default=None, alias="piiDetectionDetails")
    language_detection_details: Optional[GenerativefirewallLanguageDetectionDetails] = Field(default=None, alias="languageDetectionDetails")
    prompt_injection_details: Optional[GenerativefirewallPromptInjectionDetails] = Field(default=None, alias="promptInjectionDetails")
    toxicity_detection_details: Optional[GenerativefirewallToxicityDetectionDetails] = Field(default=None, alias="toxicityDetectionDetails")
    code_detection_details: Optional[GenerativefirewallCodeDetectionDetails] = Field(default=None, alias="codeDetectionDetails")
    rule_eval_metadata: Optional[RuleOutputRuleEvaluationMetadata] = Field(default=None, alias="ruleEvalMetadata")
    security_standards: Optional[List[GenerativefirewallStandardInfo]] = Field(default=None, description="Standards encodes which regulatory standards (MITRE, OWASP) are addressed by this firewall rule.", alias="securityStandards")
    __properties: ClassVar[List[str]] = ["ruleName", "action", "riskCategory", "piiDetectionDetails", "languageDetectionDetails", "promptInjectionDetails", "toxicityDetectionDetails", "codeDetectionDetails", "ruleEvalMetadata", "securityStandards"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerativefirewallRuleOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pii_detection_details
        if self.pii_detection_details:
            _dict['piiDetectionDetails'] = self.pii_detection_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_detection_details
        if self.language_detection_details:
            _dict['languageDetectionDetails'] = self.language_detection_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prompt_injection_details
        if self.prompt_injection_details:
            _dict['promptInjectionDetails'] = self.prompt_injection_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of toxicity_detection_details
        if self.toxicity_detection_details:
            _dict['toxicityDetectionDetails'] = self.toxicity_detection_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of code_detection_details
        if self.code_detection_details:
            _dict['codeDetectionDetails'] = self.code_detection_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rule_eval_metadata
        if self.rule_eval_metadata:
            _dict['ruleEvalMetadata'] = self.rule_eval_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in security_standards (list)
        _items = []
        if self.security_standards:
            for _item in self.security_standards:
                if _item:
                    _items.append(_item.to_dict())
            _dict['securityStandards'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerativefirewallRuleOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ruleName": obj.get("ruleName"),
            "action": obj.get("action"),
            "riskCategory": obj.get("riskCategory"),
            "piiDetectionDetails": GenerativefirewallPiiDetectionDetails.from_dict(obj["piiDetectionDetails"]) if obj.get("piiDetectionDetails") is not None else None,
            "languageDetectionDetails": GenerativefirewallLanguageDetectionDetails.from_dict(obj["languageDetectionDetails"]) if obj.get("languageDetectionDetails") is not None else None,
            "promptInjectionDetails": GenerativefirewallPromptInjectionDetails.from_dict(obj["promptInjectionDetails"]) if obj.get("promptInjectionDetails") is not None else None,
            "toxicityDetectionDetails": GenerativefirewallToxicityDetectionDetails.from_dict(obj["toxicityDetectionDetails"]) if obj.get("toxicityDetectionDetails") is not None else None,
            "codeDetectionDetails": GenerativefirewallCodeDetectionDetails.from_dict(obj["codeDetectionDetails"]) if obj.get("codeDetectionDetails") is not None else None,
            "ruleEvalMetadata": RuleOutputRuleEvaluationMetadata.from_dict(obj["ruleEvalMetadata"]) if obj.get("ruleEvalMetadata") is not None else None,
            "securityStandards": [GenerativefirewallStandardInfo.from_dict(_item) for _item in obj["securityStandards"]] if obj.get("securityStandards") is not None else None
        })
        return _obj


