[tool.ruff]
output-format = "full"
line-length = 100
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    ".eggs",
    "*.egg",
    "dist",
    "tests/fixtures/**",
    "tests/**/snapshots/**",
    "alembic",
    "airich",
]

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
    "D100",
    "B008",
    "D104",
    "Q000",
    "S101",
    "PT016",
    "ANN101",
    "ANN102",
    "N805",
    "PLC0414",
    "COM812",
    "ISC001",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
ignore-decorators = [
    "typing.overload",
]

[tool.ruff.lint.mccabe]
max-complexity = 11

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.Query",
]

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = [
    "F401",
]
"tests/*" = [
    "D103",
]
"*/types.py" = [
    "ANN401",
    "D",
]
"*/converters/*" = [
    "UP037",
]

[tool.black]
line-length = 100
skip-string-normalization = true
include = "\\.pyi?$"
exclude = "/(\n    \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | _build\n  | buck-out\n  | build\n  | dist\n)/\n"

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.coverage.run]
source = [
    "sqlalchemy_filter_converter",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "enum.Enum",
    "(Protocol):",
    "(typing.Protocol):",
    "pragma: no cover",
    "pragma: no coverage",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@overload",
]

[tool.pytest]
testpath = "tests"

[tool.bandit]
exclude = [
    "tests",
]

[tool.bandit.assert_used]
skips = [
    "*_test.py",
    "*/test_*.py",
]

[tool.pdm.dev-dependencies]
dev = [
    "ruff>=0.5.5",
    "vulture>=2.11",
    "pytest>=8.1.1",
    "black>=24.3.0",
    "bandit>=1.7.8",
    "coverage>=7.4.4",
    "pytest-cov>=4.1.0",
    "isort>=5.13.2",
    "pyright>=1.1.355",
    "freezegun>=1.4.0",
    "mimesis>=15.1.0",
    "ipython>=8.22.2",
    "sqlalchemy-utils>=0.41.2",
    "psycopg2-binary>=2.9.9",
    "asyncpg>=0.29.0",
    "pytest-asyncio>=0.23.6",
    "httpx>=0.27.0",
    "pytest-mock>=3.14.0",
]

[project]
name = "sqlalchemy_filter_converter"
version = "1.4.0"
description = "SQLAlchemy filter converters."
authors = [
    { name = "Dmitriy Lunev", email = "dima.lunev14@gmail.com" },
]
requires-python = ">=3.11"
readme = "README.md"
dependencies = [
    "sqlalchemy>=2.0",
    "python-dev-utils>=7.0.1",
    "sqlalchemy-dev-utils>=1.2.0",
]

[project.license]
text = "MIT"

[project.optional-dependencies]
fastapi = [
    "fastapi",
]

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"
