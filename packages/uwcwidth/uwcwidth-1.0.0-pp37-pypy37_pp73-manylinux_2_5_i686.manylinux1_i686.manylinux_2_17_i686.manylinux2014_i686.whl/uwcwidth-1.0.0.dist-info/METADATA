Metadata-Version: 2.1
Name: uwcwidth
Version: 1.0.0
Summary: terminal width of Unicode 16.0+Emoji strings in nanoseconds
Author: !ZAJC!
License: MIT License
        
        Copyright ¬© 2024 !ZAJC!/GDS
        Portions Copyright ¬© 2005-2020 Rich Felker, et al.
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice (including the next paragraph) shall be included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        
Project-URL: Homepage, https://github.com/Z4JC/uwcwidth
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Localization
Classifier: Topic :: Software Development :: Internationalization
Classifier: Topic :: Terminals
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: test
Requires-Dist: pytest ; extra == 'test'

## uwcwidth
*terminal width of Unicode 16.0+Emoji strings in nanoseconds*

![PyPI - Python Version](https://img.shields.io/pypi/pyversions/uwcwidth)
[![PyPI - Version](https://img.shields.io/pypi/v/uwcwidth)](https://pypi.org/project/uwcwidth/)
[![PyPI - License](https://img.shields.io/pypi/l/uwcwidth)](https://github.com/Z4JC/uwcwidth/blob/main/LICENSE)
![PyPI - Downloads](https://img.shields.io/pypi/dm/uwcwidth)<br>
[![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/Z4JC/uwcwidth/build_deploy.yml)](https://github.com/Z4JC/uwcwidth/actions/workflows/build_deploy.yml)
[![GitHub branch check runs](https://img.shields.io/github/check-runs/Z4JC/uwcwidth/main)](https://github.com/Z4JC/uwcwidth/actions/workflows/test.yml)
![PyPI - Status](https://img.shields.io/pypi/status/uwcwidth)
![PyPI - Wheel](https://img.shields.io/pypi/wheel/uwcwidth)<br>

Use `uwcwidth` when you want to very quickly find out how many characters a Unicode string takes up in your terminal.

For example, `uwcwidth.wcswidth('Helloü•π')` returns `7` because  your terminal will use 5 places for "Hello" and then 2 places for the "ü•π" emoji.

`uwcwidth` is designed to run as fast as standard built-in Python string operations and use a tiny amount of memory.


## Installation

```sh
pip install uwcwidth
```

## Isn't this easy?

Let's take a look at "üë©‚Äçü¶Ø‚Äç‚û°Ô∏è":

While  `len('\U0001F469\u200d\U0001F9AF\u200d\u27a1\ufe0f')` returns `6` because this string has 6 unicode codepoints, we are looking at a single emoji "üë©‚Äçü¶Ø‚Äç‚û°Ô∏è". This emoji occupies 2 characters in your terminal. Here I am assuming your terminal knows how to deal with the special Zero-Width Joiner (U+200D) and the Variation Selector-16 Emoji (U+FE0F). Things get worse as there are special modifiers for skin tone, which can be either invisible or standalone characters, etc. Also, you have to deal with other languages and their scripts, etc.

## Correctness
`uwcwidth` should work fine on various scripts such as Cyrillic, Katakana,  and also Emojis in Unicode v16.0. This includes Emojis that use Variation Selector 15 and 16, Zero Width Joiner, Emoji Modifiers for skin type, etc. Overall, `uwcwidth` is probably more accurate than whatever is currently shipping with your OS and whatever your terminal is using in 2024.

Some edge cases that break other `wc(s)width` libraries and a lot of terminals:

```python3
from uwcwidth import wcswidth
# Should be 8 terminal chars: üèÉüèæ‚Äç‚ôÇÔ∏è=üèÉÔ∏èüèæ‚ôÇ
assert wcswidth('\U0001F3C3\U0001F3FE\u200d\u2642\ufe0f'
                '=\U0001F3C3\ufe0f\U0001F3FE\u2642') == 8
# Should be 5 terminal chars: ‚õπüèºüè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø!
assert wcswidth('\u26f9\U0001F3FC'
                '\U0001F3F4\U000E0067\U000E0062\U000E0073'
                '\U000E0063\U000E0074\U000E007F!') == 5
```

See the `tests` folder for more.

## Tiny footprint and code
`uwcwidth` reserves around 4 KB of memory for its lookup tables. Parts of the storage scheme are derived from an older `wcwidth` implementation in [musl libc](https://musl.libc.org/). Generally sparse or dense bitmaps are used to look things up.
The `uwcwidth.pyx` file is under 100 lines of code, with comments and whitespace.

## Performance: 40x faster than `wcwidth`
`uwcwidth` is about 40 times faster than the popular, well-documented and highly tested [wcwidth](https://github.com/jquast/wcwidth) library, while maintaining similar accuracy. It's also 5 times faster than `cwcwidth`, which does not work on new Emojis and breaks on some other edge cases.

```python3
In [1]: import wcwidth, cwcwidth, uwcwidth
In [2]: %%timeit
   ...: wcwidth.wcswidth("„Ç≥„É≥„Éã„ÉÅ„Éè, „Çª„Ç´„Ç§!")
1.73 Œºs ¬± 7.93 ns per loop (mean ¬± std. dev. of 7 runs, 1,000,000 loops each)

In [3]: %%timeit
   ...: cwcwidth.wcswidth("„Ç≥„É≥„Éã„ÉÅ„Éè, „Çª„Ç´„Ç§!")
211 ns ¬± 3.63 ns per loop (mean ¬± std. dev. of 7 runs, 1,000,000 loops each)

In [4]: %%timeit
   ...: uwcwidth.wcswidth("„Ç≥„É≥„Éã„ÉÅ„Éè, „Çª„Ç´„Ç§!")
41 ns ¬± 0.0363 ns per loop (mean ¬± std. dev. of 7 runs, 10,000,000 loops each)
```
