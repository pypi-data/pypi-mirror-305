{"version":3,"file":"ApajAsq5.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA;;;;;;AAOA;ACnFA;AAEA;;;;;;;;AAwBA;ACIA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;;;;AChGA;AACA;AACA;;AAGA;;;;;AASA;ACkFA;AAGA;;AAoCA;AACA;AAJA;;AAWA;;AAmBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;;AA3LA;AA+LA;AACA;;;;;AAKA;;;;AAUA;AACA;AACA;;AAEA;;AAdA;AAEA;AACA;;;;;;;AAkBA;;AAEA;;AA5NA;;;AAgKA;AA0GA;;AAEA;AAIA;AAKA;AACA;AACA;;AAEA;AAoBA;;AAIA;AATA;;;;;;;AAuDA","sources":["webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-list-item.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-clickable-list-item.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-button-menu.ts","webpack://lcn-frontend/./homeassistant-frontend/src/components/ha-help-tooltip.ts","webpack://lcn-frontend/./src/lcn-devices-page.ts"],"sourcesContent":["import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-list-item\")\nexport class HaListItem extends ListItemBase {\n  protected renderRipple() {\n    if (this.noninteractive) {\n      return \"\";\n    }\n    return super.renderRipple();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: var(\n            --mdc-list-side-padding-left,\n            var(--mdc-list-side-padding, 20px)\n          );\n          padding-inline-start: var(\n            --mdc-list-side-padding-left,\n            var(--mdc-list-side-padding, 20px)\n          );\n          padding-right: var(\n            --mdc-list-side-padding-right,\n            var(--mdc-list-side-padding, 20px)\n          );\n          padding-inline-end: var(\n            --mdc-list-side-padding-right,\n            var(--mdc-list-side-padding, 20px)\n          );\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        span.material-icons:first-of-type {\n          margin-inline-start: 0px !important;\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            16px\n          ) !important;\n          direction: var(--direction) !important;\n        }\n        span.material-icons:last-of-type {\n          margin-inline-start: auto !important;\n          margin-inline-end: 0px !important;\n          direction: var(--direction) !important;\n        }\n        .mdc-deprecated-list-item__meta {\n          display: var(--mdc-list-item-meta-display);\n          align-items: center;\n          flex-shrink: 0;\n        }\n        :host([graphic=\"icon\"]:not([twoline]))\n          .mdc-deprecated-list-item__graphic {\n          margin-inline-end: var(\n            --mdc-list-item-graphic-margin,\n            20px\n          ) !important;\n        }\n        :host([multiline-secondary]) {\n          height: auto;\n        }\n        :host([multiline-secondary]) .mdc-deprecated-list-item__text {\n          padding: 8px 0;\n        }\n        :host([multiline-secondary]) .mdc-deprecated-list-item__secondary-text {\n          text-overflow: initial;\n          white-space: normal;\n          overflow: auto;\n          display: inline-block;\n          margin-top: 10px;\n        }\n        :host([multiline-secondary]) .mdc-deprecated-list-item__primary-text {\n          margin-top: 10px;\n        }\n        :host([multiline-secondary])\n          .mdc-deprecated-list-item__secondary-text::before {\n          display: none;\n        }\n        :host([multiline-secondary])\n          .mdc-deprecated-list-item__primary-text::before {\n          display: none;\n        }\n        :host([disabled]) {\n          color: var(--disabled-text-color);\n        }\n        :host([noninteractive]) {\n          pointer-events: unset;\n        }\n      `,\n      // safari workaround - must be explicit\n      document.dir === \"rtl\"\n        ? css`\n            span.material-icons:first-of-type,\n            span.material-icons:last-of-type {\n              direction: rtl !important;\n              --direction: rtl;\n            }\n          `\n        : css``,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-list-item\": HaListItem;\n  }\n}\n","import { css, CSSResultGroup, html } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { HaListItem } from \"./ha-list-item\";\n\n@customElement(\"ha-clickable-list-item\")\nexport class HaClickableListItem extends HaListItem {\n  @property() public href?: string;\n\n  @property({ type: Boolean }) public disableHref = false;\n\n  @property({ type: Boolean, reflect: true }) public openNewTab = false;\n\n  @query(\"a\") private _anchor!: HTMLAnchorElement;\n\n  public render() {\n    const r = super.render();\n    const href = this.href || \"\";\n\n    return html`${this.disableHref\n      ? html`<a>${r}</a>`\n      : html`<a target=${this.openNewTab ? \"_blank\" : \"\"} href=${href}\n          >${r}</a\n        >`}`;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"keydown\", (ev) => {\n      if (ev.key === \"Enter\" || ev.key === \" \") {\n        this._anchor.click();\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        a {\n          width: 100%;\n          height: 100%;\n          display: flex;\n          align-items: center;\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-clickable-list-item\": HaClickableListItem;\n  }\n}\n","import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"BOTTOM_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @property({ type: Boolean, attribute: \"no-anchor\" }) public noAnchor = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (mainWindow.document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this.noAnchor ? null : this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { mdiHelpCircle } from \"@mdi/js\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-help-tooltip\")\nexport class HaHelpTooltip extends LitElement {\n  @property() public label!: string;\n\n  @property() public position = \"top\";\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-svg-icon .path=${mdiHelpCircle}></ha-svg-icon>\n      <simple-tooltip\n        offset=\"4\"\n        .position=${this.position}\n        .fitToVisibleBounds=${true}\n        >${this.label}</simple-tooltip\n      >\n    `;\n  }\n\n  static get styles() {\n    return css`\n      ha-svg-icon {\n        --mdc-icon-size: var(--ha-help-tooltip-size, 14px);\n        color: var(--ha-help-tooltip-color, var(--disabled-text-color));\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-help-tooltip\": HaHelpTooltip;\n  }\n}\n","import { consume } from \"@lit-labs/context\";\nimport { deviceConfigsContext } from \"components/context\";\nimport { haStyle } from \"@ha/resources/styles\";\nimport \"@material/mwc-button\";\nimport \"@ha/components/ha-clickable-list-item\";\nimport \"@ha/components/ha-fab\";\nimport \"@ha/components/ha-button-menu\";\nimport \"@ha/components/ha-list-item\";\nimport \"@ha/components/ha-md-menu-item\";\nimport \"@ha/components/ha-help-tooltip\";\nimport \"@ha/components/ha-icon-button\";\nimport \"@ha/layouts/hass-tabs-subpage-data-table\";\nimport type { HaTabsSubpageDataTable } from \"@ha/layouts/hass-tabs-subpage-data-table\";\nimport { storage } from \"@ha/common/decorators/storage\";\nimport { css, html, LitElement, PropertyValues, CSSResultGroup, nothing } from \"lit\";\nimport { customElement, property, state, queryAsync } from \"lit/decorators\";\nimport { mdiPlus, mdiDelete, mdiDotsVertical, mdiHexagon, mdiHexagonMultiple } from \"@mdi/js\";\nimport type { HomeAssistant, Route } from \"@ha/types\";\nimport { lcnMainTabs } from \"lcn-router\";\nimport { showAlertDialog, showConfirmationDialog } from \"@ha/dialogs/generic/show-dialog-box\";\nimport \"@ha/components/ha-svg-icon\";\nimport memoize from \"memoize-one\";\nimport { LCN, scanDevices, deleteDevice, addDevice, LcnDeviceConfig } from \"types/lcn\";\nimport { addressToString, stringToAddress } from \"helpers/address_conversion\";\nimport type {\n  DataTableColumnContainer,\n  SelectionChangedEvent,\n  SortingChangedEvent,\n} from \"@ha/components/data-table/ha-data-table\";\nimport { navigate } from \"@ha/common/navigate\";\nimport type { HASSDomEvent } from \"@ha/common/dom/fire_event\";\nimport { updateDeviceConfigs, updateEntityConfigs } from \"components/events\";\nimport { renderBrandLogo } from \"helpers/brand_logo\";\nimport { ProgressDialog } from \"./dialogs/progress-dialog\";\nimport {\n  loadLCNCreateDeviceDialog,\n  showLCNCreateDeviceDialog,\n} from \"./dialogs/show-dialog-create-device\";\nimport { loadProgressDialog, showProgressDialog } from \"./dialogs/show-dialog-progress\";\n\ninterface DeviceRowData extends LcnDeviceConfig {\n  unique_id: string;\n}\n\n@customElement(\"lcn-devices-page\")\nexport class LCNConfigDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lcn!: LCN;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @state()\n  @consume({ context: deviceConfigsContext, subscribe: true })\n  _deviceConfigs!: LcnDeviceConfig[];\n\n  @state() private _selected: string[] = [];\n\n  @storage({\n    storage: \"sessionStorage\",\n    key: \"lcn-devices-table-search\",\n    state: true,\n    subscribe: false,\n  })\n  private _filter: string = \"\";\n\n  @storage({\n    storage: \"sessionStorage\",\n    key: \"lcn-devices-table-sort\",\n    state: false,\n    subscribe: false,\n  })\n  private _activeSorting?: SortingChangedEvent;\n\n  @storage({\n    key: \"lcn-devices-table-column-order\",\n    state: false,\n    subscribe: false,\n  })\n  private _activeColumnOrder?: string[];\n\n  @storage({\n    key: \"lcn-devices-table-hidden-columns\",\n    state: false,\n    subscribe: false,\n  })\n  private _activeHiddenColumns?: string[];\n\n  @queryAsync(\"hass-tabs-subpage-data-table\")\n  private _dataTable!: Promise<HaTabsSubpageDataTable>;\n\n  private get _extDeviceConfigs(): DeviceRowData[] {\n    const extDeviceConfigs = memoize((deviceConfigs: LcnDeviceConfig[] = this._deviceConfigs) =>\n      deviceConfigs.map((deviceConfig) => ({\n        ...deviceConfig,\n        unique_id: addressToString(deviceConfig.address),\n      })),\n    );\n    return extDeviceConfigs();\n  }\n\n  private _columns = memoize(\n    (): DataTableColumnContainer<DeviceRowData> => ({\n      icon: {\n        title: \"\",\n        label: \"Icon\",\n        type: \"icon\",\n        showNarrow: true,\n        moveable: false,\n        template: (entry) =>\n          html` <ha-svg-icon\n            .path=${entry.address[2] ? mdiHexagonMultiple : mdiHexagon}\n          ></ha-svg-icon>`,\n      },\n      name: {\n        main: true,\n        title: this.lcn.localize(\"name\"),\n        sortable: true,\n        filterable: true,\n        direction: \"asc\",\n        flex: 2,\n      },\n      segment_id: {\n        title: this.lcn.localize(\"segment\"),\n        sortable: true,\n        filterable: true,\n        template: (entry) => entry.address[0].toString(),\n      },\n      address_id: {\n        title: this.lcn.localize(\"id\"),\n        sortable: true,\n        filterable: true,\n        template: (entry) => entry.address[1].toString(),\n      },\n      type: {\n        title: this.lcn.localize(\"type\"),\n        sortable: true,\n        filterable: true,\n        template: (entry) =>\n          entry.address[2] ? this.lcn.localize(\"group\") : this.lcn.localize(\"module\"),\n      },\n      delete: {\n        title: this.lcn.localize(\"delete\"),\n        showNarrow: true,\n        moveable: false,\n        type: \"icon-button\",\n        template: (entry) => {\n          const handler = (_ev) => this._deleteDevices([entry]);\n          return html`\n            <ha-icon-button\n              .label=${this.lcn.localize(\"dashboard-devices-table-delete\")}\n              .path=${mdiDelete}\n              @click=${handler}\n            ></ha-icon-button>\n          `;\n        },\n      },\n    }),\n  );\n\n  protected async firstUpdated(changedProperties: PropertyValues): Promise<void> {\n    super.firstUpdated(changedProperties);\n    loadProgressDialog();\n    loadLCNCreateDeviceDialog();\n  }\n\n  protected async updated(changedProperties: PropertyValues): Promise<void> {\n    super.updated(changedProperties);\n    this._dataTable.then(renderBrandLogo);\n  }\n\n  protected render() {\n    if (!(this.hass && this.lcn && this._deviceConfigs)) {\n      return nothing;\n    }\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config/integrations/integration/lcn\"\n        noDataText=${this.lcn.localize(\"dashboard-devices-no-data-text\")}\n        .route=${this.route}\n        .tabs=${lcnMainTabs}\n        .localizeFunc=${this.lcn.localize}\n        .columns=${this._columns()}\n        .data=${this._extDeviceConfigs}\n        selectable\n        .selected=${this._selected.length}\n        .initialSorting=${this._activeSorting}\n        .columnOrder=${this._activeColumnOrder}\n        .hiddenColumns=${this._activeHiddenColumns}\n        @columns-changed=${this._handleColumnsChanged}\n        @sorting-changed=${this._handleSortingChanged}\n        @selection-changed=${this._handleSelectionChanged}\n        clickable\n        .filter=${this._filter}\n        @search-changed=${this._handleSearchChange}\n        @row-click=${this._rowClicked}\n        id=\"unique_id\"\n        .hasfab\n        class=${this.narrow ? \"narrow\" : \"\"}\n      >\n        <ha-button-menu slot=\"toolbar-icon\">\n          <ha-icon-button .path=${mdiDotsVertical} .label=\"Actions\" slot=\"trigger\"></ha-icon-button>\n          <ha-list-item @click=${this._scanDevices}>\n            ${this.lcn.localize(\"dashboard-devices-scan\")}\n          </ha-list-item>\n        </ha-button-menu>\n\n        <div class=\"header-btns\" slot=\"selection-bar\">\n          ${!this.narrow\n            ? html`\n                <mwc-button @click=${this._deleteSelected} class=\"warning\">\n                  ${this.lcn.localize(\"delete-selected\")}\n                </mwc-button>\n              `\n            : html`\n                <ha-icon-button\n                  class=\"warning\"\n                  id=\"remove-btn\"\n                  @click=${this._deleteSelected}\n                  .path=${mdiDelete}\n                  .label=${this.lcn.localize(\"delete-selected\")}\n                ></ha-icon-button>\n                <ha-help-tooltip .label=${this.lcn.localize(\"delete-selected\")} )}>\n                </ha-help-tooltip>\n              `}\n        </div>\n\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.lcn.localize(\"dashboard-devices-add\")}\n          extended\n          @click=${this._addDevice}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private getDeviceConfigByUniqueId(unique_id: string): LcnDeviceConfig {\n    const address = stringToAddress(unique_id);\n    const deviceConfig = this._deviceConfigs.find(\n      (el) =>\n        el.address[0] === address[0] &&\n        el.address[1] === address[1] &&\n        el.address[2] === address[2],\n    );\n    return deviceConfig!;\n  }\n\n  private _rowClicked(ev: CustomEvent) {\n    const address_str: string = ev.detail.id;\n    navigate(`/lcn/entities?address=${address_str}`, { replace: true });\n  }\n\n  private async _scanDevices() {\n    const dialog: () => ProgressDialog | undefined = showProgressDialog(this, {\n      title: this.lcn.localize(\"dashboard-dialog-scan-devices-title\"),\n      text: this.lcn.localize(\"dashboard-dialog-scan-devices-text\"),\n    });\n\n    await scanDevices(this.hass!, this.lcn.config_entry);\n    updateDeviceConfigs(this);\n    await dialog()!.closeDialog();\n  }\n\n  private _addDevice() {\n    showLCNCreateDeviceDialog(this, {\n      lcn: this.lcn,\n      createDevice: (deviceParams) => this._createDevice(deviceParams),\n    });\n  }\n\n  private async _createDevice(deviceParams: Partial<LcnDeviceConfig>) {\n    const dialog: () => ProgressDialog | undefined = showProgressDialog(this, {\n      title: this.lcn.localize(\"dashboard-devices-dialog-request-info-title\"),\n      text: html`\n        ${this.lcn.localize(\"dashboard-devices-dialog-request-info-text\")}\n        <br />\n        ${this.lcn.localize(\"dashboard-devices-dialog-request-info-hint\")}\n      `,\n    });\n\n    if (!(await addDevice(this.hass, this.lcn.config_entry, deviceParams))) {\n      dialog()!.closeDialog();\n      await showAlertDialog(this, {\n        title: this.lcn.localize(\"dashboard-devices-dialog-add-alert-title\"),\n        text: html`${this.lcn.localize(\"dashboard-devices-dialog-add-alert-text\")}\n          (${deviceParams.address![2] ? this.lcn.localize(\"group\") : this.lcn.localize(\"module\")}:\n          ${this.lcn.localize(\"segment\")} ${deviceParams.address![0]}, ${this.lcn.localize(\"id\")}\n          ${deviceParams.address![1]})\n          <br />\n          ${this.lcn.localize(\"dashboard-devices-dialog-add-alert-hint\")}`,\n      });\n      return;\n    }\n    updateDeviceConfigs(this);\n    dialog()!.closeDialog();\n  }\n\n  private async _deleteSelected() {\n    const devices = this._selected.map((unique_id) => this.getDeviceConfigByUniqueId(unique_id));\n    await this._deleteDevices(devices);\n    await this._clearSelection();\n  }\n\n  private async _deleteDevices(devices: LcnDeviceConfig[]) {\n    if (\n      devices.length > 0 &&\n      !(await showConfirmationDialog(this, {\n        title: this.lcn.localize(\"dashboard-devices-dialog-delete-devices-title\"),\n        text: html`\n          ${this.lcn.localize(\"dashboard-devices-dialog-delete-text\", {\n            count: devices.length,\n          })}\n          <br />\n          ${this.lcn.localize(\"dashboard-devices-dialog-delete-warning\")}\n        `,\n      }))\n    )\n      return;\n\n    for await (const device of devices) {\n      await deleteDevice(this.hass, this.lcn.config_entry, device);\n    }\n    updateDeviceConfigs(this);\n    updateEntityConfigs(this);\n  }\n\n  private async _clearSelection() {\n    (await this._dataTable).clearSelection();\n  }\n\n  private _handleSortingChanged(ev: CustomEvent) {\n    this._activeSorting = ev.detail;\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this._filter = ev.detail.value;\n  }\n\n  private _handleColumnsChanged(ev: CustomEvent) {\n    this._activeColumnOrder = ev.detail.columnOrder;\n    this._activeHiddenColumns = ev.detail.hiddenColumns;\n  }\n\n  private _handleSelectionChanged(ev: HASSDomEvent<SelectionChangedEvent>): void {\n    this._selected = ev.detail.value;\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyle,\n      css`\n        hass-tabs-subpage-data-table {\n          --data-table-row-height: 60px;\n        }\n        hass-tabs-subpage-data-table.narrow {\n          --data-table-row-height: 72px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"lcn-config-dashboard\": LCNConfigDashboard;\n  }\n}\n"],"names":[],"sourceRoot":""}