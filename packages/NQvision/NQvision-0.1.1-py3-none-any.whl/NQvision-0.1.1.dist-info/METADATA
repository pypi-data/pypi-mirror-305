Metadata-Version: 2.1
Name: NQvision
Version: 0.1.1
Summary: A library to simplify the development of AI-driven object detection and monitoring solutions.
Home-page: https://neuronq.io
Author: Neuron Q
Author-email: debbichi.raki@neuronq.io
License: MIT
Keywords: computer vision,object detection,tracking,CUDA,enterprise
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENCE
Requires-Dist: numpy
Requires-Dist: opencv-python
Requires-Dist: Pillow
Requires-Dist: deep-sort-realtime
Requires-Dist: torch
Requires-Dist: torchvision
Requires-Dist: vidgear
Requires-Dist: numba

# NQvision

NQvision is a powerful library built around Ultralytics models in ONNX format, designed to simplify the development of AI-driven object detection and tracking solutions. It transforms complex computer vision capabilities into an accessible, production-ready solution that revolutionizes how organizations approach real-time monitoring and security.

## üöÄ Features

### Core Capabilities

- **ONNX Model Integration**: Seamless integration with Ultralytics models
- **Real-Time Object Detection**: Optimized for immediate recognition and action
- **Continuous Object Tracking**: Advanced tracking maintaining object identities across frames
- **High-Performance Processing**: Efficient operation on both CPU and GPU
- **Customizable Detection Settings**: Adjustable confidence thresholds and tracking configurations
- **Scalable Architecture**: Handles multiple video feeds simultaneously

### Event Management

- **Real-Time Event Alerts**: Instant notification system for critical detections
- **Event Aggregation**: Intelligent clustering of detections to reduce false positives
- **Customizable Criteria**: Configurable detection thresholds and frequency parameters
- **High-Confidence Alerts**: Aggregated detection within defined time windows
- **Scalable Event Management**: Suitable for both small setups and enterprise deployments

## üí´ Key Benefits

### Unmatched Flexibility

- Universal Ultralytics Compatibility
- Expanding Architecture Support
- Adaptable Integration with existing security infrastructure

### Enterprise-Grade Performance

- Scalable from single-camera setups to city-wide deployments
- Resource-optimized processing
- Built for 24/7 mission-critical environments

### Revolutionary Features

- Intelligent Tracking across camera views
- Event Streaming with customizable detection criteria
- Automated Response System
- Multi-Camera Coordination
- Seamless handling of multiple video streams

## üéØ Impact

### For Developers

- Eliminates the need to develop intricate AI pipelines from scratch
- Provides a ready-to-use framework for advanced surveillance
- Customizable settings and real-time capabilities
- Implement AI detection without deep AI expertise

### For Companies

- Accelerate deployment of AI-driven surveillance systems
- Minimize development costs
- Improve system reliability
- Handle complex, large-scale environments
- Event-driven architecture for prompt action on high-risk detections

## ‚ö° Quick Start

### Dependencies

To install NQvision Dependencies, follow these steps:

- Install NQvision requirements found in ‚Äòrequirements.txt‚Äô:

```bash
pip install -r requirements.txt
```

- install onnxruntime :
  - For cpu only inference :
  ```bash
  pip install onnxruntime
  ```
  - For gpu accelerated inference
  ```bash
  pip install onnxruntime-gpu --extra-index-url https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/onnxruntime-cuda-12/pypi/simple/

  For CUDA 11.X (default):
  pip install onnxruntime-gpu
  ```

## Verifying the Installation

To verify that NQvision is installed correctly, run the following Python code:

```python
from NQvision.core import NQvisionCore, ModelConfig

# Create a basic configuration
config = ModelConfig(input_size=(640, 640), confidence_threshold=0.4)

# Initialize NQvisionCore (replace with your model path)
detector = NQvisionCore("path/to/model/model.onnx", config)

print("NQvision initialized successfully!")
```

If you see the success message without any errors, NQvision is installed and ready to use.

## üîÑ Current Support

- Currently supporting models such as rtlder
- Designed for future expansion
- Regular updates and expanding capabilities

## üõ† Integration

### Deployment Features

- Rapid deployment: Operational in minutes
- Immediate enhancement of surveillance capabilities
- Minimal training requirements
- Intuitive system for security teams

### System Requirements

- Compatible with existing cameras and systems
- Supports both CPU and GPU processing
- Scalable for various deployment sizes

## üîÆ Future Development

NQvision is designed for continuous evolution, with plans to:

- Adopt additional models and architectures
- Expand ecosystem support
- Regular feature updates
- Enhanced capabilities based on community feedback

## üìù License

[License details to be added]

## ü§ù Contributing

[Contribution guidelines to be added]

## üìû Support

[\[Support\]](https://www.linkedin.com/company/neuron-q/)

---

Developed by Neuron Q | Making advanced surveillance technology accessible
