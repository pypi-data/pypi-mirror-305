[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
package-mode = true
name = "aranea"
version = "0.0.1"
description = "Aranea is an automated architecture analysis tool for parsing a car architecture from a PDF file."
license = "MIT"
authors = [
    "Thorben Carl <thorben.carl@uni-ulm.de>",
    "Jonathan Heitzmann <jonathan.heitzmann@uni-ulm.de>",
    "Johannes Kortmann <johannes.kortmann@uni-ulm.de>",
    "David Sievers <david.sievers@uni-ulm.de>",
    "Johannes Sonn <johannes.sonn@uni-ulm.de>",
]
maintainers = []
readme = "README.md"
homepage = "https://www.uni-ulm.de/in/fakultaet/studium/inf-mi/studienplanung-se/apse/#c914734"
repository = "https://gitlab.uni-ulm.de/se/mbti/automated-architecture-analysis"
documentation = "https://gitlab.uni-ulm.de/api/v4/projects/6351/jobs/artifacts/main/raw/latex/aranea.pdf?job=build-docs" # needs to be updated to webserver
keywords = [
    "aaa",
    "AAA",
    "UUlm",
    "SE",
    "MBTI",
    "Aranea",
    "Architecture",
    "Analysis",
    "Tool",
    "PDF",
    "Parsing",
    "Car",
    "Automated",
]
classifiers = [
    "Development Status :: 1 - Planning",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Natural Language :: English",
    "Natural Language :: German",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Security",
]
packages = [{ include = "aranea", from = "src" }]
include = []
exclude = [".gitlab/", "docs/", "tests/", ".gitlab-ci.yml"]

# see also: https://python-poetry.org/docs/dependency-specification/
[tool.poetry.dependencies]
python = "^3.13.0"
dataclasses = "^0.6"
numpy = "^2.1.2"
PyMuPDF = "^1.24.11"
shapely = "^2.0.6"

[tool.poetry.group.tests]
optional = true
[tool.poetry.group.tests.dependencies]
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
pytest-timeout = "^2.3.1"
pylint = "^3.3.1"
pylint-gitlab = "^2.0.1"            # for pylint gitlab report
mypy = "^1.13.0"
mypy-gitlab-code-quality = "^1.1.0" # for mypy gitlab report
lxml = "^5.3.0"                     # for mypy html report
bandit = "^1.7.10"

[tool.poetry.group.gui]
optional = true
[tool.poetry.group.gui.dependencies]
PyQt6 = "^6.7.1"

[tool.poetry.group.cli]
optional = true
[tool.poetry.group.cli.dependencies]
click = "^8.1.7"

[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
Sphinx = "^8.1.3"
sphinx-rtd-theme = "^3.0.1"

[tool.poetry.urls]
"Issues" = "https://gitlab.uni-ulm.de/se/mbti/automated-architecture-analysis/-/issues"
#"Changelog" = ""


# old build-system
# [build-system]
# requires = ["hatchling"]
# build-backend = "hatchling.build"

# [tool.hatch.build.targets.sdist]
# exclude = [".*", ".gitlab/", "tests/"]

#[project]
#name = "aranea"
#version = "0.0.1"
#license = { file = "LICENSE" }
#authors = [
#    { name = "Thorben Carl", email = "thorben.carl@uni-ulm.de" },
#    { name = "Jonathan Heitzmann", email = "jonathan.heitzmann@uni-ulm.de" },
#    { name = "Johannes Kortmann", email = "johannes.kortmann@uni-ulm.de" },
#    { name = "David Sievers", email = "david.sievers@uni-ulm.de" },
#    { name = "Johannes Sonn", email = "johannes.sonn@uni-ulm.de" },
#]
#description = "Aranea is an automated architecture analysis tool for parsing a car architecture from a PDF file."
#readme = "README.md"
#classifiers = [
#    "Development Status :: 1 - Planning",
#    "Programming Language :: Python :: 3",
#    "License :: OSI Approved :: MIT License",
#    "Operating System :: OS Independent",
#    "Programming Language :: Python :: 3 :: Only",
#    "Natural Language :: English",
#    "Natural Language :: German",
#    "Topic :: Scientific/Engineering :: Visualization",
#    "Topic :: Security",
#]
#keywords = [
#    "aaa",
#    "AAA",
#    "UUlm",
#    "SE",
#    "MBTI",
#    "Aranea",
#    "Architecture",
#    "Analysis",
#    "Tool",
#    "PDF",
#    "Parsing",
#    "Car",
#    "Automated",
#]
#requires-python = ">=3.13"
#dependencies = [
#    "dataclasses==0.6",
#    "numpy==2.1.2",
#    "PyMuPDF==1.24.11",
#    "shapely==2.0.6",
#]
#
#[project.optional-dependencies]
#tests = [
#    "pytest==8.3.3",
#    "pytest-cov==5.0.0",
#    "pytest-timeout==2.3.1",
#    "pylint==3.3.1",
#    "pylint-gitlab==2.0.1",            # for pylint gitlab report
#    "mypy==1.13.0",
#    "mypy-gitlab-code-quality==1.1.0", # for mypy gitlab report
#    "lxml==5.3.0",                     # for mypy html report
#    "bandit==1.7.10",
#]
#gui = ["PyQt6==6.7.1"]
#cli = ["click==8.1.7"]
#docs = ["Sphinx==8.1.3", "sphinx-rtd-theme==3.0.1"]
#
#[project.urls]
#Homepage = "https://www.uni-ulm.de/in/fakultaet/studium/inf-mi/studienplanung-se/apse/#c914734"
#Repository = "https://gitlab.uni-ulm.de/se/mbti/automated-architecture-analysis"
#Issues = "https://gitlab.uni-ulm.de/se/mbti/automated-architecture-analysis/-/issues"
# Documentation = ""
# Changelog = ""


[tool.pytest.ini_options]
testpaths = "tests"
pythonpath = "src"

junit_suite_name = "aranea-test-suite"

log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s %(levelname)s %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

log_file = "tests/pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s %(levelname)s [%(name)s] %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

addopts = "--junitxml=./tests/pytest_report.xml --cov=aranea --cov-report=html:./tests/coverage --cov-report=xml:./tests/coverage.xml --cov-report=term-missing --cov-branch --cov-fail-under=80 --showlocals"


[tool.pylint.main]
fail-under = 9.0
ignore = ["CVS"]
ignore-patterns = ["^\\.#"]
jobs = 1
limit-inference-results = 100
persistent = true
py-version = "3.13"
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
no-docstring-rgx = "^_"
property-classes = ["abc.abstractproperty"]
variable-naming-style = "snake_case"

[tool.pylint.classes]
defining-attr-methods = [
    "__init__",
    "__new__",
    "setUp",
    "asyncSetUp",
    "__post_init__",
]
exclude-protected = [
    "_asdict",
    "_fields",
    "_replace",
    "_source",
    "_make",
    "os._exit",
]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-positional-arguments = 5
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 100
max-module-lines = 1000

[tool.pylint.imports]
known-third-party = ["enchant"]

[tool.pylint.logging]
logging-format-style = "old"
logging-modules = ["logging"]

[tool.pylint."messages control"]
confidence = [
    "HIGH",
    "CONTROL_FLOW",
    "INFERENCE",
    "INFERENCE_FAILURE",
    "UNDEFINED",
]
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "use-implicit-booleaness-not-comparison-to-string",
    "use-implicit-booleaness-not-comparison-to-zero",
]

[tool.pylint.method_args]
timeout-methods = [
    "requests.api.delete",
    "requests.api.get",
    "requests.api.head",
    "requests.api.options",
    "requests.api.patch",
    "requests.api.post",
    "requests.api.put",
    "requests.api.request",
]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]
suggest-join-with-non-empty-separator = true

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 4

[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = [
    "no-member",
    "not-async-context-manager",
    "not-context-manager",
    "attribute-defined-outside-init",
]
ignored-classes = [
    "optparse.Values",
    "thread._local",
    "_thread._local",
    "argparse.Namespace",
]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = [
    "six.moves",
    "past.builtins",
    "future.builtins",
    "builtins",
    "io",
]


[tool.mypy]
strict = true
packages = ["src"]
ignore_missing_imports = true


[tool.bandit]
