# coding: utf-8

"""
    Gate API v4

    Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.  # noqa: E501

    Contact: support@mail.gate.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gate_api.configuration import Configuration


class StructuredGetProjectListRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {'type': 'str', 'status': 'str', 'page': 'int', 'limit': 'int'}

    attribute_map = {'type': 'type', 'status': 'status', 'page': 'page', 'limit': 'limit'}

    def __init__(self, type=None, status=None, page=None, limit=None, local_vars_configuration=None):  # noqa: E501
        # type: (str, str, int, int, Configuration) -> None
        """StructuredGetProjectListRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._status = None
        self._page = None
        self._limit = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if page is not None:
            self.page = page
        if limit is not None:
            self.limit = limit

    @property
    def type(self):
        """Gets the type of this StructuredGetProjectListRequest.  # noqa: E501

         Product Type, default to empty for querying all.  `SharkFin2.0`-Shark Fin 2.0  `BullishSharkFin`-Bullish Shark Fin  `BearishSharkFin`-Bearish Shark Fin  `DoubleNoTouch`-Double No-Touch  `RangeAccrual`-RangeAccrual  `SnowBall`-Snow Ball   # noqa: E501

        :return: The type of this StructuredGetProjectListRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StructuredGetProjectListRequest.

         Product Type, default to empty for querying all.  `SharkFin2.0`-Shark Fin 2.0  `BullishSharkFin`-Bullish Shark Fin  `BearishSharkFin`-Bearish Shark Fin  `DoubleNoTouch`-Double No-Touch  `RangeAccrual`-RangeAccrual  `SnowBall`-Snow Ball   # noqa: E501

        :param type: The type of this StructuredGetProjectListRequest.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this StructuredGetProjectListRequest.  # noqa: E501

         Status: default to empty for querying all.   `in_process`-in progress  `will_begin`-will begin  `wait_settlement`-waiting for settlement  `done`-done  # noqa: E501

        :return: The status of this StructuredGetProjectListRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StructuredGetProjectListRequest.

         Status: default to empty for querying all.   `in_process`-in progress  `will_begin`-will begin  `wait_settlement`-waiting for settlement  `done`-done  # noqa: E501

        :param status: The status of this StructuredGetProjectListRequest.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def page(self):
        """Gets the page of this StructuredGetProjectListRequest.  # noqa: E501

        Page number  # noqa: E501

        :return: The page of this StructuredGetProjectListRequest.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this StructuredGetProjectListRequest.

        Page number  # noqa: E501

        :param page: The page of this StructuredGetProjectListRequest.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def limit(self):
        """Gets the limit of this StructuredGetProjectListRequest.  # noqa: E501

        Number of items returned in the list. Default is 100.  # noqa: E501

        :return: The limit of this StructuredGetProjectListRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this StructuredGetProjectListRequest.

        Number of items returned in the list. Default is 100.  # noqa: E501

        :param limit: The limit of this StructuredGetProjectListRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StructuredGetProjectListRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StructuredGetProjectListRequest):
            return True

        return self.to_dict() != other.to_dict()
