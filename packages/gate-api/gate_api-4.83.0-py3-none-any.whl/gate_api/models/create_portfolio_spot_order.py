# coding: utf-8

"""
    Gate API v4

    Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.  # noqa: E501

    Contact: support@mail.gate.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gate_api.configuration import Configuration


class CreatePortfolioSpotOrder(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'text': 'str',
        'amend_text': 'str',
        'currency_pair': 'str',
        'type': 'str',
        'side': 'str',
        'amount': 'str',
        'price': 'str',
        'time_in_force': 'str',
        'iceberg': 'str',
        'auto_borrow': 'bool',
        'auto_repay': 'bool',
        'stp_act': 'str',
    }

    attribute_map = {
        'text': 'text',
        'amend_text': 'amend_text',
        'currency_pair': 'currency_pair',
        'type': 'type',
        'side': 'side',
        'amount': 'amount',
        'price': 'price',
        'time_in_force': 'time_in_force',
        'iceberg': 'iceberg',
        'auto_borrow': 'auto_borrow',
        'auto_repay': 'auto_repay',
        'stp_act': 'stp_act',
    }

    def __init__(
        self,
        text=None,
        amend_text=None,
        currency_pair=None,
        type='limit',
        side=None,
        amount=None,
        price=None,
        time_in_force='gtc',
        iceberg=None,
        auto_borrow=None,
        auto_repay=None,
        stp_act=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        # type: (str, str, str, str, str, str, str, str, str, bool, bool, str, Configuration) -> None
        """CreatePortfolioSpotOrder - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._text = None
        self._amend_text = None
        self._currency_pair = None
        self._type = None
        self._side = None
        self._amount = None
        self._price = None
        self._time_in_force = None
        self._iceberg = None
        self._auto_borrow = None
        self._auto_repay = None
        self._stp_act = None
        self.discriminator = None

        if text is not None:
            self.text = text
        if amend_text is not None:
            self.amend_text = amend_text
        self.currency_pair = currency_pair
        if type is not None:
            self.type = type
        self.side = side
        self.amount = amount
        if price is not None:
            self.price = price
        if time_in_force is not None:
            self.time_in_force = time_in_force
        if iceberg is not None:
            self.iceberg = iceberg
        if auto_borrow is not None:
            self.auto_borrow = auto_borrow
        if auto_repay is not None:
            self.auto_repay = auto_repay
        if stp_act is not None:
            self.stp_act = stp_act

    @property
    def text(self):
        """Gets the text of this CreatePortfolioSpotOrder.  # noqa: E501

        User defined information. If not empty, must follow the rules below:  1. prefixed with `t-` 2. no longer than 28 bytes without `t-` prefix 3. can only include 0-9, A-Z, a-z, underscore(_), hyphen(-) or dot(.)  Besides user defined information, reserved contents are listed below, denoting how the order is created:  - 101: from android - 102: from IOS - 103: from IPAD - 104: from webapp - 3: from web - 2: from apiv2 - apiv4: from apiv4   # noqa: E501

        :return: The text of this CreatePortfolioSpotOrder.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CreatePortfolioSpotOrder.

        User defined information. If not empty, must follow the rules below:  1. prefixed with `t-` 2. no longer than 28 bytes without `t-` prefix 3. can only include 0-9, A-Z, a-z, underscore(_), hyphen(-) or dot(.)  Besides user defined information, reserved contents are listed below, denoting how the order is created:  - 101: from android - 102: from IOS - 103: from IPAD - 104: from webapp - 3: from web - 2: from apiv2 - apiv4: from apiv4   # noqa: E501

        :param text: The text of this CreatePortfolioSpotOrder.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def amend_text(self):
        """Gets the amend_text of this CreatePortfolioSpotOrder.  # noqa: E501

        The custom data that the user remarked when amending the order  # noqa: E501

        :return: The amend_text of this CreatePortfolioSpotOrder.  # noqa: E501
        :rtype: str
        """
        return self._amend_text

    @amend_text.setter
    def amend_text(self, amend_text):
        """Sets the amend_text of this CreatePortfolioSpotOrder.

        The custom data that the user remarked when amending the order  # noqa: E501

        :param amend_text: The amend_text of this CreatePortfolioSpotOrder.  # noqa: E501
        :type: str
        """

        self._amend_text = amend_text

    @property
    def currency_pair(self):
        """Gets the currency_pair of this CreatePortfolioSpotOrder.  # noqa: E501

        Currency pair  # noqa: E501

        :return: The currency_pair of this CreatePortfolioSpotOrder.  # noqa: E501
        :rtype: str
        """
        return self._currency_pair

    @currency_pair.setter
    def currency_pair(self, currency_pair):
        """Sets the currency_pair of this CreatePortfolioSpotOrder.

        Currency pair  # noqa: E501

        :param currency_pair: The currency_pair of this CreatePortfolioSpotOrder.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and currency_pair is None:  # noqa: E501
            raise ValueError("Invalid value for `currency_pair`, must not be `None`")  # noqa: E501

        self._currency_pair = currency_pair

    @property
    def type(self):
        """Gets the type of this CreatePortfolioSpotOrder.  # noqa: E501

        Order Type    - limit : Limit Order - market : Market Order  # noqa: E501

        :return: The type of this CreatePortfolioSpotOrder.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreatePortfolioSpotOrder.

        Order Type    - limit : Limit Order - market : Market Order  # noqa: E501

        :param type: The type of this CreatePortfolioSpotOrder.  # noqa: E501
        :type: str
        """
        allowed_values = ["limit", "market"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}".format(type, allowed_values)  # noqa: E501
            )

        self._type = type

    @property
    def side(self):
        """Gets the side of this CreatePortfolioSpotOrder.  # noqa: E501

        Order side  # noqa: E501

        :return: The side of this CreatePortfolioSpotOrder.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this CreatePortfolioSpotOrder.

        Order side  # noqa: E501

        :param side: The side of this CreatePortfolioSpotOrder.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and side is None:  # noqa: E501
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501
        allowed_values = ["buy", "sell"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and side not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}".format(side, allowed_values)  # noqa: E501
            )

        self._side = side

    @property
    def amount(self):
        """Gets the amount of this CreatePortfolioSpotOrder.  # noqa: E501

        When `type` is limit, it refers to base currency.  For instance, `BTC_USDT` means `BTC`  When `type` is `market`, it refers to different currency according to `side`  - `side` : `buy` means quote currency, `BTC_USDT` means `USDT` - `side` : `sell` means base currency，`BTC_USDT` means `BTC`   # noqa: E501

        :return: The amount of this CreatePortfolioSpotOrder.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreatePortfolioSpotOrder.

        When `type` is limit, it refers to base currency.  For instance, `BTC_USDT` means `BTC`  When `type` is `market`, it refers to different currency according to `side`  - `side` : `buy` means quote currency, `BTC_USDT` means `USDT` - `side` : `sell` means base currency，`BTC_USDT` means `BTC`   # noqa: E501

        :param amount: The amount of this CreatePortfolioSpotOrder.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def price(self):
        """Gets the price of this CreatePortfolioSpotOrder.  # noqa: E501

        Price can't be empty when `type`= `limit`  # noqa: E501

        :return: The price of this CreatePortfolioSpotOrder.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CreatePortfolioSpotOrder.

        Price can't be empty when `type`= `limit`  # noqa: E501

        :param price: The price of this CreatePortfolioSpotOrder.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def time_in_force(self):
        """Gets the time_in_force of this CreatePortfolioSpotOrder.  # noqa: E501

        Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order that always enjoys a maker fee - fok: FillOrKill, fill either completely or none Only `ioc` and `fok` are supported when `type`=`market`  # noqa: E501

        :return: The time_in_force of this CreatePortfolioSpotOrder.  # noqa: E501
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this CreatePortfolioSpotOrder.

        Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order that always enjoys a maker fee - fok: FillOrKill, fill either completely or none Only `ioc` and `fok` are supported when `type`=`market`  # noqa: E501

        :param time_in_force: The time_in_force of this CreatePortfolioSpotOrder.  # noqa: E501
        :type: str
        """
        allowed_values = ["gtc", "ioc", "poc", "fok"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and time_in_force not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `time_in_force` ({0}), must be one of {1}".format(  # noqa: E501
                    time_in_force, allowed_values
                )
            )

        self._time_in_force = time_in_force

    @property
    def iceberg(self):
        """Gets the iceberg of this CreatePortfolioSpotOrder.  # noqa: E501

        Amount to display for the iceberg order. Null or 0 for normal orders.  Hiding all amount is not supported.  # noqa: E501

        :return: The iceberg of this CreatePortfolioSpotOrder.  # noqa: E501
        :rtype: str
        """
        return self._iceberg

    @iceberg.setter
    def iceberg(self, iceberg):
        """Sets the iceberg of this CreatePortfolioSpotOrder.

        Amount to display for the iceberg order. Null or 0 for normal orders.  Hiding all amount is not supported.  # noqa: E501

        :param iceberg: The iceberg of this CreatePortfolioSpotOrder.  # noqa: E501
        :type: str
        """

        self._iceberg = iceberg

    @property
    def auto_borrow(self):
        """Gets the auto_borrow of this CreatePortfolioSpotOrder.  # noqa: E501

        When engaging in margin trading, if the account balance is insufficient, the system will automatically borrow the remaining amount to cover the deficit.  # noqa: E501

        :return: The auto_borrow of this CreatePortfolioSpotOrder.  # noqa: E501
        :rtype: bool
        """
        return self._auto_borrow

    @auto_borrow.setter
    def auto_borrow(self, auto_borrow):
        """Sets the auto_borrow of this CreatePortfolioSpotOrder.

        When engaging in margin trading, if the account balance is insufficient, the system will automatically borrow the remaining amount to cover the deficit.  # noqa: E501

        :param auto_borrow: The auto_borrow of this CreatePortfolioSpotOrder.  # noqa: E501
        :type: bool
        """

        self._auto_borrow = auto_borrow

    @property
    def auto_repay(self):
        """Gets the auto_repay of this CreatePortfolioSpotOrder.  # noqa: E501

        Enable or disable automatic repayment for automatic borrow loan. Default is disabled. Note that:  `auto_borrow` and `auto_repay` cannot be both set to true in one order.  # noqa: E501

        :return: The auto_repay of this CreatePortfolioSpotOrder.  # noqa: E501
        :rtype: bool
        """
        return self._auto_repay

    @auto_repay.setter
    def auto_repay(self, auto_repay):
        """Sets the auto_repay of this CreatePortfolioSpotOrder.

        Enable or disable automatic repayment for automatic borrow loan. Default is disabled. Note that:  `auto_borrow` and `auto_repay` cannot be both set to true in one order.  # noqa: E501

        :param auto_repay: The auto_repay of this CreatePortfolioSpotOrder.  # noqa: E501
        :type: bool
        """

        self._auto_repay = auto_repay

    @property
    def stp_act(self):
        """Gets the stp_act of this CreatePortfolioSpotOrder.  # noqa: E501

        Self-Trading Prevention Action. Users can use this field to set self-trade prevetion strategies  1. After users join the `STP Group`, he can pass `stp_act` to limit the user's self-trade prevetion strategy. If `stp_act` is not passed, the default is `cn` strategy。 2. When the user does not join the `STP group`, an error will be returned when passing the `stp_act` parameter。 3. If the user did not use 'stp_act' when placing the order, 'stp_act' will return '-'  - cn: Cancel newest, Cancel new orders and keep old ones - co: Cancel oldest, Cancel old orders and keep new ones - cb: Cancel both, Both old and new orders will be cancelled  # noqa: E501

        :return: The stp_act of this CreatePortfolioSpotOrder.  # noqa: E501
        :rtype: str
        """
        return self._stp_act

    @stp_act.setter
    def stp_act(self, stp_act):
        """Sets the stp_act of this CreatePortfolioSpotOrder.

        Self-Trading Prevention Action. Users can use this field to set self-trade prevetion strategies  1. After users join the `STP Group`, he can pass `stp_act` to limit the user's self-trade prevetion strategy. If `stp_act` is not passed, the default is `cn` strategy。 2. When the user does not join the `STP group`, an error will be returned when passing the `stp_act` parameter。 3. If the user did not use 'stp_act' when placing the order, 'stp_act' will return '-'  - cn: Cancel newest, Cancel new orders and keep old ones - co: Cancel oldest, Cancel old orders and keep new ones - cb: Cancel both, Both old and new orders will be cancelled  # noqa: E501

        :param stp_act: The stp_act of this CreatePortfolioSpotOrder.  # noqa: E501
        :type: str
        """
        allowed_values = ["cn", "co", "cb", "-"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and stp_act not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `stp_act` ({0}), must be one of {1}".format(stp_act, allowed_values)  # noqa: E501
            )

        self._stp_act = stp_act

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePortfolioSpotOrder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreatePortfolioSpotOrder):
            return True

        return self.to_dict() != other.to_dict()
