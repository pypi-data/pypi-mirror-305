from .rrstr import *
#######################################################################################################################
# Формулы полной вероятности и Байеса
#######################################################################################################################
def FPB_1(N,n,m):
    """Имеется `N` монет, из которых `n` бракованные: <br>
    вследствие заводского брака на этих монетах с обеих сторон отчеканен герб.<br>
    Наугад выбранную монету, не разглядывая, бросают несколько раз.<br>
    - Какова вероятность, что при `m` бросках она ляжет гербом вверх?
    - При `m` бросках монета легла гербом вверх. Какова вероятность того, что была выбрана монета c двумя гербами?

    Args:
        N (numerical): Монет всего
        n (numerical): Бракованных монет
        m (numerical): При стольких бросках ляжет гербом вверх
        
    ## Prints
       `answer` каждое значение по очереди.<br>C запятой вместо точки и сокращением до 3 знаков после запятой
        
    Returns:
        `answer` (tuple): Соответствующие вероятности
    """
    ''''''
    
    
    import itertools
    
    coins = [('O', 'P')]*(N-n) + [('O', 'O')]*n
    count_1 = 0
    count_2 = 0
    N = 0
    for coin in coins:
        for throws in list(itertools.product(coin, repeat=4)):
            throw = ''.join(throws)
            N += 1
            if 'O'*m in throw:
                count_1 += 1
                if coin == ('O', 'O'):
                    count_2 += 1
                    
    answer = count_1/N,count_2/count_1
    
    task = ['Вероятность "всегда гербом вверх"   = ', 'Вероятность "монета с 2-мя гербами" = ']
    for i in range(len(answer)):
        print(task[i]+rrstr(answer[i],3))
    
    return answer
#######################################################################################################################
def FPB_2(first,first1,first2,second,second1,second2,second3):
    """В первой корзине имеется `first` шаров, при этом количество белых шаров равно либо `first1`, либо `first2`.<br>
    Оба варианта равновероятны.<br>
    Во второй корзине имеется `second` шаров, а количество белых шаров равно `second1`, `second2` или `second3`.<br>
    Эти три варианта также равновероятны. <br>
    Из обеих корзин все шары перекладываются в третью корзину. <br>
    - Какова вероятность P(A), что случайно вынутый из третьей корзины шар окажется белым (событие A)?
    - Найдите условную вероятность P(H|A), того, что случайно вынутый из третьей корзины шар 
    первоначально находился в первой корзине (событие H), при условии, что он белый (событие A)?<br/>

    Args:
        first (numerical): В первой корзине имеется `first` шаров
        first1 (numerical): При этом количество белых шаров равно либо `first1`
        first2 (numerical): Либо `first2`
        second (numerical): Во второй корзине имеется `second` шаров
        second1 (numerical): Количество белых шаров равно либо `second1`
        second2 (numerical): Либо `second2`
        second3 (numerical): Либо `second3`
        
    ## Prints
       `answer` каждое значение по очереди.<br>C запятой вместо точки и сокращением до 3 знаков после запятой
        
    Returns:
        `answer` (tuple): Соответствующие вероятности
    """
    Pa = ((first1+first2)*0.5 + (second1+second2+second3)*(1/3)) / (first + second)
    answer = (Pa,((first1+first2)*0.5/first * (first/(first+second))) / Pa)
    print('Вероятность P(A)            = ' + rrstr(answer[0],3)) 
    print('Условная вероятность P(H|A) = ' + rrstr(answer[1],3))
    
    return answer
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################
#######################################################################################################################