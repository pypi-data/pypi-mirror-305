def imports():
    """import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import *"""


def num1():
    """data = '-145.79; -175.83; -136.83; NA; -150.69; -125.14; -188.05; -123.59; NA; -204.01; NA; -151.2; -203.38; -173.49; -194.14; -136.45; -143.33; -197.62; -155.59; -194.74; -128.15; -211.73; -119.67; -216.6; -150.04; -212.06; -143.94; NA; -173.01; NA; -140.84; -171.99; -166.89; -162.36; -174.07; -186.93; -196.47; NA; -205.9; -183.18; -164.88; -188.69; NA; -113.84; -168.47; -157.53; -143.73; -165.63; -200.84; NA; -128.54; -185.1; -182.28; -174.63; -109.84; NA; -187.85; -237.41; -168.22; -146.7; NA; -122.19; -291.46; -131.58; -167.51; -158.66; -163.11; -141.93; -152.18; -96.33; -132.7; NA; -226.91; -146.35; -178.55; -191.88; -125.28; -236.29; -187.37; -209.95; -143.05; -130.29; -98.54; -184.14; -127.82; NA; -144.96; NA; -141.68; -200.9; -116.03; -125.34; -166.37; -159.45; NA; -295.48; -158.45; NA; -97.29; -174.58; -155.01; -173.13; -133.41; -171.72; -153.08; -176.28; -135.88; -80.05; -143.99; -156.12; -199.28; -192.9; -102.5; -167.88; -168.95; -123.32; -153.59; -193.24; -172.96; -187.21; -185.05; -111.11; NA; -212.44; -105.78; -160.66; -159.19; NA; -160.07; -142.8; -138.6; -184.21; -182.71; -147.12; -203.06; -178.89; -119.16; -171.02; NA; -123.51; -185.14; NA; -210.14; -188.45; -169.98; -191.36; -147.61; -211.13; -141.96; -124.25; -171.67; -150.66; -131.29; -145.46; -171.19; -104.22; -163.09; -192.83; -147.01; -181.63; -157.93; -139.57; NA; -136.23; -198.55; -186.38; -139.64; -144.46; -185.76; NA; -195.63; -194.64; -186.33; -111.82; -169.47; -154.91; -142.15; -136.03; -179.15; -153.79; -183.34; -187.74; -118.87; -186.91; -112.17; -170.03; -163.64; -111.71; -122.6; -134.94; -162.07; -136.01; -150.2; -197.2; -189.42; -185.79; -124.23; NA; -185.95; -123.94; -192.13; -149.93; -155.06; -153.55; NA; -159.76; -168.89; -168.74; -143.12; -156.95; -216.1; -185.01; -135.21; -123.35; -120.8; NA; -149.42; NA; -156.02; -183.99; -144.95; -186.49; -216.71; -86.24; -192.57; -161.55; NA; -149.57; -164.24; -174.24; -172.32; -108.38; -154.72; -184.07; -178.83; NA; -141.32; -128.75; -139.54; -179.82; -119.86; -121.14; -148.6; -124.05; -112.37; -147.25; -137.39; -145.95; -157.62; -155.33; -123.49; -133.79; -179.05; -179.46; -148.72; -212.92; -170.53; -146.5; -180.14; -157.99; -183; -170.84; NA; -160.83; -169.49; -149.82; -185.57; -146.06; -138.54; -103.77; NA; -166.23; -151.39; -188.3; -201.92; NA; -91.55; -107.15; -192.79; -190.33; NA; -190.75; -136.72; -190.12; -156; -180.49; -231.99; -114.43; -154.02; NA; -161.02; -102.86; NA; -165.83; -158.72; -148.64; -214.12; -136.04; -147.31; -176.66'
f"Введите объем исходной выборки: {len(data.split(';'))}\""""


def num2():
    """data = data.replace('NA;', '').split(';')
data_new = np.genfromtxt(data, dtype=float, delimiter=',')
f"Введите объем очищенной от пропусков выборки: {len(data_new)}\""""


def num3():
    """f"Введите значение ошибки выборки: {np.std(data_new, ddof=1) / np.sqrt(len(data_new))}\""""


def num4():
    """min_1 = np.min(data_new)
f"Введите минимальное значение в вариационном ряду: {min_1}\""""


def num5():
    """max_1 = np.max(data_new)
f"Введите максимальное значение в вариационном ряду: {max_1}\""""


def num6():
   """f"Введите первую квартиль: {np.quantile(data_new, 0.25)}\""""

def num7():
    """f"Введите медиану: {np.quantile(data_new, 0.5)}\""""

def num8():
    """f"Введите третью квартиль: {np.quantile(data_new, 0.75)}\""""

def num9():
    """f"Введите среднее значение: {data_new.mean()}\""""

def num10():
    """correct_var = np.var(data_new, ddof=1)
f"Введите исправленную дисперсию: {correct_var}\""""

def num11():
    """f"11. Введите стандартное отклонение (несмещенное): {correct_var ** 0.5}\""""

def num12():
    """f"12. Введите размах выборки: {max_1 - min_1}\""""

def num13():
    """f"13. Введите эксцесс (формула по умолчанию в Excel): {kurtosis(data_new, bias=False)}\""""

def num14():
    """f"14. Введите коэффициент асимметрии: {skew(data_new, bias=False)}\""""

def num1516():
    """n = len(data_new)
mean = np.mean(data_new)
std_dev = np.std(data_new, ddof=1)
corrected_std_dev = np.std(data_new, ddof=1)

confidence_level = 0.9
alpha = 1 - confidence_level
t_score = t.ppf(1 - alpha / 2, df=n - 1)
margin_of_error = t_score * (corrected_std_dev / np.sqrt(n))

ci_mean_lower = mean - margin_of_error
ci_mean_upper = mean + margin_of_error

f"15. Введите левую границу 0.9-доверительного интервала для E(X): {ci_mean_lower}. 16. Введите правую границу 0.9-доверительного интервала для E(X): {ci_mean_upper}\""""

def num1718():
    """n = len(data_new)
confidence_level = 0.9
alpha = 1 - confidence_level

sample_variance = np.var(data_new, ddof=1)

chi2_lower = chi2.ppf(alpha / 2, df=n - 1)
chi2_upper = chi2.ppf(1 - alpha / 2, df=n - 1)

ci_var_lower = (n - 1) * sample_variance / chi2_upper
ci_var_upper = (n - 1) * sample_variance / chi2_lower

f"17. Введите левую границу 0.9-доверительного интервала для Var(X): {ci_var_lower}. 18. Введите правую границу 0.9-доверительного интервала для Var(X): {ci_var_upper}\""""

def num1920():
    """Q1 = np.quantile(data_new, 0.25)
Q2 = np.quantile(data_new, 0.5)
Q3 = np.quantile(data_new, 0.75)
RQ = Q3 - Q1

st_max = Q3 + 1.5 * RQ
st_min = Q1 - 1.5 * RQ

f"19. Введите нижнюю границу нормы: {st_min}. 20. Введите верхнюю границу нормы: {st_max}\""""

def plt():
    """cleaned_data = data_new[(data_new >= st_min) & (data_new <= st_max)]

plt.figure(figsize=(12, 8))
plt.boxplot(cleaned_data)
plt.show()

plt.hist(cleaned_data, bins=10, color='orange', alpha=0.7)
plt.show()"""