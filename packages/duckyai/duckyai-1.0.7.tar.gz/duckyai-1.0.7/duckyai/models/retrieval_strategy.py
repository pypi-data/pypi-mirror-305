# coding: utf-8

"""
    RAG as a Service API

    API for managing RAG configurations, integrations, prompt templates, and backtesting.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ducky.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from duckyai.models.retrieval_strategy_contextual_compression import RetrievalStrategyContextualCompression
from duckyai.models.retrieval_strategy_corrective_retrieval import RetrievalStrategyCorrectiveRetrieval
from typing import Optional, Set
from typing_extensions import Self

class RetrievalStrategy(BaseModel):
    """
    Configuration for document retrieval
    """ # noqa: E501
    k: Optional[StrictInt] = Field(default=None, description="Number of documents to retrieve")
    result_type: Optional[StrictStr] = Field(default=None, description="The type of result to retrieve (e.g., full, summary, chunk)")
    store_type: Optional[StrictStr] = Field(default=None, description="vector or full_text")
    alpha: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Between 0 and 1, configures balance between sparse and dense vectors")
    rerank: Optional[StrictBool] = Field(default=None, description="Whether to rerank the results after retrieval")
    contextual_compression: Optional[RetrievalStrategyContextualCompression] = None
    corrective_retrieval: Optional[RetrievalStrategyCorrectiveRetrieval] = None
    __properties: ClassVar[List[str]] = ["k", "result_type", "store_type", "alpha", "rerank", "contextual_compression", "corrective_retrieval"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrievalStrategy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contextual_compression
        if self.contextual_compression:
            _dict['contextual_compression'] = self.contextual_compression.to_dict()
        # override the default output from pydantic by calling `to_dict()` of corrective_retrieval
        if self.corrective_retrieval:
            _dict['corrective_retrieval'] = self.corrective_retrieval.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrievalStrategy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "k": obj.get("k"),
            "result_type": obj.get("result_type"),
            "store_type": obj.get("store_type"),
            "alpha": obj.get("alpha"),
            "rerank": obj.get("rerank"),
            "contextual_compression": RetrievalStrategyContextualCompression.from_dict(obj["contextual_compression"]) if obj.get("contextual_compression") is not None else None,
            "corrective_retrieval": RetrievalStrategyCorrectiveRetrieval.from_dict(obj["corrective_retrieval"]) if obj.get("corrective_retrieval") is not None else None
        })
        return _obj


