# coding: utf-8

"""
    RAG as a Service API

    API for managing RAG configurations, integrations, prompt templates, and backtesting.

    The version of the OpenAPI document: 1.0.0
    Contact: support@ducky.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from duckyai.models.query_translation_strategy import QueryTranslationStrategy
from duckyai.models.retrieval_strategy import RetrievalStrategy
from duckyai.models.retrieve_documents_request_query_structuring import RetrieveDocumentsRequestQueryStructuring
from typing import Optional, Set
from typing_extensions import Self

class RetrieveDocumentsRequest(BaseModel):
    """
    RetrieveDocumentsRequest
    """ # noqa: E501
    index_name: Optional[StrictStr] = Field(default=None, description="The name of the index to retrieve documents from")
    query: Optional[StrictStr] = Field(default=None, description="The search query used for retrieving documents")
    evaluation_id: Optional[StrictStr] = Field(default=None, description="The ID representing the evaluation to compare variant results in (optional)")
    variant_name: Optional[StrictStr] = Field(default=None, description="The name of the evaluation variant to use, allowing you to track performance across different variants (optional)")
    retrieval_strategy: Optional[RetrievalStrategy] = None
    query_translation_strategy: Optional[QueryTranslationStrategy] = None
    query_structuring: Optional[RetrieveDocumentsRequestQueryStructuring] = None
    filter: Optional[Dict[str, Dict[str, Dict[str, Any]]]] = Field(default=None, description="Metadata filter expressions using MongoDB-style query language. Supports both simple filter conditions and combined filters using logical operators like $and and $or. ")
    __properties: ClassVar[List[str]] = ["index_name", "query", "evaluation_id", "variant_name", "retrieval_strategy", "query_translation_strategy", "query_structuring", "filter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrieveDocumentsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of retrieval_strategy
        if self.retrieval_strategy:
            _dict['retrieval_strategy'] = self.retrieval_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query_translation_strategy
        if self.query_translation_strategy:
            _dict['query_translation_strategy'] = self.query_translation_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query_structuring
        if self.query_structuring:
            _dict['query_structuring'] = self.query_structuring.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrieveDocumentsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "index_name": obj.get("index_name"),
            "query": obj.get("query"),
            "evaluation_id": obj.get("evaluation_id"),
            "variant_name": obj.get("variant_name"),
            "retrieval_strategy": RetrievalStrategy.from_dict(obj["retrieval_strategy"]) if obj.get("retrieval_strategy") is not None else None,
            "query_translation_strategy": QueryTranslationStrategy.from_dict(obj["query_translation_strategy"]) if obj.get("query_translation_strategy") is not None else None,
            "query_structuring": RetrieveDocumentsRequestQueryStructuring.from_dict(obj["query_structuring"]) if obj.get("query_structuring") is not None else None,
            "filter": obj.get("filter")
        })
        return _obj


