{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Infernet CLI","text":"<p>Infernet CLI is a tool that simplifies configuration and deployment of an Infernet Node. Specifically, it enables:</p> <ol> <li>Pulling plug-and-play node configurations for different chains, with the ability to further configure and customize them.</li> <li>Adding plug-and-play service configurations to your node.</li> <li>Creating, managing, and destroying a node.</li> </ol>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python &gt;= 3.9</li> <li>Docker Desktop or (Docker Engine + Docker Compose).</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can either install <code>infernet-cli</code> via <code>uv</code> (recommended) or via <code>pip</code>.</p> uvpip <pre><code>uv pip install infernet-cli\n</code></pre> <pre><code>pip install infernet-cli\n</code></pre>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Here's how you can configure a node connected to a local Anvil chain:</p> <pre><code>export DEPLOY_DIR=deploy/\n\ninfernet-cli config anvil --skip\n</code></pre> <p>The output will look something like this:</p> <pre><code>No version specified. Using latest: v1.3.0\nUsing configurations:\n   Chain = 'anvil'\n   Version = '1.3.0'\n   GPU support = disabled\n   Output dir = 'deploy'\n\nStored base configurations to '/root/deploy'.\nTo configure services:\n  - Use `infernet-cli add-service`\n  - Or edit config.json directly\n</code></pre> <p>You can add an ML service, e.g. <code>onnx-inference</code>, as follows:</p> <pre><code>infernet-cli add-service onnx-inference --skip\n</code></pre> <p>The output will look something like this:</p> <pre><code>Version not provided. Using latest version '2.0.0'.\nSuccessfully added service 'onnx-inference-2.0.0' to config.json.\n</code></pre> <p>You can then deploy the node:</p> <pre><code>infernet-cli start\n</code></pre> <p>and check that it's healthy:</p> <pre><code>infernet-cli health\n</code></pre>"},{"location":"#more-options","title":"More Options","text":"<p>To see all the available commands and options, head over to the Usage documentation.</p>"},{"location":"usage/","title":"Usage","text":"<p>The following examples assume a target directory <code>deploy/</code>. All files related to node configuration and deployment will be stored here.</p> <p>You can set the target directory with every command using <code>--dir</code>, or you can set it once as an ENV variable:</p> <pre><code>export DEPLOY_DIR=deploy\n</code></pre>"},{"location":"usage/#node-configuration","title":"Node Configuration","text":"<p>To pull plug-and-play node configurations, you can use <code>config</code>.</p> Usage <pre><code>Usage: infernet-cli config [OPTIONS] {anvil|base|base-sepolia|eth|other}\n\n  Pull node configurations.\n\nOptions:\n  -v, --version TEXT  The version of the node to configure.\n  -d, --dir TEXT      The directory to store and retrieve configuration files.\n                    Can also set DEPLOY_DIR environment variable.\n  --gpu               Enable GPU support for the node.\n  -i, --inputs TEXT   The inputs to fill in the recipe. Should be a JSON\n                    string of key-value pairs. If not provided, the user\n                    will be prompted for inputs via the CLI.\n  -y, --yes           Force overwrite of existing configurations.\n  --skip              Skip optional inputs.\n</code></pre> <p>Example:</p> <pre><code>infernet-cli config anvil --skip\n</code></pre> <p>The output will look something like this:</p> <pre><code>No version specified. Using latest: v1.3.0\nUsing configurations:\n   Chain = 'anvil'\n   Version = '1.3.0'\n   GPU support = disabled\n   Output dir = 'deploy'\n\nStored base configurations to '/root/deploy'.\nTo configure services:\n  - Use `infernet-cli add-service`\n  - Or edit config.json directly\n</code></pre> <p>Notice that for demonstration purposes, we are using the <code>--skip</code> flag to default optional inputs.</p>"},{"location":"usage/#inputs","title":"Inputs","text":"<p>Depending on your chain selection, some configuration will need user input in real time. For example, when configuring a node for <code>Base Mainnet</code>, user will be prompted for their wallet's <code>private_key</code> and an optional <code>payment_address</code>.</p> <pre><code>infernet-cli config base\n</code></pre> <p>The output will look something like the following. First, you will be prompted for a required input, the <code>private_key</code>:</p> <pre><code>No version specified. Using latest: v1.3.0\nUsing configurations:\n   Chain = 'base'\n   Version = '1.3.0'\n   GPU support = disabled\n   Output dir = 'deploy'\n\"private_key\" (string): Private key for the wallet (Required):\n    Enter value:\n</code></pre> <p>You should enter your private key followed by the <code>return</code> key. Next, you'll be prompted for an optional <code>payment_address</code>:</p> <pre><code>\"payment_address\" (string): Payment address for the wallet (RETURN to skip):\n    Enter value:\n</code></pre> <p>Assuming you don't need to accept payments just yet, you can simply skip it by hitting <code>return</code>. You should then see output similar to the following:</p> <pre><code>Stored base configurations to '/root/deploy'.\nTo configure services:\n  - Use `infernet-cli add-service`\n  - Or edit config.json directly\n</code></pre> <p>Alternatively, the same inputs can be provided non-interactively as a JSON string, using the <code>--inputs</code> option:</p> <pre><code>infernet-cli config base -v \"1.3.0\" --inputs '{\"private_key\": \"0xxxxxxxxxx\"}'\n# Same as above\n</code></pre>"},{"location":"usage/#gpu","title":"GPU","text":"<p>To deploy a GPU-enabled Infernet Node, just use the <code>--gpu</code> flag. This assumes your machine is GPU-enabled.</p> <pre><code>infernet-cli config base --gpu --inputs '{\"private_key\": \"0xxxxxxxxxx\"}'\n</code></pre> <p>The output will look something like this:</p> <pre><code>Using configurations:\n   Chain = 'base'\n   Version = '1.3.0'\n   GPU support = enabled\n   Output dir = 'deploy'\n\nStored base configurations to '/root/deploy'.\nTo configure services:\n  - Use `infernet-cli add-service`\n  - Or edit config.json directly\n</code></pre>"},{"location":"usage/#service-configuration","title":"Service Configuration","text":"<p>To add service containers to the node, you can use <code>add-service</code>.</p> <p>You can configure a service either manually by providing a complete container specification, or using recipes.</p> Usage <pre><code>Usage: infernet-cli add-service [OPTIONS] [RECIPE_ID]\n\n  Add a service to the node configuration.\n\nOptions:\n  -d, --dir TEXT     The directory to store and retrieve configuration files.\n                    Can also set DEPLOY_DIR environment variable.\n  -i, --inputs TEXT  The inputs to fill in the recipe. Should be a JSON string\n                    of key-value pairs. If not provided, the user will be\n                    prompted for inputs via the CLI.\n  --skip             Skip optional inputs.\n</code></pre>"},{"location":"usage/#recipes","title":"Recipes","text":"<p>You can configure one or more official Ritual services using our pre-configured service recipes.</p> <pre><code>infernet-cli add-service hf-client-inference:1.0.0\n</code></pre> <p>Similar to config inputs, you will be prompted for configuration parameters:</p> <pre><code>\"HF_TOKEN\" (string): The Hugging Face API token. (Required):\n    Enter value:\n</code></pre> <p>and</p> <pre><code>\"NUM_WORKERS\" (integer): The number of workers to use with the server. (RETURN to skip):\n    Enter value:\n</code></pre> <p>Notice that <code>HF_TOKEN</code> is required, but <code>NUM_WORKERS</code> can be skipped. You should expect to see the following output:</p> <pre><code>Successfully added service 'hf-client-inference:1.0.0' to config.json.\n</code></pre> <p>Alternatively, the same inputs can be provided non-interactively as a JSON string, using the <code>--inputs</code> option:</p> <pre><code>infernet-cli add-service hf-client-inference:1.0.0 --inputs '{\"HF_TOKEN\": \"a0xxxxxxxxxxxxx\"}'\n</code></pre>"},{"location":"usage/#manually","title":"Manually","text":"<p>You can also add custom service configurations via command-line:</p> <pre><code>infernet-cli add-service\n</code></pre> <p>You will be prompted to paste an entire service configuration:</p> <pre><code>Enter service configuration JSON, followed by EOF:\n</code></pre> <p>To configure an identical service as above, you can paste the following:</p> <pre><code>{\n    \"id\": \"hf-client-inference\",\n    \"image\": \"ritualnetwork/torch_inference_service:1.0.0\",\n    \"env\": {\"HF_TOKEN\": \"a0xxxxxxxxxxxxx\"},\n    \"command\": \"--bind=0.0.0.0:3000 --workers=2\"\n}\n</code></pre> <p>followed by EOF (<code>Ctrl+D</code> on Linux / MacOS). You should see output similar to this:</p> <pre><code>Successfully added service 'hf-client-inference' to config.json.\n</code></pre>"},{"location":"usage/#remove","title":"Remove","text":"<p>You can remove a service configuration with <code>remove-service</code>.</p> Usage <pre><code>Usage: infernet-cli remove-service [OPTIONS] [SERVICE_ID]\n\n  Remove a service from the node configuration.\n\nOptions:\n  -d, --dir TEXT  The directory to store and retrieve configuration files. Can\n                also set DEPLOY_DIR environment variable.\n</code></pre> <p>You can remove services by ID:</p> <pre><code>infernet-cli remove-service hf-client-inference:1.0.0\n</code></pre> <p>or remove all services:</p> <pre><code>infernet-cli remove-service\n</code></pre>"},{"location":"usage/#node-deployment","title":"Node Deployment","text":"<p>After configuring a node and adding some services, you can manage its lifecycle as follows:</p>"},{"location":"usage/#deploy","title":"Deploy","text":"<p>To create or start the node, use <code>start</code>.</p> Usage <pre><code>Usage: infernet-cli start [OPTIONS]\n\n  Start the Infernet Node.\n\nOptions:\n  -d, --dir TEXT  The directory to store and retrieve configuration files. Can\n                also set DEPLOY_DIR environment variable.\n</code></pre> <p>Example:</p> <pre><code>infernet-cli start\n</code></pre> <p>If successful, you should see:</p> <pre><code># Starting Infernet Node...\n# Containers started successfully.\n</code></pre>"},{"location":"usage/#health","title":"Health","text":"<p>To check the health of the node and containers, use <code>health</code>.</p> Usage <pre><code>Usage: infernet-cli health [OPTIONS]\n\n  Check health of the Infernet Node.\n\nOptions:\n  -d, --dir TEXT  The directory to store and retrieve configuration files. Can\n                also set DEPLOY_DIR environment variable.\n</code></pre> <p>Example:</p> <pre><code>infernet-cli health\n</code></pre> <p>If successful, you should see:</p> <pre><code>All containers are up and running.\n</code></pre>"},{"location":"usage/#stop","title":"Stop","text":"<p>To stop the node, use <code>stop</code>.</p> Usage <pre><code>Usage: infernet-cli stop [OPTIONS]\n\n  Stop the Infernet Node.\n\nOptions:\n  -d, --dir TEXT  The directory to store and retrieve configuration files. Can\n                also set DEPLOY_DIR environment variable.\n</code></pre> <p>Example:</p> <pre><code>infernet-cli stop\n</code></pre> <p>If successful, you should see:</p> <pre><code>Stopping Infernet Node...\nContainers stopped successfully.\n</code></pre>"},{"location":"usage/#reset","title":"Reset","text":"<p>To reset the node, use <code>reset</code>.</p> Usage <pre><code>Usage: infernet-cli reset [OPTIONS]\n\n  Reset Infernet Node.\n\nOptions:\n  -d, --dir TEXT  The directory to store and retrieve configuration files. Can\n                also set DEPLOY_DIR environment variable.\n  --services      Force removal of service containers. Destructive operation.\n</code></pre> <p>Example:</p> <pre><code>infernet-cli reset\n</code></pre> <p>If successful, you should see:</p> <pre><code>Resetting Infernet Node...\nContainers stopped successfully.\nContainers started successfully.\n</code></pre> <p>By default, service containers are not reset when the node is stopped or destroyed. This is intended behavior to ensure pre-processing-heavy services are not repeatedly initialized. To force reset all service containers, use the <code>--services</code> flag. This is a destructive operation:</p> <pre><code>infernet-cli reset --services\n</code></pre> <p>If successful, you should see:</p> <pre><code>Resetting Infernet Node...\nContainers stopped successfully.\nDestroying service containers...\nContainers started successfully.\n</code></pre>"},{"location":"usage/#destroy","title":"Destroy","text":"<p>To destroy the node, use <code>destroy</code>.</p> Usage <pre><code>Usage: infernet-cli destroy [OPTIONS]\n\n  Destroy the Infernet Node.\n\nOptions:\n  -d, --dir TEXT  The directory to store and retrieve configuration files. Can\n                also set DEPLOY_DIR environment variable.\n  --services      Force removal of service containers. Destructive operation.\n  -y, --yes       No manual y/n confirmation required.\n</code></pre> <p>Example:</p> <pre><code>infernet-cli destroy -y\n</code></pre> <p>If successful, you should see:</p> <pre><code>Destroying Infernet Node...\nContainers stopped successfully.\nContainers destroyed successfully.\n</code></pre> <p>By default, service containers are not destroyed when the node is stopped or destroyed. This is intended behavior to ensure pre-processing-heavy services are not repeatedly initialized. To force destroy all service containers, use the <code>--services</code> flag. This is a destructive operation:</p> <pre><code>infernet-cli destroy --services -y\n</code></pre> <p>If successful, you should see:</p> <pre><code>Destroying Infernet Node...\nContainers stopped successfully.\nContainers destroyed successfully.\nDestroying service containers...\n</code></pre>"},{"location":"reference/infernet_cli/github/","title":"Module: <code>github</code>","text":""},{"location":"reference/infernet_cli/github/#infernet_cli.github.github_list_files","title":"<code>github_list_files(owner, repo, path, branch='main', type='file')</code>","text":"<p>List all files (or directories) in a GitHub repo path.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The owner of the repository.</p> required <code>repo</code> <code>str</code> <p>The repository name.</p> required <code>path</code> <code>str</code> <p>The path to list files from.</p> required <code>branch</code> <code>str</code> <p>The branch to list files from. Defaults to \"main\".</p> <code>'main'</code> <code>type</code> <code>str</code> <p>\"dir\" or \"file\". Defaults to \"file\".</p> <code>'file'</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of file names.</p> Source code in <code>src/infernet_cli/github.py</code> <pre><code>def github_list_files(\n    owner: str, repo: str, path: str, branch: str = \"main\", type: str = \"file\"\n) -&gt; list[str]:\n    \"\"\"List all files (or directories) in a GitHub repo path.\n\n    Args:\n        owner (str): The owner of the repository.\n        repo (str): The repository name.\n        path (str): The path to list files from.\n        branch (str): The branch to list files from. Defaults to \"main\".\n        type (str): \"dir\" or \"file\". Defaults to \"file\".\n\n    Returns:\n        list[str]: A list of file names.\n    \"\"\"\n\n    url = f\"https://api.github.com/repos/{owner}/{repo}/contents/{path}?ref={branch}\"\n    files = []\n\n    response = requests.get(url)\n    response.raise_for_status()\n    data = response.json()\n    files.extend([file[\"name\"] for file in data if file[\"type\"] == type])\n    return files\n</code></pre>"},{"location":"reference/infernet_cli/github/#infernet_cli.github.github_pull_file","title":"<code>github_pull_file(owner, repo, path, branch='main')</code>","text":"<p>Retrieve a file's contents from Github</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The owner of the repository.</p> required <code>repo</code> <code>str</code> <p>The repository name.</p> required <code>path</code> <code>str</code> <p>The path to the file.</p> required <code>branch</code> <code>str</code> <p>The branch to pull the file from. Defaults to \"main\".</p> <code>'main'</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The file's contents.</p> Source code in <code>src/infernet_cli/github.py</code> <pre><code>def github_pull_file(owner: str, repo: str, path: str, branch: str = \"main\") -&gt; Any:\n    \"\"\"Retrieve a file's contents from Github\n\n    Args:\n        owner (str): The owner of the repository.\n        repo (str): The repository name.\n        path (str): The path to the file.\n        branch (str): The branch to pull the file from. Defaults to \"main\".\n\n    Returns:\n        Any: The file's contents.\n    \"\"\"\n\n    api_url = (\n        f\"https://api.github.com/repos/{owner}/{repo}/contents/{path}?ref={branch}\"\n    )\n    headers = {\n        \"Accept\": \"application/vnd.github.v3.raw\",\n    }\n\n    try:\n        response = requests.get(api_url, headers=headers)\n        response.raise_for_status()\n        if path.endswith(\".json\"):\n            return response.json()\n        else:\n            return response.text\n    except ValueError:\n        raise ValueError(\n            f\"Unable to fetch {path}.\"\n            f\" Status code: {response.status_code}: {response.text}\"\n        )\n</code></pre>"},{"location":"reference/infernet_cli/node/","title":"Module: <code>node</code>","text":""},{"location":"reference/infernet_cli/node/#infernet_cli.node.can_overwrite_file","title":"<code>can_overwrite_file(file, dir, force)</code>","text":"<p>Whether setup is allowed to (over)write the file</p> <p>If the file exists, the user is prompted to overwrite it.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>The file to check</p> required <code>dir</code> <code>str</code> <p>The directory where the file is located</p> required <code>force</code> <code>bool</code> <p>Whether to force overwrite existing file</p> required Source code in <code>src/infernet_cli/node.py</code> <pre><code>def can_overwrite_file(file: str, dir: str, force: bool) -&gt; None:\n    \"\"\"Whether setup is allowed to (over)write the file\n\n    If the file exists, the user is prompted to overwrite it.\n\n    Args:\n        file (str): The file to check\n        dir (str): The directory where the file is located\n        force (bool): Whether to force overwrite existing file\n    \"\"\"\n\n    # Create backup directory\n    backup_dir = f\"{dir}/backup\"\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n\n    # Check if file exists\n    path = os.path.join(dir, file)\n    if os.path.exists(path):\n        if not force:\n            click.confirm(f\"File '{path}' exists. Overwrite?\", abort=True)\n\n        # Move file to a backup\n        backup_path = f\"{backup_dir}/{file}.{datetime.now().strftime('%Y%m%d%H%M%S')}\"\n        os.rename(path, backup_path)\n        click.echo(f\"    Old file moved to '{backup_path}'.\")\n</code></pre>"},{"location":"reference/infernet_cli/node/#infernet_cli.node.get_compatible_node_versions","title":"<code>get_compatible_node_versions()</code>","text":"<p>Get all recipe-compatible node versions for the CLI.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of compatible node versions, sorted in descending order.</p> Source code in <code>src/infernet_cli/node.py</code> <pre><code>def get_compatible_node_versions() -&gt; list[str]:\n    \"\"\"Get all recipe-compatible node versions for the CLI.\n\n    Returns:\n        list[str]: A list of compatible node versions, sorted in descending order.\n    \"\"\"\n    return sorted(\n        set(\n            [\n                tag.split(\"-\")[0]\n                for tag in get_docker_image_tags(\"ritualnetwork\", \"infernet-node\")\n                # Node v1.3.0 is the first compatible with the CLI\n                if not tag.startswith(\"latest\") and tag.split(\"-\")[0] &gt;= \"1.3.0\"\n            ]\n        ),\n        reverse=True,\n    )\n</code></pre>"},{"location":"reference/infernet_cli/node/#infernet_cli.node.get_configs","title":"<code>get_configs(chain, dir, gpu, version, inputs, force=False, skip=False)</code>","text":"<p>Pull node configurations for a specific chain.</p> <ol> <li>Touches target directory</li> <li>Fetches available node tags to validate version</li> <li>Fetches configuration files</li> <li>Keeps the correct docker-compose file based on GPU support</li> <li>Fills in the recipe with input values</li> <li>Writes the configuration files</li> </ol> <p>Parameters:</p> Name Type Description Default <code>chain</code> <code>str</code> <p>The chain for which to pull the configurations.</p> required <code>dir</code> <code>str</code> <p>The directory to write the configurations to.</p> required <code>gpu</code> <code>bool</code> <p>Whether to enable GPU support.</p> required <code>version</code> <code>Optional[str]</code> <p>The version of the node to configure.</p> required <code>inputs</code> <code>Optional[dict[str, Any]]</code> <p>The input values to fill in the recipe.</p> required <code>force</code> <code>bool</code> <p>Whether to force overwrite existing files.</p> <code>False</code> <code>skip</code> <code>bool</code> <p>Whether to skip optional inputs.</p> <code>False</code> Source code in <code>src/infernet_cli/node.py</code> <pre><code>def get_configs(\n    chain: str,\n    dir: str,\n    gpu: bool,\n    version: Optional[str],\n    inputs: Optional[dict[str, Any]],\n    force: bool = False,\n    skip: bool = False,\n) -&gt; None:\n    \"\"\"Pull node configurations for a specific chain.\n\n    1. Touches target directory\n    2. Fetches available node tags to validate version\n    3. Fetches configuration files\n    4. Keeps the correct docker-compose file based on GPU support\n    5. Fills in the recipe with input values\n    6. Writes the configuration files\n\n    Args:\n        chain (str): The chain for which to pull the configurations.\n        dir (str): The directory to write the configurations to.\n        gpu (bool): Whether to enable GPU support.\n        version (Optional[str]): The version of the node to configure.\n        inputs (Optional[dict[str, Any]]): The input values to fill in the recipe.\n        force (bool): Whether to force overwrite existing files.\n        skip (bool): Whether to skip optional inputs.\n    \"\"\"\n\n    # Create directory if it doesn't exist\n    if not os.path.exists(dir):\n        os.makedirs(dir)\n\n    # Fetch the available node tags\n    all_tags = get_compatible_node_versions()\n\n    # Default or validate the version\n    if not version:\n        version = all_tags[0]\n        click.echo(f\"No version specified. Using latest: v{version}\")\n    elif version not in all_tags:\n        raise click.BadParameter(\n            f\"Version '{version}' not found. Choose from: {', '.join(all_tags)}\"\n        )\n\n    click.echo(\n        f\"Using configurations: \\n\"\n        f\"   Chain = '{chain}'\\n\"\n        f\"   Version = '{version}'\\n\"\n        f\"   GPU support = {'enabled' if gpu else 'disabled'}\\n\"\n        f\"   Output dir = '{dir}'\"\n    )\n\n    deploy_files = github_list_files(\n        \"ritual-net\",\n        \"infernet-recipes\",\n        f\"node/{chain}/{version}\",\n    )\n\n    # Only keep one of {GPU, non-GPU} docker-compose files\n    if gpu:\n        deploy_files.remove(\"docker-compose.yaml\")\n    else:\n        deploy_files.remove(\"docker-compose-gpu.yaml\")\n\n    for file in deploy_files:\n        contents = github_pull_file(\n            \"ritual-net\",\n            \"infernet-recipes\",\n            f\"node/{chain}/{version}/{file}\",\n        )\n\n        # Special handling for config file to get inputs\n        if file == \"config.json\":\n            contents = fill_in_recipe(cast(InfernetRecipe, contents), inputs, skip)\n\n        can_overwrite_file(file, dir, force)\n\n        # Special handling of docker-compose file\n        if file.startswith(\"docker-compose\"):\n            path = os.path.join(dir, \"docker-compose.yaml\")\n        else:\n            path = os.path.join(dir, file)\n\n        # Write the file\n        with open(path, \"w\") as f:\n            if file.endswith(\".json\"):\n                f.write(json.dumps(contents, indent=4))\n            else:\n                f.write(contents)\n\n    click.echo(\n        f\"\\nStored base configurations to '{os.path.abspath(dir)}'.\"\n        \"\\nTo configure services:\"\n        \"\\n  - Use `infernet-cli add-service`\"\n        \"\\n  - Or edit config.json directly\"\n    )\n</code></pre>"},{"location":"reference/infernet_cli/node/#infernet_cli.node.get_docker_image_tags","title":"<code>get_docker_image_tags(owner, repo)</code>","text":"<p>Get all tags for a Docker image repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The owner of the repository.</p> required <code>repo</code> <code>str</code> <p>The repository name.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of tags.</p> Source code in <code>src/infernet_cli/node.py</code> <pre><code>def get_docker_image_tags(owner: str, repo: str) -&gt; list[str]:\n    \"\"\"Get all tags for a Docker image repository.\n\n    Args:\n        owner (str): The owner of the repository.\n        repo (str): The repository name.\n\n    Returns:\n        list[str]: A list of tags.\n    \"\"\"\n    url = f\"https://hub.docker.com/v2/repositories/{owner}/{repo}/tags/\"\n    tags = []\n\n    while url:\n        response = requests.get(url, params={\"page_size\": 100})\n        response.raise_for_status()\n        data = response.json()\n        tags.extend([tag[\"name\"] for tag in data[\"results\"]])\n        url = data[\"next\"]  # If there's a next page, continue\n\n    return tags\n</code></pre>"},{"location":"reference/infernet_cli/recipe/","title":"Module: <code>recipe</code>","text":""},{"location":"reference/infernet_cli/recipe/#infernet_cli.recipe.InfernetRecipe","title":"<code>InfernetRecipe</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Infernet Recipe (see github.com/ritual-net/infernet-recipes)</p> Source code in <code>src/infernet_cli/recipe.py</code> <pre><code>class InfernetRecipe(TypedDict):\n    \"\"\"Infernet Recipe (see github.com/ritual-net/infernet-recipes)\"\"\"\n\n    # Required\n    config: RecipeConfig\n\n    # Optional\n    inputs: NotRequired[list[RecipeInputs]]\n</code></pre>"},{"location":"reference/infernet_cli/recipe/#infernet_cli.recipe.RecipeConfig","title":"<code>RecipeConfig</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Infernet Recipe Configuration</p> Source code in <code>src/infernet_cli/recipe.py</code> <pre><code>class RecipeConfig(TypedDict, total=False):\n    \"\"\"Infernet Recipe Configuration\"\"\"\n\n    # Required\n    id: str\n    image: str\n\n    # Optional\n    command: NotRequired[str]\n    env: NotRequired[dict[str, Any]]\n    description: NotRequired[str]\n</code></pre>"},{"location":"reference/infernet_cli/recipe/#infernet_cli.recipe.RecipeInputs","title":"<code>RecipeInputs</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Infernet Recipe Input Variable</p> Source code in <code>src/infernet_cli/recipe.py</code> <pre><code>class RecipeInputs(TypedDict):\n    \"\"\"Infernet Recipe Input Variable\"\"\"\n\n    # Required\n    id: str\n    type: str\n    path: str\n    required: bool\n\n    # Optional\n    description: NotRequired[str]\n    default: NotRequired[Any]\n</code></pre>"},{"location":"reference/infernet_cli/recipe/#infernet_cli.recipe.fill_in_recipe","title":"<code>fill_in_recipe(recipe, inputs=None, skip=False)</code>","text":"<p>Fill-in the recipe inputs and return the configuration</p> <p>If inputs object is provided, use it to fill in the recipe inputs. Otherwise, prompt the user for inputs interactively via the CLI.</p> <p>Parameters:</p> Name Type Description Default <code>recipe</code> <code>dict[str, Any]</code> <p>The recipe containing the inputs and configuration</p> required <code>inputs</code> <code>Optional[dict[str, Any]]</code> <p>The inputs to fill in the recipe</p> <code>None</code> <code>skip</code> <code>bool</code> <p>Whether to skip optional inputs</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The configuration with the user inputs</p> Source code in <code>src/infernet_cli/recipe.py</code> <pre><code>def fill_in_recipe(\n    recipe: InfernetRecipe, inputs: Optional[dict[str, Any]] = None, skip: bool = False\n) -&gt; Any:\n    \"\"\"Fill-in the recipe inputs and return the configuration\n\n    If inputs object is provided, use it to fill in the recipe inputs. Otherwise,\n    prompt the user for inputs interactively via the CLI.\n\n    Args:\n        recipe (dict[str, Any]): The recipe containing the inputs and configuration\n        inputs (Optional[dict[str, Any]]): The inputs to fill in the recipe\n        skip (bool): Whether to skip optional inputs\n\n    Returns:\n        Any: The configuration with the user inputs\n    \"\"\"\n    config = deepcopy(recipe[\"config\"])\n\n    # Prompt user for inputs if not provided\n    if inputs is None:\n        inputs = {}\n        for var in recipe[\"inputs\"]:\n            # Skip optional inputs if specified\n            if skip and var[\"required\"] is False:\n                continue\n\n            click.echo(\n                f\"\\\"{var['id']}\\\" ({var['type']}): {var['description']} \"\n                f\"({'Required' if var['required'] is True else 'RETURN to skip'}):\"\n            )\n            value = input(\"    Enter value: \")\n            inputs[var[\"id\"]] = value\n\n    # Fill in the recipe inputs\n    for var in recipe[\"inputs\"]:\n        value = inputs.get(var[\"id\"], None)\n\n        # If skipped, check if required or default value\n        if not value:\n            # If value if required, exit with error\n            if var[\"required\"] is True:\n                raise click.ClickException(\n                    f\"Required value '{var['id']}' not provided.\"\n                )\n            # If value is defaulted, use default value\n            elif \"default\" in var:\n                value = var[\"default\"]\n            # Otherwise, skip\n            else:\n                continue\n\n        # Handle mid-string substitutions with # notation\n        pound_index = var[\"path\"].find(\"#\")\n        pound_substr = None\n        if pound_index != -1:\n            pound_substr = var[\"path\"][pound_index + 1 :]\n            keys = var[\"path\"][:pound_index].split(\".\")\n        else:\n            keys = var[\"path\"].split(\".\")\n\n        # Traverse the configuration path\n        ptr = config\n        for key in keys[:-1]:\n            ptr = ptr[key]  # type: ignore\n\n        # Store value in the configuration\n        if not pound_substr:\n            ptr[keys[-1]] = value  # type: ignore\n        else:\n            # make the mid-string substitution\n            string = json.dumps(ptr[keys[-1]])  # type: ignore\n            string = string.replace(\"${\" + pound_substr + \"}\", str(value))\n            ptr[keys[-1]] = json.loads(string)  # type: ignore\n\n    return config\n</code></pre>"},{"location":"reference/infernet_cli/service/","title":"Module: <code>service</code>","text":""},{"location":"reference/infernet_cli/service/#infernet_cli.service.add_service_container","title":"<code>add_service_container(recipe_id, dir, inputs, skip=False)</code>","text":"<p>Add container configuration to the node config.json.</p> <p>If no recipe ID is provided, the user will be prompted to enter the service configuration JSON manually. Otherwise, the recipe will be pulled from the services registry and inputs will be filled in, either from the provided JSON string or interactively via the CLI.</p> <p>Parameters:</p> Name Type Description Default <code>recipe_id</code> <code>Optional[str]</code> <p>The service ID, optionally followed by a version.</p> required <code>dir</code> <code>str</code> <p>The directory containing the node configuration.</p> required <code>inputs</code> <code>Optional[dict[str, Any]]</code> <p>The inputs to fill in the recipe.</p> required <code>skip</code> <code>bool</code> <p>Whether to skip optional inputs.</p> <code>False</code> Source code in <code>src/infernet_cli/service.py</code> <pre><code>def add_service_container(\n    recipe_id: Optional[str],\n    dir: str,\n    inputs: Optional[dict[str, Any]],\n    skip: bool = False,\n) -&gt; None:\n    \"\"\"Add container configuration to the node config.json.\n\n    If no recipe ID is provided, the user will be prompted to enter the service\n    configuration JSON manually. Otherwise, the recipe will be pulled from the services\n    registry and inputs will be filled in, either from the provided JSON string or\n    interactively via the CLI.\n\n    Args:\n        recipe_id (Optional[str]): The service ID, optionally followed by a version.\n        dir (str): The directory containing the node configuration.\n        inputs (Optional[dict[str, Any]]): The inputs to fill in the recipe.\n        skip (bool): Whether to skip optional inputs.\n    \"\"\"\n    # Pull all recipe IDs\n    recipe_ids = github_list_files(\n        \"ritual-net\",\n        \"infernet-recipes\",\n        \"services\",\n        type=\"dir\",\n    )\n\n    if not recipe_id:\n        # Take entire object from stdin - stop at EOF\n        click.echo(\"Enter service configuration JSON, followed by EOF:\")\n        try:\n            config = json.loads(sys.stdin.read())\n        except json.JSONDecodeError as e:\n            raise click.ClickException(f\"Decoding JSON error: {e}\")\n    else:\n        service, version = (\n            recipe_id.split(\":\") if \":\" in recipe_id else (recipe_id, None)\n        )\n\n        if service not in recipe_ids:\n            raise click.ClickException(f\"Service '{recipe_id}' not found.\")\n\n        versions = github_list_files(\n            \"ritual-net\",\n            \"infernet-recipes\",\n            f\"services/{service}\",\n            type=\"dir\",\n        )\n\n        if version and version not in versions:\n            raise click.ClickException(\n                f\"Version {version} not found for service '{service}'.\"\n            )\n\n        if not version:\n            version = sorted(versions)[-1]\n            click.echo(f\"Version not provided. Using latest version '{version}'.\")\n\n        # Pull the recipe file\n        recipe = cast(\n            InfernetRecipe,\n            github_pull_file(\n                \"ritual-net\",\n                \"infernet-recipes\",\n                f\"services/{service}/{version}/recipe.json\",\n            ),\n        )\n\n        # Prompt user for inputs\n        config = cast(dict[str, Any], fill_in_recipe(recipe, inputs, skip=skip))\n\n    # Check that config.json exists\n    path = Path(f\"{dir}/config.json\")\n    if not path.exists():\n        raise click.ClickException(f\"File {dir}/config.json does not exist.\")\n\n    try:\n        full_config = json.loads(path.read_bytes())\n    except json.JSONDecodeError as e:\n        raise click.ClickException(\n            f\"Error decoding config.json: {e}. \\nTry running `infernet-cli config`.\"\n        )\n\n    # Ensure service ID does not already exist\n    if any(service[\"id\"] == config[\"id\"] for service in full_config[\"containers\"]):\n        click.confirm(\n            f\"Service '{config['id']}' already exists. Overwrite?\", abort=True\n        )\n\n        full_config[\"containers\"] = [\n            service\n            for service in full_config[\"containers\"]\n            if service[\"id\"] != config[\"id\"]\n        ]\n\n    # Append service and rewrite config.json\n    full_config[\"containers\"].append(config)\n    path.write_text(json.dumps(full_config, indent=4))\n\n    click.echo(f\"Successfully added service '{config['id']}' to config.json.\")\n</code></pre>"},{"location":"reference/infernet_cli/service/#infernet_cli.service.remove_service_container","title":"<code>remove_service_container(service_id, dir)</code>","text":"<p>Remove a service from the node.</p> <p>If no service ID is provided, all services will be removed.</p> <p>Parameters:</p> Name Type Description Default <code>service_id</code> <code>Optional[str]</code> <p>The service ID to remove.</p> required <code>dir</code> <code>str</code> <p>The directory containing the configuration.</p> required Source code in <code>src/infernet_cli/service.py</code> <pre><code>def remove_service_container(service_id: Optional[str], dir: str) -&gt; None:\n    \"\"\"Remove a service from the node.\n\n    If no service ID is provided, all services will be removed.\n\n    Args:\n        service_id (Optional[str]): The service ID to remove.\n        dir (str): The directory containing the configuration.\n    \"\"\"\n\n    # Check that config.json exists\n    path = Path(f\"{dir}/config.json\")\n    if not path.exists():\n        raise click.ClickException(f\"File {dir}/config.json does not exist.\")\n\n    try:\n        full_config = json.loads(path.read_bytes())\n    except json.JSONDecodeError as e:\n        raise click.ClickException(f\"Error decoding config.json: {e}.\")\n\n    if not service_id:\n        click.confirm(\"Are you sure you want to remove all services?\", abort=True)\n        full_config[\"containers\"] = []\n    else:\n        # Ensure service ID exists\n        if not any(\n            service[\"id\"] == service_id for service in full_config[\"containers\"]\n        ):\n            raise click.ClickException(f\"Service '{service_id}' does not exist.\")\n\n        # Remove service and rewrite config.json\n        full_config[\"containers\"] = [\n            service\n            for service in full_config[\"containers\"]\n            if service[\"id\"] != service_id\n        ]\n\n    path.write_text(json.dumps(full_config, indent=4))\n    click.echo(\"Successfully removed service(s).\")\n</code></pre>"},{"location":"reference/infernet_cli/cli/docker/","title":"Module: <code>docker</code>","text":""},{"location":"reference/infernet_cli/cli/docker/#infernet_cli.cli.docker.destroy_services","title":"<code>destroy_services(dir)</code>","text":"<p>Stop and remove all service containers found in the config file.</p> Source code in <code>src/infernet_cli/cli/docker.py</code> <pre><code>def destroy_services(dir: str) -&gt; None:\n    \"\"\"Stop and remove all service containers found in the config file.\"\"\"\n\n    if not os.path.exists(f\"{dir}/config.json\"):\n        raise click.ClickException(f\"{dir}/config.json not found.\")\n\n    # Read container IDs from config.json\n    config = json.load(open(f\"{dir}/config.json\"))\n    container_ids = [container[\"id\"] for container in config[\"containers\"]]\n\n    # Force stop and remove containers\n    for container_id in container_ids:\n        # Stop and remove the container\n        run_command([\"docker\", \"stop\", container_id])\n        run_command([\"docker\", \"rm\", container_id])\n</code></pre>"},{"location":"reference/infernet_cli/cli/docker/#infernet_cli.cli.docker.docker_destroy","title":"<code>docker_destroy(dir)</code>","text":"<p>Destroy the containers.</p> Source code in <code>src/infernet_cli/cli/docker.py</code> <pre><code>def docker_destroy(dir: str) -&gt; None:\n    \"\"\"Destroy the containers.\"\"\"\n    try:\n        # Run the docker compose command without showing the output\n        result = run_command(\n            [\"docker\", \"compose\", \"-f\", f\"{dir}/docker-compose.yaml\", \"rm\", \"-f\"],\n        )\n\n        # Check if the command was successful\n        if result.returncode == 0:\n            click.echo(\"Containers destroyed successfully.\")\n        else:\n            click.echo(f\"Failed to destroy containers. Error: {result.stderr}\")\n\n    except Exception as e:\n        click.echo(f\"An error occurred while destroying containers: {e}\")\n</code></pre>"},{"location":"reference/infernet_cli/cli/docker/#infernet_cli.cli.docker.docker_start","title":"<code>docker_start(dir)</code>","text":"<p>Start the containers.</p> Source code in <code>src/infernet_cli/cli/docker.py</code> <pre><code>def docker_start(dir: str) -&gt; None:\n    \"\"\"Start the containers.\"\"\"\n    try:\n        # Run the docker compose command without showing the output\n        result = run_command(\n            [\"docker\", \"compose\", \"-f\", f\"{dir}/docker-compose.yaml\", \"up\", \"-d\"]\n        )\n\n        # Check if the command was successful\n        if result.returncode == 0:\n            click.echo(\"Containers started successfully.\")\n        else:\n            click.echo(f\"Failed to start containers. Error: {result.stderr}\")\n\n    except Exception as e:\n        click.echo(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"reference/infernet_cli/cli/docker/#infernet_cli.cli.docker.docker_stop","title":"<code>docker_stop(dir)</code>","text":"<p>Stop the containers.</p> Source code in <code>src/infernet_cli/cli/docker.py</code> <pre><code>def docker_stop(dir: str) -&gt; None:\n    \"\"\"Stop the containers.\"\"\"\n    try:\n        # Run the docker compose command without showing the output\n        result = run_command(\n            [\"docker\", \"compose\", \"-f\", f\"{dir}/docker-compose.yaml\", \"stop\"],\n        )\n\n        # Check if the command was successful\n        if result.returncode == 0:\n            click.echo(\"Containers stopped successfully.\")\n        else:\n            click.echo(f\"Failed to stop containers. Error: {result.stderr}\")\n\n    except Exception as e:\n        click.echo(f\"An error occurred while stopping containers: {e}\")\n</code></pre>"},{"location":"reference/infernet_cli/cli/docker/#infernet_cli.cli.docker.health_check","title":"<code>health_check(dir)</code>","text":"<p>Check if all containers are up and healthy.</p> Source code in <code>src/infernet_cli/cli/docker.py</code> <pre><code>def health_check(dir: str) -&gt; None:\n    \"\"\"Check if all containers are up and healthy.\"\"\"\n    try:\n        # Run `docker compose ps` to get the status of the containers\n        result = run_command(\n            [\n                \"docker\",\n                \"compose\",\n                \"-f\",\n                f\"{dir}/docker-compose.yaml\",\n                \"ps\",\n                \"-a\",\n                \"--format\",\n                \"json\",\n            ],\n        )\n        # Parse the result as JSON to inspect each container\n        containers = \",\".join(result.stdout.split(\"\\n\")[:-1])\n        containers_obj = json.loads(f\"[{containers}]\")\n\n        if len(containers_obj) == 0:\n            click.echo(\"No containers found.\")\n            return\n\n        # Check if the command was successful\n        if result.returncode != 0:\n            click.echo(f\"Failed to get the container status. Error: {result.stderr}\")\n            return\n\n        # Check if all containers are up and healthy\n        all_healthy = True\n        for container in containers_obj:\n            name = container[\"Service\"]\n            status = container[\"State\"]  # State includes \"running\", \"exited\", etc.\n\n            # Simply check if the container is running\n            if status != \"running\":\n                click.echo(f\"Container {name} is not running. Status: {status}.\")\n                all_healthy = False\n\n        if all_healthy:\n            click.echo(\"\\033[92mAll containers are up and running.\\033[0m\")\n        else:\n            click.echo(\"\\033[91mSome containers are not running.\\033[0m\")\n\n    except Exception as e:\n        click.echo(f\"An error occurred while checking container health: {e}\")\n</code></pre>"},{"location":"reference/infernet_cli/cli/docker/#infernet_cli.cli.docker.run_command","title":"<code>run_command(command)</code>","text":"<p>Helper function to run shell commands.</p> Source code in <code>src/infernet_cli/cli/docker.py</code> <pre><code>def run_command(command: list[str]) -&gt; subprocess.CompletedProcess[str]:\n    \"\"\"Helper function to run shell commands.\"\"\"\n    return subprocess.run(\n        command,\n        stdout=subprocess.PIPE,  # Suppress standard output\n        stderr=subprocess.PIPE,  # Suppress standard error\n        text=True,  # Get the output as text\n    )\n</code></pre>"},{"location":"reference/infernet_cli/cli/options/","title":"Module: <code>options</code>","text":""},{"location":"reference/infernet_cli/cli/options/#infernet_cli.cli.options.config_inputs_option","title":"<code>config_inputs_option(f)</code>","text":"<p>Decorator to specify the inputs for the configuration.</p> Source code in <code>src/infernet_cli/cli/options.py</code> <pre><code>def config_inputs_option(f: GenericCallable) -&gt; GenericCallable:\n    \"\"\"Decorator to specify the inputs for the configuration.\"\"\"\n    return click.option(\n        \"-i\",\n        \"--inputs\",\n        type=str,\n        required=False,\n        help=(\n            \"The inputs to fill in the recipe. Should be a JSON string of key-value \"\n            \"pairs. If not provided, the user will be prompted for inputs via the CLI.\"\n        ),\n        callback=parse_json,\n    )(f)\n</code></pre>"},{"location":"reference/infernet_cli/cli/options/#infernet_cli.cli.options.config_skip_option","title":"<code>config_skip_option(f)</code>","text":"<p>Decorator to skip optional inputs.</p> Source code in <code>src/infernet_cli/cli/options.py</code> <pre><code>def config_skip_option(f: GenericCallable) -&gt; GenericCallable:\n    \"\"\"Decorator to skip optional inputs.\"\"\"\n    return click.option(\n        \"--skip\",\n        is_flag=True,\n        default=False,\n        help=\"Skip optional inputs.\",\n    )(f)\n</code></pre>"},{"location":"reference/infernet_cli/cli/options/#infernet_cli.cli.options.deploy_dir_option","title":"<code>deploy_dir_option(f)</code>","text":"<p>Decorator to specify the deploy directory.</p> Source code in <code>src/infernet_cli/cli/options.py</code> <pre><code>def deploy_dir_option(f: GenericCallable) -&gt; GenericCallable:\n    \"\"\"Decorator to specify the deploy directory.\"\"\"\n    return click.option(\n        \"-d\",\n        \"--dir\",\n        type=str,\n        envvar=\"DEPLOY_DIR\",\n        required=False,\n        default=\"deploy\",\n        help=(\n            \"The directory to store and retrieve configuration files. \"\n            \"Can also set DEPLOY_DIR environment variable.\"\n        ),\n    )(f)\n</code></pre>"},{"location":"reference/infernet_cli/cli/options/#infernet_cli.cli.options.destroy_services_option","title":"<code>destroy_services_option(f)</code>","text":"<p>Decorator to force removal of service containers.</p> Source code in <code>src/infernet_cli/cli/options.py</code> <pre><code>def destroy_services_option(f: GenericCallable) -&gt; GenericCallable:\n    \"\"\"Decorator to force removal of service containers.\"\"\"\n    return click.option(\n        \"--services\",\n        is_flag=True,\n        help=\"Force removal of service containers. Destructive operation.\",\n    )(f)\n</code></pre>"},{"location":"reference/infernet_cli/cli/options/#infernet_cli.cli.options.parse_json","title":"<code>parse_json(ctx, param, value)</code>","text":"<p>Callback function to parse JSON string into a dictionary.</p> Source code in <code>src/infernet_cli/cli/options.py</code> <pre><code>def parse_json(ctx: Any, param: Any, value: Optional[str]) -&gt; Any:\n    \"\"\"Callback function to parse JSON string into a dictionary.\"\"\"\n    if value is None:\n        return None\n    try:\n        return json.loads(value)\n    except json.JSONDecodeError as e:\n        raise click.BadParameter(f\"Invalid JSON string: {e}\")\n</code></pre>"}]}