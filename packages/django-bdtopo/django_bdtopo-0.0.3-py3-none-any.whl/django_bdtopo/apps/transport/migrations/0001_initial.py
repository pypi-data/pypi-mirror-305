# Generated by Django 4.2.11 on 2024-10-24 16:01

import django.contrib.gis.db.models.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Aerodrome",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("categorie", models.CharField(blank=True, null=True)),
                ("nature", models.CharField(blank=True, null=True)),
                ("usage", models.CharField(blank=True, null=True)),
                ("toponyme", models.CharField(blank=True, null=True)),
                ("statut_du_toponyme", models.CharField(blank=True, null=True)),
                ("fictif", models.BooleanField(blank=True, null=True)),
                ("etat_de_l_objet", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "altitude",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=7, null=True
                    ),
                ),
                ("code_icao", models.CharField(blank=True, max_length=4, null=True)),
                ("code_iata", models.CharField(blank=True, max_length=3, null=True)),
            ],
            options={
                "db_table": "transport_aerodrome",
            },
        ),
        migrations.CreateModel(
            name="EquipementDeTransport",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, dim=3, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("nature", models.CharField(blank=True, null=True)),
                ("nature_detaillee", models.CharField(blank=True, null=True)),
                ("toponyme", models.CharField(blank=True, null=True)),
                ("statut_du_toponyme", models.CharField(blank=True, null=True)),
                ("importance", models.CharField(blank=True, null=True)),
                ("numero", models.CharField(blank=True, max_length=12, null=True)),
                ("fictif", models.BooleanField(blank=True, null=True)),
                ("etat_de_l_objet", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "methode_d_acquisition_altimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_altimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                ("identifiant_voie_ban", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "transport_equipement_de_transport",
            },
        ),
        migrations.CreateModel(
            name="ItineraireAutre",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.MultiLineStringField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("nature", models.CharField(blank=True, null=True)),
                ("nature_detaillee", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "transport_itineraire_autre",
            },
        ),
        migrations.CreateModel(
            name="NonCommunication",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                (
                    "lien_vers_troncon_entree",
                    models.CharField(blank=True, max_length=24, null=True),
                ),
                ("liens_vers_troncon_sortie", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "transport_non_communication",
            },
        ),
        migrations.CreateModel(
            name="PisteDAerodrome",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, dim=3, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("nature", models.CharField(blank=True, null=True)),
                ("fonction", models.CharField(blank=True, null=True)),
                ("etat_de_l_objet", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "methode_d_acquisition_altimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_altimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
            ],
            options={
                "db_table": "transport_piste_d_aerodrome",
            },
        ),
        migrations.CreateModel(
            name="PointDAcces",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                ("sens", models.CharField(blank=True, null=True)),
                ("mode", models.CharField(blank=True, null=True)),
                (
                    "lien_vers_point_d_interet",
                    models.CharField(blank=True, max_length=24, null=True),
                ),
            ],
            options={
                "db_table": "transport_point_d_acces",
            },
        ),
        migrations.CreateModel(
            name="PointDeRepere",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                ("route", models.CharField(blank=True, max_length=18, null=True)),
                ("numero", models.CharField(blank=True, max_length=5, null=True)),
                ("abscisse", models.IntegerField(blank=True, null=True)),
                ("ordre", models.FloatField(blank=True, null=True)),
                ("cote", models.CharField(blank=True, null=True)),
                ("statut", models.CharField(blank=True, null=True)),
                ("type_de_pr", models.CharField(blank=True, null=True)),
                ("libelle", models.CharField(blank=True, null=True)),
                ("identifiant_de_section", models.CharField(blank=True, null=True)),
                (
                    "code_insee_du_departement",
                    models.CharField(blank=True, max_length=3, null=True),
                ),
                (
                    "lien_vers_route_nommee",
                    models.CharField(blank=True, max_length=24, null=True),
                ),
                ("gestionnaire", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "transport_point_de_repere",
            },
        ),
        migrations.CreateModel(
            name="PointDuReseau",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, dim=3, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("nature", models.CharField(blank=True, null=True)),
                ("nature_detaillee", models.CharField(blank=True, null=True)),
                ("toponyme", models.CharField(blank=True, null=True)),
                ("statut_du_toponyme", models.CharField(blank=True, null=True)),
                ("etat_de_l_objet", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "methode_d_acquisition_altimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_altimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                ("identifiant_voie_ban", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "transport_point_du_reseau",
            },
        ),
        migrations.CreateModel(
            name="RouteNumeroteeOuNommee",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.MultiLineStringField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("type_de_route", models.CharField(blank=True, null=True)),
                ("numero", models.CharField(blank=True, max_length=16, null=True)),
                ("toponyme", models.CharField(blank=True, null=True)),
                ("statut_du_toponyme", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                ("gestionnaire", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "transport_route_numerotee_ou_nommee",
            },
        ),
        migrations.CreateModel(
            name="SectionDePointsDeRepere",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.LineStringField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("identifiant_de_section", models.CharField(blank=True, null=True)),
                ("numero_de_route", models.CharField(blank=True, null=True)),
                ("gestionnaire", models.CharField(blank=True, null=True)),
                (
                    "lien_vers_route_nommee",
                    models.CharField(blank=True, max_length=24, null=True),
                ),
                (
                    "code_insee_du_departement",
                    models.CharField(blank=True, max_length=3, null=True),
                ),
                ("cote", models.CharField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "transport_section_de_points_de_repere",
            },
        ),
        migrations.CreateModel(
            name="ToponymieTransport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                ("cleabs_de_l_objet", models.CharField(blank=True, null=True)),
                ("classe_de_l_objet", models.CharField(blank=True, null=True)),
                ("nature_de_l_objet", models.CharField(blank=True, null=True)),
                ("graphie_du_toponyme", models.CharField(blank=True, null=True)),
                ("source_du_toponyme", models.CharField(blank=True, null=True)),
                ("statut_du_toponyme", models.CharField(blank=True, null=True)),
                ("date_du_toponyme", models.DateField(blank=True, null=True)),
                ("langue_du_toponyme", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "transport_toponymie_transport",
            },
        ),
        migrations.CreateModel(
            name="TransportParCable",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.LineStringField(
                        blank=True, dim=3, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("nature", models.CharField(blank=True, null=True)),
                ("toponyme", models.CharField(blank=True, null=True)),
                ("statut_du_toponyme", models.CharField(blank=True, null=True)),
                ("importance", models.CharField(blank=True, null=True)),
                ("etat_de_l_objet", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "methode_d_acquisition_altimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_altimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
            ],
            options={
                "db_table": "transport_transport_par_cable",
            },
        ),
        migrations.CreateModel(
            name="TronconDeRoute",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.LineStringField(
                        blank=True, dim=3, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("nature", models.CharField(blank=True, null=True)),
                ("nom_collaboratif_gauche", models.CharField(blank=True, null=True)),
                ("nom_collaboratif_droite", models.CharField(blank=True, null=True)),
                ("importance", models.CharField(blank=True, null=True)),
                ("fictif", models.BooleanField(blank=True, null=True)),
                (
                    "position_par_rapport_au_sol",
                    models.CharField(blank=True, null=True),
                ),
                ("etat_de_l_objet", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "methode_d_acquisition_altimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_altimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                ("nombre_de_voies", models.IntegerField(blank=True, null=True)),
                (
                    "largeur_de_chaussee",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                ("itineraire_vert", models.BooleanField(blank=True, null=True)),
                ("prive", models.BooleanField(blank=True, null=True)),
                ("sens_de_circulation", models.CharField(blank=True, null=True)),
                ("reserve_aux_bus", models.CharField(blank=True, null=True)),
                ("urbain", models.BooleanField(blank=True, null=True)),
                ("vitesse_moyenne_vl", models.IntegerField(blank=True, null=True)),
                ("acces_vehicule_leger", models.CharField(blank=True, null=True)),
                ("acces_pieton", models.CharField(blank=True, null=True)),
                ("periode_de_fermeture", models.CharField(blank=True, null=True)),
                ("nature_de_la_restriction", models.CharField(blank=True, null=True)),
                (
                    "restriction_de_hauteur",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "restriction_de_poids_total",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "restriction_de_poids_par_essieu",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "restriction_de_largeur",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "restriction_de_longueur",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "matieres_dangereuses_interdites",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "borne_debut_gauche",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                (
                    "borne_debut_droite",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                (
                    "borne_fin_gauche",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                (
                    "borne_fin_droite",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                (
                    "insee_commune_gauche",
                    models.CharField(blank=True, max_length=5, null=True),
                ),
                (
                    "insee_commune_droite",
                    models.CharField(blank=True, max_length=5, null=True),
                ),
                ("alias_gauche", models.CharField(blank=True, null=True)),
                ("alias_droit", models.CharField(blank=True, null=True)),
                ("date_de_mise_en_service", models.DateField(blank=True, null=True)),
                (
                    "identifiant_voie_1_gauche",
                    models.CharField(blank=True, max_length=9, null=True),
                ),
                (
                    "identifiant_voie_1_droite",
                    models.CharField(blank=True, max_length=9, null=True),
                ),
                ("liens_vers_route_nommee", models.CharField(blank=True, null=True)),
                (
                    "liens_vers_itineraire_autre",
                    models.CharField(blank=True, null=True),
                ),
                ("cpx_numero", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "cpx_numero_route_europeenne",
                    models.CharField(blank=True, max_length=32, null=True),
                ),
                (
                    "cpx_classement_administratif",
                    models.CharField(blank=True, null=True),
                ),
                ("cpx_gestionnaire", models.CharField(blank=True, null=True)),
                ("cpx_toponyme_route_nommee", models.CharField(blank=True, null=True)),
                (
                    "cpx_toponyme_itineraire_cyclable",
                    models.CharField(blank=True, null=True),
                ),
                ("cpx_toponyme_voie_verte", models.CharField(blank=True, null=True)),
                (
                    "cpx_nature_itineraire_autre",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "cpx_toponyme_itineraire_autre",
                    models.CharField(blank=True, null=True),
                ),
                ("delestage", models.BooleanField(blank=True, null=True)),
                ("source_voie_ban_gauche", models.CharField(blank=True, null=True)),
                ("source_voie_ban_droite", models.CharField(blank=True, null=True)),
                ("nom_voie_ban_gauche", models.CharField(blank=True, null=True)),
                ("nom_voie_ban_droite", models.CharField(blank=True, null=True)),
                ("lieux_dits_ban_gauche", models.CharField(blank=True, null=True)),
                ("lieux_dits_ban_droite", models.CharField(blank=True, null=True)),
                (
                    "identifiant_voie_ban_gauche",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "identifiant_voie_ban_droite",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "sens_amenagement_cyclable_gauche",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "sens_amenagement_cyclable_droit",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "amenagement_cyclable_gauche",
                    models.CharField(blank=True, null=True),
                ),
                ("amenagement_cyclable_droit", models.CharField(blank=True, null=True)),
                ("aire_de_retournement_dfci", models.CharField(blank=True, null=True)),
                ("gabarit_dfci", models.CharField(blank=True, null=True)),
                ("impasse_dfci", models.BooleanField(blank=True, null=True)),
                ("nature_detaillee_dfci", models.CharField(blank=True, null=True)),
                (
                    "ouvrage_d_art_limitant_dfci",
                    models.BooleanField(blank=True, null=True),
                ),
                ("pente_maximale_dfci", models.IntegerField(blank=True, null=True)),
                ("piste_dfci", models.BooleanField(blank=True, null=True)),
                (
                    "piste_dfci_debroussaillee",
                    models.BooleanField(blank=True, null=True),
                ),
                ("piste_dfci_fosses", models.CharField(blank=True, null=True)),
                ("sens_de_circulation_dfci", models.CharField(blank=True, null=True)),
                ("tout_terrain_dfci", models.BooleanField(blank=True, null=True)),
                ("vitesse_moyenne_dfci", models.IntegerField(blank=True, null=True)),
                ("zone_de_croisement_dfci", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "transport_troncon_de_route",
            },
        ),
        migrations.CreateModel(
            name="TronconDeVoieFerree",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.LineStringField(
                        blank=True, dim=3, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("nature", models.CharField(blank=True, null=True)),
                (
                    "position_par_rapport_au_sol",
                    models.CharField(blank=True, null=True),
                ),
                ("etat_de_l_objet", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "methode_d_acquisition_altimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_altimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                ("electrifie", models.BooleanField(blank=True, null=True)),
                ("largeur", models.CharField(blank=True, null=True)),
                ("nombre_de_voies", models.IntegerField(blank=True, null=True)),
                ("usage", models.CharField(blank=True, null=True)),
                ("vitesse_maximale", models.IntegerField(blank=True, null=True)),
                (
                    "liens_vers_voie_ferree_nommee",
                    models.CharField(blank=True, null=True),
                ),
                ("cpx_toponyme", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "transport_troncon_de_voie_ferree",
            },
        ),
        migrations.CreateModel(
            name="VoieFerreeNommee",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.MultiLineStringField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("toponyme", models.CharField(blank=True, null=True)),
                ("statut_du_toponyme", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "transport_voie_ferree_nommee",
            },
        ),
        migrations.CreateModel(
            name="VoieNommee",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.MultiLineStringField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("id_pseudo_fpb", models.CharField(blank=True, null=True)),
                ("type_voie", models.CharField(blank=True, null=True)),
                ("type_d_adressage", models.CharField(blank=True, null=True)),
                ("nom_minuscule", models.CharField(blank=True, null=True)),
                ("nom_initial_troncon", models.CharField(blank=True, null=True)),
                ("mot_directeur", models.CharField(blank=True, null=True)),
                ("validite", models.BooleanField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("code_insee", models.CharField(blank=True, null=True)),
                ("code_postal", models.CharField(blank=True, null=True)),
                ("alias_initial_troncon", models.CharField(blank=True, null=True)),
                ("alias_minuscule", models.CharField(blank=True, null=True)),
                ("type_liaison", models.CharField(blank=True, null=True)),
                ("qualite_passage_maj_min", models.CharField(blank=True, null=True)),
                ("fiabilite", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "transport_voie_nommee",
            },
        ),
        migrations.CreateModel(
            name="VoieNommeeBeta",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.MultiLineStringField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("identifiant_voie_ban", models.CharField(blank=True, null=True)),
                ("nom_voie_ban", models.CharField(blank=True, null=True)),
                ("source_voie_ban", models.CharField(blank=True, null=True)),
                ("nom_collaboratif", models.CharField(blank=True, null=True)),
                ("type_voie", models.CharField(blank=True, null=True)),
                (
                    "mot_directeur",
                    models.CharField(blank=True, max_length=32, null=True),
                ),
                ("lieux_dits_ban", models.CharField(blank=True, null=True)),
                ("liens_vers_supports", models.CharField(blank=True, null=True)),
                (
                    "insee_communes_deleguees_ban",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "noms_communes_deleguees_ban",
                    models.CharField(blank=True, null=True),
                ),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                (
                    "nom_normalise",
                    models.CharField(blank=True, max_length=254, null=True),
                ),
            ],
            options={
                "db_table": "transport_voie_nommee_beta",
            },
        ),
    ]
