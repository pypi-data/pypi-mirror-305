# Generated by Django 4.2.11 on 2024-10-24 16:01

import django.contrib.gis.db.models.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BassinVersantTopographique",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "liens_vers_cours_d_eau_principal",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "code_bdcarthage",
                    models.CharField(blank=True, max_length=4, null=True),
                ),
                (
                    "code_du_bassin_hydrographique",
                    models.CharField(blank=True, max_length=2, null=True),
                ),
                (
                    "commentaire_sur_l_objet_hydro",
                    models.CharField(blank=True, null=True),
                ),
                ("origine", models.CharField(blank=True, null=True)),
                (
                    "bassin_fluvial",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                ("statut", models.CharField(blank=True, null=True)),
                (
                    "mode_d_obtention_des_coordonnees",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                (
                    "libelle_du_bassin_hydrographique",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                ("toponyme", models.CharField(blank=True, null=True)),
                (
                    "code_hydrographique",
                    models.CharField(blank=True, max_length=19, null=True),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
            ],
            options={
                "db_table": "hydrographie_bassin_versant_topographique",
            },
        ),
        migrations.CreateModel(
            name="CoursDEau",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.MultiLineStringField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                (
                    "code_hydrographique",
                    models.CharField(blank=True, max_length=19, null=True),
                ),
                ("toponyme", models.CharField(blank=True, null=True)),
                ("statut_du_toponyme", models.CharField(blank=True, null=True)),
                ("importance", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                ("statut", models.CharField(blank=True, null=True)),
                ("influence_de_la_maree", models.BooleanField(blank=True, null=True)),
                ("caractere_permanent", models.BooleanField(blank=True, null=True)),
                (
                    "commentaire_sur_l_objet_hydro",
                    models.CharField(blank=True, null=True),
                ),
            ],
            options={
                "db_table": "hydrographie_cours_d_eau",
            },
        ),
        migrations.CreateModel(
            name="DetailHydrographique",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                ("nature", models.CharField(blank=True, null=True)),
                ("nature_detaillee", models.CharField(blank=True, null=True)),
                ("persistance", models.CharField(blank=True, null=True)),
                ("toponyme", models.CharField(blank=True, null=True)),
                ("statut_du_toponyme", models.CharField(blank=True, null=True)),
                ("importance", models.CharField(blank=True, null=True)),
                ("etat_de_l_objet", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                ("identifiant_voie_ban", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "hydrographie_detail_hydrographique",
            },
        ),
        migrations.CreateModel(
            name="LimiteTerreMer",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.LineStringField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                (
                    "code_hydrographique",
                    models.CharField(blank=True, max_length=19, null=True),
                ),
                ("code_du_pays", models.CharField(blank=True, max_length=8, null=True)),
                ("type_de_limite", models.CharField(blank=True, null=True)),
                ("niveau", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "mode_d_obtention_des_coordonnees",
                    models.CharField(blank=True, null=True),
                ),
                ("statut", models.CharField(blank=True, null=True)),
                ("origine", models.CharField(blank=True, null=True)),
                (
                    "commentaire_sur_l_objet_hydro",
                    models.CharField(blank=True, null=True),
                ),
            ],
            options={
                "db_table": "hydrographie_limite_terre_mer",
            },
        ),
        migrations.CreateModel(
            name="NoeudHydrographique",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, dim=3, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                (
                    "code_hydrographique",
                    models.CharField(blank=True, max_length=19, null=True),
                ),
                ("code_du_pays", models.CharField(blank=True, max_length=8, null=True)),
                ("categorie", models.CharField(blank=True, null=True)),
                ("toponyme", models.CharField(blank=True, null=True)),
                ("statut_du_toponyme", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "methode_d_acquisition_altimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_altimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "mode_d_obtention_des_coordonnees",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "mode_d_obtention_de_l_altitude",
                    models.CharField(blank=True, null=True),
                ),
                ("statut", models.CharField(blank=True, null=True)),
                (
                    "commentaire_sur_l_objet_hydro",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "liens_vers_cours_d_eau_amont",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "liens_vers_cours_d_eau_aval",
                    models.CharField(blank=True, null=True),
                ),
            ],
            options={
                "db_table": "hydrographie_noeud_hydrographique",
            },
        ),
        migrations.CreateModel(
            name="PlanDEau",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                (
                    "code_hydrographique",
                    models.CharField(blank=True, max_length=19, null=True),
                ),
                ("nature", models.CharField(blank=True, null=True)),
                ("toponyme", models.CharField(blank=True, null=True)),
                ("statut_du_toponyme", models.CharField(blank=True, null=True)),
                ("importance", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                ("statut", models.CharField(blank=True, null=True)),
                ("influence_de_la_maree", models.BooleanField(blank=True, null=True)),
                ("caractere_permanent", models.BooleanField(blank=True, null=True)),
                (
                    "altitude_moyenne",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=7, null=True
                    ),
                ),
                (
                    "referentiel_de_l_altitude_moyenne",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "mode_d_obtention_de_l_altitude_moy",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_de_l_altitude_moyenne",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "hauteur_d_eau_maximale",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                (
                    "mode_d_obtention_de_la_hauteur",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "commentaire_sur_l_objet_hydro",
                    models.CharField(blank=True, null=True),
                ),
            ],
            options={
                "db_table": "hydrographie_plan_d_eau",
            },
        ),
        migrations.CreateModel(
            name="SurfaceHydrographique",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        blank=True, dim=3, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                (
                    "code_hydrographique",
                    models.CharField(blank=True, max_length=19, null=True),
                ),
                ("code_du_pays", models.CharField(blank=True, max_length=8, null=True)),
                ("nature", models.CharField(blank=True, null=True)),
                (
                    "position_par_rapport_au_sol",
                    models.CharField(blank=True, null=True),
                ),
                ("etat_de_l_objet", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "methode_d_acquisition_altimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_altimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "mode_d_obtention_des_coordonnees",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "mode_d_obtention_de_l_altitude",
                    models.CharField(blank=True, null=True),
                ),
                ("statut", models.CharField(blank=True, null=True)),
                ("persistance", models.CharField(blank=True, null=True)),
                ("salinite", models.BooleanField(blank=True, null=True)),
                ("origine", models.CharField(blank=True, null=True)),
                (
                    "commentaire_sur_l_objet_hydro",
                    models.CharField(blank=True, null=True),
                ),
                ("liens_vers_plan_d_eau", models.CharField(blank=True, null=True)),
                ("liens_vers_cours_d_eau", models.CharField(blank=True, null=True)),
                (
                    "lien_vers_entite_de_transition",
                    models.CharField(blank=True, max_length=24, null=True),
                ),
                ("cpx_toponyme_de_plan_d_eau", models.CharField(blank=True, null=True)),
                (
                    "cpx_toponyme_de_cours_d_eau",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "cpx_toponyme_d_entite_de_transition",
                    models.CharField(blank=True, null=True),
                ),
            ],
            options={
                "db_table": "hydrographie_surface_hydrographique",
            },
        ),
        migrations.CreateModel(
            name="ToponymieHydrographie",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=2154
                    ),
                ),
                ("cleabs_de_l_objet", models.CharField(blank=True, null=True)),
                ("classe_de_l_objet", models.CharField(blank=True, null=True)),
                ("nature_de_l_objet", models.CharField(blank=True, null=True)),
                ("graphie_du_toponyme", models.CharField(blank=True, null=True)),
                ("source_du_toponyme", models.CharField(blank=True, null=True)),
                ("statut_du_toponyme", models.CharField(blank=True, null=True)),
                ("date_du_toponyme", models.DateField(blank=True, null=True)),
                ("langue_du_toponyme", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "hydrographie_toponymie_hydrographie",
            },
        ),
        migrations.CreateModel(
            name="TronconHydrographique",
            fields=[
                (
                    "geometrie",
                    django.contrib.gis.db.models.fields.LineStringField(
                        blank=True, dim=3, null=True, srid=2154
                    ),
                ),
                (
                    "cleabs",
                    models.CharField(max_length=24, primary_key=True, serialize=False),
                ),
                (
                    "code_hydrographique",
                    models.CharField(blank=True, max_length=19, null=True),
                ),
                ("code_du_pays", models.CharField(blank=True, max_length=8, null=True)),
                ("nature", models.CharField(blank=True, null=True)),
                ("fictif", models.BooleanField(blank=True, null=True)),
                (
                    "position_par_rapport_au_sol",
                    models.CharField(blank=True, null=True),
                ),
                ("etat_de_l_objet", models.CharField(blank=True, null=True)),
                ("date_creation", models.DateTimeField(blank=True, null=True)),
                ("date_modification", models.DateTimeField(blank=True, null=True)),
                ("date_d_apparition", models.DateField(blank=True, null=True)),
                ("date_de_confirmation", models.DateField(blank=True, null=True)),
                ("sources", models.CharField(blank=True, null=True)),
                ("identifiants_sources", models.CharField(blank=True, null=True)),
                (
                    "methode_d_acquisition_planimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_planimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "methode_d_acquisition_altimetrique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "precision_altimetrique",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=5, null=True
                    ),
                ),
                (
                    "mode_d_obtention_des_coordonnees",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "mode_d_obtention_de_l_altitude",
                    models.CharField(blank=True, null=True),
                ),
                ("statut", models.CharField(blank=True, null=True)),
                ("persistance", models.CharField(blank=True, null=True)),
                ("fosse", models.BooleanField(blank=True, null=True)),
                ("navigabilite", models.BooleanField(blank=True, null=True)),
                ("salinite", models.BooleanField(blank=True, null=True)),
                (
                    "numero_d_ordre",
                    models.CharField(blank=True, max_length=2, null=True),
                ),
                (
                    "strategie_de_classement",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                ("origine", models.CharField(blank=True, null=True)),
                (
                    "perimetre_d_utilisation_ou_origine",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                ("sens_de_l_ecoulement", models.CharField(blank=True, null=True)),
                (
                    "reseau_principal_coulant",
                    models.BooleanField(blank=True, null=True),
                ),
                ("delimitation", models.BooleanField(blank=True, null=True)),
                ("classe_de_largeur", models.CharField(blank=True, null=True)),
                ("type_de_bras", models.CharField(blank=True, null=True)),
                (
                    "commentaire_sur_l_objet_hydro",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "code_du_cours_d_eau_bdcarthage",
                    models.CharField(blank=True, max_length=8, null=True),
                ),
                ("liens_vers_cours_d_eau", models.CharField(blank=True, null=True)),
                (
                    "liens_vers_surface_hydrographique",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "lien_vers_entite_de_transition",
                    models.CharField(blank=True, max_length=24, null=True),
                ),
                (
                    "cpx_toponyme_de_cours_d_eau",
                    models.CharField(blank=True, null=True),
                ),
                (
                    "cpx_toponyme_d_entite_de_transition",
                    models.CharField(blank=True, null=True),
                ),
            ],
            options={
                "db_table": "hydrographie_troncon_hydrographique",
            },
        ),
    ]
