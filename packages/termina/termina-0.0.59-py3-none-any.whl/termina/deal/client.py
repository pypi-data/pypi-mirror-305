# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.status import Status
from ..types.priority import Priority
from ..core.request_options import RequestOptions
from ..types.deal_with_files_response import DealWithFilesResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.list_deals_response import ListDealsResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DealClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        group_id: int,
        *,
        name: str,
        round_name: str,
        status: Status,
        company_id: int,
        notes: typing.Optional[str] = OMIT,
        priority: typing.Optional[Priority] = OMIT,
        round_amount: typing.Optional[int] = OMIT,
        round_target: typing.Optional[int] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealWithFilesResponse:
        """
        Create a new deal.

        Parameters
        ----------
        group_id : int

        name : str

        round_name : str
            The name of the round

        status : Status
            The status of the deal

        company_id : int

        notes : typing.Optional[str]
            Notes about the deal

        priority : typing.Optional[Priority]
            The priority of the deal

        round_amount : typing.Optional[int]
            The dollar amount to be raised of the round

        round_target : typing.Optional[int]
            The target post-money dollar amount of the round

        tags : typing.Optional[typing.Sequence[str]]
            The tags associated with the deal

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealWithFilesResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.create(
            group_id=1,
            name="name",
            round_name="round_name",
            status="queued",
            company_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal",
            method="POST",
            json={
                "name": name,
                "round_name": round_name,
                "status": status,
                "notes": notes,
                "priority": priority,
                "round_amount": round_amount,
                "round_target": round_target,
                "tags": tags,
                "company_id": company_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DealWithFilesResponse,
                    parse_obj_as(
                        type_=DealWithFilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDealsResponse:
        """
        Get all deals for a group.

        Parameters
        ----------
        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDealsResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.list(
            group_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/all",
            method="GET",
            params={
                "sort_by": sort_by,
                "sort_order": sort_order,
                "page": page,
                "page_size": page_size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListDealsResponse,
                    parse_obj_as(
                        type_=ListDealsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search(
        self,
        group_id: int,
        *,
        name: typing.Optional[str] = None,
        round_name: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        tags: typing.Optional[str] = None,
        company_name: typing.Optional[str] = None,
        company_domain: typing.Optional[str] = None,
        ignore_archived: typing.Optional[bool] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDealsResponse:
        """
        Search deals within a group.

        Parameters
        ----------
        group_id : int

        name : typing.Optional[str]

        round_name : typing.Optional[str]

        notes : typing.Optional[str]

        tags : typing.Optional[str]

        company_name : typing.Optional[str]

        company_domain : typing.Optional[str]

        ignore_archived : typing.Optional[bool]

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDealsResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.search(
            group_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/search",
            method="GET",
            params={
                "name": name,
                "round_name": round_name,
                "notes": notes,
                "tags": tags,
                "company_name": company_name,
                "company_domain": company_domain,
                "ignore_archived": ignore_archived,
                "sort_by": sort_by,
                "sort_order": sort_order,
                "page": page,
                "page_size": page_size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListDealsResponse,
                    parse_obj_as(
                        type_=ListDealsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DealWithFilesResponse:
        """
        Retrieve a deal by its ID.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealWithFilesResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.get(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DealWithFilesResponse,
                    parse_obj_as(
                        type_=DealWithFilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        group_id: int,
        deal_id: int,
        *,
        name: typing.Optional[str] = OMIT,
        round_name: typing.Optional[str] = OMIT,
        status: typing.Optional[Status] = OMIT,
        notes: typing.Optional[str] = OMIT,
        priority: typing.Optional[Priority] = OMIT,
        round_amount: typing.Optional[int] = OMIT,
        round_target: typing.Optional[int] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        company_id: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealWithFilesResponse:
        """
        Update a deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        name : typing.Optional[str]

        round_name : typing.Optional[str]

        status : typing.Optional[Status]

        notes : typing.Optional[str]
            Notes about the deal

        priority : typing.Optional[Priority]
            The priority of the deal

        round_amount : typing.Optional[int]
            The dollar amount to be raised of the round

        round_target : typing.Optional[int]
            The target post-money dollar amount of the round

        tags : typing.Optional[typing.Sequence[str]]
            The tags associated with the deal

        company_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealWithFilesResponse
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.update(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}",
            method="PUT",
            json={
                "name": name,
                "round_name": round_name,
                "status": status,
                "notes": notes,
                "priority": priority,
                "round_amount": round_amount,
                "round_target": round_target,
                "tags": tags,
                "company_id": company_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DealWithFilesResponse,
                    parse_obj_as(
                        type_=DealWithFilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self,
        deal_id: int,
        group_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, str]:
        """
        Delete a deal.

        Parameters
        ----------
        deal_id : int

        group_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, str]
            Successful Response

        Examples
        --------
        from termina import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.deal.delete(
            deal_id=1,
            group_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}",
            method="DELETE",
            params={
                "archive": archive,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Dict[str, str],
                    parse_obj_as(
                        type_=typing.Dict[str, str],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDealClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        group_id: int,
        *,
        name: str,
        round_name: str,
        status: Status,
        company_id: int,
        notes: typing.Optional[str] = OMIT,
        priority: typing.Optional[Priority] = OMIT,
        round_amount: typing.Optional[int] = OMIT,
        round_target: typing.Optional[int] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealWithFilesResponse:
        """
        Create a new deal.

        Parameters
        ----------
        group_id : int

        name : str

        round_name : str
            The name of the round

        status : Status
            The status of the deal

        company_id : int

        notes : typing.Optional[str]
            Notes about the deal

        priority : typing.Optional[Priority]
            The priority of the deal

        round_amount : typing.Optional[int]
            The dollar amount to be raised of the round

        round_target : typing.Optional[int]
            The target post-money dollar amount of the round

        tags : typing.Optional[typing.Sequence[str]]
            The tags associated with the deal

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealWithFilesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.create(
                group_id=1,
                name="name",
                round_name="round_name",
                status="queued",
                company_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal",
            method="POST",
            json={
                "name": name,
                "round_name": round_name,
                "status": status,
                "notes": notes,
                "priority": priority,
                "round_amount": round_amount,
                "round_target": round_target,
                "tags": tags,
                "company_id": company_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DealWithFilesResponse,
                    parse_obj_as(
                        type_=DealWithFilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDealsResponse:
        """
        Get all deals for a group.

        Parameters
        ----------
        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDealsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.list(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/all",
            method="GET",
            params={
                "sort_by": sort_by,
                "sort_order": sort_order,
                "page": page,
                "page_size": page_size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListDealsResponse,
                    parse_obj_as(
                        type_=ListDealsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search(
        self,
        group_id: int,
        *,
        name: typing.Optional[str] = None,
        round_name: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        tags: typing.Optional[str] = None,
        company_name: typing.Optional[str] = None,
        company_domain: typing.Optional[str] = None,
        ignore_archived: typing.Optional[bool] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDealsResponse:
        """
        Search deals within a group.

        Parameters
        ----------
        group_id : int

        name : typing.Optional[str]

        round_name : typing.Optional[str]

        notes : typing.Optional[str]

        tags : typing.Optional[str]

        company_name : typing.Optional[str]

        company_domain : typing.Optional[str]

        ignore_archived : typing.Optional[bool]

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDealsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.search(
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/search",
            method="GET",
            params={
                "name": name,
                "round_name": round_name,
                "notes": notes,
                "tags": tags,
                "company_name": company_name,
                "company_domain": company_domain,
                "ignore_archived": ignore_archived,
                "sort_by": sort_by,
                "sort_order": sort_order,
                "page": page,
                "page_size": page_size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListDealsResponse,
                    parse_obj_as(
                        type_=ListDealsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DealWithFilesResponse:
        """
        Retrieve a deal by its ID.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealWithFilesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.get(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DealWithFilesResponse,
                    parse_obj_as(
                        type_=DealWithFilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        group_id: int,
        deal_id: int,
        *,
        name: typing.Optional[str] = OMIT,
        round_name: typing.Optional[str] = OMIT,
        status: typing.Optional[Status] = OMIT,
        notes: typing.Optional[str] = OMIT,
        priority: typing.Optional[Priority] = OMIT,
        round_amount: typing.Optional[int] = OMIT,
        round_target: typing.Optional[int] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        company_id: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealWithFilesResponse:
        """
        Update a deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        name : typing.Optional[str]

        round_name : typing.Optional[str]

        status : typing.Optional[Status]

        notes : typing.Optional[str]
            Notes about the deal

        priority : typing.Optional[Priority]
            The priority of the deal

        round_amount : typing.Optional[int]
            The dollar amount to be raised of the round

        round_target : typing.Optional[int]
            The target post-money dollar amount of the round

        tags : typing.Optional[typing.Sequence[str]]
            The tags associated with the deal

        company_id : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealWithFilesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.update(
                group_id=1,
                deal_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}",
            method="PUT",
            json={
                "name": name,
                "round_name": round_name,
                "status": status,
                "notes": notes,
                "priority": priority,
                "round_amount": round_amount,
                "round_target": round_target,
                "tags": tags,
                "company_id": company_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DealWithFilesResponse,
                    parse_obj_as(
                        type_=DealWithFilesResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self,
        deal_id: int,
        group_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, str]:
        """
        Delete a deal.

        Parameters
        ----------
        deal_id : int

        group_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, str]
            Successful Response

        Examples
        --------
        import asyncio

        from termina import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deal.delete(
                deal_id=1,
                group_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}",
            method="DELETE",
            params={
                "archive": archive,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Dict[str, str],
                    parse_obj_as(
                        type_=typing.Dict[str, str],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
