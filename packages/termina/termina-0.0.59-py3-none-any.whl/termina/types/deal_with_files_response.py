# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
from .status import Status
import typing
from .priority import Priority
import datetime as dt
from .company_response import CompanyResponse
from .file_response import FileResponse
from .deal_data_availablity_response import DealDataAvailablityResponse
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class DealWithFilesResponse(UniversalBaseModel):
    name: str
    round_name: str = pydantic.Field()
    """
    The name of the round
    """

    status: Status = pydantic.Field()
    """
    The status of the deal
    """

    notes: typing.Optional[str] = pydantic.Field(default=None)
    """
    Notes about the deal
    """

    priority: typing.Optional[Priority] = pydantic.Field(default=None)
    """
    The priority of the deal
    """

    round_amount: typing.Optional[int] = pydantic.Field(default=None)
    """
    The dollar amount to be raised of the round
    """

    round_target: typing.Optional[int] = pydantic.Field(default=None)
    """
    The target post-money dollar amount of the round
    """

    tags: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    The tags associated with the deal
    """

    id: int
    created_at: typing.Optional[dt.datetime] = None
    updated_at: typing.Optional[dt.datetime] = None
    is_archived: typing.Optional[bool] = None
    company: CompanyResponse
    files: typing.Optional[typing.List[FileResponse]] = None
    data: typing.Optional[DealDataAvailablityResponse] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
