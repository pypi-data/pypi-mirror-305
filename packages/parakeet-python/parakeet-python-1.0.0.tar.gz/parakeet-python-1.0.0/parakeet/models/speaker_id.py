# coding: utf-8

"""
    ParakeetSDK

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from parakeet.configuration import Configuration


class SpeakerId(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    FEMALE_TSUKUYOMI = "female_tsukuyomi"
    FEMALE_014 = "female_014"
    FEMALE_019 = "female_019"
    FEMALE_024 = "female_024"
    FEMALE_030 = "female_030"
    FEMALE_039 = "female_039"
    FEMALE_062 = "female_062"
    FEMALE_067 = "female_067"
    FEMALE_085 = "female_085"
    FEMALE_094 = "female_094"
    MALE_001 = "male_001"
    MALE_009 = "male_009"
    MALE_032 = "male_032"

    allowable_values = [FEMALE_TSUKUYOMI, FEMALE_014, FEMALE_019, FEMALE_024, FEMALE_030, FEMALE_039, FEMALE_062, FEMALE_067, FEMALE_085, FEMALE_094, MALE_001, MALE_009, MALE_032]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """SpeakerId - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpeakerId):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpeakerId):
            return True

        return self.to_dict() != other.to_dict()
