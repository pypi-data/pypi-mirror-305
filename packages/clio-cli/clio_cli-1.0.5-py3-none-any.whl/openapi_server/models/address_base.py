# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddressBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, street: str=None, city: str=None, province: str=None, postal_code: str=None, country: str=None, name: str=None, created_at: datetime=None, updated_at: datetime=None, primary: bool=None):
        """AddressBase - a model defined in OpenAPI

        :param id: The id of this AddressBase.
        :param etag: The etag of this AddressBase.
        :param street: The street of this AddressBase.
        :param city: The city of this AddressBase.
        :param province: The province of this AddressBase.
        :param postal_code: The postal_code of this AddressBase.
        :param country: The country of this AddressBase.
        :param name: The name of this AddressBase.
        :param created_at: The created_at of this AddressBase.
        :param updated_at: The updated_at of this AddressBase.
        :param primary: The primary of this AddressBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'street': str,
            'city': str,
            'province': str,
            'postal_code': str,
            'country': str,
            'name': str,
            'created_at': datetime,
            'updated_at': datetime,
            'primary': bool
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'street': 'street',
            'city': 'city',
            'province': 'province',
            'postal_code': 'postal_code',
            'country': 'country',
            'name': 'name',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'primary': 'primary'
        }

        self._id = id
        self._etag = etag
        self._street = street
        self._city = city
        self._province = province
        self._postal_code = postal_code
        self._country = country
        self._name = name
        self._created_at = created_at
        self._updated_at = updated_at
        self._primary = primary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddressBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address_base of this AddressBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AddressBase.

        Unique identifier for the *Address*

        :return: The id of this AddressBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AddressBase.

        Unique identifier for the *Address*

        :param id: The id of this AddressBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this AddressBase.

        ETag for the *Address*

        :return: The etag of this AddressBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this AddressBase.

        ETag for the *Address*

        :param etag: The etag of this AddressBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def street(self):
        """Gets the street of this AddressBase.

        Street of the *Address*

        :return: The street of this AddressBase.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this AddressBase.

        Street of the *Address*

        :param street: The street of this AddressBase.
        :type street: str
        """

        self._street = street

    @property
    def city(self):
        """Gets the city of this AddressBase.

        City of the *Address*

        :return: The city of this AddressBase.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressBase.

        City of the *Address*

        :param city: The city of this AddressBase.
        :type city: str
        """

        self._city = city

    @property
    def province(self):
        """Gets the province of this AddressBase.

        Province or state of the *Address*

        :return: The province of this AddressBase.
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this AddressBase.

        Province or state of the *Address*

        :param province: The province of this AddressBase.
        :type province: str
        """

        self._province = province

    @property
    def postal_code(self):
        """Gets the postal_code of this AddressBase.

        Postal code of the *Address*

        :return: The postal_code of this AddressBase.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AddressBase.

        Postal code of the *Address*

        :param postal_code: The postal_code of this AddressBase.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this AddressBase.

        Country of the *Address*

        :return: The country of this AddressBase.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressBase.

        Country of the *Address*

        :param country: The country of this AddressBase.
        :type country: str
        """

        self._country = country

    @property
    def name(self):
        """Gets the name of this AddressBase.

        The name of the *Address*

        :return: The name of this AddressBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddressBase.

        The name of the *Address*

        :param name: The name of this AddressBase.
        :type name: str
        """
        allowed_values = ["Work", "Home", "Billing", "Other"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this AddressBase.

        The time the *Address* was created (as a ISO-8601 timestamp)

        :return: The created_at of this AddressBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AddressBase.

        The time the *Address* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this AddressBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AddressBase.

        The time the *Address* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this AddressBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AddressBase.

        The time the *Address* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this AddressBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def primary(self):
        """Gets the primary of this AddressBase.

        Whether it is the default for this contact

        :return: The primary of this AddressBase.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this AddressBase.

        Whether it is the default for this contact

        :param primary: The primary of this AddressBase.
        :type primary: bool
        """

        self._primary = primary
