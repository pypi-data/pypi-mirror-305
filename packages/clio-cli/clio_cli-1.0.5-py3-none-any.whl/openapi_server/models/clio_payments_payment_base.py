# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClioPaymentsPaymentBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, confirmation_number: str=None, created_at: datetime=None, currency: str=None, deposit_as_revenue: bool=None, description: str=None, email_address: str=None, id: int=None, state: str=None, updated_at: datetime=None):
        """ClioPaymentsPaymentBase - a model defined in OpenAPI

        :param amount: The amount of this ClioPaymentsPaymentBase.
        :param confirmation_number: The confirmation_number of this ClioPaymentsPaymentBase.
        :param created_at: The created_at of this ClioPaymentsPaymentBase.
        :param currency: The currency of this ClioPaymentsPaymentBase.
        :param deposit_as_revenue: The deposit_as_revenue of this ClioPaymentsPaymentBase.
        :param description: The description of this ClioPaymentsPaymentBase.
        :param email_address: The email_address of this ClioPaymentsPaymentBase.
        :param id: The id of this ClioPaymentsPaymentBase.
        :param state: The state of this ClioPaymentsPaymentBase.
        :param updated_at: The updated_at of this ClioPaymentsPaymentBase.
        """
        self.openapi_types = {
            'amount': float,
            'confirmation_number': str,
            'created_at': datetime,
            'currency': str,
            'deposit_as_revenue': bool,
            'description': str,
            'email_address': str,
            'id': int,
            'state': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'amount': 'amount',
            'confirmation_number': 'confirmation_number',
            'created_at': 'created_at',
            'currency': 'currency',
            'deposit_as_revenue': 'deposit_as_revenue',
            'description': 'description',
            'email_address': 'email_address',
            'id': 'id',
            'state': 'state',
            'updated_at': 'updated_at'
        }

        self._amount = amount
        self._confirmation_number = confirmation_number
        self._created_at = created_at
        self._currency = currency
        self._deposit_as_revenue = deposit_as_revenue
        self._description = description
        self._email_address = email_address
        self._id = id
        self._state = state
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClioPaymentsPaymentBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClioPaymentsPayment_base of this ClioPaymentsPaymentBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ClioPaymentsPaymentBase.

        The amount of the payment.

        :return: The amount of this ClioPaymentsPaymentBase.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ClioPaymentsPaymentBase.

        The amount of the payment.

        :param amount: The amount of this ClioPaymentsPaymentBase.
        :type amount: float
        """

        self._amount = amount

    @property
    def confirmation_number(self):
        """Gets the confirmation_number of this ClioPaymentsPaymentBase.

        The confirmation number of the payment.

        :return: The confirmation_number of this ClioPaymentsPaymentBase.
        :rtype: str
        """
        return self._confirmation_number

    @confirmation_number.setter
    def confirmation_number(self, confirmation_number):
        """Sets the confirmation_number of this ClioPaymentsPaymentBase.

        The confirmation number of the payment.

        :param confirmation_number: The confirmation_number of this ClioPaymentsPaymentBase.
        :type confirmation_number: str
        """

        self._confirmation_number = confirmation_number

    @property
    def created_at(self):
        """Gets the created_at of this ClioPaymentsPaymentBase.

        The time the *ClioPaymentsPayment* was created (as a ISO-8601 timestamp)

        :return: The created_at of this ClioPaymentsPaymentBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ClioPaymentsPaymentBase.

        The time the *ClioPaymentsPayment* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this ClioPaymentsPaymentBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this ClioPaymentsPaymentBase.

        The currency the payment was processed in.

        :return: The currency of this ClioPaymentsPaymentBase.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ClioPaymentsPaymentBase.

        The currency the payment was processed in.

        :param currency: The currency of this ClioPaymentsPaymentBase.
        :type currency: str
        """

        self._currency = currency

    @property
    def deposit_as_revenue(self):
        """Gets the deposit_as_revenue of this ClioPaymentsPaymentBase.

        Whether the payment was deposited as revenue.

        :return: The deposit_as_revenue of this ClioPaymentsPaymentBase.
        :rtype: bool
        """
        return self._deposit_as_revenue

    @deposit_as_revenue.setter
    def deposit_as_revenue(self, deposit_as_revenue):
        """Sets the deposit_as_revenue of this ClioPaymentsPaymentBase.

        Whether the payment was deposited as revenue.

        :param deposit_as_revenue: The deposit_as_revenue of this ClioPaymentsPaymentBase.
        :type deposit_as_revenue: bool
        """

        self._deposit_as_revenue = deposit_as_revenue

    @property
    def description(self):
        """Gets the description of this ClioPaymentsPaymentBase.

        The description of the payment.

        :return: The description of this ClioPaymentsPaymentBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClioPaymentsPaymentBase.

        The description of the payment.

        :param description: The description of this ClioPaymentsPaymentBase.
        :type description: str
        """

        self._description = description

    @property
    def email_address(self):
        """Gets the email_address of this ClioPaymentsPaymentBase.

        The email address of the client.

        :return: The email_address of this ClioPaymentsPaymentBase.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this ClioPaymentsPaymentBase.

        The email address of the client.

        :param email_address: The email_address of this ClioPaymentsPaymentBase.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def id(self):
        """Gets the id of this ClioPaymentsPaymentBase.

        Unique identifier for the *ClioPaymentsPayment*

        :return: The id of this ClioPaymentsPaymentBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClioPaymentsPaymentBase.

        Unique identifier for the *ClioPaymentsPayment*

        :param id: The id of this ClioPaymentsPaymentBase.
        :type id: int
        """

        self._id = id

    @property
    def state(self):
        """Gets the state of this ClioPaymentsPaymentBase.

        The state of the payment (authorized, completed, failed, etc).

        :return: The state of this ClioPaymentsPaymentBase.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClioPaymentsPaymentBase.

        The state of the payment (authorized, completed, failed, etc).

        :param state: The state of this ClioPaymentsPaymentBase.
        :type state: str
        """
        allowed_values = ["pending", "authorized", "completed", "voided", "failed", "canceled", "requires_confirmation", "completed_requiring_allocation"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this ClioPaymentsPaymentBase.

        The time the *ClioPaymentsPayment* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this ClioPaymentsPaymentBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ClioPaymentsPaymentBase.

        The time the *ClioPaymentsPayment* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this ClioPaymentsPaymentBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
