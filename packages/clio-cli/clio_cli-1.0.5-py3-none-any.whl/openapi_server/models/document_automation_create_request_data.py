# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_automation_create_request_data_document_template import DocumentAutomationCreateRequestDataDocumentTemplate
from openapi_server.models.document_automation_create_request_data_matter import DocumentAutomationCreateRequestDataMatter
from openapi_server import util


class DocumentAutomationCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_template: DocumentAutomationCreateRequestDataDocumentTemplate=None, filename: str=None, formats: List[str]=None, matter: DocumentAutomationCreateRequestDataMatter=None):
        """DocumentAutomationCreateRequestData - a model defined in OpenAPI

        :param document_template: The document_template of this DocumentAutomationCreateRequestData.
        :param filename: The filename of this DocumentAutomationCreateRequestData.
        :param formats: The formats of this DocumentAutomationCreateRequestData.
        :param matter: The matter of this DocumentAutomationCreateRequestData.
        """
        self.openapi_types = {
            'document_template': DocumentAutomationCreateRequestDataDocumentTemplate,
            'filename': str,
            'formats': List[str],
            'matter': DocumentAutomationCreateRequestDataMatter
        }

        self.attribute_map = {
            'document_template': 'document_template',
            'filename': 'filename',
            'formats': 'formats',
            'matter': 'matter'
        }

        self._document_template = document_template
        self._filename = filename
        self._formats = formats
        self._matter = matter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentAutomationCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentAutomation_create_request_data of this DocumentAutomationCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_template(self):
        """Gets the document_template of this DocumentAutomationCreateRequestData.


        :return: The document_template of this DocumentAutomationCreateRequestData.
        :rtype: DocumentAutomationCreateRequestDataDocumentTemplate
        """
        return self._document_template

    @document_template.setter
    def document_template(self, document_template):
        """Sets the document_template of this DocumentAutomationCreateRequestData.


        :param document_template: The document_template of this DocumentAutomationCreateRequestData.
        :type document_template: DocumentAutomationCreateRequestDataDocumentTemplate
        """
        if document_template is None:
            raise ValueError("Invalid value for `document_template`, must not be `None`")

        self._document_template = document_template

    @property
    def filename(self):
        """Gets the filename of this DocumentAutomationCreateRequestData.

        The filename the generated document should have.

        :return: The filename of this DocumentAutomationCreateRequestData.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this DocumentAutomationCreateRequestData.

        The filename the generated document should have.

        :param filename: The filename of this DocumentAutomationCreateRequestData.
        :type filename: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")

        self._filename = filename

    @property
    def formats(self):
        """Gets the formats of this DocumentAutomationCreateRequestData.

        The formats the document should be generated as. It can either be generated as a PDF and/or in whatever type the document template is.

        :return: The formats of this DocumentAutomationCreateRequestData.
        :rtype: List[str]
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this DocumentAutomationCreateRequestData.

        The formats the document should be generated as. It can either be generated as a PDF and/or in whatever type the document template is.

        :param formats: The formats of this DocumentAutomationCreateRequestData.
        :type formats: List[str]
        """
        allowed_values = ["pdf", "original"]  # noqa: E501
        if not set(formats).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `formats` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(formats) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._formats = formats

    @property
    def matter(self):
        """Gets the matter of this DocumentAutomationCreateRequestData.


        :return: The matter of this DocumentAutomationCreateRequestData.
        :rtype: DocumentAutomationCreateRequestDataMatter
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this DocumentAutomationCreateRequestData.


        :param matter: The matter of this DocumentAutomationCreateRequestData.
        :type matter: DocumentAutomationCreateRequestDataMatter
        """
        if matter is None:
            raise ValueError("Invalid value for `matter`, must not be `None`")

        self._matter = matter
