# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PracticeAreaBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, created_at: datetime=None, updated_at: datetime=None, name: str=None, category: str=None, code: str=None):
        """PracticeAreaBase - a model defined in OpenAPI

        :param id: The id of this PracticeAreaBase.
        :param etag: The etag of this PracticeAreaBase.
        :param created_at: The created_at of this PracticeAreaBase.
        :param updated_at: The updated_at of this PracticeAreaBase.
        :param name: The name of this PracticeAreaBase.
        :param category: The category of this PracticeAreaBase.
        :param code: The code of this PracticeAreaBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'created_at': datetime,
            'updated_at': datetime,
            'name': str,
            'category': str,
            'code': str
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'name': 'name',
            'category': 'category',
            'code': 'code'
        }

        self._id = id
        self._etag = etag
        self._created_at = created_at
        self._updated_at = updated_at
        self._name = name
        self._category = category
        self._code = code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PracticeAreaBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PracticeArea_base of this PracticeAreaBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PracticeAreaBase.

        Unique identifier for the *PracticeArea*

        :return: The id of this PracticeAreaBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PracticeAreaBase.

        Unique identifier for the *PracticeArea*

        :param id: The id of this PracticeAreaBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this PracticeAreaBase.

        ETag for the *PracticeArea*

        :return: The etag of this PracticeAreaBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this PracticeAreaBase.

        ETag for the *PracticeArea*

        :param etag: The etag of this PracticeAreaBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def created_at(self):
        """Gets the created_at of this PracticeAreaBase.

        The time the *PracticeArea* was created (as a ISO-8601 timestamp)

        :return: The created_at of this PracticeAreaBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PracticeAreaBase.

        The time the *PracticeArea* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this PracticeAreaBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PracticeAreaBase.

        The time the *PracticeArea* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this PracticeAreaBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PracticeAreaBase.

        The time the *PracticeArea* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this PracticeAreaBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def name(self):
        """Gets the name of this PracticeAreaBase.

        The name of the *PracticeArea*

        :return: The name of this PracticeAreaBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PracticeAreaBase.

        The name of the *PracticeArea*

        :param name: The name of this PracticeAreaBase.
        :type name: str
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this PracticeAreaBase.

        The practice area category associated with the *PracticeArea* 

        :return: The category of this PracticeAreaBase.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PracticeAreaBase.

        The practice area category associated with the *PracticeArea* 

        :param category: The category of this PracticeAreaBase.
        :type category: str
        """
        allowed_values = ["administrative", "admiralty_and_maritime", "anti_trust_and_competition", "appellate", "banking_and_finance", "bankruptcy", "business_formation_and_compliance", "civil_litigation", "civil_rights_and_constitutional", "collections_and_debt", "commercial_and_sale_of_goods", "commercial_litigation", "construction", "consumer_protection", "contracts", "corporate_litigation", "criminal", "disability_and_social_security", "education", "elder", "employment_and_labor", "energy_and_environmental", "ethics", "family", "food_and_drug", "general_practice", "government", "healthcare", "immigration", "in_house_counsel", "insurance", "intellectual_property", "international", "juvenile", "legal_aid", "mediation_and_arbitration", "medical_malpractice", "military", "multi_practice", "non_profit_and_pro_bono", "other", "personal_injury", "privacy_and_information_security", "private_client", "product_liability", "real_estate", "science_and_technology", "securities_and_mergers_and_acquisitions", "small_claims", "sports_and_entertainment_and_gaming", "tax", "telecommunications", "traffic_offenses", "transportation", "tribal", "trusts", "wills_and_estates", "workers_compensation"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def code(self):
        """Gets the code of this PracticeAreaBase.

        The code of the *PracticeArea*

        :return: The code of this PracticeAreaBase.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PracticeAreaBase.

        The code of the *PracticeArea*

        :param code: The code of this PracticeAreaBase.
        :type code: str
        """

        self._code = code
