# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.calendar_entry_create_request_data_attendees_inner import CalendarEntryCreateRequestDataAttendeesInner
from openapi_server.models.calendar_entry_create_request_data_calendar_entry_event_type import CalendarEntryCreateRequestDataCalendarEntryEventType
from openapi_server.models.calendar_entry_create_request_data_calendar_owner import CalendarEntryCreateRequestDataCalendarOwner
from openapi_server.models.calendar_entry_create_request_data_conference_meeting import CalendarEntryCreateRequestDataConferenceMeeting
from openapi_server.models.calendar_entry_create_request_data_external_properties_inner import CalendarEntryCreateRequestDataExternalPropertiesInner
from openapi_server.models.calendar_entry_create_request_data_matter import CalendarEntryCreateRequestDataMatter
from openapi_server import util


class CalendarEntryCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted: str=None, all_day: bool=None, attendees: List[CalendarEntryCreateRequestDataAttendeesInner]=None, calendar_entry_event_type: CalendarEntryCreateRequestDataCalendarEntryEventType=None, calendar_owner: CalendarEntryCreateRequestDataCalendarOwner=None, conference_meeting: CalendarEntryCreateRequestDataConferenceMeeting=None, description: str=None, end_at: datetime=None, external_properties: List[CalendarEntryCreateRequestDataExternalPropertiesInner]=None, location: str=None, matter: CalendarEntryCreateRequestDataMatter=None, recurrence_rule: str=None, send_email_notification: bool=None, start_at: datetime=None, summary: str=None):
        """CalendarEntryCreateRequestData - a model defined in OpenAPI

        :param deleted: The deleted of this CalendarEntryCreateRequestData.
        :param all_day: The all_day of this CalendarEntryCreateRequestData.
        :param attendees: The attendees of this CalendarEntryCreateRequestData.
        :param calendar_entry_event_type: The calendar_entry_event_type of this CalendarEntryCreateRequestData.
        :param calendar_owner: The calendar_owner of this CalendarEntryCreateRequestData.
        :param conference_meeting: The conference_meeting of this CalendarEntryCreateRequestData.
        :param description: The description of this CalendarEntryCreateRequestData.
        :param end_at: The end_at of this CalendarEntryCreateRequestData.
        :param external_properties: The external_properties of this CalendarEntryCreateRequestData.
        :param location: The location of this CalendarEntryCreateRequestData.
        :param matter: The matter of this CalendarEntryCreateRequestData.
        :param recurrence_rule: The recurrence_rule of this CalendarEntryCreateRequestData.
        :param send_email_notification: The send_email_notification of this CalendarEntryCreateRequestData.
        :param start_at: The start_at of this CalendarEntryCreateRequestData.
        :param summary: The summary of this CalendarEntryCreateRequestData.
        """
        self.openapi_types = {
            'deleted': str,
            'all_day': bool,
            'attendees': List[CalendarEntryCreateRequestDataAttendeesInner],
            'calendar_entry_event_type': CalendarEntryCreateRequestDataCalendarEntryEventType,
            'calendar_owner': CalendarEntryCreateRequestDataCalendarOwner,
            'conference_meeting': CalendarEntryCreateRequestDataConferenceMeeting,
            'description': str,
            'end_at': datetime,
            'external_properties': List[CalendarEntryCreateRequestDataExternalPropertiesInner],
            'location': str,
            'matter': CalendarEntryCreateRequestDataMatter,
            'recurrence_rule': str,
            'send_email_notification': bool,
            'start_at': datetime,
            'summary': str
        }

        self.attribute_map = {
            'deleted': '_deleted',
            'all_day': 'all_day',
            'attendees': 'attendees',
            'calendar_entry_event_type': 'calendar_entry_event_type',
            'calendar_owner': 'calendar_owner',
            'conference_meeting': 'conference_meeting',
            'description': 'description',
            'end_at': 'end_at',
            'external_properties': 'external_properties',
            'location': 'location',
            'matter': 'matter',
            'recurrence_rule': 'recurrence_rule',
            'send_email_notification': 'send_email_notification',
            'start_at': 'start_at',
            'summary': 'summary'
        }

        self._deleted = deleted
        self._all_day = all_day
        self._attendees = attendees
        self._calendar_entry_event_type = calendar_entry_event_type
        self._calendar_owner = calendar_owner
        self._conference_meeting = conference_meeting
        self._description = description
        self._end_at = end_at
        self._external_properties = external_properties
        self._location = location
        self._matter = matter
        self._recurrence_rule = recurrence_rule
        self._send_email_notification = send_email_notification
        self._start_at = start_at
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalendarEntryCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalendarEntry_create_request_data of this CalendarEntryCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted(self):
        """Gets the deleted of this CalendarEntryCreateRequestData.

        Flag to delete a specific instance of a recurring event.

        :return: The deleted of this CalendarEntryCreateRequestData.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CalendarEntryCreateRequestData.

        Flag to delete a specific instance of a recurring event.

        :param deleted: The deleted of this CalendarEntryCreateRequestData.
        :type deleted: str
        """
        allowed_values = ["single", "future"]  # noqa: E501
        if deleted not in allowed_values:
            raise ValueError(
                "Invalid value for `deleted` ({0}), must be one of {1}"
                .format(deleted, allowed_values)
            )

        self._deleted = deleted

    @property
    def all_day(self):
        """Gets the all_day of this CalendarEntryCreateRequestData.

        Whether or not the CalendarEntry is for all day.

        :return: The all_day of this CalendarEntryCreateRequestData.
        :rtype: bool
        """
        return self._all_day

    @all_day.setter
    def all_day(self, all_day):
        """Sets the all_day of this CalendarEntryCreateRequestData.

        Whether or not the CalendarEntry is for all day.

        :param all_day: The all_day of this CalendarEntryCreateRequestData.
        :type all_day: bool
        """

        self._all_day = all_day

    @property
    def attendees(self):
        """Gets the attendees of this CalendarEntryCreateRequestData.


        :return: The attendees of this CalendarEntryCreateRequestData.
        :rtype: List[CalendarEntryCreateRequestDataAttendeesInner]
        """
        return self._attendees

    @attendees.setter
    def attendees(self, attendees):
        """Sets the attendees of this CalendarEntryCreateRequestData.


        :param attendees: The attendees of this CalendarEntryCreateRequestData.
        :type attendees: List[CalendarEntryCreateRequestDataAttendeesInner]
        """

        self._attendees = attendees

    @property
    def calendar_entry_event_type(self):
        """Gets the calendar_entry_event_type of this CalendarEntryCreateRequestData.


        :return: The calendar_entry_event_type of this CalendarEntryCreateRequestData.
        :rtype: CalendarEntryCreateRequestDataCalendarEntryEventType
        """
        return self._calendar_entry_event_type

    @calendar_entry_event_type.setter
    def calendar_entry_event_type(self, calendar_entry_event_type):
        """Sets the calendar_entry_event_type of this CalendarEntryCreateRequestData.


        :param calendar_entry_event_type: The calendar_entry_event_type of this CalendarEntryCreateRequestData.
        :type calendar_entry_event_type: CalendarEntryCreateRequestDataCalendarEntryEventType
        """

        self._calendar_entry_event_type = calendar_entry_event_type

    @property
    def calendar_owner(self):
        """Gets the calendar_owner of this CalendarEntryCreateRequestData.


        :return: The calendar_owner of this CalendarEntryCreateRequestData.
        :rtype: CalendarEntryCreateRequestDataCalendarOwner
        """
        return self._calendar_owner

    @calendar_owner.setter
    def calendar_owner(self, calendar_owner):
        """Sets the calendar_owner of this CalendarEntryCreateRequestData.


        :param calendar_owner: The calendar_owner of this CalendarEntryCreateRequestData.
        :type calendar_owner: CalendarEntryCreateRequestDataCalendarOwner
        """
        if calendar_owner is None:
            raise ValueError("Invalid value for `calendar_owner`, must not be `None`")

        self._calendar_owner = calendar_owner

    @property
    def conference_meeting(self):
        """Gets the conference_meeting of this CalendarEntryCreateRequestData.


        :return: The conference_meeting of this CalendarEntryCreateRequestData.
        :rtype: CalendarEntryCreateRequestDataConferenceMeeting
        """
        return self._conference_meeting

    @conference_meeting.setter
    def conference_meeting(self, conference_meeting):
        """Sets the conference_meeting of this CalendarEntryCreateRequestData.


        :param conference_meeting: The conference_meeting of this CalendarEntryCreateRequestData.
        :type conference_meeting: CalendarEntryCreateRequestDataConferenceMeeting
        """

        self._conference_meeting = conference_meeting

    @property
    def description(self):
        """Gets the description of this CalendarEntryCreateRequestData.

        A detailed description of the CalendarEntry.

        :return: The description of this CalendarEntryCreateRequestData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CalendarEntryCreateRequestData.

        A detailed description of the CalendarEntry.

        :param description: The description of this CalendarEntryCreateRequestData.
        :type description: str
        """

        self._description = description

    @property
    def end_at(self):
        """Gets the end_at of this CalendarEntryCreateRequestData.

        The time the CalendarEntry ends (Expects an ISO-8601 timestamp).

        :return: The end_at of this CalendarEntryCreateRequestData.
        :rtype: datetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this CalendarEntryCreateRequestData.

        The time the CalendarEntry ends (Expects an ISO-8601 timestamp).

        :param end_at: The end_at of this CalendarEntryCreateRequestData.
        :type end_at: datetime
        """
        if end_at is None:
            raise ValueError("Invalid value for `end_at`, must not be `None`")

        self._end_at = end_at

    @property
    def external_properties(self):
        """Gets the external_properties of this CalendarEntryCreateRequestData.


        :return: The external_properties of this CalendarEntryCreateRequestData.
        :rtype: List[CalendarEntryCreateRequestDataExternalPropertiesInner]
        """
        return self._external_properties

    @external_properties.setter
    def external_properties(self, external_properties):
        """Sets the external_properties of this CalendarEntryCreateRequestData.


        :param external_properties: The external_properties of this CalendarEntryCreateRequestData.
        :type external_properties: List[CalendarEntryCreateRequestDataExternalPropertiesInner]
        """

        self._external_properties = external_properties

    @property
    def location(self):
        """Gets the location of this CalendarEntryCreateRequestData.

        The geographic location of the CalendarEntry.

        :return: The location of this CalendarEntryCreateRequestData.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CalendarEntryCreateRequestData.

        The geographic location of the CalendarEntry.

        :param location: The location of this CalendarEntryCreateRequestData.
        :type location: str
        """

        self._location = location

    @property
    def matter(self):
        """Gets the matter of this CalendarEntryCreateRequestData.


        :return: The matter of this CalendarEntryCreateRequestData.
        :rtype: CalendarEntryCreateRequestDataMatter
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this CalendarEntryCreateRequestData.


        :param matter: The matter of this CalendarEntryCreateRequestData.
        :type matter: CalendarEntryCreateRequestDataMatter
        """

        self._matter = matter

    @property
    def recurrence_rule(self):
        """Gets the recurrence_rule of this CalendarEntryCreateRequestData.

        Recurrence rule for expanding recurring CalendarEntry. To convert an existing recurring event to a non-recurring event, `''` or `null` are valid values.

        :return: The recurrence_rule of this CalendarEntryCreateRequestData.
        :rtype: str
        """
        return self._recurrence_rule

    @recurrence_rule.setter
    def recurrence_rule(self, recurrence_rule):
        """Sets the recurrence_rule of this CalendarEntryCreateRequestData.

        Recurrence rule for expanding recurring CalendarEntry. To convert an existing recurring event to a non-recurring event, `''` or `null` are valid values.

        :param recurrence_rule: The recurrence_rule of this CalendarEntryCreateRequestData.
        :type recurrence_rule: str
        """

        self._recurrence_rule = recurrence_rule

    @property
    def send_email_notification(self):
        """Gets the send_email_notification of this CalendarEntryCreateRequestData.

        Whether the calendar Entry should send email notifications to attendees

        :return: The send_email_notification of this CalendarEntryCreateRequestData.
        :rtype: bool
        """
        return self._send_email_notification

    @send_email_notification.setter
    def send_email_notification(self, send_email_notification):
        """Sets the send_email_notification of this CalendarEntryCreateRequestData.

        Whether the calendar Entry should send email notifications to attendees

        :param send_email_notification: The send_email_notification of this CalendarEntryCreateRequestData.
        :type send_email_notification: bool
        """

        self._send_email_notification = send_email_notification

    @property
    def start_at(self):
        """Gets the start_at of this CalendarEntryCreateRequestData.

        The time the CalendarEntry starts (Expects an ISO-8601 timestamp).

        :return: The start_at of this CalendarEntryCreateRequestData.
        :rtype: datetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this CalendarEntryCreateRequestData.

        The time the CalendarEntry starts (Expects an ISO-8601 timestamp).

        :param start_at: The start_at of this CalendarEntryCreateRequestData.
        :type start_at: datetime
        """
        if start_at is None:
            raise ValueError("Invalid value for `start_at`, must not be `None`")

        self._start_at = start_at

    @property
    def summary(self):
        """Gets the summary of this CalendarEntryCreateRequestData.

        A short summary of the CalendarEntry.

        :return: The summary of this CalendarEntryCreateRequestData.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this CalendarEntryCreateRequestData.

        A short summary of the CalendarEntry.

        :param summary: The summary of this CalendarEntryCreateRequestData.
        :type summary: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary
