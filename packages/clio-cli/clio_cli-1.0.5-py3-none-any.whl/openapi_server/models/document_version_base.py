# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentVersionBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, document_id: int=None, etag: str=None, uuid: str=None, created_at: datetime=None, updated_at: datetime=None, filename: str=None, size: int=None, version_number: int=None, content_type: str=None, received_at: datetime=None, put_url: str=None, fully_uploaded: bool=None):
        """DocumentVersionBase - a model defined in OpenAPI

        :param id: The id of this DocumentVersionBase.
        :param document_id: The document_id of this DocumentVersionBase.
        :param etag: The etag of this DocumentVersionBase.
        :param uuid: The uuid of this DocumentVersionBase.
        :param created_at: The created_at of this DocumentVersionBase.
        :param updated_at: The updated_at of this DocumentVersionBase.
        :param filename: The filename of this DocumentVersionBase.
        :param size: The size of this DocumentVersionBase.
        :param version_number: The version_number of this DocumentVersionBase.
        :param content_type: The content_type of this DocumentVersionBase.
        :param received_at: The received_at of this DocumentVersionBase.
        :param put_url: The put_url of this DocumentVersionBase.
        :param fully_uploaded: The fully_uploaded of this DocumentVersionBase.
        """
        self.openapi_types = {
            'id': int,
            'document_id': int,
            'etag': str,
            'uuid': str,
            'created_at': datetime,
            'updated_at': datetime,
            'filename': str,
            'size': int,
            'version_number': int,
            'content_type': str,
            'received_at': datetime,
            'put_url': str,
            'fully_uploaded': bool
        }

        self.attribute_map = {
            'id': 'id',
            'document_id': 'document_id',
            'etag': 'etag',
            'uuid': 'uuid',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'filename': 'filename',
            'size': 'size',
            'version_number': 'version_number',
            'content_type': 'content_type',
            'received_at': 'received_at',
            'put_url': 'put_url',
            'fully_uploaded': 'fully_uploaded'
        }

        self._id = id
        self._document_id = document_id
        self._etag = etag
        self._uuid = uuid
        self._created_at = created_at
        self._updated_at = updated_at
        self._filename = filename
        self._size = size
        self._version_number = version_number
        self._content_type = content_type
        self._received_at = received_at
        self._put_url = put_url
        self._fully_uploaded = fully_uploaded

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentVersionBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentVersion_base of this DocumentVersionBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DocumentVersionBase.

        Unique identifier for the *DocumentVersion*

        :return: The id of this DocumentVersionBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentVersionBase.

        Unique identifier for the *DocumentVersion*

        :param id: The id of this DocumentVersionBase.
        :type id: int
        """

        self._id = id

    @property
    def document_id(self):
        """Gets the document_id of this DocumentVersionBase.

        The ID of the parent document.

        :return: The document_id of this DocumentVersionBase.
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this DocumentVersionBase.

        The ID of the parent document.

        :param document_id: The document_id of this DocumentVersionBase.
        :type document_id: int
        """

        self._document_id = document_id

    @property
    def etag(self):
        """Gets the etag of this DocumentVersionBase.

        ETag for the *DocumentVersion*

        :return: The etag of this DocumentVersionBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this DocumentVersionBase.

        ETag for the *DocumentVersion*

        :param etag: The etag of this DocumentVersionBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def uuid(self):
        """Gets the uuid of this DocumentVersionBase.

        UUID associated with the DocumentVersion. UUID is required to mark a document fully uploaded.

        :return: The uuid of this DocumentVersionBase.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DocumentVersionBase.

        UUID associated with the DocumentVersion. UUID is required to mark a document fully uploaded.

        :param uuid: The uuid of this DocumentVersionBase.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def created_at(self):
        """Gets the created_at of this DocumentVersionBase.

        The time the *DocumentVersion* was created (as a ISO-8601 timestamp)

        :return: The created_at of this DocumentVersionBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DocumentVersionBase.

        The time the *DocumentVersion* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this DocumentVersionBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DocumentVersionBase.

        The time the *DocumentVersion* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this DocumentVersionBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DocumentVersionBase.

        The time the *DocumentVersion* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this DocumentVersionBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def filename(self):
        """Gets the filename of this DocumentVersionBase.

        The uploaded file name of the DocumentVersion.

        :return: The filename of this DocumentVersionBase.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this DocumentVersionBase.

        The uploaded file name of the DocumentVersion.

        :param filename: The filename of this DocumentVersionBase.
        :type filename: str
        """

        self._filename = filename

    @property
    def size(self):
        """Gets the size of this DocumentVersionBase.

        The size of the DocumentVersion in bytes.

        :return: The size of this DocumentVersionBase.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DocumentVersionBase.

        The size of the DocumentVersion in bytes.

        :param size: The size of this DocumentVersionBase.
        :type size: int
        """

        self._size = size

    @property
    def version_number(self):
        """Gets the version_number of this DocumentVersionBase.

        The ordered number of when this DocumentVersion was uploaded.

        :return: The version_number of this DocumentVersionBase.
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this DocumentVersionBase.

        The ordered number of when this DocumentVersion was uploaded.

        :param version_number: The version_number of this DocumentVersionBase.
        :type version_number: int
        """

        self._version_number = version_number

    @property
    def content_type(self):
        """Gets the content_type of this DocumentVersionBase.

        A standard MIME type describing the format of the object data.

        :return: The content_type of this DocumentVersionBase.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this DocumentVersionBase.

        A standard MIME type describing the format of the object data.

        :param content_type: The content_type of this DocumentVersionBase.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def received_at(self):
        """Gets the received_at of this DocumentVersionBase.

        The time the DocumentVersion was received (as an ISO-8601 timestamp)

        :return: The received_at of this DocumentVersionBase.
        :rtype: datetime
        """
        return self._received_at

    @received_at.setter
    def received_at(self, received_at):
        """Sets the received_at of this DocumentVersionBase.

        The time the DocumentVersion was received (as an ISO-8601 timestamp)

        :param received_at: The received_at of this DocumentVersionBase.
        :type received_at: datetime
        """

        self._received_at = received_at

    @property
    def put_url(self):
        """Gets the put_url of this DocumentVersionBase.

        A signed URL for uploading the file in a single operation. It expires in 10 minutes. If the document is fully uploaded, the field is empty.

        :return: The put_url of this DocumentVersionBase.
        :rtype: str
        """
        return self._put_url

    @put_url.setter
    def put_url(self, put_url):
        """Sets the put_url of this DocumentVersionBase.

        A signed URL for uploading the file in a single operation. It expires in 10 minutes. If the document is fully uploaded, the field is empty.

        :param put_url: The put_url of this DocumentVersionBase.
        :type put_url: str
        """

        self._put_url = put_url

    @property
    def fully_uploaded(self):
        """Gets the fully_uploaded of this DocumentVersionBase.

        True if the DocumentVersion is uploaded. False if the DocumentVersion is being uploaded.

        :return: The fully_uploaded of this DocumentVersionBase.
        :rtype: bool
        """
        return self._fully_uploaded

    @fully_uploaded.setter
    def fully_uploaded(self, fully_uploaded):
        """Sets the fully_uploaded of this DocumentVersionBase.

        True if the DocumentVersion is uploaded. False if the DocumentVersion is being uploaded.

        :param fully_uploaded: The fully_uploaded of this DocumentVersionBase.
        :type fully_uploaded: bool
        """

        self._fully_uploaded = fully_uploaded
