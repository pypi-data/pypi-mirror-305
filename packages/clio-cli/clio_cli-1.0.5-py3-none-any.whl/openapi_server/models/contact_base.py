# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, name: str=None, first_name: str=None, middle_name: str=None, last_name: str=None, date_of_birth: date=None, type: str=None, created_at: datetime=None, updated_at: datetime=None, prefix: str=None, title: str=None, initials: str=None, clio_connect_email: str=None, locked_clio_connect_email: bool=None, client_connect_user_id: int=None, primary_email_address: str=None, secondary_email_address: str=None, primary_phone_number: str=None, secondary_phone_number: str=None, ledes_client_id: str=None, has_clio_for_clients_permission: bool=None, is_client: bool=None, is_clio_for_client_user: bool=None, is_co_counsel: bool=None, is_bill_recipient: bool=None, sales_tax_number: str=None):
        """ContactBase - a model defined in OpenAPI

        :param id: The id of this ContactBase.
        :param etag: The etag of this ContactBase.
        :param name: The name of this ContactBase.
        :param first_name: The first_name of this ContactBase.
        :param middle_name: The middle_name of this ContactBase.
        :param last_name: The last_name of this ContactBase.
        :param date_of_birth: The date_of_birth of this ContactBase.
        :param type: The type of this ContactBase.
        :param created_at: The created_at of this ContactBase.
        :param updated_at: The updated_at of this ContactBase.
        :param prefix: The prefix of this ContactBase.
        :param title: The title of this ContactBase.
        :param initials: The initials of this ContactBase.
        :param clio_connect_email: The clio_connect_email of this ContactBase.
        :param locked_clio_connect_email: The locked_clio_connect_email of this ContactBase.
        :param client_connect_user_id: The client_connect_user_id of this ContactBase.
        :param primary_email_address: The primary_email_address of this ContactBase.
        :param secondary_email_address: The secondary_email_address of this ContactBase.
        :param primary_phone_number: The primary_phone_number of this ContactBase.
        :param secondary_phone_number: The secondary_phone_number of this ContactBase.
        :param ledes_client_id: The ledes_client_id of this ContactBase.
        :param has_clio_for_clients_permission: The has_clio_for_clients_permission of this ContactBase.
        :param is_client: The is_client of this ContactBase.
        :param is_clio_for_client_user: The is_clio_for_client_user of this ContactBase.
        :param is_co_counsel: The is_co_counsel of this ContactBase.
        :param is_bill_recipient: The is_bill_recipient of this ContactBase.
        :param sales_tax_number: The sales_tax_number of this ContactBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'name': str,
            'first_name': str,
            'middle_name': str,
            'last_name': str,
            'date_of_birth': date,
            'type': str,
            'created_at': datetime,
            'updated_at': datetime,
            'prefix': str,
            'title': str,
            'initials': str,
            'clio_connect_email': str,
            'locked_clio_connect_email': bool,
            'client_connect_user_id': int,
            'primary_email_address': str,
            'secondary_email_address': str,
            'primary_phone_number': str,
            'secondary_phone_number': str,
            'ledes_client_id': str,
            'has_clio_for_clients_permission': bool,
            'is_client': bool,
            'is_clio_for_client_user': bool,
            'is_co_counsel': bool,
            'is_bill_recipient': bool,
            'sales_tax_number': str
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'name': 'name',
            'first_name': 'first_name',
            'middle_name': 'middle_name',
            'last_name': 'last_name',
            'date_of_birth': 'date_of_birth',
            'type': 'type',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'prefix': 'prefix',
            'title': 'title',
            'initials': 'initials',
            'clio_connect_email': 'clio_connect_email',
            'locked_clio_connect_email': 'locked_clio_connect_email',
            'client_connect_user_id': 'client_connect_user_id',
            'primary_email_address': 'primary_email_address',
            'secondary_email_address': 'secondary_email_address',
            'primary_phone_number': 'primary_phone_number',
            'secondary_phone_number': 'secondary_phone_number',
            'ledes_client_id': 'ledes_client_id',
            'has_clio_for_clients_permission': 'has_clio_for_clients_permission',
            'is_client': 'is_client',
            'is_clio_for_client_user': 'is_clio_for_client_user',
            'is_co_counsel': 'is_co_counsel',
            'is_bill_recipient': 'is_bill_recipient',
            'sales_tax_number': 'sales_tax_number'
        }

        self._id = id
        self._etag = etag
        self._name = name
        self._first_name = first_name
        self._middle_name = middle_name
        self._last_name = last_name
        self._date_of_birth = date_of_birth
        self._type = type
        self._created_at = created_at
        self._updated_at = updated_at
        self._prefix = prefix
        self._title = title
        self._initials = initials
        self._clio_connect_email = clio_connect_email
        self._locked_clio_connect_email = locked_clio_connect_email
        self._client_connect_user_id = client_connect_user_id
        self._primary_email_address = primary_email_address
        self._secondary_email_address = secondary_email_address
        self._primary_phone_number = primary_phone_number
        self._secondary_phone_number = secondary_phone_number
        self._ledes_client_id = ledes_client_id
        self._has_clio_for_clients_permission = has_clio_for_clients_permission
        self._is_client = is_client
        self._is_clio_for_client_user = is_clio_for_client_user
        self._is_co_counsel = is_co_counsel
        self._is_bill_recipient = is_bill_recipient
        self._sales_tax_number = sales_tax_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact_base of this ContactBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ContactBase.

        Unique identifier for the *Contact*

        :return: The id of this ContactBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContactBase.

        Unique identifier for the *Contact*

        :param id: The id of this ContactBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this ContactBase.

        ETag for the *Contact*

        :return: The etag of this ContactBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ContactBase.

        ETag for the *Contact*

        :param etag: The etag of this ContactBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this ContactBase.

        The full name of the *Contact*

        :return: The name of this ContactBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactBase.

        The full name of the *Contact*

        :param name: The name of this ContactBase.
        :type name: str
        """

        self._name = name

    @property
    def first_name(self):
        """Gets the first_name of this ContactBase.

        First name of the Person

        :return: The first_name of this ContactBase.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactBase.

        First name of the Person

        :param first_name: The first_name of this ContactBase.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this ContactBase.

        Middle name of the Person

        :return: The middle_name of this ContactBase.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this ContactBase.

        Middle name of the Person

        :param middle_name: The middle_name of this ContactBase.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this ContactBase.

        Last name of the Person

        :return: The last_name of this ContactBase.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactBase.

        Last name of the Person

        :param last_name: The last_name of this ContactBase.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this ContactBase.

        Date of birth

        :return: The date_of_birth of this ContactBase.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this ContactBase.

        Date of birth

        :param date_of_birth: The date_of_birth of this ContactBase.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def type(self):
        """Gets the type of this ContactBase.

        The type of the *Contact*

        :return: The type of this ContactBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContactBase.

        The type of the *Contact*

        :param type: The type of this ContactBase.
        :type type: str
        """
        allowed_values = ["Company", "Person"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this ContactBase.

        The time the *Contact* was created (as a ISO-8601 timestamp)

        :return: The created_at of this ContactBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ContactBase.

        The time the *Contact* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this ContactBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ContactBase.

        The time the *Contact* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this ContactBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ContactBase.

        The time the *Contact* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this ContactBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def prefix(self):
        """Gets the prefix of this ContactBase.

        The prefix of the *Contact* (Mr, Mrs, etc)

        :return: The prefix of this ContactBase.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this ContactBase.

        The prefix of the *Contact* (Mr, Mrs, etc)

        :param prefix: The prefix of this ContactBase.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def title(self):
        """Gets the title of this ContactBase.

        The designated title of the *Contact*

        :return: The title of this ContactBase.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ContactBase.

        The designated title of the *Contact*

        :param title: The title of this ContactBase.
        :type title: str
        """

        self._title = title

    @property
    def initials(self):
        """Gets the initials of this ContactBase.

        The initials of the *Contact*

        :return: The initials of this ContactBase.
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this ContactBase.

        The initials of the *Contact*

        :param initials: The initials of this ContactBase.
        :type initials: str
        """

        self._initials = initials

    @property
    def clio_connect_email(self):
        """Gets the clio_connect_email of this ContactBase.

        Clio Connect email if the *Contact* is a ClioConnect User

        :return: The clio_connect_email of this ContactBase.
        :rtype: str
        """
        return self._clio_connect_email

    @clio_connect_email.setter
    def clio_connect_email(self, clio_connect_email):
        """Sets the clio_connect_email of this ContactBase.

        Clio Connect email if the *Contact* is a ClioConnect User

        :param clio_connect_email: The clio_connect_email of this ContactBase.
        :type clio_connect_email: str
        """

        self._clio_connect_email = clio_connect_email

    @property
    def locked_clio_connect_email(self):
        """Gets the locked_clio_connect_email of this ContactBase.

        A boolean indicating if the ability to modify this *Contacts Clio connect email is locked.

        :return: The locked_clio_connect_email of this ContactBase.
        :rtype: bool
        """
        return self._locked_clio_connect_email

    @locked_clio_connect_email.setter
    def locked_clio_connect_email(self, locked_clio_connect_email):
        """Sets the locked_clio_connect_email of this ContactBase.

        A boolean indicating if the ability to modify this *Contacts Clio connect email is locked.

        :param locked_clio_connect_email: The locked_clio_connect_email of this ContactBase.
        :type locked_clio_connect_email: bool
        """

        self._locked_clio_connect_email = locked_clio_connect_email

    @property
    def client_connect_user_id(self):
        """Gets the client_connect_user_id of this ContactBase.

        The ID for the Clio Connect user associated with this *Contact*

        :return: The client_connect_user_id of this ContactBase.
        :rtype: int
        """
        return self._client_connect_user_id

    @client_connect_user_id.setter
    def client_connect_user_id(self, client_connect_user_id):
        """Sets the client_connect_user_id of this ContactBase.

        The ID for the Clio Connect user associated with this *Contact*

        :param client_connect_user_id: The client_connect_user_id of this ContactBase.
        :type client_connect_user_id: int
        """

        self._client_connect_user_id = client_connect_user_id

    @property
    def primary_email_address(self):
        """Gets the primary_email_address of this ContactBase.

        The primary email address associated with this *Contact*.

        :return: The primary_email_address of this ContactBase.
        :rtype: str
        """
        return self._primary_email_address

    @primary_email_address.setter
    def primary_email_address(self, primary_email_address):
        """Sets the primary_email_address of this ContactBase.

        The primary email address associated with this *Contact*.

        :param primary_email_address: The primary_email_address of this ContactBase.
        :type primary_email_address: str
        """

        self._primary_email_address = primary_email_address

    @property
    def secondary_email_address(self):
        """Gets the secondary_email_address of this ContactBase.

        The secondary email address associated with this *Contact*.

        :return: The secondary_email_address of this ContactBase.
        :rtype: str
        """
        return self._secondary_email_address

    @secondary_email_address.setter
    def secondary_email_address(self, secondary_email_address):
        """Sets the secondary_email_address of this ContactBase.

        The secondary email address associated with this *Contact*.

        :param secondary_email_address: The secondary_email_address of this ContactBase.
        :type secondary_email_address: str
        """

        self._secondary_email_address = secondary_email_address

    @property
    def primary_phone_number(self):
        """Gets the primary_phone_number of this ContactBase.

        The primary phone number associated with this *Contact*.

        :return: The primary_phone_number of this ContactBase.
        :rtype: str
        """
        return self._primary_phone_number

    @primary_phone_number.setter
    def primary_phone_number(self, primary_phone_number):
        """Sets the primary_phone_number of this ContactBase.

        The primary phone number associated with this *Contact*.

        :param primary_phone_number: The primary_phone_number of this ContactBase.
        :type primary_phone_number: str
        """

        self._primary_phone_number = primary_phone_number

    @property
    def secondary_phone_number(self):
        """Gets the secondary_phone_number of this ContactBase.

        The secondary phone number of the *Contact*.

        :return: The secondary_phone_number of this ContactBase.
        :rtype: str
        """
        return self._secondary_phone_number

    @secondary_phone_number.setter
    def secondary_phone_number(self, secondary_phone_number):
        """Sets the secondary_phone_number of this ContactBase.

        The secondary phone number of the *Contact*.

        :param secondary_phone_number: The secondary_phone_number of this ContactBase.
        :type secondary_phone_number: str
        """

        self._secondary_phone_number = secondary_phone_number

    @property
    def ledes_client_id(self):
        """Gets the ledes_client_id of this ContactBase.

        LEDES client id of the Contact

        :return: The ledes_client_id of this ContactBase.
        :rtype: str
        """
        return self._ledes_client_id

    @ledes_client_id.setter
    def ledes_client_id(self, ledes_client_id):
        """Sets the ledes_client_id of this ContactBase.

        LEDES client id of the Contact

        :param ledes_client_id: The ledes_client_id of this ContactBase.
        :type ledes_client_id: str
        """

        self._ledes_client_id = ledes_client_id

    @property
    def has_clio_for_clients_permission(self):
        """Gets the has_clio_for_clients_permission of this ContactBase.

        True if at least one resource has been shared with the contact using Clio for Clients.

        :return: The has_clio_for_clients_permission of this ContactBase.
        :rtype: bool
        """
        return self._has_clio_for_clients_permission

    @has_clio_for_clients_permission.setter
    def has_clio_for_clients_permission(self, has_clio_for_clients_permission):
        """Sets the has_clio_for_clients_permission of this ContactBase.

        True if at least one resource has been shared with the contact using Clio for Clients.

        :param has_clio_for_clients_permission: The has_clio_for_clients_permission of this ContactBase.
        :type has_clio_for_clients_permission: bool
        """

        self._has_clio_for_clients_permission = has_clio_for_clients_permission

    @property
    def is_client(self):
        """Gets the is_client of this ContactBase.

        Whether or not the Contact is a client

        :return: The is_client of this ContactBase.
        :rtype: bool
        """
        return self._is_client

    @is_client.setter
    def is_client(self, is_client):
        """Sets the is_client of this ContactBase.

        Whether or not the Contact is a client

        :param is_client: The is_client of this ContactBase.
        :type is_client: bool
        """

        self._is_client = is_client

    @property
    def is_clio_for_client_user(self):
        """Gets the is_clio_for_client_user of this ContactBase.

        Whether or not this contact has client_login and client_user (can be created due to addition to client portal or client_share_permissions)

        :return: The is_clio_for_client_user of this ContactBase.
        :rtype: bool
        """
        return self._is_clio_for_client_user

    @is_clio_for_client_user.setter
    def is_clio_for_client_user(self, is_clio_for_client_user):
        """Sets the is_clio_for_client_user of this ContactBase.

        Whether or not this contact has client_login and client_user (can be created due to addition to client portal or client_share_permissions)

        :param is_clio_for_client_user: The is_clio_for_client_user of this ContactBase.
        :type is_clio_for_client_user: bool
        """

        self._is_clio_for_client_user = is_clio_for_client_user

    @property
    def is_co_counsel(self):
        """Gets the is_co_counsel of this ContactBase.

        Whether or not the Contact has matters shared as co-counsel

        :return: The is_co_counsel of this ContactBase.
        :rtype: bool
        """
        return self._is_co_counsel

    @is_co_counsel.setter
    def is_co_counsel(self, is_co_counsel):
        """Sets the is_co_counsel of this ContactBase.

        Whether or not the Contact has matters shared as co-counsel

        :param is_co_counsel: The is_co_counsel of this ContactBase.
        :type is_co_counsel: bool
        """

        self._is_co_counsel = is_co_counsel

    @property
    def is_bill_recipient(self):
        """Gets the is_bill_recipient of this ContactBase.

        Whether the Contact is a bill recipient on at least one matter.

        :return: The is_bill_recipient of this ContactBase.
        :rtype: bool
        """
        return self._is_bill_recipient

    @is_bill_recipient.setter
    def is_bill_recipient(self, is_bill_recipient):
        """Sets the is_bill_recipient of this ContactBase.

        Whether the Contact is a bill recipient on at least one matter.

        :param is_bill_recipient: The is_bill_recipient of this ContactBase.
        :type is_bill_recipient: bool
        """

        self._is_bill_recipient = is_bill_recipient

    @property
    def sales_tax_number(self):
        """Gets the sales_tax_number of this ContactBase.

        The sales tax number of the *Contact*

        :return: The sales_tax_number of this ContactBase.
        :rtype: str
        """
        return self._sales_tax_number

    @sales_tax_number.setter
    def sales_tax_number(self, sales_tax_number):
        """Sets the sales_tax_number of this ContactBase.

        The sales tax number of the *Contact*

        :param sales_tax_number: The sales_tax_number of this ContactBase.
        :type sales_tax_number: str
        """

        self._sales_tax_number = sales_tax_number
