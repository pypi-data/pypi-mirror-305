# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_field_base import CustomFieldBase
from openapi_server import util


class CustomFieldSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, name: str=None, parent_type: str=None, displayed: bool=None, created_at: datetime=None, updated_at: datetime=None, custom_fields: List[CustomFieldBase]=None):
        """CustomFieldSet - a model defined in OpenAPI

        :param id: The id of this CustomFieldSet.
        :param etag: The etag of this CustomFieldSet.
        :param name: The name of this CustomFieldSet.
        :param parent_type: The parent_type of this CustomFieldSet.
        :param displayed: The displayed of this CustomFieldSet.
        :param created_at: The created_at of this CustomFieldSet.
        :param updated_at: The updated_at of this CustomFieldSet.
        :param custom_fields: The custom_fields of this CustomFieldSet.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'name': str,
            'parent_type': str,
            'displayed': bool,
            'created_at': datetime,
            'updated_at': datetime,
            'custom_fields': List[CustomFieldBase]
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'name': 'name',
            'parent_type': 'parent_type',
            'displayed': 'displayed',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'custom_fields': 'custom_fields'
        }

        self._id = id
        self._etag = etag
        self._name = name
        self._parent_type = parent_type
        self._displayed = displayed
        self._created_at = created_at
        self._updated_at = updated_at
        self._custom_fields = custom_fields

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomFieldSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomFieldSet of this CustomFieldSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CustomFieldSet.

        Unique identifier for the *CustomFieldSet*

        :return: The id of this CustomFieldSet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomFieldSet.

        Unique identifier for the *CustomFieldSet*

        :param id: The id of this CustomFieldSet.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this CustomFieldSet.

        ETag for the *CustomFieldSet*

        :return: The etag of this CustomFieldSet.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this CustomFieldSet.

        ETag for the *CustomFieldSet*

        :param etag: The etag of this CustomFieldSet.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this CustomFieldSet.

        The name of the custom field set.

        :return: The name of this CustomFieldSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomFieldSet.

        The name of the custom field set.

        :param name: The name of this CustomFieldSet.
        :type name: str
        """

        self._name = name

    @property
    def parent_type(self):
        """Gets the parent_type of this CustomFieldSet.

        Type of object the *CustomFieldSet* is for.

        :return: The parent_type of this CustomFieldSet.
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type):
        """Sets the parent_type of this CustomFieldSet.

        Type of object the *CustomFieldSet* is for.

        :param parent_type: The parent_type of this CustomFieldSet.
        :type parent_type: str
        """
        allowed_values = ["Contact", "Matter"]  # noqa: E501
        if parent_type not in allowed_values:
            raise ValueError(
                "Invalid value for `parent_type` ({0}), must be one of {1}"
                .format(parent_type, allowed_values)
            )

        self._parent_type = parent_type

    @property
    def displayed(self):
        """Gets the displayed of this CustomFieldSet.

        Whether or not the *CustomFieldSet* should be displayed by default.

        :return: The displayed of this CustomFieldSet.
        :rtype: bool
        """
        return self._displayed

    @displayed.setter
    def displayed(self, displayed):
        """Sets the displayed of this CustomFieldSet.

        Whether or not the *CustomFieldSet* should be displayed by default.

        :param displayed: The displayed of this CustomFieldSet.
        :type displayed: bool
        """

        self._displayed = displayed

    @property
    def created_at(self):
        """Gets the created_at of this CustomFieldSet.

        The time the *CustomFieldSet* was created (as a ISO-8601 timestamp)

        :return: The created_at of this CustomFieldSet.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CustomFieldSet.

        The time the *CustomFieldSet* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this CustomFieldSet.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CustomFieldSet.

        The time the *CustomFieldSet* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this CustomFieldSet.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CustomFieldSet.

        The time the *CustomFieldSet* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this CustomFieldSet.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CustomFieldSet.

        CustomField

        :return: The custom_fields of this CustomFieldSet.
        :rtype: List[CustomFieldBase]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CustomFieldSet.

        CustomField

        :param custom_fields: The custom_fields of this CustomFieldSet.
        :type custom_fields: List[CustomFieldBase]
        """

        self._custom_fields = custom_fields
