# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MatterCreateRequestDataMatterBudget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destroy: bool=None, budget: float=None, include_expenses: bool=None, notification_threshold: int=None, notify_users: bool=False):
        """MatterCreateRequestDataMatterBudget - a model defined in OpenAPI

        :param destroy: The destroy of this MatterCreateRequestDataMatterBudget.
        :param budget: The budget of this MatterCreateRequestDataMatterBudget.
        :param include_expenses: The include_expenses of this MatterCreateRequestDataMatterBudget.
        :param notification_threshold: The notification_threshold of this MatterCreateRequestDataMatterBudget.
        :param notify_users: The notify_users of this MatterCreateRequestDataMatterBudget.
        """
        self.openapi_types = {
            'destroy': bool,
            'budget': float,
            'include_expenses': bool,
            'notification_threshold': int,
            'notify_users': bool
        }

        self.attribute_map = {
            'destroy': '_destroy',
            'budget': 'budget',
            'include_expenses': 'include_expenses',
            'notification_threshold': 'notification_threshold',
            'notify_users': 'notify_users'
        }

        self._destroy = destroy
        self._budget = budget
        self._include_expenses = include_expenses
        self._notification_threshold = notification_threshold
        self._notify_users = notify_users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatterCreateRequestDataMatterBudget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Matter_create_request_data_matter_budget of this MatterCreateRequestDataMatterBudget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destroy(self):
        """Gets the destroy of this MatterCreateRequestDataMatterBudget.

        Determines whether the matter budget associated with the matter should be destroyed. Only users with matter budget destroy capabilities can destroy matter budgets.

        :return: The destroy of this MatterCreateRequestDataMatterBudget.
        :rtype: bool
        """
        return self._destroy

    @destroy.setter
    def destroy(self, destroy):
        """Sets the destroy of this MatterCreateRequestDataMatterBudget.

        Determines whether the matter budget associated with the matter should be destroyed. Only users with matter budget destroy capabilities can destroy matter budgets.

        :param destroy: The destroy of this MatterCreateRequestDataMatterBudget.
        :type destroy: bool
        """

        self._destroy = destroy

    @property
    def budget(self):
        """Gets the budget of this MatterCreateRequestDataMatterBudget.

        The amount allocated for the matter.

        :return: The budget of this MatterCreateRequestDataMatterBudget.
        :rtype: float
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this MatterCreateRequestDataMatterBudget.

        The amount allocated for the matter.

        :param budget: The budget of this MatterCreateRequestDataMatterBudget.
        :type budget: float
        """

        self._budget = budget

    @property
    def include_expenses(self):
        """Gets the include_expenses of this MatterCreateRequestDataMatterBudget.

        Determines whether the budget includes expenses in the calculation.

        :return: The include_expenses of this MatterCreateRequestDataMatterBudget.
        :rtype: bool
        """
        return self._include_expenses

    @include_expenses.setter
    def include_expenses(self, include_expenses):
        """Sets the include_expenses of this MatterCreateRequestDataMatterBudget.

        Determines whether the budget includes expenses in the calculation.

        :param include_expenses: The include_expenses of this MatterCreateRequestDataMatterBudget.
        :type include_expenses: bool
        """

        self._include_expenses = include_expenses

    @property
    def notification_threshold(self):
        """Gets the notification_threshold of this MatterCreateRequestDataMatterBudget.

        Percentage of the budget when it starts notifying users.

        :return: The notification_threshold of this MatterCreateRequestDataMatterBudget.
        :rtype: int
        """
        return self._notification_threshold

    @notification_threshold.setter
    def notification_threshold(self, notification_threshold):
        """Sets the notification_threshold of this MatterCreateRequestDataMatterBudget.

        Percentage of the budget when it starts notifying users.

        :param notification_threshold: The notification_threshold of this MatterCreateRequestDataMatterBudget.
        :type notification_threshold: int
        """

        self._notification_threshold = notification_threshold

    @property
    def notify_users(self):
        """Gets the notify_users of this MatterCreateRequestDataMatterBudget.

        Determine whether to notify users when the matter reaches the notification threshold.

        :return: The notify_users of this MatterCreateRequestDataMatterBudget.
        :rtype: bool
        """
        return self._notify_users

    @notify_users.setter
    def notify_users(self, notify_users):
        """Sets the notify_users of this MatterCreateRequestDataMatterBudget.

        Determine whether to notify users when the matter reaches the notification threshold.

        :param notify_users: The notify_users of this MatterCreateRequestDataMatterBudget.
        :type notify_users: bool
        """

        self._notify_users = notify_users
