# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MatterBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, number: int=None, display_number: str=None, custom_number: str=None, description: str=None, status: str=None, location: str=None, client_reference: str=None, client_id: int=None, billable: bool=None, maildrop_address: str=None, billing_method: str=None, open_date: date=None, close_date: date=None, pending_date: date=None, created_at: datetime=None, updated_at: datetime=None, shared: bool=None, has_tasks: bool=None, last_activity_date: date=None, matter_stage_updated_at: datetime=None):
        """MatterBase - a model defined in OpenAPI

        :param id: The id of this MatterBase.
        :param etag: The etag of this MatterBase.
        :param number: The number of this MatterBase.
        :param display_number: The display_number of this MatterBase.
        :param custom_number: The custom_number of this MatterBase.
        :param description: The description of this MatterBase.
        :param status: The status of this MatterBase.
        :param location: The location of this MatterBase.
        :param client_reference: The client_reference of this MatterBase.
        :param client_id: The client_id of this MatterBase.
        :param billable: The billable of this MatterBase.
        :param maildrop_address: The maildrop_address of this MatterBase.
        :param billing_method: The billing_method of this MatterBase.
        :param open_date: The open_date of this MatterBase.
        :param close_date: The close_date of this MatterBase.
        :param pending_date: The pending_date of this MatterBase.
        :param created_at: The created_at of this MatterBase.
        :param updated_at: The updated_at of this MatterBase.
        :param shared: The shared of this MatterBase.
        :param has_tasks: The has_tasks of this MatterBase.
        :param last_activity_date: The last_activity_date of this MatterBase.
        :param matter_stage_updated_at: The matter_stage_updated_at of this MatterBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'number': int,
            'display_number': str,
            'custom_number': str,
            'description': str,
            'status': str,
            'location': str,
            'client_reference': str,
            'client_id': int,
            'billable': bool,
            'maildrop_address': str,
            'billing_method': str,
            'open_date': date,
            'close_date': date,
            'pending_date': date,
            'created_at': datetime,
            'updated_at': datetime,
            'shared': bool,
            'has_tasks': bool,
            'last_activity_date': date,
            'matter_stage_updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'number': 'number',
            'display_number': 'display_number',
            'custom_number': 'custom_number',
            'description': 'description',
            'status': 'status',
            'location': 'location',
            'client_reference': 'client_reference',
            'client_id': 'client_id',
            'billable': 'billable',
            'maildrop_address': 'maildrop_address',
            'billing_method': 'billing_method',
            'open_date': 'open_date',
            'close_date': 'close_date',
            'pending_date': 'pending_date',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'shared': 'shared',
            'has_tasks': 'has_tasks',
            'last_activity_date': 'last_activity_date',
            'matter_stage_updated_at': 'matter_stage_updated_at'
        }

        self._id = id
        self._etag = etag
        self._number = number
        self._display_number = display_number
        self._custom_number = custom_number
        self._description = description
        self._status = status
        self._location = location
        self._client_reference = client_reference
        self._client_id = client_id
        self._billable = billable
        self._maildrop_address = maildrop_address
        self._billing_method = billing_method
        self._open_date = open_date
        self._close_date = close_date
        self._pending_date = pending_date
        self._created_at = created_at
        self._updated_at = updated_at
        self._shared = shared
        self._has_tasks = has_tasks
        self._last_activity_date = last_activity_date
        self._matter_stage_updated_at = matter_stage_updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatterBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Matter_base of this MatterBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MatterBase.

        Unique identifier for the *Matter*

        :return: The id of this MatterBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MatterBase.

        Unique identifier for the *Matter*

        :param id: The id of this MatterBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this MatterBase.

        ETag for the *Matter*

        :return: The etag of this MatterBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this MatterBase.

        ETag for the *Matter*

        :param etag: The etag of this MatterBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def number(self):
        """Gets the number of this MatterBase.

        The number given to the *Matter* within an account

        :return: The number of this MatterBase.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this MatterBase.

        The number given to the *Matter* within an account

        :param number: The number of this MatterBase.
        :type number: int
        """

        self._number = number

    @property
    def display_number(self):
        """Gets the display_number of this MatterBase.

        The reference and label of the *Matter*. Depending on the account's manual_matter_numbering setting, this is either read only (generated) or customizable.

        :return: The display_number of this MatterBase.
        :rtype: str
        """
        return self._display_number

    @display_number.setter
    def display_number(self, display_number):
        """Sets the display_number of this MatterBase.

        The reference and label of the *Matter*. Depending on the account's manual_matter_numbering setting, this is either read only (generated) or customizable.

        :param display_number: The display_number of this MatterBase.
        :type display_number: str
        """

        self._display_number = display_number

    @property
    def custom_number(self):
        """Gets the custom_number of this MatterBase.

        User defined custom number of the *Matter*

        :return: The custom_number of this MatterBase.
        :rtype: str
        """
        return self._custom_number

    @custom_number.setter
    def custom_number(self, custom_number):
        """Sets the custom_number of this MatterBase.

        User defined custom number of the *Matter*

        :param custom_number: The custom_number of this MatterBase.
        :type custom_number: str
        """

        self._custom_number = custom_number

    @property
    def description(self):
        """Gets the description of this MatterBase.

        The detailed description of the *Matter*

        :return: The description of this MatterBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MatterBase.

        The detailed description of the *Matter*

        :param description: The description of this MatterBase.
        :type description: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this MatterBase.

        The current status of the *Matter*

        :return: The status of this MatterBase.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MatterBase.

        The current status of the *Matter*

        :param status: The status of this MatterBase.
        :type status: str
        """
        allowed_values = ["Pending", "Open", "Closed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def location(self):
        """Gets the location of this MatterBase.

        The location of the *Matter*

        :return: The location of this MatterBase.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MatterBase.

        The location of the *Matter*

        :param location: The location of this MatterBase.
        :type location: str
        """

        self._location = location

    @property
    def client_reference(self):
        """Gets the client_reference of this MatterBase.

        Client Reference string for external uses

        :return: The client_reference of this MatterBase.
        :rtype: str
        """
        return self._client_reference

    @client_reference.setter
    def client_reference(self, client_reference):
        """Sets the client_reference of this MatterBase.

        Client Reference string for external uses

        :param client_reference: The client_reference of this MatterBase.
        :type client_reference: str
        """

        self._client_reference = client_reference

    @property
    def client_id(self):
        """Gets the client_id of this MatterBase.

        Client ID

        :return: The client_id of this MatterBase.
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this MatterBase.

        Client ID

        :param client_id: The client_id of this MatterBase.
        :type client_id: int
        """

        self._client_id = client_id

    @property
    def billable(self):
        """Gets the billable of this MatterBase.

        Whether this matter is billable

        :return: The billable of this MatterBase.
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """Sets the billable of this MatterBase.

        Whether this matter is billable

        :param billable: The billable of this MatterBase.
        :type billable: bool
        """

        self._billable = billable

    @property
    def maildrop_address(self):
        """Gets the maildrop_address of this MatterBase.

        A unique Maildrop email address for the matter

        :return: The maildrop_address of this MatterBase.
        :rtype: str
        """
        return self._maildrop_address

    @maildrop_address.setter
    def maildrop_address(self, maildrop_address):
        """Sets the maildrop_address of this MatterBase.

        A unique Maildrop email address for the matter

        :param maildrop_address: The maildrop_address of this MatterBase.
        :type maildrop_address: str
        """

        self._maildrop_address = maildrop_address

    @property
    def billing_method(self):
        """Gets the billing_method of this MatterBase.

        Billing method of this matter

        :return: The billing_method of this MatterBase.
        :rtype: str
        """
        return self._billing_method

    @billing_method.setter
    def billing_method(self, billing_method):
        """Sets the billing_method of this MatterBase.

        Billing method of this matter

        :param billing_method: The billing_method of this MatterBase.
        :type billing_method: str
        """
        allowed_values = ["flat", "contingency", "hourly"]  # noqa: E501
        if billing_method not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_method` ({0}), must be one of {1}"
                .format(billing_method, allowed_values)
            )

        self._billing_method = billing_method

    @property
    def open_date(self):
        """Gets the open_date of this MatterBase.

        The date the matter was set to open (as a ISO-8601 date)

        :return: The open_date of this MatterBase.
        :rtype: date
        """
        return self._open_date

    @open_date.setter
    def open_date(self, open_date):
        """Sets the open_date of this MatterBase.

        The date the matter was set to open (as a ISO-8601 date)

        :param open_date: The open_date of this MatterBase.
        :type open_date: date
        """

        self._open_date = open_date

    @property
    def close_date(self):
        """Gets the close_date of this MatterBase.

        The date the matter was set to closed (as a ISO-8601 date)

        :return: The close_date of this MatterBase.
        :rtype: date
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date):
        """Sets the close_date of this MatterBase.

        The date the matter was set to closed (as a ISO-8601 date)

        :param close_date: The close_date of this MatterBase.
        :type close_date: date
        """

        self._close_date = close_date

    @property
    def pending_date(self):
        """Gets the pending_date of this MatterBase.

        The date the matter was set to pending (as a ISO-8601 date)

        :return: The pending_date of this MatterBase.
        :rtype: date
        """
        return self._pending_date

    @pending_date.setter
    def pending_date(self, pending_date):
        """Sets the pending_date of this MatterBase.

        The date the matter was set to pending (as a ISO-8601 date)

        :param pending_date: The pending_date of this MatterBase.
        :type pending_date: date
        """

        self._pending_date = pending_date

    @property
    def created_at(self):
        """Gets the created_at of this MatterBase.

        The time the *Matter* was created (as a ISO-8601 timestamp)

        :return: The created_at of this MatterBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MatterBase.

        The time the *Matter* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this MatterBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MatterBase.

        The time the *Matter* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this MatterBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MatterBase.

        The time the *Matter* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this MatterBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def shared(self):
        """Gets the shared of this MatterBase.

        Whether the matter is currently shared with Clio Connect

        :return: The shared of this MatterBase.
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this MatterBase.

        Whether the matter is currently shared with Clio Connect

        :param shared: The shared of this MatterBase.
        :type shared: bool
        """

        self._shared = shared

    @property
    def has_tasks(self):
        """Gets the has_tasks of this MatterBase.

        Whether or not the matter has any tasks.

        :return: The has_tasks of this MatterBase.
        :rtype: bool
        """
        return self._has_tasks

    @has_tasks.setter
    def has_tasks(self, has_tasks):
        """Sets the has_tasks of this MatterBase.

        Whether or not the matter has any tasks.

        :param has_tasks: The has_tasks of this MatterBase.
        :type has_tasks: bool
        """

        self._has_tasks = has_tasks

    @property
    def last_activity_date(self):
        """Gets the last_activity_date of this MatterBase.

        The greatest date out of all of the activities on the matter (as a ISO-8601 date)

        :return: The last_activity_date of this MatterBase.
        :rtype: date
        """
        return self._last_activity_date

    @last_activity_date.setter
    def last_activity_date(self, last_activity_date):
        """Sets the last_activity_date of this MatterBase.

        The greatest date out of all of the activities on the matter (as a ISO-8601 date)

        :param last_activity_date: The last_activity_date of this MatterBase.
        :type last_activity_date: date
        """

        self._last_activity_date = last_activity_date

    @property
    def matter_stage_updated_at(self):
        """Gets the matter_stage_updated_at of this MatterBase.

        The date the matter stage was last updated (as a ISO-8601 date)

        :return: The matter_stage_updated_at of this MatterBase.
        :rtype: datetime
        """
        return self._matter_stage_updated_at

    @matter_stage_updated_at.setter
    def matter_stage_updated_at(self, matter_stage_updated_at):
        """Sets the matter_stage_updated_at of this MatterBase.

        The date the matter stage was last updated (as a ISO-8601 date)

        :param matter_stage_updated_at: The matter_stage_updated_at of this MatterBase.
        :type matter_stage_updated_at: datetime
        """

        self._matter_stage_updated_at = matter_stage_updated_at
