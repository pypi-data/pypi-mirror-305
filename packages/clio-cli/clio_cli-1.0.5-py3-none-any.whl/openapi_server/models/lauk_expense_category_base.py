# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LaukExpenseCategoryBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificated: bool=None, civil: bool=None, created_at: datetime=None, criminal: bool=None, etag: str=None, id: int=None, key: str=None, name: str=None, rate: float=None, updated_at: datetime=None):
        """LaukExpenseCategoryBase - a model defined in OpenAPI

        :param certificated: The certificated of this LaukExpenseCategoryBase.
        :param civil: The civil of this LaukExpenseCategoryBase.
        :param created_at: The created_at of this LaukExpenseCategoryBase.
        :param criminal: The criminal of this LaukExpenseCategoryBase.
        :param etag: The etag of this LaukExpenseCategoryBase.
        :param id: The id of this LaukExpenseCategoryBase.
        :param key: The key of this LaukExpenseCategoryBase.
        :param name: The name of this LaukExpenseCategoryBase.
        :param rate: The rate of this LaukExpenseCategoryBase.
        :param updated_at: The updated_at of this LaukExpenseCategoryBase.
        """
        self.openapi_types = {
            'certificated': bool,
            'civil': bool,
            'created_at': datetime,
            'criminal': bool,
            'etag': str,
            'id': int,
            'key': str,
            'name': str,
            'rate': float,
            'updated_at': datetime
        }

        self.attribute_map = {
            'certificated': 'certificated',
            'civil': 'civil',
            'created_at': 'created_at',
            'criminal': 'criminal',
            'etag': 'etag',
            'id': 'id',
            'key': 'key',
            'name': 'name',
            'rate': 'rate',
            'updated_at': 'updated_at'
        }

        self._certificated = certificated
        self._civil = civil
        self._created_at = created_at
        self._criminal = criminal
        self._etag = etag
        self._id = id
        self._key = key
        self._name = name
        self._rate = rate
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LaukExpenseCategoryBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LaukExpenseCategory_base of this LaukExpenseCategoryBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificated(self):
        """Gets the certificated of this LaukExpenseCategoryBase.

        Certificated boolean identifier for expense

        :return: The certificated of this LaukExpenseCategoryBase.
        :rtype: bool
        """
        return self._certificated

    @certificated.setter
    def certificated(self, certificated):
        """Sets the certificated of this LaukExpenseCategoryBase.

        Certificated boolean identifier for expense

        :param certificated: The certificated of this LaukExpenseCategoryBase.
        :type certificated: bool
        """

        self._certificated = certificated

    @property
    def civil(self):
        """Gets the civil of this LaukExpenseCategoryBase.

        Civil boolean identifier for expense

        :return: The civil of this LaukExpenseCategoryBase.
        :rtype: bool
        """
        return self._civil

    @civil.setter
    def civil(self, civil):
        """Sets the civil of this LaukExpenseCategoryBase.

        Civil boolean identifier for expense

        :param civil: The civil of this LaukExpenseCategoryBase.
        :type civil: bool
        """

        self._civil = civil

    @property
    def created_at(self):
        """Gets the created_at of this LaukExpenseCategoryBase.

        The time the *LaukExpenseCategory* was created (as a ISO-8601 timestamp)

        :return: The created_at of this LaukExpenseCategoryBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LaukExpenseCategoryBase.

        The time the *LaukExpenseCategory* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this LaukExpenseCategoryBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def criminal(self):
        """Gets the criminal of this LaukExpenseCategoryBase.

        Criminal boolean identifier for expense

        :return: The criminal of this LaukExpenseCategoryBase.
        :rtype: bool
        """
        return self._criminal

    @criminal.setter
    def criminal(self, criminal):
        """Sets the criminal of this LaukExpenseCategoryBase.

        Criminal boolean identifier for expense

        :param criminal: The criminal of this LaukExpenseCategoryBase.
        :type criminal: bool
        """

        self._criminal = criminal

    @property
    def etag(self):
        """Gets the etag of this LaukExpenseCategoryBase.

        ETag for the *LaukExpenseCategory*

        :return: The etag of this LaukExpenseCategoryBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this LaukExpenseCategoryBase.

        ETag for the *LaukExpenseCategory*

        :param etag: The etag of this LaukExpenseCategoryBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this LaukExpenseCategoryBase.

        Unique identifier for the *LaukExpenseCategory*

        :return: The id of this LaukExpenseCategoryBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LaukExpenseCategoryBase.

        Unique identifier for the *LaukExpenseCategory*

        :param id: The id of this LaukExpenseCategoryBase.
        :type id: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this LaukExpenseCategoryBase.

        Unique key

        :return: The key of this LaukExpenseCategoryBase.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this LaukExpenseCategoryBase.

        Unique key

        :param key: The key of this LaukExpenseCategoryBase.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this LaukExpenseCategoryBase.

        Expense name

        :return: The name of this LaukExpenseCategoryBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LaukExpenseCategoryBase.

        Expense name

        :param name: The name of this LaukExpenseCategoryBase.
        :type name: str
        """

        self._name = name

    @property
    def rate(self):
        """Gets the rate of this LaukExpenseCategoryBase.

        Determines rate based on region param

        :return: The rate of this LaukExpenseCategoryBase.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this LaukExpenseCategoryBase.

        Determines rate based on region param

        :param rate: The rate of this LaukExpenseCategoryBase.
        :type rate: float
        """

        self._rate = rate

    @property
    def updated_at(self):
        """Gets the updated_at of this LaukExpenseCategoryBase.

        The time the *LaukExpenseCategory* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this LaukExpenseCategoryBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LaukExpenseCategoryBase.

        The time the *LaukExpenseCategory* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this LaukExpenseCategoryBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
