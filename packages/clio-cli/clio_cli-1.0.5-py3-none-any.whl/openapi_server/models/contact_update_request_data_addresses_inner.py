# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactUpdateRequestDataAddressesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str='Other', street: str=None, city: str=None, province: str=None, postal_code: str=None, country: str=None, id: int=None, destroy: bool=None):
        """ContactUpdateRequestDataAddressesInner - a model defined in OpenAPI

        :param name: The name of this ContactUpdateRequestDataAddressesInner.
        :param street: The street of this ContactUpdateRequestDataAddressesInner.
        :param city: The city of this ContactUpdateRequestDataAddressesInner.
        :param province: The province of this ContactUpdateRequestDataAddressesInner.
        :param postal_code: The postal_code of this ContactUpdateRequestDataAddressesInner.
        :param country: The country of this ContactUpdateRequestDataAddressesInner.
        :param id: The id of this ContactUpdateRequestDataAddressesInner.
        :param destroy: The destroy of this ContactUpdateRequestDataAddressesInner.
        """
        self.openapi_types = {
            'name': str,
            'street': str,
            'city': str,
            'province': str,
            'postal_code': str,
            'country': str,
            'id': int,
            'destroy': bool
        }

        self.attribute_map = {
            'name': 'name',
            'street': 'street',
            'city': 'city',
            'province': 'province',
            'postal_code': 'postal_code',
            'country': 'country',
            'id': 'id',
            'destroy': '_destroy'
        }

        self._name = name
        self._street = street
        self._city = city
        self._province = province
        self._postal_code = postal_code
        self._country = country
        self._id = id
        self._destroy = destroy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactUpdateRequestDataAddressesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact_update_request_data_addresses_inner of this ContactUpdateRequestDataAddressesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ContactUpdateRequestDataAddressesInner.

        Name of the Address.

        :return: The name of this ContactUpdateRequestDataAddressesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactUpdateRequestDataAddressesInner.

        Name of the Address.

        :param name: The name of this ContactUpdateRequestDataAddressesInner.
        :type name: str
        """
        allowed_values = ["Work", "Home", "Billing", "Other"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def street(self):
        """Gets the street of this ContactUpdateRequestDataAddressesInner.

        Street.

        :return: The street of this ContactUpdateRequestDataAddressesInner.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this ContactUpdateRequestDataAddressesInner.

        Street.

        :param street: The street of this ContactUpdateRequestDataAddressesInner.
        :type street: str
        """

        self._street = street

    @property
    def city(self):
        """Gets the city of this ContactUpdateRequestDataAddressesInner.

        City.

        :return: The city of this ContactUpdateRequestDataAddressesInner.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ContactUpdateRequestDataAddressesInner.

        City.

        :param city: The city of this ContactUpdateRequestDataAddressesInner.
        :type city: str
        """

        self._city = city

    @property
    def province(self):
        """Gets the province of this ContactUpdateRequestDataAddressesInner.

        Province or state.

        :return: The province of this ContactUpdateRequestDataAddressesInner.
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this ContactUpdateRequestDataAddressesInner.

        Province or state.

        :param province: The province of this ContactUpdateRequestDataAddressesInner.
        :type province: str
        """

        self._province = province

    @property
    def postal_code(self):
        """Gets the postal_code of this ContactUpdateRequestDataAddressesInner.

        Postal code or zip code.

        :return: The postal_code of this ContactUpdateRequestDataAddressesInner.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ContactUpdateRequestDataAddressesInner.

        Postal code or zip code.

        :param postal_code: The postal_code of this ContactUpdateRequestDataAddressesInner.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this ContactUpdateRequestDataAddressesInner.

        Country

        :return: The country of this ContactUpdateRequestDataAddressesInner.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ContactUpdateRequestDataAddressesInner.

        Country

        :param country: The country of this ContactUpdateRequestDataAddressesInner.
        :type country: str
        """

        self._country = country

    @property
    def id(self):
        """Gets the id of this ContactUpdateRequestDataAddressesInner.

        The unique identifier for a single Address associated with the Contact. The keyword `null` is not valid for this field.

        :return: The id of this ContactUpdateRequestDataAddressesInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContactUpdateRequestDataAddressesInner.

        The unique identifier for a single Address associated with the Contact. The keyword `null` is not valid for this field.

        :param id: The id of this ContactUpdateRequestDataAddressesInner.
        :type id: int
        """

        self._id = id

    @property
    def destroy(self):
        """Gets the destroy of this ContactUpdateRequestDataAddressesInner.

        The destroy flag. If the flag is set to `true` and the unique identifier of the associated Address is present, the Address is deleted from the Contact.

        :return: The destroy of this ContactUpdateRequestDataAddressesInner.
        :rtype: bool
        """
        return self._destroy

    @destroy.setter
    def destroy(self, destroy):
        """Sets the destroy of this ContactUpdateRequestDataAddressesInner.

        The destroy flag. If the flag is set to `true` and the unique identifier of the associated Address is present, the Address is deleted from the Contact.

        :param destroy: The destroy of this ContactUpdateRequestDataAddressesInner.
        :type destroy: bool
        """

        self._destroy = destroy
