# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_base import GroupBase
from openapi_server.models.utbms_code_base import UtbmsCodeBase
from openapi_server import util


class ExpenseCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, name: str=None, rate: int=None, entry_type: str=None, created_at: datetime=None, updated_at: datetime=None, xero_expense_code: str=None, accessible_to_user: bool=None, tax_setting: str=None, groups: List[GroupBase]=None, utbms_code: UtbmsCodeBase=None):
        """ExpenseCategory - a model defined in OpenAPI

        :param id: The id of this ExpenseCategory.
        :param etag: The etag of this ExpenseCategory.
        :param name: The name of this ExpenseCategory.
        :param rate: The rate of this ExpenseCategory.
        :param entry_type: The entry_type of this ExpenseCategory.
        :param created_at: The created_at of this ExpenseCategory.
        :param updated_at: The updated_at of this ExpenseCategory.
        :param xero_expense_code: The xero_expense_code of this ExpenseCategory.
        :param accessible_to_user: The accessible_to_user of this ExpenseCategory.
        :param tax_setting: The tax_setting of this ExpenseCategory.
        :param groups: The groups of this ExpenseCategory.
        :param utbms_code: The utbms_code of this ExpenseCategory.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'name': str,
            'rate': int,
            'entry_type': str,
            'created_at': datetime,
            'updated_at': datetime,
            'xero_expense_code': str,
            'accessible_to_user': bool,
            'tax_setting': str,
            'groups': List[GroupBase],
            'utbms_code': UtbmsCodeBase
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'name': 'name',
            'rate': 'rate',
            'entry_type': 'entry_type',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'xero_expense_code': 'xero_expense_code',
            'accessible_to_user': 'accessible_to_user',
            'tax_setting': 'tax_setting',
            'groups': 'groups',
            'utbms_code': 'utbms_code'
        }

        self._id = id
        self._etag = etag
        self._name = name
        self._rate = rate
        self._entry_type = entry_type
        self._created_at = created_at
        self._updated_at = updated_at
        self._xero_expense_code = xero_expense_code
        self._accessible_to_user = accessible_to_user
        self._tax_setting = tax_setting
        self._groups = groups
        self._utbms_code = utbms_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpenseCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpenseCategory of this ExpenseCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ExpenseCategory.

        Unique identifier for the *ExpenseCategory*

        :return: The id of this ExpenseCategory.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExpenseCategory.

        Unique identifier for the *ExpenseCategory*

        :param id: The id of this ExpenseCategory.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this ExpenseCategory.

        ETag for the *ExpenseCategory*

        :return: The etag of this ExpenseCategory.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ExpenseCategory.

        ETag for the *ExpenseCategory*

        :param etag: The etag of this ExpenseCategory.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this ExpenseCategory.

        The name of the expense category

        :return: The name of this ExpenseCategory.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExpenseCategory.

        The name of the expense category

        :param name: The name of this ExpenseCategory.
        :type name: str
        """

        self._name = name

    @property
    def rate(self):
        """Gets the rate of this ExpenseCategory.

        The price charged per unit cost

        :return: The rate of this ExpenseCategory.
        :rtype: int
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this ExpenseCategory.

        The price charged per unit cost

        :param rate: The rate of this ExpenseCategory.
        :type rate: int
        """

        self._rate = rate

    @property
    def entry_type(self):
        """Gets the entry_type of this ExpenseCategory.

        The type of expense entry the category is associated to. Can be either \"hard_cost\", \"soft_cost\" or \"unassociated\"

        :return: The entry_type of this ExpenseCategory.
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this ExpenseCategory.

        The type of expense entry the category is associated to. Can be either \"hard_cost\", \"soft_cost\" or \"unassociated\"

        :param entry_type: The entry_type of this ExpenseCategory.
        :type entry_type: str
        """

        self._entry_type = entry_type

    @property
    def created_at(self):
        """Gets the created_at of this ExpenseCategory.

        The time the *ExpenseCategory* was created (as a ISO-8601 timestamp)

        :return: The created_at of this ExpenseCategory.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ExpenseCategory.

        The time the *ExpenseCategory* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this ExpenseCategory.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ExpenseCategory.

        The time the *ExpenseCategory* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this ExpenseCategory.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ExpenseCategory.

        The time the *ExpenseCategory* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this ExpenseCategory.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def xero_expense_code(self):
        """Gets the xero_expense_code of this ExpenseCategory.

        Custom Xero expense code for an expense category

        :return: The xero_expense_code of this ExpenseCategory.
        :rtype: str
        """
        return self._xero_expense_code

    @xero_expense_code.setter
    def xero_expense_code(self, xero_expense_code):
        """Sets the xero_expense_code of this ExpenseCategory.

        Custom Xero expense code for an expense category

        :param xero_expense_code: The xero_expense_code of this ExpenseCategory.
        :type xero_expense_code: str
        """

        self._xero_expense_code = xero_expense_code

    @property
    def accessible_to_user(self):
        """Gets the accessible_to_user of this ExpenseCategory.

        Determines if expense category is accessible to user

        :return: The accessible_to_user of this ExpenseCategory.
        :rtype: bool
        """
        return self._accessible_to_user

    @accessible_to_user.setter
    def accessible_to_user(self, accessible_to_user):
        """Sets the accessible_to_user of this ExpenseCategory.

        Determines if expense category is accessible to user

        :param accessible_to_user: The accessible_to_user of this ExpenseCategory.
        :type accessible_to_user: bool
        """

        self._accessible_to_user = accessible_to_user

    @property
    def tax_setting(self):
        """Gets the tax_setting of this ExpenseCategory.

        The type of tax rate applied to the expense category.

        :return: The tax_setting of this ExpenseCategory.
        :rtype: str
        """
        return self._tax_setting

    @tax_setting.setter
    def tax_setting(self, tax_setting):
        """Sets the tax_setting of this ExpenseCategory.

        The type of tax rate applied to the expense category.

        :param tax_setting: The tax_setting of this ExpenseCategory.
        :type tax_setting: str
        """

        self._tax_setting = tax_setting

    @property
    def groups(self):
        """Gets the groups of this ExpenseCategory.

        Group

        :return: The groups of this ExpenseCategory.
        :rtype: List[GroupBase]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ExpenseCategory.

        Group

        :param groups: The groups of this ExpenseCategory.
        :type groups: List[GroupBase]
        """

        self._groups = groups

    @property
    def utbms_code(self):
        """Gets the utbms_code of this ExpenseCategory.


        :return: The utbms_code of this ExpenseCategory.
        :rtype: UtbmsCodeBase
        """
        return self._utbms_code

    @utbms_code.setter
    def utbms_code(self, utbms_code):
        """Sets the utbms_code of this ExpenseCategory.


        :param utbms_code: The utbms_code of this ExpenseCategory.
        :type utbms_code: UtbmsCodeBase
        """

        self._utbms_code = utbms_code
