# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomFieldSetUpdateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, displayed: bool=None, name: str=None, parent_type: str=None):
        """CustomFieldSetUpdateRequestData - a model defined in OpenAPI

        :param displayed: The displayed of this CustomFieldSetUpdateRequestData.
        :param name: The name of this CustomFieldSetUpdateRequestData.
        :param parent_type: The parent_type of this CustomFieldSetUpdateRequestData.
        """
        self.openapi_types = {
            'displayed': bool,
            'name': str,
            'parent_type': str
        }

        self.attribute_map = {
            'displayed': 'displayed',
            'name': 'name',
            'parent_type': 'parent_type'
        }

        self._displayed = displayed
        self._name = name
        self._parent_type = parent_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomFieldSetUpdateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomFieldSet_update_request_data of this CustomFieldSetUpdateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def displayed(self):
        """Gets the displayed of this CustomFieldSetUpdateRequestData.

        Whether or not the CustomFieldSet should be displayed by default.

        :return: The displayed of this CustomFieldSetUpdateRequestData.
        :rtype: bool
        """
        return self._displayed

    @displayed.setter
    def displayed(self, displayed):
        """Sets the displayed of this CustomFieldSetUpdateRequestData.

        Whether or not the CustomFieldSet should be displayed by default.

        :param displayed: The displayed of this CustomFieldSetUpdateRequestData.
        :type displayed: bool
        """

        self._displayed = displayed

    @property
    def name(self):
        """Gets the name of this CustomFieldSetUpdateRequestData.

        CustomFieldSet name.

        :return: The name of this CustomFieldSetUpdateRequestData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomFieldSetUpdateRequestData.

        CustomFieldSet name.

        :param name: The name of this CustomFieldSetUpdateRequestData.
        :type name: str
        """

        self._name = name

    @property
    def parent_type(self):
        """Gets the parent_type of this CustomFieldSetUpdateRequestData.

        Type of object the CustomFieldSet is for.

        :return: The parent_type of this CustomFieldSetUpdateRequestData.
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type):
        """Sets the parent_type of this CustomFieldSetUpdateRequestData.

        Type of object the CustomFieldSet is for.

        :param parent_type: The parent_type of this CustomFieldSetUpdateRequestData.
        :type parent_type: str
        """
        allowed_values = ["Contact", "Matter"]  # noqa: E501
        if parent_type not in allowed_values:
            raise ValueError(
                "Invalid value for `parent_type` ({0}), must be one of {1}"
                .format(parent_type, allowed_values)
            )

        self._parent_type = parent_type
