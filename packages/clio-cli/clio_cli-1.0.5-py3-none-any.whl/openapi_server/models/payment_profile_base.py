# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentProfileBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, created_at: datetime=None, updated_at: datetime=None, billing_setting_id: int=None, name: str=None, terms: int=None, discount_rate: float=None, discount_period: int=None, interest_rate: float=None, interest_period: int=None, interest_type: str=None):
        """PaymentProfileBase - a model defined in OpenAPI

        :param id: The id of this PaymentProfileBase.
        :param etag: The etag of this PaymentProfileBase.
        :param created_at: The created_at of this PaymentProfileBase.
        :param updated_at: The updated_at of this PaymentProfileBase.
        :param billing_setting_id: The billing_setting_id of this PaymentProfileBase.
        :param name: The name of this PaymentProfileBase.
        :param terms: The terms of this PaymentProfileBase.
        :param discount_rate: The discount_rate of this PaymentProfileBase.
        :param discount_period: The discount_period of this PaymentProfileBase.
        :param interest_rate: The interest_rate of this PaymentProfileBase.
        :param interest_period: The interest_period of this PaymentProfileBase.
        :param interest_type: The interest_type of this PaymentProfileBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'created_at': datetime,
            'updated_at': datetime,
            'billing_setting_id': int,
            'name': str,
            'terms': int,
            'discount_rate': float,
            'discount_period': int,
            'interest_rate': float,
            'interest_period': int,
            'interest_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'billing_setting_id': 'billing_setting_id',
            'name': 'name',
            'terms': 'terms',
            'discount_rate': 'discount_rate',
            'discount_period': 'discount_period',
            'interest_rate': 'interest_rate',
            'interest_period': 'interest_period',
            'interest_type': 'interest_type'
        }

        self._id = id
        self._etag = etag
        self._created_at = created_at
        self._updated_at = updated_at
        self._billing_setting_id = billing_setting_id
        self._name = name
        self._terms = terms
        self._discount_rate = discount_rate
        self._discount_period = discount_period
        self._interest_rate = interest_rate
        self._interest_period = interest_period
        self._interest_type = interest_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentProfileBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentProfile_base of this PaymentProfileBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PaymentProfileBase.

        Unique identifier for the *PaymentProfile*

        :return: The id of this PaymentProfileBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentProfileBase.

        Unique identifier for the *PaymentProfile*

        :param id: The id of this PaymentProfileBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this PaymentProfileBase.

        ETag for the *PaymentProfile*

        :return: The etag of this PaymentProfileBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this PaymentProfileBase.

        ETag for the *PaymentProfile*

        :param etag: The etag of this PaymentProfileBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def created_at(self):
        """Gets the created_at of this PaymentProfileBase.

        The time the *PaymentProfile* was created (as a ISO-8601 timestamp)

        :return: The created_at of this PaymentProfileBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PaymentProfileBase.

        The time the *PaymentProfile* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this PaymentProfileBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PaymentProfileBase.

        The time the *PaymentProfile* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this PaymentProfileBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PaymentProfileBase.

        The time the *PaymentProfile* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this PaymentProfileBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def billing_setting_id(self):
        """Gets the billing_setting_id of this PaymentProfileBase.

        The unique identifier for the *PaymentProfile

        :return: The billing_setting_id of this PaymentProfileBase.
        :rtype: int
        """
        return self._billing_setting_id

    @billing_setting_id.setter
    def billing_setting_id(self, billing_setting_id):
        """Sets the billing_setting_id of this PaymentProfileBase.

        The unique identifier for the *PaymentProfile

        :param billing_setting_id: The billing_setting_id of this PaymentProfileBase.
        :type billing_setting_id: int
        """

        self._billing_setting_id = billing_setting_id

    @property
    def name(self):
        """Gets the name of this PaymentProfileBase.

        The name of the *PaymentProfile

        :return: The name of this PaymentProfileBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentProfileBase.

        The name of the *PaymentProfile

        :param name: The name of this PaymentProfileBase.
        :type name: str
        """

        self._name = name

    @property
    def terms(self):
        """Gets the terms of this PaymentProfileBase.

        The total grace period for the *PaymentProfile

        :return: The terms of this PaymentProfileBase.
        :rtype: int
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this PaymentProfileBase.

        The total grace period for the *PaymentProfile

        :param terms: The terms of this PaymentProfileBase.
        :type terms: int
        """

        self._terms = terms

    @property
    def discount_rate(self):
        """Gets the discount_rate of this PaymentProfileBase.

        The early payment discount rate for the *PaymentProfile

        :return: The discount_rate of this PaymentProfileBase.
        :rtype: float
        """
        return self._discount_rate

    @discount_rate.setter
    def discount_rate(self, discount_rate):
        """Sets the discount_rate of this PaymentProfileBase.

        The early payment discount rate for the *PaymentProfile

        :param discount_rate: The discount_rate of this PaymentProfileBase.
        :type discount_rate: float
        """

        self._discount_rate = discount_rate

    @property
    def discount_period(self):
        """Gets the discount_period of this PaymentProfileBase.

        The early payment discount period for the *PaymentProfile

        :return: The discount_period of this PaymentProfileBase.
        :rtype: int
        """
        return self._discount_period

    @discount_period.setter
    def discount_period(self, discount_period):
        """Sets the discount_period of this PaymentProfileBase.

        The early payment discount period for the *PaymentProfile

        :param discount_period: The discount_period of this PaymentProfileBase.
        :type discount_period: int
        """

        self._discount_period = discount_period

    @property
    def interest_rate(self):
        """Gets the interest_rate of this PaymentProfileBase.

        The interest rate for the *PaymentProfile

        :return: The interest_rate of this PaymentProfileBase.
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this PaymentProfileBase.

        The interest rate for the *PaymentProfile

        :param interest_rate: The interest_rate of this PaymentProfileBase.
        :type interest_rate: float
        """

        self._interest_rate = interest_rate

    @property
    def interest_period(self):
        """Gets the interest_period of this PaymentProfileBase.

        The interest period interval for the *PaymentProfile

        :return: The interest_period of this PaymentProfileBase.
        :rtype: int
        """
        return self._interest_period

    @interest_period.setter
    def interest_period(self, interest_period):
        """Sets the interest_period of this PaymentProfileBase.

        The interest period interval for the *PaymentProfile

        :param interest_period: The interest_period of this PaymentProfileBase.
        :type interest_period: int
        """

        self._interest_period = interest_period

    @property
    def interest_type(self):
        """Gets the interest_type of this PaymentProfileBase.

        The type of interest to be calculated for the *PaymentProfile (Simple or Compound)

        :return: The interest_type of this PaymentProfileBase.
        :rtype: str
        """
        return self._interest_type

    @interest_type.setter
    def interest_type(self, interest_type):
        """Sets the interest_type of this PaymentProfileBase.

        The type of interest to be calculated for the *PaymentProfile (Simple or Compound)

        :param interest_type: The interest_type of this PaymentProfileBase.
        :type interest_type: str
        """
        allowed_values = ["simple", "compound"]  # noqa: E501
        if interest_type not in allowed_values:
            raise ValueError(
                "Invalid value for `interest_type` ({0}), must be one of {1}"
                .format(interest_type, allowed_values)
            )

        self._interest_type = interest_type
