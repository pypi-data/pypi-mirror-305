# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conversation_membership import ConversationMembership
from openapi_server.models.conversation_message_base import ConversationMessageBase
from openapi_server.models.document_base import DocumentBase
from openapi_server.models.matter_base import MatterBase
from openapi_server import util


class Conversation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, archived: bool=None, read_only: bool=None, current_user_is_member: bool=None, subject: str=None, message_count: int=None, time_entries_count: int=None, read: bool=None, created_at: datetime=None, updated_at: datetime=None, last_message: ConversationMessageBase=None, first_message: ConversationMessageBase=None, matter: MatterBase=None, messages: List[ConversationMessageBase]=None, documents: List[DocumentBase]=None, memberships: List[ConversationMembership]=None):
        """Conversation - a model defined in OpenAPI

        :param id: The id of this Conversation.
        :param etag: The etag of this Conversation.
        :param archived: The archived of this Conversation.
        :param read_only: The read_only of this Conversation.
        :param current_user_is_member: The current_user_is_member of this Conversation.
        :param subject: The subject of this Conversation.
        :param message_count: The message_count of this Conversation.
        :param time_entries_count: The time_entries_count of this Conversation.
        :param read: The read of this Conversation.
        :param created_at: The created_at of this Conversation.
        :param updated_at: The updated_at of this Conversation.
        :param last_message: The last_message of this Conversation.
        :param first_message: The first_message of this Conversation.
        :param matter: The matter of this Conversation.
        :param messages: The messages of this Conversation.
        :param documents: The documents of this Conversation.
        :param memberships: The memberships of this Conversation.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'archived': bool,
            'read_only': bool,
            'current_user_is_member': bool,
            'subject': str,
            'message_count': int,
            'time_entries_count': int,
            'read': bool,
            'created_at': datetime,
            'updated_at': datetime,
            'last_message': ConversationMessageBase,
            'first_message': ConversationMessageBase,
            'matter': MatterBase,
            'messages': List[ConversationMessageBase],
            'documents': List[DocumentBase],
            'memberships': List[ConversationMembership]
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'archived': 'archived',
            'read_only': 'read_only',
            'current_user_is_member': 'current_user_is_member',
            'subject': 'subject',
            'message_count': 'message_count',
            'time_entries_count': 'time_entries_count',
            'read': 'read',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'last_message': 'last_message',
            'first_message': 'first_message',
            'matter': 'matter',
            'messages': 'messages',
            'documents': 'documents',
            'memberships': 'memberships'
        }

        self._id = id
        self._etag = etag
        self._archived = archived
        self._read_only = read_only
        self._current_user_is_member = current_user_is_member
        self._subject = subject
        self._message_count = message_count
        self._time_entries_count = time_entries_count
        self._read = read
        self._created_at = created_at
        self._updated_at = updated_at
        self._last_message = last_message
        self._first_message = first_message
        self._matter = matter
        self._messages = messages
        self._documents = documents
        self._memberships = memberships

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Conversation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conversation of this Conversation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Conversation.

        Unique identifier for the *Conversation*

        :return: The id of this Conversation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Conversation.

        Unique identifier for the *Conversation*

        :param id: The id of this Conversation.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this Conversation.

        ETag for the *Conversation*

        :return: The etag of this Conversation.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Conversation.

        ETag for the *Conversation*

        :param etag: The etag of this Conversation.
        :type etag: str
        """

        self._etag = etag

    @property
    def archived(self):
        """Gets the archived of this Conversation.

        Whether the conversation has been archived

        :return: The archived of this Conversation.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Conversation.

        Whether the conversation has been archived

        :param archived: The archived of this Conversation.
        :type archived: bool
        """

        self._archived = archived

    @property
    def read_only(self):
        """Gets the read_only of this Conversation.

        Whether the conversation is read only

        :return: The read_only of this Conversation.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this Conversation.

        Whether the conversation is read only

        :param read_only: The read_only of this Conversation.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def current_user_is_member(self):
        """Gets the current_user_is_member of this Conversation.

        Whether the current user is a member of this conversation

        :return: The current_user_is_member of this Conversation.
        :rtype: bool
        """
        return self._current_user_is_member

    @current_user_is_member.setter
    def current_user_is_member(self, current_user_is_member):
        """Sets the current_user_is_member of this Conversation.

        Whether the current user is a member of this conversation

        :param current_user_is_member: The current_user_is_member of this Conversation.
        :type current_user_is_member: bool
        """

        self._current_user_is_member = current_user_is_member

    @property
    def subject(self):
        """Gets the subject of this Conversation.

        The subject of the *Conversation*

        :return: The subject of this Conversation.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Conversation.

        The subject of the *Conversation*

        :param subject: The subject of this Conversation.
        :type subject: str
        """

        self._subject = subject

    @property
    def message_count(self):
        """Gets the message_count of this Conversation.

        The number of messages in this conversation

        :return: The message_count of this Conversation.
        :rtype: int
        """
        return self._message_count

    @message_count.setter
    def message_count(self, message_count):
        """Sets the message_count of this Conversation.

        The number of messages in this conversation

        :param message_count: The message_count of this Conversation.
        :type message_count: int
        """

        self._message_count = message_count

    @property
    def time_entries_count(self):
        """Gets the time_entries_count of this Conversation.

        The number of time entries applied to this conversation

        :return: The time_entries_count of this Conversation.
        :rtype: int
        """
        return self._time_entries_count

    @time_entries_count.setter
    def time_entries_count(self, time_entries_count):
        """Sets the time_entries_count of this Conversation.

        The number of time entries applied to this conversation

        :param time_entries_count: The time_entries_count of this Conversation.
        :type time_entries_count: int
        """

        self._time_entries_count = time_entries_count

    @property
    def read(self):
        """Gets the read of this Conversation.

        Whether any messages in this conversation have been viewed

        :return: The read of this Conversation.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Conversation.

        Whether any messages in this conversation have been viewed

        :param read: The read of this Conversation.
        :type read: bool
        """

        self._read = read

    @property
    def created_at(self):
        """Gets the created_at of this Conversation.

        The time the *Conversation* was created (as a ISO-8601 timestamp)

        :return: The created_at of this Conversation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Conversation.

        The time the *Conversation* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this Conversation.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Conversation.

        The time the *Conversation* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this Conversation.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Conversation.

        The time the *Conversation* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this Conversation.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def last_message(self):
        """Gets the last_message of this Conversation.


        :return: The last_message of this Conversation.
        :rtype: ConversationMessageBase
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this Conversation.


        :param last_message: The last_message of this Conversation.
        :type last_message: ConversationMessageBase
        """

        self._last_message = last_message

    @property
    def first_message(self):
        """Gets the first_message of this Conversation.


        :return: The first_message of this Conversation.
        :rtype: ConversationMessageBase
        """
        return self._first_message

    @first_message.setter
    def first_message(self, first_message):
        """Sets the first_message of this Conversation.


        :param first_message: The first_message of this Conversation.
        :type first_message: ConversationMessageBase
        """

        self._first_message = first_message

    @property
    def matter(self):
        """Gets the matter of this Conversation.


        :return: The matter of this Conversation.
        :rtype: MatterBase
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this Conversation.


        :param matter: The matter of this Conversation.
        :type matter: MatterBase
        """

        self._matter = matter

    @property
    def messages(self):
        """Gets the messages of this Conversation.

        ConversationMessage

        :return: The messages of this Conversation.
        :rtype: List[ConversationMessageBase]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Conversation.

        ConversationMessage

        :param messages: The messages of this Conversation.
        :type messages: List[ConversationMessageBase]
        """

        self._messages = messages

    @property
    def documents(self):
        """Gets the documents of this Conversation.

        Document

        :return: The documents of this Conversation.
        :rtype: List[DocumentBase]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this Conversation.

        Document

        :param documents: The documents of this Conversation.
        :type documents: List[DocumentBase]
        """

        self._documents = documents

    @property
    def memberships(self):
        """Gets the memberships of this Conversation.

        ConversationMembership

        :return: The memberships of this Conversation.
        :rtype: List[ConversationMembership]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this Conversation.

        ConversationMembership

        :param memberships: The memberships of this Conversation.
        :type memberships: List[ConversationMembership]
        """

        self._memberships = memberships
