# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaskTemplateUpdateRequestDataReminderTemplatesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration_value: int=None, duration_unit: str=None, notification_type: str=None, id: int=None, destroy: bool=None):
        """TaskTemplateUpdateRequestDataReminderTemplatesInner - a model defined in OpenAPI

        :param duration_value: The duration_value of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :param duration_unit: The duration_unit of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :param notification_type: The notification_type of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :param id: The id of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :param destroy: The destroy of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        """
        self.openapi_types = {
            'duration_value': int,
            'duration_unit': str,
            'notification_type': str,
            'id': int,
            'destroy': bool
        }

        self.attribute_map = {
            'duration_value': 'duration_value',
            'duration_unit': 'duration_unit',
            'notification_type': 'notification_type',
            'id': 'id',
            'destroy': '_destroy'
        }

        self._duration_value = duration_value
        self._duration_unit = duration_unit
        self._notification_type = notification_type
        self._id = id
        self._destroy = destroy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskTemplateUpdateRequestDataReminderTemplatesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskTemplate_update_request_data_reminder_templates_inner of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration_value(self):
        """Gets the duration_value of this TaskTemplateUpdateRequestDataReminderTemplatesInner.

        Time measured in `duration_unit` to remind user before the subject.

        :return: The duration_value of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :rtype: int
        """
        return self._duration_value

    @duration_value.setter
    def duration_value(self, duration_value):
        """Sets the duration_value of this TaskTemplateUpdateRequestDataReminderTemplatesInner.

        Time measured in `duration_unit` to remind user before the subject.

        :param duration_value: The duration_value of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :type duration_value: int
        """

        self._duration_value = duration_value

    @property
    def duration_unit(self):
        """Gets the duration_unit of this TaskTemplateUpdateRequestDataReminderTemplatesInner.

        Unit to measure the duration value in.

        :return: The duration_unit of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :rtype: str
        """
        return self._duration_unit

    @duration_unit.setter
    def duration_unit(self, duration_unit):
        """Sets the duration_unit of this TaskTemplateUpdateRequestDataReminderTemplatesInner.

        Unit to measure the duration value in.

        :param duration_unit: The duration_unit of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :type duration_unit: str
        """

        self._duration_unit = duration_unit

    @property
    def notification_type(self):
        """Gets the notification_type of this TaskTemplateUpdateRequestDataReminderTemplatesInner.

        Notification method.

        :return: The notification_type of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this TaskTemplateUpdateRequestDataReminderTemplatesInner.

        Notification method.

        :param notification_type: The notification_type of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :type notification_type: str
        """
        allowed_values = ["Email", "Popup"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def id(self):
        """Gets the id of this TaskTemplateUpdateRequestDataReminderTemplatesInner.

        The unique identifier for a single ReminderTemplate associated with the TaskTemplate. The keyword `null` is not valid for this field.

        :return: The id of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskTemplateUpdateRequestDataReminderTemplatesInner.

        The unique identifier for a single ReminderTemplate associated with the TaskTemplate. The keyword `null` is not valid for this field.

        :param id: The id of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :type id: int
        """

        self._id = id

    @property
    def destroy(self):
        """Gets the destroy of this TaskTemplateUpdateRequestDataReminderTemplatesInner.

        The destroy flag. If the flag is set to `true` and the unique identifier of the associated ReminderTemplate is present, the ReminderTemplate is deleted from the TaskTemplate.

        :return: The destroy of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :rtype: bool
        """
        return self._destroy

    @destroy.setter
    def destroy(self, destroy):
        """Sets the destroy of this TaskTemplateUpdateRequestDataReminderTemplatesInner.

        The destroy flag. If the flag is set to `true` and the unique identifier of the associated ReminderTemplate is present, the ReminderTemplate is deleted from the TaskTemplate.

        :param destroy: The destroy of this TaskTemplateUpdateRequestDataReminderTemplatesInner.
        :type destroy: bool
        """

        self._destroy = destroy
