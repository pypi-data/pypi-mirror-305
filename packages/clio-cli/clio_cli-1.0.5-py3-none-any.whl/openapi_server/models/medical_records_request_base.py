# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MedicalRecordsRequestBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, bills_follow_up_date: datetime=None, bills_request_date: datetime=None, bills_status: str=None, description: str=None, in_treatment: bool=None, records_follow_up_date: datetime=None, records_request_date: datetime=None, records_status: str=None, treatment_end_date: datetime=None, treatment_start_date: datetime=None, created_at: datetime=None, updated_at: datetime=None):
        """MedicalRecordsRequestBase - a model defined in OpenAPI

        :param id: The id of this MedicalRecordsRequestBase.
        :param etag: The etag of this MedicalRecordsRequestBase.
        :param bills_follow_up_date: The bills_follow_up_date of this MedicalRecordsRequestBase.
        :param bills_request_date: The bills_request_date of this MedicalRecordsRequestBase.
        :param bills_status: The bills_status of this MedicalRecordsRequestBase.
        :param description: The description of this MedicalRecordsRequestBase.
        :param in_treatment: The in_treatment of this MedicalRecordsRequestBase.
        :param records_follow_up_date: The records_follow_up_date of this MedicalRecordsRequestBase.
        :param records_request_date: The records_request_date of this MedicalRecordsRequestBase.
        :param records_status: The records_status of this MedicalRecordsRequestBase.
        :param treatment_end_date: The treatment_end_date of this MedicalRecordsRequestBase.
        :param treatment_start_date: The treatment_start_date of this MedicalRecordsRequestBase.
        :param created_at: The created_at of this MedicalRecordsRequestBase.
        :param updated_at: The updated_at of this MedicalRecordsRequestBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'bills_follow_up_date': datetime,
            'bills_request_date': datetime,
            'bills_status': str,
            'description': str,
            'in_treatment': bool,
            'records_follow_up_date': datetime,
            'records_request_date': datetime,
            'records_status': str,
            'treatment_end_date': datetime,
            'treatment_start_date': datetime,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'bills_follow_up_date': 'bills_follow_up_date',
            'bills_request_date': 'bills_request_date',
            'bills_status': 'bills_status',
            'description': 'description',
            'in_treatment': 'in_treatment',
            'records_follow_up_date': 'records_follow_up_date',
            'records_request_date': 'records_request_date',
            'records_status': 'records_status',
            'treatment_end_date': 'treatment_end_date',
            'treatment_start_date': 'treatment_start_date',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._etag = etag
        self._bills_follow_up_date = bills_follow_up_date
        self._bills_request_date = bills_request_date
        self._bills_status = bills_status
        self._description = description
        self._in_treatment = in_treatment
        self._records_follow_up_date = records_follow_up_date
        self._records_request_date = records_request_date
        self._records_status = records_status
        self._treatment_end_date = treatment_end_date
        self._treatment_start_date = treatment_start_date
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MedicalRecordsRequestBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MedicalRecordsRequest_base of this MedicalRecordsRequestBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MedicalRecordsRequestBase.

        Unique identifier for the *MedicalRecordsRequest*

        :return: The id of this MedicalRecordsRequestBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MedicalRecordsRequestBase.

        Unique identifier for the *MedicalRecordsRequest*

        :param id: The id of this MedicalRecordsRequestBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this MedicalRecordsRequestBase.

        ETag for the *MedicalRecordsRequest*

        :return: The etag of this MedicalRecordsRequestBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this MedicalRecordsRequestBase.

        ETag for the *MedicalRecordsRequest*

        :param etag: The etag of this MedicalRecordsRequestBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def bills_follow_up_date(self):
        """Gets the bills_follow_up_date of this MedicalRecordsRequestBase.

        Follow up date for Medical Bills (as a ISO-8601 date)

        :return: The bills_follow_up_date of this MedicalRecordsRequestBase.
        :rtype: datetime
        """
        return self._bills_follow_up_date

    @bills_follow_up_date.setter
    def bills_follow_up_date(self, bills_follow_up_date):
        """Sets the bills_follow_up_date of this MedicalRecordsRequestBase.

        Follow up date for Medical Bills (as a ISO-8601 date)

        :param bills_follow_up_date: The bills_follow_up_date of this MedicalRecordsRequestBase.
        :type bills_follow_up_date: datetime
        """

        self._bills_follow_up_date = bills_follow_up_date

    @property
    def bills_request_date(self):
        """Gets the bills_request_date of this MedicalRecordsRequestBase.

        Date for when the Medical Bills were requested (as a ISO-8601 date)

        :return: The bills_request_date of this MedicalRecordsRequestBase.
        :rtype: datetime
        """
        return self._bills_request_date

    @bills_request_date.setter
    def bills_request_date(self, bills_request_date):
        """Sets the bills_request_date of this MedicalRecordsRequestBase.

        Date for when the Medical Bills were requested (as a ISO-8601 date)

        :param bills_request_date: The bills_request_date of this MedicalRecordsRequestBase.
        :type bills_request_date: datetime
        """

        self._bills_request_date = bills_request_date

    @property
    def bills_status(self):
        """Gets the bills_status of this MedicalRecordsRequestBase.

        Medical Bills status

        :return: The bills_status of this MedicalRecordsRequestBase.
        :rtype: str
        """
        return self._bills_status

    @bills_status.setter
    def bills_status(self, bills_status):
        """Sets the bills_status of this MedicalRecordsRequestBase.

        Medical Bills status

        :param bills_status: The bills_status of this MedicalRecordsRequestBase.
        :type bills_status: str
        """
        allowed_values = ["not_yet_requested", "requested", "received", "incomplete", "certified"]  # noqa: E501
        if bills_status not in allowed_values:
            raise ValueError(
                "Invalid value for `bills_status` ({0}), must be one of {1}"
                .format(bills_status, allowed_values)
            )

        self._bills_status = bills_status

    @property
    def description(self):
        """Gets the description of this MedicalRecordsRequestBase.

        Description of the Medical Records Detail

        :return: The description of this MedicalRecordsRequestBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MedicalRecordsRequestBase.

        Description of the Medical Records Detail

        :param description: The description of this MedicalRecordsRequestBase.
        :type description: str
        """

        self._description = description

    @property
    def in_treatment(self):
        """Gets the in_treatment of this MedicalRecordsRequestBase.

        Treatment status for Medical Records Detail

        :return: The in_treatment of this MedicalRecordsRequestBase.
        :rtype: bool
        """
        return self._in_treatment

    @in_treatment.setter
    def in_treatment(self, in_treatment):
        """Sets the in_treatment of this MedicalRecordsRequestBase.

        Treatment status for Medical Records Detail

        :param in_treatment: The in_treatment of this MedicalRecordsRequestBase.
        :type in_treatment: bool
        """

        self._in_treatment = in_treatment

    @property
    def records_follow_up_date(self):
        """Gets the records_follow_up_date of this MedicalRecordsRequestBase.

        Follow up date for Medical Records (as a ISO-8601 date)

        :return: The records_follow_up_date of this MedicalRecordsRequestBase.
        :rtype: datetime
        """
        return self._records_follow_up_date

    @records_follow_up_date.setter
    def records_follow_up_date(self, records_follow_up_date):
        """Sets the records_follow_up_date of this MedicalRecordsRequestBase.

        Follow up date for Medical Records (as a ISO-8601 date)

        :param records_follow_up_date: The records_follow_up_date of this MedicalRecordsRequestBase.
        :type records_follow_up_date: datetime
        """

        self._records_follow_up_date = records_follow_up_date

    @property
    def records_request_date(self):
        """Gets the records_request_date of this MedicalRecordsRequestBase.

        Date for when the Medical Records were requested (as a ISO-8601 date)

        :return: The records_request_date of this MedicalRecordsRequestBase.
        :rtype: datetime
        """
        return self._records_request_date

    @records_request_date.setter
    def records_request_date(self, records_request_date):
        """Sets the records_request_date of this MedicalRecordsRequestBase.

        Date for when the Medical Records were requested (as a ISO-8601 date)

        :param records_request_date: The records_request_date of this MedicalRecordsRequestBase.
        :type records_request_date: datetime
        """

        self._records_request_date = records_request_date

    @property
    def records_status(self):
        """Gets the records_status of this MedicalRecordsRequestBase.

        Medical Records status

        :return: The records_status of this MedicalRecordsRequestBase.
        :rtype: str
        """
        return self._records_status

    @records_status.setter
    def records_status(self, records_status):
        """Sets the records_status of this MedicalRecordsRequestBase.

        Medical Records status

        :param records_status: The records_status of this MedicalRecordsRequestBase.
        :type records_status: str
        """
        allowed_values = ["not_yet_requested", "requested", "received", "incomplete", "certified"]  # noqa: E501
        if records_status not in allowed_values:
            raise ValueError(
                "Invalid value for `records_status` ({0}), must be one of {1}"
                .format(records_status, allowed_values)
            )

        self._records_status = records_status

    @property
    def treatment_end_date(self):
        """Gets the treatment_end_date of this MedicalRecordsRequestBase.

        Treatment end date for Medical Records Detail (as a ISO-8601 date)

        :return: The treatment_end_date of this MedicalRecordsRequestBase.
        :rtype: datetime
        """
        return self._treatment_end_date

    @treatment_end_date.setter
    def treatment_end_date(self, treatment_end_date):
        """Sets the treatment_end_date of this MedicalRecordsRequestBase.

        Treatment end date for Medical Records Detail (as a ISO-8601 date)

        :param treatment_end_date: The treatment_end_date of this MedicalRecordsRequestBase.
        :type treatment_end_date: datetime
        """

        self._treatment_end_date = treatment_end_date

    @property
    def treatment_start_date(self):
        """Gets the treatment_start_date of this MedicalRecordsRequestBase.

        Treatment start date for Medical Records Detail (as a ISO-8601 date)

        :return: The treatment_start_date of this MedicalRecordsRequestBase.
        :rtype: datetime
        """
        return self._treatment_start_date

    @treatment_start_date.setter
    def treatment_start_date(self, treatment_start_date):
        """Sets the treatment_start_date of this MedicalRecordsRequestBase.

        Treatment start date for Medical Records Detail (as a ISO-8601 date)

        :param treatment_start_date: The treatment_start_date of this MedicalRecordsRequestBase.
        :type treatment_start_date: datetime
        """

        self._treatment_start_date = treatment_start_date

    @property
    def created_at(self):
        """Gets the created_at of this MedicalRecordsRequestBase.

        The time the *MedicalRecordsRequest* was created (as a ISO-8601 timestamp)

        :return: The created_at of this MedicalRecordsRequestBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MedicalRecordsRequestBase.

        The time the *MedicalRecordsRequest* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this MedicalRecordsRequestBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MedicalRecordsRequestBase.

        The time the *MedicalRecordsRequest* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this MedicalRecordsRequestBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MedicalRecordsRequestBase.

        The time the *MedicalRecordsRequest* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this MedicalRecordsRequestBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
