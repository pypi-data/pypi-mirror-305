# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allocation_base import AllocationBase
from openapi_server.models.bank_account_base import BankAccountBase
from openapi_server.models.bank_transaction_base import BankTransactionBase
from openapi_server.models.bill_base import BillBase
from openapi_server.models.clio_payments_link_base import ClioPaymentsLinkBase
from openapi_server.models.contact_base import ContactBase
from openapi_server.models.matter_base import MatterBase
from openapi_server.models.user_base import UserBase
from openapi_server import util


class ClioPaymentsPayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, confirmation_number: str=None, created_at: datetime=None, currency: str=None, deposit_as_revenue: bool=None, description: str=None, email_address: str=None, id: int=None, state: str=None, updated_at: datetime=None, bank_transaction: BankTransactionBase=None, clio_payments_link: ClioPaymentsLinkBase=None, contact: ContactBase=None, destination_account: BankAccountBase=None, user: UserBase=None, allocations: List[AllocationBase]=None, bills: List[BillBase]=None, matters: List[MatterBase]=None):
        """ClioPaymentsPayment - a model defined in OpenAPI

        :param amount: The amount of this ClioPaymentsPayment.
        :param confirmation_number: The confirmation_number of this ClioPaymentsPayment.
        :param created_at: The created_at of this ClioPaymentsPayment.
        :param currency: The currency of this ClioPaymentsPayment.
        :param deposit_as_revenue: The deposit_as_revenue of this ClioPaymentsPayment.
        :param description: The description of this ClioPaymentsPayment.
        :param email_address: The email_address of this ClioPaymentsPayment.
        :param id: The id of this ClioPaymentsPayment.
        :param state: The state of this ClioPaymentsPayment.
        :param updated_at: The updated_at of this ClioPaymentsPayment.
        :param bank_transaction: The bank_transaction of this ClioPaymentsPayment.
        :param clio_payments_link: The clio_payments_link of this ClioPaymentsPayment.
        :param contact: The contact of this ClioPaymentsPayment.
        :param destination_account: The destination_account of this ClioPaymentsPayment.
        :param user: The user of this ClioPaymentsPayment.
        :param allocations: The allocations of this ClioPaymentsPayment.
        :param bills: The bills of this ClioPaymentsPayment.
        :param matters: The matters of this ClioPaymentsPayment.
        """
        self.openapi_types = {
            'amount': float,
            'confirmation_number': str,
            'created_at': datetime,
            'currency': str,
            'deposit_as_revenue': bool,
            'description': str,
            'email_address': str,
            'id': int,
            'state': str,
            'updated_at': datetime,
            'bank_transaction': BankTransactionBase,
            'clio_payments_link': ClioPaymentsLinkBase,
            'contact': ContactBase,
            'destination_account': BankAccountBase,
            'user': UserBase,
            'allocations': List[AllocationBase],
            'bills': List[BillBase],
            'matters': List[MatterBase]
        }

        self.attribute_map = {
            'amount': 'amount',
            'confirmation_number': 'confirmation_number',
            'created_at': 'created_at',
            'currency': 'currency',
            'deposit_as_revenue': 'deposit_as_revenue',
            'description': 'description',
            'email_address': 'email_address',
            'id': 'id',
            'state': 'state',
            'updated_at': 'updated_at',
            'bank_transaction': 'bank_transaction',
            'clio_payments_link': 'clio_payments_link',
            'contact': 'contact',
            'destination_account': 'destination_account',
            'user': 'user',
            'allocations': 'allocations',
            'bills': 'bills',
            'matters': 'matters'
        }

        self._amount = amount
        self._confirmation_number = confirmation_number
        self._created_at = created_at
        self._currency = currency
        self._deposit_as_revenue = deposit_as_revenue
        self._description = description
        self._email_address = email_address
        self._id = id
        self._state = state
        self._updated_at = updated_at
        self._bank_transaction = bank_transaction
        self._clio_payments_link = clio_payments_link
        self._contact = contact
        self._destination_account = destination_account
        self._user = user
        self._allocations = allocations
        self._bills = bills
        self._matters = matters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClioPaymentsPayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClioPaymentsPayment of this ClioPaymentsPayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ClioPaymentsPayment.

        The amount of the payment.

        :return: The amount of this ClioPaymentsPayment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ClioPaymentsPayment.

        The amount of the payment.

        :param amount: The amount of this ClioPaymentsPayment.
        :type amount: float
        """

        self._amount = amount

    @property
    def confirmation_number(self):
        """Gets the confirmation_number of this ClioPaymentsPayment.

        The confirmation number of the payment.

        :return: The confirmation_number of this ClioPaymentsPayment.
        :rtype: str
        """
        return self._confirmation_number

    @confirmation_number.setter
    def confirmation_number(self, confirmation_number):
        """Sets the confirmation_number of this ClioPaymentsPayment.

        The confirmation number of the payment.

        :param confirmation_number: The confirmation_number of this ClioPaymentsPayment.
        :type confirmation_number: str
        """

        self._confirmation_number = confirmation_number

    @property
    def created_at(self):
        """Gets the created_at of this ClioPaymentsPayment.

        The time the *ClioPaymentsPayment* was created (as a ISO-8601 timestamp)

        :return: The created_at of this ClioPaymentsPayment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ClioPaymentsPayment.

        The time the *ClioPaymentsPayment* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this ClioPaymentsPayment.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this ClioPaymentsPayment.

        The currency the payment was processed in.

        :return: The currency of this ClioPaymentsPayment.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ClioPaymentsPayment.

        The currency the payment was processed in.

        :param currency: The currency of this ClioPaymentsPayment.
        :type currency: str
        """

        self._currency = currency

    @property
    def deposit_as_revenue(self):
        """Gets the deposit_as_revenue of this ClioPaymentsPayment.

        Whether the payment was deposited as revenue.

        :return: The deposit_as_revenue of this ClioPaymentsPayment.
        :rtype: bool
        """
        return self._deposit_as_revenue

    @deposit_as_revenue.setter
    def deposit_as_revenue(self, deposit_as_revenue):
        """Sets the deposit_as_revenue of this ClioPaymentsPayment.

        Whether the payment was deposited as revenue.

        :param deposit_as_revenue: The deposit_as_revenue of this ClioPaymentsPayment.
        :type deposit_as_revenue: bool
        """

        self._deposit_as_revenue = deposit_as_revenue

    @property
    def description(self):
        """Gets the description of this ClioPaymentsPayment.

        The description of the payment.

        :return: The description of this ClioPaymentsPayment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClioPaymentsPayment.

        The description of the payment.

        :param description: The description of this ClioPaymentsPayment.
        :type description: str
        """

        self._description = description

    @property
    def email_address(self):
        """Gets the email_address of this ClioPaymentsPayment.

        The email address of the client.

        :return: The email_address of this ClioPaymentsPayment.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this ClioPaymentsPayment.

        The email address of the client.

        :param email_address: The email_address of this ClioPaymentsPayment.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def id(self):
        """Gets the id of this ClioPaymentsPayment.

        Unique identifier for the *ClioPaymentsPayment*

        :return: The id of this ClioPaymentsPayment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClioPaymentsPayment.

        Unique identifier for the *ClioPaymentsPayment*

        :param id: The id of this ClioPaymentsPayment.
        :type id: int
        """

        self._id = id

    @property
    def state(self):
        """Gets the state of this ClioPaymentsPayment.

        The state of the payment (authorized, completed, failed, etc).

        :return: The state of this ClioPaymentsPayment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClioPaymentsPayment.

        The state of the payment (authorized, completed, failed, etc).

        :param state: The state of this ClioPaymentsPayment.
        :type state: str
        """
        allowed_values = ["pending", "authorized", "completed", "voided", "failed", "canceled", "requires_confirmation", "completed_requiring_allocation"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this ClioPaymentsPayment.

        The time the *ClioPaymentsPayment* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this ClioPaymentsPayment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ClioPaymentsPayment.

        The time the *ClioPaymentsPayment* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this ClioPaymentsPayment.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def bank_transaction(self):
        """Gets the bank_transaction of this ClioPaymentsPayment.


        :return: The bank_transaction of this ClioPaymentsPayment.
        :rtype: BankTransactionBase
        """
        return self._bank_transaction

    @bank_transaction.setter
    def bank_transaction(self, bank_transaction):
        """Sets the bank_transaction of this ClioPaymentsPayment.


        :param bank_transaction: The bank_transaction of this ClioPaymentsPayment.
        :type bank_transaction: BankTransactionBase
        """

        self._bank_transaction = bank_transaction

    @property
    def clio_payments_link(self):
        """Gets the clio_payments_link of this ClioPaymentsPayment.


        :return: The clio_payments_link of this ClioPaymentsPayment.
        :rtype: ClioPaymentsLinkBase
        """
        return self._clio_payments_link

    @clio_payments_link.setter
    def clio_payments_link(self, clio_payments_link):
        """Sets the clio_payments_link of this ClioPaymentsPayment.


        :param clio_payments_link: The clio_payments_link of this ClioPaymentsPayment.
        :type clio_payments_link: ClioPaymentsLinkBase
        """

        self._clio_payments_link = clio_payments_link

    @property
    def contact(self):
        """Gets the contact of this ClioPaymentsPayment.


        :return: The contact of this ClioPaymentsPayment.
        :rtype: ContactBase
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this ClioPaymentsPayment.


        :param contact: The contact of this ClioPaymentsPayment.
        :type contact: ContactBase
        """

        self._contact = contact

    @property
    def destination_account(self):
        """Gets the destination_account of this ClioPaymentsPayment.


        :return: The destination_account of this ClioPaymentsPayment.
        :rtype: BankAccountBase
        """
        return self._destination_account

    @destination_account.setter
    def destination_account(self, destination_account):
        """Sets the destination_account of this ClioPaymentsPayment.


        :param destination_account: The destination_account of this ClioPaymentsPayment.
        :type destination_account: BankAccountBase
        """

        self._destination_account = destination_account

    @property
    def user(self):
        """Gets the user of this ClioPaymentsPayment.


        :return: The user of this ClioPaymentsPayment.
        :rtype: UserBase
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ClioPaymentsPayment.


        :param user: The user of this ClioPaymentsPayment.
        :type user: UserBase
        """

        self._user = user

    @property
    def allocations(self):
        """Gets the allocations of this ClioPaymentsPayment.

        Allocation

        :return: The allocations of this ClioPaymentsPayment.
        :rtype: List[AllocationBase]
        """
        return self._allocations

    @allocations.setter
    def allocations(self, allocations):
        """Sets the allocations of this ClioPaymentsPayment.

        Allocation

        :param allocations: The allocations of this ClioPaymentsPayment.
        :type allocations: List[AllocationBase]
        """

        self._allocations = allocations

    @property
    def bills(self):
        """Gets the bills of this ClioPaymentsPayment.

        Bill

        :return: The bills of this ClioPaymentsPayment.
        :rtype: List[BillBase]
        """
        return self._bills

    @bills.setter
    def bills(self, bills):
        """Sets the bills of this ClioPaymentsPayment.

        Bill

        :param bills: The bills of this ClioPaymentsPayment.
        :type bills: List[BillBase]
        """

        self._bills = bills

    @property
    def matters(self):
        """Gets the matters of this ClioPaymentsPayment.

        Matter

        :return: The matters of this ClioPaymentsPayment.
        :rtype: List[MatterBase]
        """
        return self._matters

    @matters.setter
    def matters(self, matters):
        """Sets the matters of this ClioPaymentsPayment.

        Matter

        :param matters: The matters of this ClioPaymentsPayment.
        :type matters: List[MatterBase]
        """

        self._matters = matters
