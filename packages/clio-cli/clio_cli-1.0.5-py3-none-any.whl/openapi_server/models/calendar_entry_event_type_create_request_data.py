# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CalendarEntryEventTypeCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, name: str=None):
        """CalendarEntryEventTypeCreateRequestData - a model defined in OpenAPI

        :param color: The color of this CalendarEntryEventTypeCreateRequestData.
        :param name: The name of this CalendarEntryEventTypeCreateRequestData.
        """
        self.openapi_types = {
            'color': str,
            'name': str
        }

        self.attribute_map = {
            'color': 'color',
            'name': 'name'
        }

        self._color = color
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalendarEntryEventTypeCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalendarEntryEventType_create_request_data of this CalendarEntryEventTypeCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this CalendarEntryEventTypeCreateRequestData.

        The color assigned to the CalendarEntryEventType

        :return: The color of this CalendarEntryEventTypeCreateRequestData.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CalendarEntryEventTypeCreateRequestData.

        The color assigned to the CalendarEntryEventType

        :param color: The color of this CalendarEntryEventTypeCreateRequestData.
        :type color: str
        """
        allowed_values = ["#367B9C", "#FFA5A4", "#83D17F", "#FFAC7B", "#8E3F64", "#C75300", "#009CEC", "#62D6B1", "#9EEDCB", "#F9A2C4", "#616161", "#BBDA81", "#DFD3F8", "#D6C4A5", "#FFD478", "#6AC9DE", "#EABBB0", "#BFC2E1", "#DADADA", "#CDE2F5"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def name(self):
        """Gets the name of this CalendarEntryEventTypeCreateRequestData.

        The name of the CalendarEntryEventType

        :return: The name of this CalendarEntryEventTypeCreateRequestData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalendarEntryEventTypeCreateRequestData.

        The name of the CalendarEntryEventType

        :param name: The name of this CalendarEntryEventTypeCreateRequestData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
