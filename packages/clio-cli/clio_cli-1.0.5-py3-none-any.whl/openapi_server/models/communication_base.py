# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CommunicationBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, subject: str=None, body: str=None, type: str=None, _date: date=None, time_entries_count: int=None, created_at: datetime=None, updated_at: datetime=None, received_at: datetime=None):
        """CommunicationBase - a model defined in OpenAPI

        :param id: The id of this CommunicationBase.
        :param etag: The etag of this CommunicationBase.
        :param subject: The subject of this CommunicationBase.
        :param body: The body of this CommunicationBase.
        :param type: The type of this CommunicationBase.
        :param _date: The _date of this CommunicationBase.
        :param time_entries_count: The time_entries_count of this CommunicationBase.
        :param created_at: The created_at of this CommunicationBase.
        :param updated_at: The updated_at of this CommunicationBase.
        :param received_at: The received_at of this CommunicationBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'subject': str,
            'body': str,
            'type': str,
            '_date': date,
            'time_entries_count': int,
            'created_at': datetime,
            'updated_at': datetime,
            'received_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'subject': 'subject',
            'body': 'body',
            'type': 'type',
            '_date': 'date',
            'time_entries_count': 'time_entries_count',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'received_at': 'received_at'
        }

        self._id = id
        self._etag = etag
        self._subject = subject
        self._body = body
        self._type = type
        self.__date = _date
        self._time_entries_count = time_entries_count
        self._created_at = created_at
        self._updated_at = updated_at
        self._received_at = received_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommunicationBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Communication_base of this CommunicationBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CommunicationBase.

        Unique identifier for the *Communication*

        :return: The id of this CommunicationBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommunicationBase.

        Unique identifier for the *Communication*

        :param id: The id of this CommunicationBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this CommunicationBase.

        ETag for the *Communication*

        :return: The etag of this CommunicationBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this CommunicationBase.

        ETag for the *Communication*

        :param etag: The etag of this CommunicationBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def subject(self):
        """Gets the subject of this CommunicationBase.

        The subject line of the *Communication*

        :return: The subject of this CommunicationBase.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CommunicationBase.

        The subject line of the *Communication*

        :param subject: The subject of this CommunicationBase.
        :type subject: str
        """

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this CommunicationBase.

        The main content of the *Communication*

        :return: The body of this CommunicationBase.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CommunicationBase.

        The main content of the *Communication*

        :param body: The body of this CommunicationBase.
        :type body: str
        """

        self._body = body

    @property
    def type(self):
        """Gets the type of this CommunicationBase.

        The type of the *Communication*

        :return: The type of this CommunicationBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CommunicationBase.

        The type of the *Communication*

        :param type: The type of this CommunicationBase.
        :type type: str
        """
        allowed_values = ["EmailCommunication", "PhoneCommunication"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def _date(self):
        """Gets the _date of this CommunicationBase.

        The date of the *Communication* (as a ISO-8601 datestamp)

        :return: The _date of this CommunicationBase.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CommunicationBase.

        The date of the *Communication* (as a ISO-8601 datestamp)

        :param _date: The _date of this CommunicationBase.
        :type _date: date
        """

        self.__date = _date

    @property
    def time_entries_count(self):
        """Gets the time_entries_count of this CommunicationBase.

        The number of time_entries associated with the *Communication*

        :return: The time_entries_count of this CommunicationBase.
        :rtype: int
        """
        return self._time_entries_count

    @time_entries_count.setter
    def time_entries_count(self, time_entries_count):
        """Sets the time_entries_count of this CommunicationBase.

        The number of time_entries associated with the *Communication*

        :param time_entries_count: The time_entries_count of this CommunicationBase.
        :type time_entries_count: int
        """

        self._time_entries_count = time_entries_count

    @property
    def created_at(self):
        """Gets the created_at of this CommunicationBase.

        The time the *Communication* was created (as a ISO-8601 timestamp)

        :return: The created_at of this CommunicationBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CommunicationBase.

        The time the *Communication* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this CommunicationBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CommunicationBase.

        The time the *Communication* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this CommunicationBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CommunicationBase.

        The time the *Communication* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this CommunicationBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def received_at(self):
        """Gets the received_at of this CommunicationBase.

        The date-time of the *Communication* (in ISO-8601 format)

        :return: The received_at of this CommunicationBase.
        :rtype: datetime
        """
        return self._received_at

    @received_at.setter
    def received_at(self, received_at):
        """Sets the received_at of this CommunicationBase.

        The date-time of the *Communication* (in ISO-8601 format)

        :param received_at: The received_at of this CommunicationBase.
        :type received_at: datetime
        """

        self._received_at = received_at
