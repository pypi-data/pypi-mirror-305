# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.matter_base import MatterBase
from openapi_server import util


class MedicalRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, document_id: int=None, etag: str=None, end_date: datetime=None, start_date: datetime=None, created_at: datetime=None, updated_at: datetime=None, matter: MatterBase=None):
        """MedicalRecord - a model defined in OpenAPI

        :param id: The id of this MedicalRecord.
        :param document_id: The document_id of this MedicalRecord.
        :param etag: The etag of this MedicalRecord.
        :param end_date: The end_date of this MedicalRecord.
        :param start_date: The start_date of this MedicalRecord.
        :param created_at: The created_at of this MedicalRecord.
        :param updated_at: The updated_at of this MedicalRecord.
        :param matter: The matter of this MedicalRecord.
        """
        self.openapi_types = {
            'id': int,
            'document_id': int,
            'etag': str,
            'end_date': datetime,
            'start_date': datetime,
            'created_at': datetime,
            'updated_at': datetime,
            'matter': MatterBase
        }

        self.attribute_map = {
            'id': 'id',
            'document_id': 'document_id',
            'etag': 'etag',
            'end_date': 'end_date',
            'start_date': 'start_date',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'matter': 'matter'
        }

        self._id = id
        self._document_id = document_id
        self._etag = etag
        self._end_date = end_date
        self._start_date = start_date
        self._created_at = created_at
        self._updated_at = updated_at
        self._matter = matter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MedicalRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MedicalRecord of this MedicalRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MedicalRecord.

        Unique identifier for the *MedicalRecord*

        :return: The id of this MedicalRecord.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MedicalRecord.

        Unique identifier for the *MedicalRecord*

        :param id: The id of this MedicalRecord.
        :type id: int
        """

        self._id = id

    @property
    def document_id(self):
        """Gets the document_id of this MedicalRecord.

        The id of the document associated with the Medical Record

        :return: The document_id of this MedicalRecord.
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this MedicalRecord.

        The id of the document associated with the Medical Record

        :param document_id: The document_id of this MedicalRecord.
        :type document_id: int
        """

        self._document_id = document_id

    @property
    def etag(self):
        """Gets the etag of this MedicalRecord.

        ETag for the *MedicalRecord*

        :return: The etag of this MedicalRecord.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this MedicalRecord.

        ETag for the *MedicalRecord*

        :param etag: The etag of this MedicalRecord.
        :type etag: str
        """

        self._etag = etag

    @property
    def end_date(self):
        """Gets the end_date of this MedicalRecord.

        End date for *MedicalRecord* (as a ISO-8601 date)

        :return: The end_date of this MedicalRecord.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this MedicalRecord.

        End date for *MedicalRecord* (as a ISO-8601 date)

        :param end_date: The end_date of this MedicalRecord.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def start_date(self):
        """Gets the start_date of this MedicalRecord.

        Start date for *MedicalRecord* (as a ISO-8601 date)

        :return: The start_date of this MedicalRecord.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this MedicalRecord.

        Start date for *MedicalRecord* (as a ISO-8601 date)

        :param start_date: The start_date of this MedicalRecord.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def created_at(self):
        """Gets the created_at of this MedicalRecord.

        The time the *MedicalRecord* was created (as a ISO-8601 timestamp)

        :return: The created_at of this MedicalRecord.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MedicalRecord.

        The time the *MedicalRecord* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this MedicalRecord.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MedicalRecord.

        The time the *MedicalRecord* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this MedicalRecord.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MedicalRecord.

        The time the *MedicalRecord* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this MedicalRecord.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def matter(self):
        """Gets the matter of this MedicalRecord.


        :return: The matter of this MedicalRecord.
        :rtype: MatterBase
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this MedicalRecord.


        :param matter: The matter of this MedicalRecord.
        :type matter: MatterBase
        """

        self._matter = matter
