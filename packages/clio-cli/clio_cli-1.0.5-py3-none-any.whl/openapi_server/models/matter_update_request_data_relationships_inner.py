# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.matter_update_request_data_relationships_inner_contact import MatterUpdateRequestDataRelationshipsInnerContact
from openapi_server import util


class MatterUpdateRequestDataRelationshipsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, contact: MatterUpdateRequestDataRelationshipsInnerContact=None, id: int=None, destroy: bool=None):
        """MatterUpdateRequestDataRelationshipsInner - a model defined in OpenAPI

        :param description: The description of this MatterUpdateRequestDataRelationshipsInner.
        :param contact: The contact of this MatterUpdateRequestDataRelationshipsInner.
        :param id: The id of this MatterUpdateRequestDataRelationshipsInner.
        :param destroy: The destroy of this MatterUpdateRequestDataRelationshipsInner.
        """
        self.openapi_types = {
            'description': str,
            'contact': MatterUpdateRequestDataRelationshipsInnerContact,
            'id': int,
            'destroy': bool
        }

        self.attribute_map = {
            'description': 'description',
            'contact': 'contact',
            'id': 'id',
            'destroy': '_destroy'
        }

        self._description = description
        self._contact = contact
        self._id = id
        self._destroy = destroy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatterUpdateRequestDataRelationshipsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Matter_update_request_data_relationships_inner of this MatterUpdateRequestDataRelationshipsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this MatterUpdateRequestDataRelationshipsInner.

        Describe the relationship between a Contact and a Matter.

        :return: The description of this MatterUpdateRequestDataRelationshipsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MatterUpdateRequestDataRelationshipsInner.

        Describe the relationship between a Contact and a Matter.

        :param description: The description of this MatterUpdateRequestDataRelationshipsInner.
        :type description: str
        """

        self._description = description

    @property
    def contact(self):
        """Gets the contact of this MatterUpdateRequestDataRelationshipsInner.


        :return: The contact of this MatterUpdateRequestDataRelationshipsInner.
        :rtype: MatterUpdateRequestDataRelationshipsInnerContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this MatterUpdateRequestDataRelationshipsInner.


        :param contact: The contact of this MatterUpdateRequestDataRelationshipsInner.
        :type contact: MatterUpdateRequestDataRelationshipsInnerContact
        """

        self._contact = contact

    @property
    def id(self):
        """Gets the id of this MatterUpdateRequestDataRelationshipsInner.

        The unique identifier for a single Relationship associated with the Matter. The keyword `null` is not valid for this field.

        :return: The id of this MatterUpdateRequestDataRelationshipsInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MatterUpdateRequestDataRelationshipsInner.

        The unique identifier for a single Relationship associated with the Matter. The keyword `null` is not valid for this field.

        :param id: The id of this MatterUpdateRequestDataRelationshipsInner.
        :type id: int
        """

        self._id = id

    @property
    def destroy(self):
        """Gets the destroy of this MatterUpdateRequestDataRelationshipsInner.

        The destroy flag. If the flag is set to `true` and the unique identifier of the associated Relationship is present, the Relationship is deleted from the Matter.

        :return: The destroy of this MatterUpdateRequestDataRelationshipsInner.
        :rtype: bool
        """
        return self._destroy

    @destroy.setter
    def destroy(self, destroy):
        """Sets the destroy of this MatterUpdateRequestDataRelationshipsInner.

        The destroy flag. If the flag is set to `true` and the unique identifier of the associated Relationship is present, the Relationship is deleted from the Matter.

        :param destroy: The destroy of this MatterUpdateRequestDataRelationshipsInner.
        :type destroy: bool
        """

        self._destroy = destroy
