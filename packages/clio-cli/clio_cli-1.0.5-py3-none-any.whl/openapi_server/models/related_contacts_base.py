# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelatedContactsBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, contact_id: int=None, name: str=None, first_name: str=None, middle_name: str=None, last_name: str=None, type: str=None, created_at: datetime=None, updated_at: datetime=None, prefix: str=None, title: str=None, initials: str=None, is_matter_client: bool=None, primary_email_address: str=None, primary_phone_number: str=None, client_connect_user_id: int=None):
        """RelatedContactsBase - a model defined in OpenAPI

        :param id: The id of this RelatedContactsBase.
        :param contact_id: The contact_id of this RelatedContactsBase.
        :param name: The name of this RelatedContactsBase.
        :param first_name: The first_name of this RelatedContactsBase.
        :param middle_name: The middle_name of this RelatedContactsBase.
        :param last_name: The last_name of this RelatedContactsBase.
        :param type: The type of this RelatedContactsBase.
        :param created_at: The created_at of this RelatedContactsBase.
        :param updated_at: The updated_at of this RelatedContactsBase.
        :param prefix: The prefix of this RelatedContactsBase.
        :param title: The title of this RelatedContactsBase.
        :param initials: The initials of this RelatedContactsBase.
        :param is_matter_client: The is_matter_client of this RelatedContactsBase.
        :param primary_email_address: The primary_email_address of this RelatedContactsBase.
        :param primary_phone_number: The primary_phone_number of this RelatedContactsBase.
        :param client_connect_user_id: The client_connect_user_id of this RelatedContactsBase.
        """
        self.openapi_types = {
            'id': int,
            'contact_id': int,
            'name': str,
            'first_name': str,
            'middle_name': str,
            'last_name': str,
            'type': str,
            'created_at': datetime,
            'updated_at': datetime,
            'prefix': str,
            'title': str,
            'initials': str,
            'is_matter_client': bool,
            'primary_email_address': str,
            'primary_phone_number': str,
            'client_connect_user_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'contact_id': 'contact_id',
            'name': 'name',
            'first_name': 'first_name',
            'middle_name': 'middle_name',
            'last_name': 'last_name',
            'type': 'type',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'prefix': 'prefix',
            'title': 'title',
            'initials': 'initials',
            'is_matter_client': 'is_matter_client',
            'primary_email_address': 'primary_email_address',
            'primary_phone_number': 'primary_phone_number',
            'client_connect_user_id': 'client_connect_user_id'
        }

        self._id = id
        self._contact_id = contact_id
        self._name = name
        self._first_name = first_name
        self._middle_name = middle_name
        self._last_name = last_name
        self._type = type
        self._created_at = created_at
        self._updated_at = updated_at
        self._prefix = prefix
        self._title = title
        self._initials = initials
        self._is_matter_client = is_matter_client
        self._primary_email_address = primary_email_address
        self._primary_phone_number = primary_phone_number
        self._client_connect_user_id = client_connect_user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelatedContactsBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelatedContacts_base of this RelatedContactsBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this RelatedContactsBase.

        Unique identifier for the *RelatedContacts*

        :return: The id of this RelatedContactsBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RelatedContactsBase.

        Unique identifier for the *RelatedContacts*

        :param id: The id of this RelatedContactsBase.
        :type id: int
        """

        self._id = id

    @property
    def contact_id(self):
        """Gets the contact_id of this RelatedContactsBase.

        The id of the *RelatedContacts*

        :return: The contact_id of this RelatedContactsBase.
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this RelatedContactsBase.

        The id of the *RelatedContacts*

        :param contact_id: The contact_id of this RelatedContactsBase.
        :type contact_id: int
        """

        self._contact_id = contact_id

    @property
    def name(self):
        """Gets the name of this RelatedContactsBase.

        The full name of the *RelatedContacts*

        :return: The name of this RelatedContactsBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RelatedContactsBase.

        The full name of the *RelatedContacts*

        :param name: The name of this RelatedContactsBase.
        :type name: str
        """

        self._name = name

    @property
    def first_name(self):
        """Gets the first_name of this RelatedContactsBase.

        First name of the Person

        :return: The first_name of this RelatedContactsBase.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this RelatedContactsBase.

        First name of the Person

        :param first_name: The first_name of this RelatedContactsBase.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this RelatedContactsBase.

        Middle name of the Person

        :return: The middle_name of this RelatedContactsBase.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this RelatedContactsBase.

        Middle name of the Person

        :param middle_name: The middle_name of this RelatedContactsBase.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this RelatedContactsBase.

        Last name of the Person

        :return: The last_name of this RelatedContactsBase.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this RelatedContactsBase.

        Last name of the Person

        :param last_name: The last_name of this RelatedContactsBase.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def type(self):
        """Gets the type of this RelatedContactsBase.

        The type of the *RelatedContacts*

        :return: The type of this RelatedContactsBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RelatedContactsBase.

        The type of the *RelatedContacts*

        :param type: The type of this RelatedContactsBase.
        :type type: str
        """
        allowed_values = ["Company", "Person"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this RelatedContactsBase.

        The time the *RelatedContacts* was created (as a ISO-8601 timestamp)

        :return: The created_at of this RelatedContactsBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RelatedContactsBase.

        The time the *RelatedContacts* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this RelatedContactsBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this RelatedContactsBase.

        The time the *RelatedContacts* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this RelatedContactsBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this RelatedContactsBase.

        The time the *RelatedContacts* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this RelatedContactsBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def prefix(self):
        """Gets the prefix of this RelatedContactsBase.

        The prefix of the *RelatedContacts* (Mr, Mrs, etc)

        :return: The prefix of this RelatedContactsBase.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this RelatedContactsBase.

        The prefix of the *RelatedContacts* (Mr, Mrs, etc)

        :param prefix: The prefix of this RelatedContactsBase.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def title(self):
        """Gets the title of this RelatedContactsBase.

        The designated title of the *RelatedContacts*

        :return: The title of this RelatedContactsBase.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RelatedContactsBase.

        The designated title of the *RelatedContacts*

        :param title: The title of this RelatedContactsBase.
        :type title: str
        """

        self._title = title

    @property
    def initials(self):
        """Gets the initials of this RelatedContactsBase.

        The initials of the *RelatedContacts*

        :return: The initials of this RelatedContactsBase.
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this RelatedContactsBase.

        The initials of the *RelatedContacts*

        :param initials: The initials of this RelatedContactsBase.
        :type initials: str
        """

        self._initials = initials

    @property
    def is_matter_client(self):
        """Gets the is_matter_client of this RelatedContactsBase.

        Whether or not the RelatedContacts is also the client of the matter

        :return: The is_matter_client of this RelatedContactsBase.
        :rtype: bool
        """
        return self._is_matter_client

    @is_matter_client.setter
    def is_matter_client(self, is_matter_client):
        """Sets the is_matter_client of this RelatedContactsBase.

        Whether or not the RelatedContacts is also the client of the matter

        :param is_matter_client: The is_matter_client of this RelatedContactsBase.
        :type is_matter_client: bool
        """

        self._is_matter_client = is_matter_client

    @property
    def primary_email_address(self):
        """Gets the primary_email_address of this RelatedContactsBase.

        The primary email address of related contact

        :return: The primary_email_address of this RelatedContactsBase.
        :rtype: str
        """
        return self._primary_email_address

    @primary_email_address.setter
    def primary_email_address(self, primary_email_address):
        """Sets the primary_email_address of this RelatedContactsBase.

        The primary email address of related contact

        :param primary_email_address: The primary_email_address of this RelatedContactsBase.
        :type primary_email_address: str
        """

        self._primary_email_address = primary_email_address

    @property
    def primary_phone_number(self):
        """Gets the primary_phone_number of this RelatedContactsBase.

        The primary phone number of related contact

        :return: The primary_phone_number of this RelatedContactsBase.
        :rtype: str
        """
        return self._primary_phone_number

    @primary_phone_number.setter
    def primary_phone_number(self, primary_phone_number):
        """Sets the primary_phone_number of this RelatedContactsBase.

        The primary phone number of related contact

        :param primary_phone_number: The primary_phone_number of this RelatedContactsBase.
        :type primary_phone_number: str
        """

        self._primary_phone_number = primary_phone_number

    @property
    def client_connect_user_id(self):
        """Gets the client_connect_user_id of this RelatedContactsBase.

        The client connect ID of the contacts associated user

        :return: The client_connect_user_id of this RelatedContactsBase.
        :rtype: int
        """
        return self._client_connect_user_id

    @client_connect_user_id.setter
    def client_connect_user_id(self, client_connect_user_id):
        """Sets the client_connect_user_id of this RelatedContactsBase.

        The client connect ID of the contacts associated user

        :param client_connect_user_id: The client_connect_user_id of this RelatedContactsBase.
        :type client_connect_user_id: int
        """

        self._client_connect_user_id = client_connect_user_id
