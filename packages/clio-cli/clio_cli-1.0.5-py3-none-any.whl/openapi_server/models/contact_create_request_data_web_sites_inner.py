# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactCreateRequestDataWebSitesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str='Other', address: str=None, default_web_site: bool=None):
        """ContactCreateRequestDataWebSitesInner - a model defined in OpenAPI

        :param name: The name of this ContactCreateRequestDataWebSitesInner.
        :param address: The address of this ContactCreateRequestDataWebSitesInner.
        :param default_web_site: The default_web_site of this ContactCreateRequestDataWebSitesInner.
        """
        self.openapi_types = {
            'name': str,
            'address': str,
            'default_web_site': bool
        }

        self.attribute_map = {
            'name': 'name',
            'address': 'address',
            'default_web_site': 'default_web_site'
        }

        self._name = name
        self._address = address
        self._default_web_site = default_web_site

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactCreateRequestDataWebSitesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact_create_request_data_web_sites_inner of this ContactCreateRequestDataWebSitesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ContactCreateRequestDataWebSitesInner.

        Name of the WebSite.

        :return: The name of this ContactCreateRequestDataWebSitesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactCreateRequestDataWebSitesInner.

        Name of the WebSite.

        :param name: The name of this ContactCreateRequestDataWebSitesInner.
        :type name: str
        """
        allowed_values = ["Work", "Personal", "Twitter", "Facebook", "LinkedIn", "Instant Messenger", "Other"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def address(self):
        """Gets the address of this ContactCreateRequestDataWebSitesInner.

        URL of the WebSite.

        :return: The address of this ContactCreateRequestDataWebSitesInner.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ContactCreateRequestDataWebSitesInner.

        URL of the WebSite.

        :param address: The address of this ContactCreateRequestDataWebSitesInner.
        :type address: str
        """

        self._address = address

    @property
    def default_web_site(self):
        """Gets the default_web_site of this ContactCreateRequestDataWebSitesInner.

        Whether or not the Contact should be the default website for the Contact.

        :return: The default_web_site of this ContactCreateRequestDataWebSitesInner.
        :rtype: bool
        """
        return self._default_web_site

    @default_web_site.setter
    def default_web_site(self, default_web_site):
        """Sets the default_web_site of this ContactCreateRequestDataWebSitesInner.

        Whether or not the Contact should be the default website for the Contact.

        :param default_web_site: The default_web_site of this ContactCreateRequestDataWebSitesInner.
        :type default_web_site: bool
        """

        self._default_web_site = default_web_site
