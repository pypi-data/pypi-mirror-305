# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.matter_create_request_data_custom_rate_rates_inner_activity_description import MatterCreateRequestDataCustomRateRatesInnerActivityDescription
from openapi_server.models.matter_create_request_data_custom_rate_rates_inner_group import MatterCreateRequestDataCustomRateRatesInnerGroup
from openapi_server.models.matter_create_request_data_custom_rate_rates_inner_user import MatterCreateRequestDataCustomRateRatesInnerUser
from openapi_server import util


class MatterCreateRequestDataCustomRateRatesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user: MatterCreateRequestDataCustomRateRatesInnerUser=None, award: float=None, note: str=None, _date: date=None, rate: float=None, activity_description: MatterCreateRequestDataCustomRateRatesInnerActivityDescription=None, group: MatterCreateRequestDataCustomRateRatesInnerGroup=None):
        """MatterCreateRequestDataCustomRateRatesInner - a model defined in OpenAPI

        :param user: The user of this MatterCreateRequestDataCustomRateRatesInner.
        :param award: The award of this MatterCreateRequestDataCustomRateRatesInner.
        :param note: The note of this MatterCreateRequestDataCustomRateRatesInner.
        :param _date: The _date of this MatterCreateRequestDataCustomRateRatesInner.
        :param rate: The rate of this MatterCreateRequestDataCustomRateRatesInner.
        :param activity_description: The activity_description of this MatterCreateRequestDataCustomRateRatesInner.
        :param group: The group of this MatterCreateRequestDataCustomRateRatesInner.
        """
        self.openapi_types = {
            'user': MatterCreateRequestDataCustomRateRatesInnerUser,
            'award': float,
            'note': str,
            '_date': date,
            'rate': float,
            'activity_description': MatterCreateRequestDataCustomRateRatesInnerActivityDescription,
            'group': MatterCreateRequestDataCustomRateRatesInnerGroup
        }

        self.attribute_map = {
            'user': 'user',
            'award': 'award',
            'note': 'note',
            '_date': 'date',
            'rate': 'rate',
            'activity_description': 'activity_description',
            'group': 'group'
        }

        self._user = user
        self._award = award
        self._note = note
        self.__date = _date
        self._rate = rate
        self._activity_description = activity_description
        self._group = group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatterCreateRequestDataCustomRateRatesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Matter_create_request_data_custom_rate_rates_inner of this MatterCreateRequestDataCustomRateRatesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user(self):
        """Gets the user of this MatterCreateRequestDataCustomRateRatesInner.


        :return: The user of this MatterCreateRequestDataCustomRateRatesInner.
        :rtype: MatterCreateRequestDataCustomRateRatesInnerUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MatterCreateRequestDataCustomRateRatesInner.


        :param user: The user of this MatterCreateRequestDataCustomRateRatesInner.
        :type user: MatterCreateRequestDataCustomRateRatesInnerUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def award(self):
        """Gets the award of this MatterCreateRequestDataCustomRateRatesInner.

        The full amount of the award given. Only valid for ContingencyFee. If given as an empty string, it will reset the ContingencyFee into the unawarded state.

        :return: The award of this MatterCreateRequestDataCustomRateRatesInner.
        :rtype: float
        """
        return self._award

    @award.setter
    def award(self, award):
        """Sets the award of this MatterCreateRequestDataCustomRateRatesInner.

        The full amount of the award given. Only valid for ContingencyFee. If given as an empty string, it will reset the ContingencyFee into the unawarded state.

        :param award: The award of this MatterCreateRequestDataCustomRateRatesInner.
        :type award: float
        """

        self._award = award

    @property
    def note(self):
        """Gets the note of this MatterCreateRequestDataCustomRateRatesInner.

        Detailed description of the rate. Only valid for ContingencyFee.

        :return: The note of this MatterCreateRequestDataCustomRateRatesInner.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this MatterCreateRequestDataCustomRateRatesInner.

        Detailed description of the rate. Only valid for ContingencyFee.

        :param note: The note of this MatterCreateRequestDataCustomRateRatesInner.
        :type note: str
        """

        self._note = note

    @property
    def _date(self):
        """Gets the _date of this MatterCreateRequestDataCustomRateRatesInner.

        The date the rate is for. Only valid for ContingencyFee. (Expects an ISO-8601 date).

        :return: The _date of this MatterCreateRequestDataCustomRateRatesInner.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this MatterCreateRequestDataCustomRateRatesInner.

        The date the rate is for. Only valid for ContingencyFee. (Expects an ISO-8601 date).

        :param _date: The _date of this MatterCreateRequestDataCustomRateRatesInner.
        :type _date: date
        """

        self.__date = _date

    @property
    def rate(self):
        """Gets the rate of this MatterCreateRequestDataCustomRateRatesInner.

        If `type` is `HourlyRate`, it is the dollar amount of the custom rate of the User or Group for the Matter.  If `type` is `FlatRate`, it is the dollar amount of the custom flat rate for the Matter.  If `type` is `ContingencyFee`, it is the percentage of the contingency fee awarded to the user for the Matter. 

        :return: The rate of this MatterCreateRequestDataCustomRateRatesInner.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this MatterCreateRequestDataCustomRateRatesInner.

        If `type` is `HourlyRate`, it is the dollar amount of the custom rate of the User or Group for the Matter.  If `type` is `FlatRate`, it is the dollar amount of the custom flat rate for the Matter.  If `type` is `ContingencyFee`, it is the percentage of the contingency fee awarded to the user for the Matter. 

        :param rate: The rate of this MatterCreateRequestDataCustomRateRatesInner.
        :type rate: float
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")

        self._rate = rate

    @property
    def activity_description(self):
        """Gets the activity_description of this MatterCreateRequestDataCustomRateRatesInner.


        :return: The activity_description of this MatterCreateRequestDataCustomRateRatesInner.
        :rtype: MatterCreateRequestDataCustomRateRatesInnerActivityDescription
        """
        return self._activity_description

    @activity_description.setter
    def activity_description(self, activity_description):
        """Sets the activity_description of this MatterCreateRequestDataCustomRateRatesInner.


        :param activity_description: The activity_description of this MatterCreateRequestDataCustomRateRatesInner.
        :type activity_description: MatterCreateRequestDataCustomRateRatesInnerActivityDescription
        """

        self._activity_description = activity_description

    @property
    def group(self):
        """Gets the group of this MatterCreateRequestDataCustomRateRatesInner.


        :return: The group of this MatterCreateRequestDataCustomRateRatesInner.
        :rtype: MatterCreateRequestDataCustomRateRatesInnerGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this MatterCreateRequestDataCustomRateRatesInner.


        :param group: The group of this MatterCreateRequestDataCustomRateRatesInner.
        :type group: MatterCreateRequestDataCustomRateRatesInnerGroup
        """

        self._group = group
