# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BillRecipientContactBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, first_name: str=None, middle_name: str=None, last_name: str=None, type: str=None, primary_email_address: str=None):
        """BillRecipientContactBase - a model defined in OpenAPI

        :param id: The id of this BillRecipientContactBase.
        :param name: The name of this BillRecipientContactBase.
        :param first_name: The first_name of this BillRecipientContactBase.
        :param middle_name: The middle_name of this BillRecipientContactBase.
        :param last_name: The last_name of this BillRecipientContactBase.
        :param type: The type of this BillRecipientContactBase.
        :param primary_email_address: The primary_email_address of this BillRecipientContactBase.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'first_name': str,
            'middle_name': str,
            'last_name': str,
            'type': str,
            'primary_email_address': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'first_name': 'first_name',
            'middle_name': 'middle_name',
            'last_name': 'last_name',
            'type': 'type',
            'primary_email_address': 'primary_email_address'
        }

        self._id = id
        self._name = name
        self._first_name = first_name
        self._middle_name = middle_name
        self._last_name = last_name
        self._type = type
        self._primary_email_address = primary_email_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillRecipientContactBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BillRecipient_Contact_base of this BillRecipientContactBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BillRecipientContactBase.

        Unique identifier for the *Contact*

        :return: The id of this BillRecipientContactBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BillRecipientContactBase.

        Unique identifier for the *Contact*

        :param id: The id of this BillRecipientContactBase.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BillRecipientContactBase.

        The full name of the *Contact*

        :return: The name of this BillRecipientContactBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BillRecipientContactBase.

        The full name of the *Contact*

        :param name: The name of this BillRecipientContactBase.
        :type name: str
        """

        self._name = name

    @property
    def first_name(self):
        """Gets the first_name of this BillRecipientContactBase.

        First name of the Person

        :return: The first_name of this BillRecipientContactBase.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this BillRecipientContactBase.

        First name of the Person

        :param first_name: The first_name of this BillRecipientContactBase.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this BillRecipientContactBase.

        Middle name of the Person

        :return: The middle_name of this BillRecipientContactBase.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this BillRecipientContactBase.

        Middle name of the Person

        :param middle_name: The middle_name of this BillRecipientContactBase.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this BillRecipientContactBase.

        Last name of the Person

        :return: The last_name of this BillRecipientContactBase.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this BillRecipientContactBase.

        Last name of the Person

        :param last_name: The last_name of this BillRecipientContactBase.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def type(self):
        """Gets the type of this BillRecipientContactBase.

        The type of the *Contact*

        :return: The type of this BillRecipientContactBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BillRecipientContactBase.

        The type of the *Contact*

        :param type: The type of this BillRecipientContactBase.
        :type type: str
        """
        allowed_values = ["Company", "Person"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def primary_email_address(self):
        """Gets the primary_email_address of this BillRecipientContactBase.

        The primary email address associated with this *Contact*.

        :return: The primary_email_address of this BillRecipientContactBase.
        :rtype: str
        """
        return self._primary_email_address

    @primary_email_address.setter
    def primary_email_address(self, primary_email_address):
        """Sets the primary_email_address of this BillRecipientContactBase.

        The primary email address associated with this *Contact*.

        :param primary_email_address: The primary_email_address of this BillRecipientContactBase.
        :type primary_email_address: str
        """

        self._primary_email_address = primary_email_address
