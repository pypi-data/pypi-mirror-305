# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConferenceMeetingBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conference_id: int=None, conference_password: str=None, created_at: datetime=None, etag: str=None, id: int=None, join_url: str=None, type: str=None, source_id: int=None, updated_at: datetime=None):
        """ConferenceMeetingBase - a model defined in OpenAPI

        :param conference_id: The conference_id of this ConferenceMeetingBase.
        :param conference_password: The conference_password of this ConferenceMeetingBase.
        :param created_at: The created_at of this ConferenceMeetingBase.
        :param etag: The etag of this ConferenceMeetingBase.
        :param id: The id of this ConferenceMeetingBase.
        :param join_url: The join_url of this ConferenceMeetingBase.
        :param type: The type of this ConferenceMeetingBase.
        :param source_id: The source_id of this ConferenceMeetingBase.
        :param updated_at: The updated_at of this ConferenceMeetingBase.
        """
        self.openapi_types = {
            'conference_id': int,
            'conference_password': str,
            'created_at': datetime,
            'etag': str,
            'id': int,
            'join_url': str,
            'type': str,
            'source_id': int,
            'updated_at': datetime
        }

        self.attribute_map = {
            'conference_id': 'conference_id',
            'conference_password': 'conference_password',
            'created_at': 'created_at',
            'etag': 'etag',
            'id': 'id',
            'join_url': 'join_url',
            'type': 'type',
            'source_id': 'source_id',
            'updated_at': 'updated_at'
        }

        self._conference_id = conference_id
        self._conference_password = conference_password
        self._created_at = created_at
        self._etag = etag
        self._id = id
        self._join_url = join_url
        self._type = type
        self._source_id = source_id
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConferenceMeetingBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConferenceMeeting_base of this ConferenceMeetingBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conference_id(self):
        """Gets the conference_id of this ConferenceMeetingBase.

        Third-party provider unique meeting ID

        :return: The conference_id of this ConferenceMeetingBase.
        :rtype: int
        """
        return self._conference_id

    @conference_id.setter
    def conference_id(self, conference_id):
        """Sets the conference_id of this ConferenceMeetingBase.

        Third-party provider unique meeting ID

        :param conference_id: The conference_id of this ConferenceMeetingBase.
        :type conference_id: int
        """

        self._conference_id = conference_id

    @property
    def conference_password(self):
        """Gets the conference_password of this ConferenceMeetingBase.

        Third-party provider meeting password

        :return: The conference_password of this ConferenceMeetingBase.
        :rtype: str
        """
        return self._conference_password

    @conference_password.setter
    def conference_password(self, conference_password):
        """Sets the conference_password of this ConferenceMeetingBase.

        Third-party provider meeting password

        :param conference_password: The conference_password of this ConferenceMeetingBase.
        :type conference_password: str
        """

        self._conference_password = conference_password

    @property
    def created_at(self):
        """Gets the created_at of this ConferenceMeetingBase.

        The time the *ConferenceMeeting* was created (as a ISO-8601 timestamp)

        :return: The created_at of this ConferenceMeetingBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConferenceMeetingBase.

        The time the *ConferenceMeeting* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this ConferenceMeetingBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def etag(self):
        """Gets the etag of this ConferenceMeetingBase.

        ETag for the *ConferenceMeeting*

        :return: The etag of this ConferenceMeetingBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ConferenceMeetingBase.

        ETag for the *ConferenceMeeting*

        :param etag: The etag of this ConferenceMeetingBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this ConferenceMeetingBase.

        Unique identifier for the *ConferenceMeeting*

        :return: The id of this ConferenceMeetingBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConferenceMeetingBase.

        Unique identifier for the *ConferenceMeeting*

        :param id: The id of this ConferenceMeetingBase.
        :type id: int
        """

        self._id = id

    @property
    def join_url(self):
        """Gets the join_url of this ConferenceMeetingBase.

        URL for participants to join the video conference

        :return: The join_url of this ConferenceMeetingBase.
        :rtype: str
        """
        return self._join_url

    @join_url.setter
    def join_url(self, join_url):
        """Sets the join_url of this ConferenceMeetingBase.

        URL for participants to join the video conference

        :param join_url: The join_url of this ConferenceMeetingBase.
        :type join_url: str
        """

        self._join_url = join_url

    @property
    def type(self):
        """Gets the type of this ConferenceMeetingBase.

        The type of video conference

        :return: The type of this ConferenceMeetingBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConferenceMeetingBase.

        The type of video conference

        :param type: The type of this ConferenceMeetingBase.
        :type type: str
        """

        self._type = type

    @property
    def source_id(self):
        """Gets the source_id of this ConferenceMeetingBase.

        The external ID of the video conference meeting

        :return: The source_id of this ConferenceMeetingBase.
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this ConferenceMeetingBase.

        The external ID of the video conference meeting

        :param source_id: The source_id of this ConferenceMeetingBase.
        :type source_id: int
        """

        self._source_id = source_id

    @property
    def updated_at(self):
        """Gets the updated_at of this ConferenceMeetingBase.

        The time the *ConferenceMeeting* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this ConferenceMeetingBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ConferenceMeetingBase.

        The time the *ConferenceMeeting* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this ConferenceMeetingBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
