# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conversation_message_create_request_data_attachment import ConversationMessageCreateRequestDataAttachment
from openapi_server.models.conversation_message_create_request_data_conversation import ConversationMessageCreateRequestDataConversation
from openapi_server.models.conversation_message_create_request_data_matter import ConversationMessageCreateRequestDataMatter
from openapi_server.models.conversation_message_create_request_data_receivers_inner import ConversationMessageCreateRequestDataReceiversInner
from openapi_server import util


class ConversationMessageCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment: ConversationMessageCreateRequestDataAttachment=None, body: str=None, conversation: ConversationMessageCreateRequestDataConversation=None, matter: ConversationMessageCreateRequestDataMatter=None, receivers: List[ConversationMessageCreateRequestDataReceiversInner]=None, subject: str=None):
        """ConversationMessageCreateRequestData - a model defined in OpenAPI

        :param attachment: The attachment of this ConversationMessageCreateRequestData.
        :param body: The body of this ConversationMessageCreateRequestData.
        :param conversation: The conversation of this ConversationMessageCreateRequestData.
        :param matter: The matter of this ConversationMessageCreateRequestData.
        :param receivers: The receivers of this ConversationMessageCreateRequestData.
        :param subject: The subject of this ConversationMessageCreateRequestData.
        """
        self.openapi_types = {
            'attachment': ConversationMessageCreateRequestDataAttachment,
            'body': str,
            'conversation': ConversationMessageCreateRequestDataConversation,
            'matter': ConversationMessageCreateRequestDataMatter,
            'receivers': List[ConversationMessageCreateRequestDataReceiversInner],
            'subject': str
        }

        self.attribute_map = {
            'attachment': 'attachment',
            'body': 'body',
            'conversation': 'conversation',
            'matter': 'matter',
            'receivers': 'receivers',
            'subject': 'subject'
        }

        self._attachment = attachment
        self._body = body
        self._conversation = conversation
        self._matter = matter
        self._receivers = receivers
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationMessageCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConversationMessage_create_request_data of this ConversationMessageCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment(self):
        """Gets the attachment of this ConversationMessageCreateRequestData.


        :return: The attachment of this ConversationMessageCreateRequestData.
        :rtype: ConversationMessageCreateRequestDataAttachment
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this ConversationMessageCreateRequestData.


        :param attachment: The attachment of this ConversationMessageCreateRequestData.
        :type attachment: ConversationMessageCreateRequestDataAttachment
        """

        self._attachment = attachment

    @property
    def body(self):
        """Gets the body of this ConversationMessageCreateRequestData.

        The body value.

        :return: The body of this ConversationMessageCreateRequestData.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ConversationMessageCreateRequestData.

        The body value.

        :param body: The body of this ConversationMessageCreateRequestData.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def conversation(self):
        """Gets the conversation of this ConversationMessageCreateRequestData.


        :return: The conversation of this ConversationMessageCreateRequestData.
        :rtype: ConversationMessageCreateRequestDataConversation
        """
        return self._conversation

    @conversation.setter
    def conversation(self, conversation):
        """Sets the conversation of this ConversationMessageCreateRequestData.


        :param conversation: The conversation of this ConversationMessageCreateRequestData.
        :type conversation: ConversationMessageCreateRequestDataConversation
        """

        self._conversation = conversation

    @property
    def matter(self):
        """Gets the matter of this ConversationMessageCreateRequestData.


        :return: The matter of this ConversationMessageCreateRequestData.
        :rtype: ConversationMessageCreateRequestDataMatter
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this ConversationMessageCreateRequestData.


        :param matter: The matter of this ConversationMessageCreateRequestData.
        :type matter: ConversationMessageCreateRequestDataMatter
        """

        self._matter = matter

    @property
    def receivers(self):
        """Gets the receivers of this ConversationMessageCreateRequestData.


        :return: The receivers of this ConversationMessageCreateRequestData.
        :rtype: List[ConversationMessageCreateRequestDataReceiversInner]
        """
        return self._receivers

    @receivers.setter
    def receivers(self, receivers):
        """Sets the receivers of this ConversationMessageCreateRequestData.


        :param receivers: The receivers of this ConversationMessageCreateRequestData.
        :type receivers: List[ConversationMessageCreateRequestDataReceiversInner]
        """
        if receivers is None:
            raise ValueError("Invalid value for `receivers`, must not be `None`")

        self._receivers = receivers

    @property
    def subject(self):
        """Gets the subject of this ConversationMessageCreateRequestData.

        The subject value.

        :return: The subject of this ConversationMessageCreateRequestData.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ConversationMessageCreateRequestData.

        The subject value.

        :param subject: The subject of this ConversationMessageCreateRequestData.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject
