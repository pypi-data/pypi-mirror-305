# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_create_request_data_assignee import TaskCreateRequestDataAssignee
from openapi_server.models.task_create_request_data_matter import TaskCreateRequestDataMatter
from openapi_server.models.task_create_request_data_task_type import TaskCreateRequestDataTaskType
from openapi_server import util


class TaskCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignee: TaskCreateRequestDataAssignee=None, cascading: bool=None, cascading_offset: int=None, cascading_offset_polarity: str=None, cascading_offset_type: str=None, cascading_source: int=None, description: str=None, due_at: datetime=None, matter: TaskCreateRequestDataMatter=None, name: str=None, notify_assignee: bool=None, notify_completion: bool=None, permission: str='public', priority: str='Normal', status: str='pending', statute_of_limitations: bool=None, task_type: TaskCreateRequestDataTaskType=None, time_estimated: int=None):
        """TaskCreateRequestData - a model defined in OpenAPI

        :param assignee: The assignee of this TaskCreateRequestData.
        :param cascading: The cascading of this TaskCreateRequestData.
        :param cascading_offset: The cascading_offset of this TaskCreateRequestData.
        :param cascading_offset_polarity: The cascading_offset_polarity of this TaskCreateRequestData.
        :param cascading_offset_type: The cascading_offset_type of this TaskCreateRequestData.
        :param cascading_source: The cascading_source of this TaskCreateRequestData.
        :param description: The description of this TaskCreateRequestData.
        :param due_at: The due_at of this TaskCreateRequestData.
        :param matter: The matter of this TaskCreateRequestData.
        :param name: The name of this TaskCreateRequestData.
        :param notify_assignee: The notify_assignee of this TaskCreateRequestData.
        :param notify_completion: The notify_completion of this TaskCreateRequestData.
        :param permission: The permission of this TaskCreateRequestData.
        :param priority: The priority of this TaskCreateRequestData.
        :param status: The status of this TaskCreateRequestData.
        :param statute_of_limitations: The statute_of_limitations of this TaskCreateRequestData.
        :param task_type: The task_type of this TaskCreateRequestData.
        :param time_estimated: The time_estimated of this TaskCreateRequestData.
        """
        self.openapi_types = {
            'assignee': TaskCreateRequestDataAssignee,
            'cascading': bool,
            'cascading_offset': int,
            'cascading_offset_polarity': str,
            'cascading_offset_type': str,
            'cascading_source': int,
            'description': str,
            'due_at': datetime,
            'matter': TaskCreateRequestDataMatter,
            'name': str,
            'notify_assignee': bool,
            'notify_completion': bool,
            'permission': str,
            'priority': str,
            'status': str,
            'statute_of_limitations': bool,
            'task_type': TaskCreateRequestDataTaskType,
            'time_estimated': int
        }

        self.attribute_map = {
            'assignee': 'assignee',
            'cascading': 'cascading',
            'cascading_offset': 'cascading_offset',
            'cascading_offset_polarity': 'cascading_offset_polarity',
            'cascading_offset_type': 'cascading_offset_type',
            'cascading_source': 'cascading_source',
            'description': 'description',
            'due_at': 'due_at',
            'matter': 'matter',
            'name': 'name',
            'notify_assignee': 'notify_assignee',
            'notify_completion': 'notify_completion',
            'permission': 'permission',
            'priority': 'priority',
            'status': 'status',
            'statute_of_limitations': 'statute_of_limitations',
            'task_type': 'task_type',
            'time_estimated': 'time_estimated'
        }

        self._assignee = assignee
        self._cascading = cascading
        self._cascading_offset = cascading_offset
        self._cascading_offset_polarity = cascading_offset_polarity
        self._cascading_offset_type = cascading_offset_type
        self._cascading_source = cascading_source
        self._description = description
        self._due_at = due_at
        self._matter = matter
        self._name = name
        self._notify_assignee = notify_assignee
        self._notify_completion = notify_completion
        self._permission = permission
        self._priority = priority
        self._status = status
        self._statute_of_limitations = statute_of_limitations
        self._task_type = task_type
        self._time_estimated = time_estimated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task_create_request_data of this TaskCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignee(self):
        """Gets the assignee of this TaskCreateRequestData.


        :return: The assignee of this TaskCreateRequestData.
        :rtype: TaskCreateRequestDataAssignee
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this TaskCreateRequestData.


        :param assignee: The assignee of this TaskCreateRequestData.
        :type assignee: TaskCreateRequestDataAssignee
        """
        if assignee is None:
            raise ValueError("Invalid value for `assignee`, must not be `None`")

        self._assignee = assignee

    @property
    def cascading(self):
        """Gets the cascading of this TaskCreateRequestData.

        Determines if the Task has a due date that is derived from another Task. (Note that if false, no other cascading information will be checked)

        :return: The cascading of this TaskCreateRequestData.
        :rtype: bool
        """
        return self._cascading

    @cascading.setter
    def cascading(self, cascading):
        """Sets the cascading of this TaskCreateRequestData.

        Determines if the Task has a due date that is derived from another Task. (Note that if false, no other cascading information will be checked)

        :param cascading: The cascading of this TaskCreateRequestData.
        :type cascading: bool
        """

        self._cascading = cascading

    @property
    def cascading_offset(self):
        """Gets the cascading_offset of this TaskCreateRequestData.

        The amount of time that will differentiate the cascaded Task from its parent.

        :return: The cascading_offset of this TaskCreateRequestData.
        :rtype: int
        """
        return self._cascading_offset

    @cascading_offset.setter
    def cascading_offset(self, cascading_offset):
        """Sets the cascading_offset of this TaskCreateRequestData.

        The amount of time that will differentiate the cascaded Task from its parent.

        :param cascading_offset: The cascading_offset of this TaskCreateRequestData.
        :type cascading_offset: int
        """

        self._cascading_offset = cascading_offset

    @property
    def cascading_offset_polarity(self):
        """Gets the cascading_offset_polarity of this TaskCreateRequestData.

        Determines whether or not the cascading_offset occurs before or after its parent.

        :return: The cascading_offset_polarity of this TaskCreateRequestData.
        :rtype: str
        """
        return self._cascading_offset_polarity

    @cascading_offset_polarity.setter
    def cascading_offset_polarity(self, cascading_offset_polarity):
        """Sets the cascading_offset_polarity of this TaskCreateRequestData.

        Determines whether or not the cascading_offset occurs before or after its parent.

        :param cascading_offset_polarity: The cascading_offset_polarity of this TaskCreateRequestData.
        :type cascading_offset_polarity: str
        """
        allowed_values = ["CalendarDays", "CalendarWeeks", "CalendarMonths", "CalendarYears", "BusinessDays"]  # noqa: E501
        if cascading_offset_polarity not in allowed_values:
            raise ValueError(
                "Invalid value for `cascading_offset_polarity` ({0}), must be one of {1}"
                .format(cascading_offset_polarity, allowed_values)
            )

        self._cascading_offset_polarity = cascading_offset_polarity

    @property
    def cascading_offset_type(self):
        """Gets the cascading_offset_type of this TaskCreateRequestData.

        Determines the quantity of the cascading offset (e.g. CalendarDays, CalendarWeeks etc.)

        :return: The cascading_offset_type of this TaskCreateRequestData.
        :rtype: str
        """
        return self._cascading_offset_type

    @cascading_offset_type.setter
    def cascading_offset_type(self, cascading_offset_type):
        """Sets the cascading_offset_type of this TaskCreateRequestData.

        Determines the quantity of the cascading offset (e.g. CalendarDays, CalendarWeeks etc.)

        :param cascading_offset_type: The cascading_offset_type of this TaskCreateRequestData.
        :type cascading_offset_type: str
        """
        allowed_values = ["Before", "After"]  # noqa: E501
        if cascading_offset_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cascading_offset_type` ({0}), must be one of {1}"
                .format(cascading_offset_type, allowed_values)
            )

        self._cascading_offset_type = cascading_offset_type

    @property
    def cascading_source(self):
        """Gets the cascading_source of this TaskCreateRequestData.

        The parent Task that is used to determine the due_at property of the cascaded Task

        :return: The cascading_source of this TaskCreateRequestData.
        :rtype: int
        """
        return self._cascading_source

    @cascading_source.setter
    def cascading_source(self, cascading_source):
        """Sets the cascading_source of this TaskCreateRequestData.

        The parent Task that is used to determine the due_at property of the cascaded Task

        :param cascading_source: The cascading_source of this TaskCreateRequestData.
        :type cascading_source: int
        """

        self._cascading_source = cascading_source

    @property
    def description(self):
        """Gets the description of this TaskCreateRequestData.

        Longer description of the Task.

        :return: The description of this TaskCreateRequestData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskCreateRequestData.

        Longer description of the Task.

        :param description: The description of this TaskCreateRequestData.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def due_at(self):
        """Gets the due_at of this TaskCreateRequestData.

        Date when the Task must be completed by. (Expects an ISO-8601 date).

        :return: The due_at of this TaskCreateRequestData.
        :rtype: datetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this TaskCreateRequestData.

        Date when the Task must be completed by. (Expects an ISO-8601 date).

        :param due_at: The due_at of this TaskCreateRequestData.
        :type due_at: datetime
        """

        self._due_at = due_at

    @property
    def matter(self):
        """Gets the matter of this TaskCreateRequestData.


        :return: The matter of this TaskCreateRequestData.
        :rtype: TaskCreateRequestDataMatter
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this TaskCreateRequestData.


        :param matter: The matter of this TaskCreateRequestData.
        :type matter: TaskCreateRequestDataMatter
        """

        self._matter = matter

    @property
    def name(self):
        """Gets the name of this TaskCreateRequestData.

        Name of the Task.

        :return: The name of this TaskCreateRequestData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskCreateRequestData.

        Name of the Task.

        :param name: The name of this TaskCreateRequestData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def notify_assignee(self):
        """Gets the notify_assignee of this TaskCreateRequestData.

        Whether or not the Task should notify the assignee on creation.

        :return: The notify_assignee of this TaskCreateRequestData.
        :rtype: bool
        """
        return self._notify_assignee

    @notify_assignee.setter
    def notify_assignee(self, notify_assignee):
        """Sets the notify_assignee of this TaskCreateRequestData.

        Whether or not the Task should notify the assignee on creation.

        :param notify_assignee: The notify_assignee of this TaskCreateRequestData.
        :type notify_assignee: bool
        """

        self._notify_assignee = notify_assignee

    @property
    def notify_completion(self):
        """Gets the notify_completion of this TaskCreateRequestData.

        Whether or not the Task should notify the assigner on completion.

        :return: The notify_completion of this TaskCreateRequestData.
        :rtype: bool
        """
        return self._notify_completion

    @notify_completion.setter
    def notify_completion(self, notify_completion):
        """Sets the notify_completion of this TaskCreateRequestData.

        Whether or not the Task should notify the assigner on completion.

        :param notify_completion: The notify_completion of this TaskCreateRequestData.
        :type notify_completion: bool
        """

        self._notify_completion = notify_completion

    @property
    def permission(self):
        """Gets the permission of this TaskCreateRequestData.

        Permission of the Task. Defaults to `public`

        :return: The permission of this TaskCreateRequestData.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this TaskCreateRequestData.

        Permission of the Task. Defaults to `public`

        :param permission: The permission of this TaskCreateRequestData.
        :type permission: str
        """
        allowed_values = ["private", "public"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"
                .format(permission, allowed_values)
            )

        self._permission = permission

    @property
    def priority(self):
        """Gets the priority of this TaskCreateRequestData.

        Priority of the Task.

        :return: The priority of this TaskCreateRequestData.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TaskCreateRequestData.

        Priority of the Task.

        :param priority: The priority of this TaskCreateRequestData.
        :type priority: str
        """
        allowed_values = ["High", "Normal", "Low"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def status(self):
        """Gets the status of this TaskCreateRequestData.

        Task status. Users without advanced tasks are allowed to select `Complete` or `Pending` only.

        :return: The status of this TaskCreateRequestData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskCreateRequestData.

        Task status. Users without advanced tasks are allowed to select `Complete` or `Pending` only.

        :param status: The status of this TaskCreateRequestData.
        :type status: str
        """
        allowed_values = ["pending", "in_progress", "in_review", "complete"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def statute_of_limitations(self):
        """Gets the statute_of_limitations of this TaskCreateRequestData.

        Whether or not the Task should be a statute of limitations.

        :return: The statute_of_limitations of this TaskCreateRequestData.
        :rtype: bool
        """
        return self._statute_of_limitations

    @statute_of_limitations.setter
    def statute_of_limitations(self, statute_of_limitations):
        """Sets the statute_of_limitations of this TaskCreateRequestData.

        Whether or not the Task should be a statute of limitations.

        :param statute_of_limitations: The statute_of_limitations of this TaskCreateRequestData.
        :type statute_of_limitations: bool
        """

        self._statute_of_limitations = statute_of_limitations

    @property
    def task_type(self):
        """Gets the task_type of this TaskCreateRequestData.


        :return: The task_type of this TaskCreateRequestData.
        :rtype: TaskCreateRequestDataTaskType
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this TaskCreateRequestData.


        :param task_type: The task_type of this TaskCreateRequestData.
        :type task_type: TaskCreateRequestDataTaskType
        """

        self._task_type = task_type

    @property
    def time_estimated(self):
        """Gets the time_estimated of this TaskCreateRequestData.

        Time the Task should take to complete.

        :return: The time_estimated of this TaskCreateRequestData.
        :rtype: int
        """
        return self._time_estimated

    @time_estimated.setter
    def time_estimated(self, time_estimated):
        """Sets the time_estimated of this TaskCreateRequestData.

        Time the Task should take to complete.

        :param time_estimated: The time_estimated of this TaskCreateRequestData.
        :type time_estimated: int
        """

        self._time_estimated = time_estimated
