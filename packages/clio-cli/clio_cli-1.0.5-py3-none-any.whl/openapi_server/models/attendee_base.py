# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttendeeBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, type: str=None, name: str=None, enabled: bool=None, email: str=None, created_at: datetime=None, updated_at: datetime=None):
        """AttendeeBase - a model defined in OpenAPI

        :param id: The id of this AttendeeBase.
        :param etag: The etag of this AttendeeBase.
        :param type: The type of this AttendeeBase.
        :param name: The name of this AttendeeBase.
        :param enabled: The enabled of this AttendeeBase.
        :param email: The email of this AttendeeBase.
        :param created_at: The created_at of this AttendeeBase.
        :param updated_at: The updated_at of this AttendeeBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'type': str,
            'name': str,
            'enabled': bool,
            'email': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'type': 'type',
            'name': 'name',
            'enabled': 'enabled',
            'email': 'email',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._etag = etag
        self._type = type
        self._name = name
        self._enabled = enabled
        self._email = email
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttendeeBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attendee_base of this AttendeeBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AttendeeBase.

        Unique identifier for the *Attendee*

        :return: The id of this AttendeeBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AttendeeBase.

        Unique identifier for the *Attendee*

        :param id: The id of this AttendeeBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this AttendeeBase.

        ETag for the *Attendee*

        :return: The etag of this AttendeeBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this AttendeeBase.

        ETag for the *Attendee*

        :param etag: The etag of this AttendeeBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def type(self):
        """Gets the type of this AttendeeBase.

        The class name of the *Attendee*

        :return: The type of this AttendeeBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AttendeeBase.

        The class name of the *Attendee*

        :param type: The type of this AttendeeBase.
        :type type: str
        """
        allowed_values = ["Contact", "Calendar"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this AttendeeBase.

        The name of the *Attendee*

        :return: The name of this AttendeeBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttendeeBase.

        The name of the *Attendee*

        :param name: The name of this AttendeeBase.
        :type name: str
        """

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this AttendeeBase.

        If the Attendee is a user, represents whether the user is enabled or disabled. Returns null if attendee is a Contact.

        :return: The enabled of this AttendeeBase.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AttendeeBase.

        If the Attendee is a user, represents whether the user is enabled or disabled. Returns null if attendee is a Contact.

        :param enabled: The enabled of this AttendeeBase.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def email(self):
        """Gets the email of this AttendeeBase.

        If the Attendee is a User, this is the User's email. If the Attendee is a contact, this is the Contact's primary email address.

        :return: The email of this AttendeeBase.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AttendeeBase.

        If the Attendee is a User, this is the User's email. If the Attendee is a contact, this is the Contact's primary email address.

        :param email: The email of this AttendeeBase.
        :type email: str
        """

        self._email = email

    @property
    def created_at(self):
        """Gets the created_at of this AttendeeBase.

        The time the *Attendee* was created (as a ISO-8601 timestamp)

        :return: The created_at of this AttendeeBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AttendeeBase.

        The time the *Attendee* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this AttendeeBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AttendeeBase.

        The time the *Attendee* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this AttendeeBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AttendeeBase.

        The time the *Attendee* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this AttendeeBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
