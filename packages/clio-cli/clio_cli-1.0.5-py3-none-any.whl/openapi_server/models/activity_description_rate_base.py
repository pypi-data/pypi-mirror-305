# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivityDescriptionRateBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, non_billable_amount: float=None, type: str=None, hierarchy: str=None):
        """ActivityDescriptionRateBase - a model defined in OpenAPI

        :param amount: The amount of this ActivityDescriptionRateBase.
        :param non_billable_amount: The non_billable_amount of this ActivityDescriptionRateBase.
        :param type: The type of this ActivityDescriptionRateBase.
        :param hierarchy: The hierarchy of this ActivityDescriptionRateBase.
        """
        self.openapi_types = {
            'amount': float,
            'non_billable_amount': float,
            'type': str,
            'hierarchy': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'non_billable_amount': 'non_billable_amount',
            'type': 'type',
            'hierarchy': 'hierarchy'
        }

        self._amount = amount
        self._non_billable_amount = non_billable_amount
        self._type = type
        self._hierarchy = hierarchy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityDescriptionRateBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityDescriptionRate_base of this ActivityDescriptionRateBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ActivityDescriptionRateBase.

        Monetary value of this rate. Either hourly value or flat rate value

        :return: The amount of this ActivityDescriptionRateBase.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ActivityDescriptionRateBase.

        Monetary value of this rate. Either hourly value or flat rate value

        :param amount: The amount of this ActivityDescriptionRateBase.
        :type amount: float
        """

        self._amount = amount

    @property
    def non_billable_amount(self):
        """Gets the non_billable_amount of this ActivityDescriptionRateBase.

        Monetary value of this rate for non billable activities. Either hourly value or flat rate value

        :return: The non_billable_amount of this ActivityDescriptionRateBase.
        :rtype: float
        """
        return self._non_billable_amount

    @non_billable_amount.setter
    def non_billable_amount(self, non_billable_amount):
        """Sets the non_billable_amount of this ActivityDescriptionRateBase.

        Monetary value of this rate for non billable activities. Either hourly value or flat rate value

        :param non_billable_amount: The non_billable_amount of this ActivityDescriptionRateBase.
        :type non_billable_amount: float
        """

        self._non_billable_amount = non_billable_amount

    @property
    def type(self):
        """Gets the type of this ActivityDescriptionRateBase.

        What kind of rate it is.

        :return: The type of this ActivityDescriptionRateBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActivityDescriptionRateBase.

        What kind of rate it is.

        :param type: The type of this ActivityDescriptionRateBase.
        :type type: str
        """
        allowed_values = ["User", "FlatRate", "Custom"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def hierarchy(self):
        """Gets the hierarchy of this ActivityDescriptionRateBase.

        What rate hierarchy the rate belongs to.

        :return: The hierarchy of this ActivityDescriptionRateBase.
        :rtype: str
        """
        return self._hierarchy

    @hierarchy.setter
    def hierarchy(self, hierarchy):
        """Sets the hierarchy of this ActivityDescriptionRateBase.

        What rate hierarchy the rate belongs to.

        :param hierarchy: The hierarchy of this ActivityDescriptionRateBase.
        :type hierarchy: str
        """
        allowed_values = ["Default", "Activity", "Matter", "Client"]  # noqa: E501
        if hierarchy not in allowed_values:
            raise ValueError(
                "Invalid value for `hierarchy` ({0}), must be one of {1}"
                .format(hierarchy, allowed_values)
            )

        self._hierarchy = hierarchy
