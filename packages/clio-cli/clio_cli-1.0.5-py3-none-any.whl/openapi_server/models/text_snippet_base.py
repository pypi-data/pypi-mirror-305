# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TextSnippetBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, created_at: datetime=None, updated_at: datetime=None, snippet: str=None, phrase: str=None, whole_word: bool=None):
        """TextSnippetBase - a model defined in OpenAPI

        :param id: The id of this TextSnippetBase.
        :param etag: The etag of this TextSnippetBase.
        :param created_at: The created_at of this TextSnippetBase.
        :param updated_at: The updated_at of this TextSnippetBase.
        :param snippet: The snippet of this TextSnippetBase.
        :param phrase: The phrase of this TextSnippetBase.
        :param whole_word: The whole_word of this TextSnippetBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'created_at': datetime,
            'updated_at': datetime,
            'snippet': str,
            'phrase': str,
            'whole_word': bool
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'snippet': 'snippet',
            'phrase': 'phrase',
            'whole_word': 'whole_word'
        }

        self._id = id
        self._etag = etag
        self._created_at = created_at
        self._updated_at = updated_at
        self._snippet = snippet
        self._phrase = phrase
        self._whole_word = whole_word

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextSnippetBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextSnippet_base of this TextSnippetBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TextSnippetBase.

        Unique identifier for the *TextSnippet*

        :return: The id of this TextSnippetBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TextSnippetBase.

        Unique identifier for the *TextSnippet*

        :param id: The id of this TextSnippetBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this TextSnippetBase.

        ETag for the *TextSnippet*

        :return: The etag of this TextSnippetBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TextSnippetBase.

        ETag for the *TextSnippet*

        :param etag: The etag of this TextSnippetBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def created_at(self):
        """Gets the created_at of this TextSnippetBase.

        The time the *TextSnippet* was created (as a ISO-8601 timestamp)

        :return: The created_at of this TextSnippetBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TextSnippetBase.

        The time the *TextSnippet* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this TextSnippetBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TextSnippetBase.

        The time the *TextSnippet* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this TextSnippetBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TextSnippetBase.

        The time the *TextSnippet* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this TextSnippetBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def snippet(self):
        """Gets the snippet of this TextSnippetBase.

        The abbreviation that should be expanded

        :return: The snippet of this TextSnippetBase.
        :rtype: str
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this TextSnippetBase.

        The abbreviation that should be expanded

        :param snippet: The snippet of this TextSnippetBase.
        :type snippet: str
        """

        self._snippet = snippet

    @property
    def phrase(self):
        """Gets the phrase of this TextSnippetBase.

        The phrase the abbreviation should be expanded to

        :return: The phrase of this TextSnippetBase.
        :rtype: str
        """
        return self._phrase

    @phrase.setter
    def phrase(self, phrase):
        """Sets the phrase of this TextSnippetBase.

        The phrase the abbreviation should be expanded to

        :param phrase: The phrase of this TextSnippetBase.
        :type phrase: str
        """

        self._phrase = phrase

    @property
    def whole_word(self):
        """Gets the whole_word of this TextSnippetBase.

        Whether the *TextSnippet* abbreviation requires a space after it has been entered to expand to a phrase

        :return: The whole_word of this TextSnippetBase.
        :rtype: bool
        """
        return self._whole_word

    @whole_word.setter
    def whole_word(self, whole_word):
        """Sets the whole_word of this TextSnippetBase.

        Whether the *TextSnippet* abbreviation requires a space after it has been entered to expand to a phrase

        :param whole_word: The whole_word of this TextSnippetBase.
        :type whole_word: bool
        """

        self._whole_word = whole_word
