# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmailAddressBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, address: str=None, name: str=None, primary: bool=None, created_at: datetime=None, updated_at: datetime=None):
        """EmailAddressBase - a model defined in OpenAPI

        :param id: The id of this EmailAddressBase.
        :param etag: The etag of this EmailAddressBase.
        :param address: The address of this EmailAddressBase.
        :param name: The name of this EmailAddressBase.
        :param primary: The primary of this EmailAddressBase.
        :param created_at: The created_at of this EmailAddressBase.
        :param updated_at: The updated_at of this EmailAddressBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'address': str,
            'name': str,
            'primary': bool,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'address': 'address',
            'name': 'name',
            'primary': 'primary',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._etag = etag
        self._address = address
        self._name = name
        self._primary = primary
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailAddressBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailAddress_base of this EmailAddressBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EmailAddressBase.

        Unique identifier for the *EmailAddress*

        :return: The id of this EmailAddressBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailAddressBase.

        Unique identifier for the *EmailAddress*

        :param id: The id of this EmailAddressBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this EmailAddressBase.

        ETag for the *EmailAddress*

        :return: The etag of this EmailAddressBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EmailAddressBase.

        ETag for the *EmailAddress*

        :param etag: The etag of this EmailAddressBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def address(self):
        """Gets the address of this EmailAddressBase.

        The address of the *EmailAddress*

        :return: The address of this EmailAddressBase.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this EmailAddressBase.

        The address of the *EmailAddress*

        :param address: The address of this EmailAddressBase.
        :type address: str
        """

        self._address = address

    @property
    def name(self):
        """Gets the name of this EmailAddressBase.

        A descriptive name for the *EmailAddress. Common values include `Home`, `Work`, and `Other`, as these are the only selectable options within Clio Manage, but other values may be returned for this field.

        :return: The name of this EmailAddressBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmailAddressBase.

        A descriptive name for the *EmailAddress. Common values include `Home`, `Work`, and `Other`, as these are the only selectable options within Clio Manage, but other values may be returned for this field.

        :param name: The name of this EmailAddressBase.
        :type name: str
        """

        self._name = name

    @property
    def primary(self):
        """Gets the primary of this EmailAddressBase.

        Whether it is the default for this contact

        :return: The primary of this EmailAddressBase.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this EmailAddressBase.

        Whether it is the default for this contact

        :param primary: The primary of this EmailAddressBase.
        :type primary: bool
        """

        self._primary = primary

    @property
    def created_at(self):
        """Gets the created_at of this EmailAddressBase.

        The time the *EmailAddress* was created (as a ISO-8601 timestamp)

        :return: The created_at of this EmailAddressBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EmailAddressBase.

        The time the *EmailAddress* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this EmailAddressBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this EmailAddressBase.

        The time the *EmailAddress* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this EmailAddressBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EmailAddressBase.

        The time the *EmailAddress* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this EmailAddressBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
