# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomFieldValueBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, etag: str=None, field_name: str=None, created_at: datetime=None, updated_at: datetime=None, field_type: str=None, field_required: bool=None, field_displayed: bool=None, field_display_order: int=None, value: str=None, soft_deleted: bool=None):
        """CustomFieldValueBase - a model defined in OpenAPI

        :param id: The id of this CustomFieldValueBase.
        :param etag: The etag of this CustomFieldValueBase.
        :param field_name: The field_name of this CustomFieldValueBase.
        :param created_at: The created_at of this CustomFieldValueBase.
        :param updated_at: The updated_at of this CustomFieldValueBase.
        :param field_type: The field_type of this CustomFieldValueBase.
        :param field_required: The field_required of this CustomFieldValueBase.
        :param field_displayed: The field_displayed of this CustomFieldValueBase.
        :param field_display_order: The field_display_order of this CustomFieldValueBase.
        :param value: The value of this CustomFieldValueBase.
        :param soft_deleted: The soft_deleted of this CustomFieldValueBase.
        """
        self.openapi_types = {
            'id': str,
            'etag': str,
            'field_name': str,
            'created_at': datetime,
            'updated_at': datetime,
            'field_type': str,
            'field_required': bool,
            'field_displayed': bool,
            'field_display_order': int,
            'value': str,
            'soft_deleted': bool
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'field_name': 'field_name',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'field_type': 'field_type',
            'field_required': 'field_required',
            'field_displayed': 'field_displayed',
            'field_display_order': 'field_display_order',
            'value': 'value',
            'soft_deleted': 'soft_deleted'
        }

        self._id = id
        self._etag = etag
        self._field_name = field_name
        self._created_at = created_at
        self._updated_at = updated_at
        self._field_type = field_type
        self._field_required = field_required
        self._field_displayed = field_displayed
        self._field_display_order = field_display_order
        self._value = value
        self._soft_deleted = soft_deleted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomFieldValueBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomFieldValue_base of this CustomFieldValueBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CustomFieldValueBase.

        Unique identifier for the *CustomFieldValue*

        :return: The id of this CustomFieldValueBase.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomFieldValueBase.

        Unique identifier for the *CustomFieldValue*

        :param id: The id of this CustomFieldValueBase.
        :type id: str
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this CustomFieldValueBase.

        ETag for the *CustomFieldValue*

        :return: The etag of this CustomFieldValueBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this CustomFieldValueBase.

        ETag for the *CustomFieldValue*

        :param etag: The etag of this CustomFieldValueBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def field_name(self):
        """Gets the field_name of this CustomFieldValueBase.

        The name of the custom field

        :return: The field_name of this CustomFieldValueBase.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this CustomFieldValueBase.

        The name of the custom field

        :param field_name: The field_name of this CustomFieldValueBase.
        :type field_name: str
        """

        self._field_name = field_name

    @property
    def created_at(self):
        """Gets the created_at of this CustomFieldValueBase.

        The time the *CustomFieldValue* was created (as a ISO-8601 timestamp)

        :return: The created_at of this CustomFieldValueBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CustomFieldValueBase.

        The time the *CustomFieldValue* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this CustomFieldValueBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CustomFieldValueBase.

        The time the *CustomFieldValue* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this CustomFieldValueBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CustomFieldValueBase.

        The time the *CustomFieldValue* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this CustomFieldValueBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def field_type(self):
        """Gets the field_type of this CustomFieldValueBase.

        The type of the *CustomFieldValue*

        :return: The field_type of this CustomFieldValueBase.
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this CustomFieldValueBase.

        The type of the *CustomFieldValue*

        :param field_type: The field_type of this CustomFieldValueBase.
        :type field_type: str
        """
        allowed_values = ["checkbox", "contact", "currency", "date", "time", "email", "matter", "numeric", "picklist", "text_area", "text_line", "url"]  # noqa: E501
        if field_type not in allowed_values:
            raise ValueError(
                "Invalid value for `field_type` ({0}), must be one of {1}"
                .format(field_type, allowed_values)
            )

        self._field_type = field_type

    @property
    def field_required(self):
        """Gets the field_required of this CustomFieldValueBase.

        Whether the *CustomFieldValue* requires a value

        :return: The field_required of this CustomFieldValueBase.
        :rtype: bool
        """
        return self._field_required

    @field_required.setter
    def field_required(self, field_required):
        """Sets the field_required of this CustomFieldValueBase.

        Whether the *CustomFieldValue* requires a value

        :param field_required: The field_required of this CustomFieldValueBase.
        :type field_required: bool
        """

        self._field_required = field_required

    @property
    def field_displayed(self):
        """Gets the field_displayed of this CustomFieldValueBase.

        Whether the *CustomFieldValue* is displayed by default

        :return: The field_displayed of this CustomFieldValueBase.
        :rtype: bool
        """
        return self._field_displayed

    @field_displayed.setter
    def field_displayed(self, field_displayed):
        """Sets the field_displayed of this CustomFieldValueBase.

        Whether the *CustomFieldValue* is displayed by default

        :param field_displayed: The field_displayed of this CustomFieldValueBase.
        :type field_displayed: bool
        """

        self._field_displayed = field_displayed

    @property
    def field_display_order(self):
        """Gets the field_display_order of this CustomFieldValueBase.

        The display position of the *CustomFieldValue*

        :return: The field_display_order of this CustomFieldValueBase.
        :rtype: int
        """
        return self._field_display_order

    @field_display_order.setter
    def field_display_order(self, field_display_order):
        """Sets the field_display_order of this CustomFieldValueBase.

        The display position of the *CustomFieldValue*

        :param field_display_order: The field_display_order of this CustomFieldValueBase.
        :type field_display_order: int
        """

        self._field_display_order = field_display_order

    @property
    def value(self):
        """Gets the value of this CustomFieldValueBase.

        The value of the *CustomFieldValue*

        :return: The value of this CustomFieldValueBase.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomFieldValueBase.

        The value of the *CustomFieldValue*

        :param value: The value of this CustomFieldValueBase.
        :type value: str
        """

        self._value = value

    @property
    def soft_deleted(self):
        """Gets the soft_deleted of this CustomFieldValueBase.

        Whether the value is associated with a deleted custom field

        :return: The soft_deleted of this CustomFieldValueBase.
        :rtype: bool
        """
        return self._soft_deleted

    @soft_deleted.setter
    def soft_deleted(self, soft_deleted):
        """Sets the soft_deleted of this CustomFieldValueBase.

        Whether the value is associated with a deleted custom field

        :param soft_deleted: The soft_deleted of this CustomFieldValueBase.
        :type soft_deleted: bool
        """

        self._soft_deleted = soft_deleted
