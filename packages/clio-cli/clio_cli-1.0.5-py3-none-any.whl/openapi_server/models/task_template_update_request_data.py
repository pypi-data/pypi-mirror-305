# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_template_create_request_data_cascading_source import TaskTemplateCreateRequestDataCascadingSource
from openapi_server.models.task_template_update_request_data_reminder_templates_inner import TaskTemplateUpdateRequestDataReminderTemplatesInner
from openapi_server import util


class TaskTemplateUpdateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cascading: bool=None, cascading_offset: int=None, cascading_offset_polarity: str=None, cascading_offset_type: str=None, cascading_source: TaskTemplateCreateRequestDataCascadingSource=None, description: str=None, name: str=None, priority: str='Normal', private: bool=None, reminder_templates: List[TaskTemplateUpdateRequestDataReminderTemplatesInner]=None):
        """TaskTemplateUpdateRequestData - a model defined in OpenAPI

        :param cascading: The cascading of this TaskTemplateUpdateRequestData.
        :param cascading_offset: The cascading_offset of this TaskTemplateUpdateRequestData.
        :param cascading_offset_polarity: The cascading_offset_polarity of this TaskTemplateUpdateRequestData.
        :param cascading_offset_type: The cascading_offset_type of this TaskTemplateUpdateRequestData.
        :param cascading_source: The cascading_source of this TaskTemplateUpdateRequestData.
        :param description: The description of this TaskTemplateUpdateRequestData.
        :param name: The name of this TaskTemplateUpdateRequestData.
        :param priority: The priority of this TaskTemplateUpdateRequestData.
        :param private: The private of this TaskTemplateUpdateRequestData.
        :param reminder_templates: The reminder_templates of this TaskTemplateUpdateRequestData.
        """
        self.openapi_types = {
            'cascading': bool,
            'cascading_offset': int,
            'cascading_offset_polarity': str,
            'cascading_offset_type': str,
            'cascading_source': TaskTemplateCreateRequestDataCascadingSource,
            'description': str,
            'name': str,
            'priority': str,
            'private': bool,
            'reminder_templates': List[TaskTemplateUpdateRequestDataReminderTemplatesInner]
        }

        self.attribute_map = {
            'cascading': 'cascading',
            'cascading_offset': 'cascading_offset',
            'cascading_offset_polarity': 'cascading_offset_polarity',
            'cascading_offset_type': 'cascading_offset_type',
            'cascading_source': 'cascading_source',
            'description': 'description',
            'name': 'name',
            'priority': 'priority',
            'private': 'private',
            'reminder_templates': 'reminder_templates'
        }

        self._cascading = cascading
        self._cascading_offset = cascading_offset
        self._cascading_offset_polarity = cascading_offset_polarity
        self._cascading_offset_type = cascading_offset_type
        self._cascading_source = cascading_source
        self._description = description
        self._name = name
        self._priority = priority
        self._private = private
        self._reminder_templates = reminder_templates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskTemplateUpdateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskTemplate_update_request_data of this TaskTemplateUpdateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cascading(self):
        """Gets the cascading of this TaskTemplateUpdateRequestData.

        Determines if the TaskTemplate has a due date that is derived from another TaskTemplate. (Note that if false, no other cascading information will be checked)

        :return: The cascading of this TaskTemplateUpdateRequestData.
        :rtype: bool
        """
        return self._cascading

    @cascading.setter
    def cascading(self, cascading):
        """Sets the cascading of this TaskTemplateUpdateRequestData.

        Determines if the TaskTemplate has a due date that is derived from another TaskTemplate. (Note that if false, no other cascading information will be checked)

        :param cascading: The cascading of this TaskTemplateUpdateRequestData.
        :type cascading: bool
        """

        self._cascading = cascading

    @property
    def cascading_offset(self):
        """Gets the cascading_offset of this TaskTemplateUpdateRequestData.

        The amount of time that will differentiate the cascaded TaskTemplate from its parent.

        :return: The cascading_offset of this TaskTemplateUpdateRequestData.
        :rtype: int
        """
        return self._cascading_offset

    @cascading_offset.setter
    def cascading_offset(self, cascading_offset):
        """Sets the cascading_offset of this TaskTemplateUpdateRequestData.

        The amount of time that will differentiate the cascaded TaskTemplate from its parent.

        :param cascading_offset: The cascading_offset of this TaskTemplateUpdateRequestData.
        :type cascading_offset: int
        """

        self._cascading_offset = cascading_offset

    @property
    def cascading_offset_polarity(self):
        """Gets the cascading_offset_polarity of this TaskTemplateUpdateRequestData.

        Determines whether or not the cascading_offset occurs before or after its parent.

        :return: The cascading_offset_polarity of this TaskTemplateUpdateRequestData.
        :rtype: str
        """
        return self._cascading_offset_polarity

    @cascading_offset_polarity.setter
    def cascading_offset_polarity(self, cascading_offset_polarity):
        """Sets the cascading_offset_polarity of this TaskTemplateUpdateRequestData.

        Determines whether or not the cascading_offset occurs before or after its parent.

        :param cascading_offset_polarity: The cascading_offset_polarity of this TaskTemplateUpdateRequestData.
        :type cascading_offset_polarity: str
        """
        allowed_values = ["Before", "After"]  # noqa: E501
        if cascading_offset_polarity not in allowed_values:
            raise ValueError(
                "Invalid value for `cascading_offset_polarity` ({0}), must be one of {1}"
                .format(cascading_offset_polarity, allowed_values)
            )

        self._cascading_offset_polarity = cascading_offset_polarity

    @property
    def cascading_offset_type(self):
        """Gets the cascading_offset_type of this TaskTemplateUpdateRequestData.

        Determines the quantity of the cascading offset (e.g. CalendarDays, CalendarWeeks etc.)

        :return: The cascading_offset_type of this TaskTemplateUpdateRequestData.
        :rtype: str
        """
        return self._cascading_offset_type

    @cascading_offset_type.setter
    def cascading_offset_type(self, cascading_offset_type):
        """Sets the cascading_offset_type of this TaskTemplateUpdateRequestData.

        Determines the quantity of the cascading offset (e.g. CalendarDays, CalendarWeeks etc.)

        :param cascading_offset_type: The cascading_offset_type of this TaskTemplateUpdateRequestData.
        :type cascading_offset_type: str
        """
        allowed_values = ["CalendarDays", "CalendarWeeks", "CalendarMonths", "CalendarYears", "BusinessDays"]  # noqa: E501
        if cascading_offset_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cascading_offset_type` ({0}), must be one of {1}"
                .format(cascading_offset_type, allowed_values)
            )

        self._cascading_offset_type = cascading_offset_type

    @property
    def cascading_source(self):
        """Gets the cascading_source of this TaskTemplateUpdateRequestData.


        :return: The cascading_source of this TaskTemplateUpdateRequestData.
        :rtype: TaskTemplateCreateRequestDataCascadingSource
        """
        return self._cascading_source

    @cascading_source.setter
    def cascading_source(self, cascading_source):
        """Sets the cascading_source of this TaskTemplateUpdateRequestData.


        :param cascading_source: The cascading_source of this TaskTemplateUpdateRequestData.
        :type cascading_source: TaskTemplateCreateRequestDataCascadingSource
        """

        self._cascading_source = cascading_source

    @property
    def description(self):
        """Gets the description of this TaskTemplateUpdateRequestData.

        Longer description for the TaskTemplate.

        :return: The description of this TaskTemplateUpdateRequestData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskTemplateUpdateRequestData.

        Longer description for the TaskTemplate.

        :param description: The description of this TaskTemplateUpdateRequestData.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this TaskTemplateUpdateRequestData.

        Short name for the TaskTemplate.

        :return: The name of this TaskTemplateUpdateRequestData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskTemplateUpdateRequestData.

        Short name for the TaskTemplate.

        :param name: The name of this TaskTemplateUpdateRequestData.
        :type name: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this TaskTemplateUpdateRequestData.

        Priority of the task.

        :return: The priority of this TaskTemplateUpdateRequestData.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TaskTemplateUpdateRequestData.

        Priority of the task.

        :param priority: The priority of this TaskTemplateUpdateRequestData.
        :type priority: str
        """
        allowed_values = ["High", "Normal", "Low"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def private(self):
        """Gets the private of this TaskTemplateUpdateRequestData.

        Whether or not this TaskTemplate should be private.

        :return: The private of this TaskTemplateUpdateRequestData.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this TaskTemplateUpdateRequestData.

        Whether or not this TaskTemplate should be private.

        :param private: The private of this TaskTemplateUpdateRequestData.
        :type private: bool
        """

        self._private = private

    @property
    def reminder_templates(self):
        """Gets the reminder_templates of this TaskTemplateUpdateRequestData.


        :return: The reminder_templates of this TaskTemplateUpdateRequestData.
        :rtype: List[TaskTemplateUpdateRequestDataReminderTemplatesInner]
        """
        return self._reminder_templates

    @reminder_templates.setter
    def reminder_templates(self, reminder_templates):
        """Sets the reminder_templates of this TaskTemplateUpdateRequestData.


        :param reminder_templates: The reminder_templates of this TaskTemplateUpdateRequestData.
        :type reminder_templates: List[TaskTemplateUpdateRequestDataReminderTemplatesInner]
        """

        self._reminder_templates = reminder_templates
