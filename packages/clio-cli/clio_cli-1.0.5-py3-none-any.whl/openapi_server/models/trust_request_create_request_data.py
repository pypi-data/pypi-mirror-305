# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trust_request_create_request_data_matter_inner import TrustRequestCreateRequestDataMatterInner
from openapi_server import util


class TrustRequestCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved: bool=None, client_id: int=None, due_date: date=None, issue_date: date=None, matter: List[TrustRequestCreateRequestDataMatterInner]=None, note: str=None, trust_amount: float=None, trust_type: str=None):
        """TrustRequestCreateRequestData - a model defined in OpenAPI

        :param approved: The approved of this TrustRequestCreateRequestData.
        :param client_id: The client_id of this TrustRequestCreateRequestData.
        :param due_date: The due_date of this TrustRequestCreateRequestData.
        :param issue_date: The issue_date of this TrustRequestCreateRequestData.
        :param matter: The matter of this TrustRequestCreateRequestData.
        :param note: The note of this TrustRequestCreateRequestData.
        :param trust_amount: The trust_amount of this TrustRequestCreateRequestData.
        :param trust_type: The trust_type of this TrustRequestCreateRequestData.
        """
        self.openapi_types = {
            'approved': bool,
            'client_id': int,
            'due_date': date,
            'issue_date': date,
            'matter': List[TrustRequestCreateRequestDataMatterInner],
            'note': str,
            'trust_amount': float,
            'trust_type': str
        }

        self.attribute_map = {
            'approved': 'approved',
            'client_id': 'client_id',
            'due_date': 'due_date',
            'issue_date': 'issue_date',
            'matter': 'matter',
            'note': 'note',
            'trust_amount': 'trust_amount',
            'trust_type': 'trust_type'
        }

        self._approved = approved
        self._client_id = client_id
        self._due_date = due_date
        self._issue_date = issue_date
        self._matter = matter
        self._note = note
        self._trust_amount = trust_amount
        self._trust_type = trust_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrustRequestCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrustRequest_create_request_data of this TrustRequestCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved(self):
        """Gets the approved of this TrustRequestCreateRequestData.

        Whether or not the TrustRequest should be automatically approved.

        :return: The approved of this TrustRequestCreateRequestData.
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this TrustRequestCreateRequestData.

        Whether or not the TrustRequest should be automatically approved.

        :param approved: The approved of this TrustRequestCreateRequestData.
        :type approved: bool
        """
        if approved is None:
            raise ValueError("Invalid value for `approved`, must not be `None`")

        self._approved = approved

    @property
    def client_id(self):
        """Gets the client_id of this TrustRequestCreateRequestData.

        The client_id associated to the TrustRequest

        :return: The client_id of this TrustRequestCreateRequestData.
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this TrustRequestCreateRequestData.

        The client_id associated to the TrustRequest

        :param client_id: The client_id of this TrustRequestCreateRequestData.
        :type client_id: int
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def due_date(self):
        """Gets the due_date of this TrustRequestCreateRequestData.

        The date the TrustRequest is due (Expects an ISO-8601 date).

        :return: The due_date of this TrustRequestCreateRequestData.
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this TrustRequestCreateRequestData.

        The date the TrustRequest is due (Expects an ISO-8601 date).

        :param due_date: The due_date of this TrustRequestCreateRequestData.
        :type due_date: date
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")

        self._due_date = due_date

    @property
    def issue_date(self):
        """Gets the issue_date of this TrustRequestCreateRequestData.

        The date the TrustRequest is issued (Expects an ISO-8601 date).

        :return: The issue_date of this TrustRequestCreateRequestData.
        :rtype: date
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this TrustRequestCreateRequestData.

        The date the TrustRequest is issued (Expects an ISO-8601 date).

        :param issue_date: The issue_date of this TrustRequestCreateRequestData.
        :type issue_date: date
        """
        if issue_date is None:
            raise ValueError("Invalid value for `issue_date`, must not be `None`")

        self._issue_date = issue_date

    @property
    def matter(self):
        """Gets the matter of this TrustRequestCreateRequestData.


        :return: The matter of this TrustRequestCreateRequestData.
        :rtype: List[TrustRequestCreateRequestDataMatterInner]
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this TrustRequestCreateRequestData.


        :param matter: The matter of this TrustRequestCreateRequestData.
        :type matter: List[TrustRequestCreateRequestDataMatterInner]
        """

        self._matter = matter

    @property
    def note(self):
        """Gets the note of this TrustRequestCreateRequestData.

        The client level TrustRequest note

        :return: The note of this TrustRequestCreateRequestData.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TrustRequestCreateRequestData.

        The client level TrustRequest note

        :param note: The note of this TrustRequestCreateRequestData.
        :type note: str
        """

        self._note = note

    @property
    def trust_amount(self):
        """Gets the trust_amount of this TrustRequestCreateRequestData.

        The TrustRequest's amount

        :return: The trust_amount of this TrustRequestCreateRequestData.
        :rtype: float
        """
        return self._trust_amount

    @trust_amount.setter
    def trust_amount(self, trust_amount):
        """Sets the trust_amount of this TrustRequestCreateRequestData.

        The TrustRequest's amount

        :param trust_amount: The trust_amount of this TrustRequestCreateRequestData.
        :type trust_amount: float
        """
        if trust_amount is None:
            raise ValueError("Invalid value for `trust_amount`, must not be `None`")

        self._trust_amount = trust_amount

    @property
    def trust_type(self):
        """Gets the trust_type of this TrustRequestCreateRequestData.

        The type of TrustRequest

        :return: The trust_type of this TrustRequestCreateRequestData.
        :rtype: str
        """
        return self._trust_type

    @trust_type.setter
    def trust_type(self, trust_type):
        """Sets the trust_type of this TrustRequestCreateRequestData.

        The type of TrustRequest

        :param trust_type: The trust_type of this TrustRequestCreateRequestData.
        :type trust_type: str
        """
        allowed_values = ["client", "matter"]  # noqa: E501
        if trust_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trust_type` ({0}), must be one of {1}"
                .format(trust_type, allowed_values)
            )

        self._trust_type = trust_type
