# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BillingSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, rounded_duration: float=None, rounding: int=None, use_decimal_rounding: bool=None, currency: str=None, currency_sign: str=None, tax_rate: float=None, tax_name: str=None, apply_tax_by_default: bool=None, time_on_flat_rate_contingency_matters_is_non_billable: bool=None, use_secondary_tax: bool=None, secondary_tax_rate: float=None, secondary_tax_rule: str=None, secondary_tax_name: str=None, notify_after_bill_created: bool=None, use_utbms_codes: bool=None, created_at: datetime=None, updated_at: datetime=None):
        """BillingSetting - a model defined in OpenAPI

        :param id: The id of this BillingSetting.
        :param etag: The etag of this BillingSetting.
        :param rounded_duration: The rounded_duration of this BillingSetting.
        :param rounding: The rounding of this BillingSetting.
        :param use_decimal_rounding: The use_decimal_rounding of this BillingSetting.
        :param currency: The currency of this BillingSetting.
        :param currency_sign: The currency_sign of this BillingSetting.
        :param tax_rate: The tax_rate of this BillingSetting.
        :param tax_name: The tax_name of this BillingSetting.
        :param apply_tax_by_default: The apply_tax_by_default of this BillingSetting.
        :param time_on_flat_rate_contingency_matters_is_non_billable: The time_on_flat_rate_contingency_matters_is_non_billable of this BillingSetting.
        :param use_secondary_tax: The use_secondary_tax of this BillingSetting.
        :param secondary_tax_rate: The secondary_tax_rate of this BillingSetting.
        :param secondary_tax_rule: The secondary_tax_rule of this BillingSetting.
        :param secondary_tax_name: The secondary_tax_name of this BillingSetting.
        :param notify_after_bill_created: The notify_after_bill_created of this BillingSetting.
        :param use_utbms_codes: The use_utbms_codes of this BillingSetting.
        :param created_at: The created_at of this BillingSetting.
        :param updated_at: The updated_at of this BillingSetting.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'rounded_duration': float,
            'rounding': int,
            'use_decimal_rounding': bool,
            'currency': str,
            'currency_sign': str,
            'tax_rate': float,
            'tax_name': str,
            'apply_tax_by_default': bool,
            'time_on_flat_rate_contingency_matters_is_non_billable': bool,
            'use_secondary_tax': bool,
            'secondary_tax_rate': float,
            'secondary_tax_rule': str,
            'secondary_tax_name': str,
            'notify_after_bill_created': bool,
            'use_utbms_codes': bool,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'rounded_duration': 'rounded_duration',
            'rounding': 'rounding',
            'use_decimal_rounding': 'use_decimal_rounding',
            'currency': 'currency',
            'currency_sign': 'currency_sign',
            'tax_rate': 'tax_rate',
            'tax_name': 'tax_name',
            'apply_tax_by_default': 'apply_tax_by_default',
            'time_on_flat_rate_contingency_matters_is_non_billable': 'time_on_flat_rate_contingency_matters_is_non_billable',
            'use_secondary_tax': 'use_secondary_tax',
            'secondary_tax_rate': 'secondary_tax_rate',
            'secondary_tax_rule': 'secondary_tax_rule',
            'secondary_tax_name': 'secondary_tax_name',
            'notify_after_bill_created': 'notify_after_bill_created',
            'use_utbms_codes': 'use_utbms_codes',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._etag = etag
        self._rounded_duration = rounded_duration
        self._rounding = rounding
        self._use_decimal_rounding = use_decimal_rounding
        self._currency = currency
        self._currency_sign = currency_sign
        self._tax_rate = tax_rate
        self._tax_name = tax_name
        self._apply_tax_by_default = apply_tax_by_default
        self._time_on_flat_rate_contingency_matters_is_non_billable = time_on_flat_rate_contingency_matters_is_non_billable
        self._use_secondary_tax = use_secondary_tax
        self._secondary_tax_rate = secondary_tax_rate
        self._secondary_tax_rule = secondary_tax_rule
        self._secondary_tax_name = secondary_tax_name
        self._notify_after_bill_created = notify_after_bill_created
        self._use_utbms_codes = use_utbms_codes
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillingSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BillingSetting of this BillingSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BillingSetting.

        Unique identifier for the *BillingSetting*

        :return: The id of this BillingSetting.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BillingSetting.

        Unique identifier for the *BillingSetting*

        :param id: The id of this BillingSetting.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this BillingSetting.

        ETag for the *BillingSetting*

        :return: The etag of this BillingSetting.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this BillingSetting.

        ETag for the *BillingSetting*

        :param etag: The etag of this BillingSetting.
        :type etag: str
        """

        self._etag = etag

    @property
    def rounded_duration(self):
        """Gets the rounded_duration of this BillingSetting.

        Rounded equivalent of duration submitted

        :return: The rounded_duration of this BillingSetting.
        :rtype: float
        """
        return self._rounded_duration

    @rounded_duration.setter
    def rounded_duration(self, rounded_duration):
        """Sets the rounded_duration of this BillingSetting.

        Rounded equivalent of duration submitted

        :param rounded_duration: The rounded_duration of this BillingSetting.
        :type rounded_duration: float
        """

        self._rounded_duration = rounded_duration

    @property
    def rounding(self):
        """Gets the rounding of this BillingSetting.

        Minute increment for time rounding

        :return: The rounding of this BillingSetting.
        :rtype: int
        """
        return self._rounding

    @rounding.setter
    def rounding(self, rounding):
        """Sets the rounding of this BillingSetting.

        Minute increment for time rounding

        :param rounding: The rounding of this BillingSetting.
        :type rounding: int
        """

        self._rounding = rounding

    @property
    def use_decimal_rounding(self):
        """Gets the use_decimal_rounding of this BillingSetting.

        Round time to two decimal places

        :return: The use_decimal_rounding of this BillingSetting.
        :rtype: bool
        """
        return self._use_decimal_rounding

    @use_decimal_rounding.setter
    def use_decimal_rounding(self, use_decimal_rounding):
        """Sets the use_decimal_rounding of this BillingSetting.

        Round time to two decimal places

        :param use_decimal_rounding: The use_decimal_rounding of this BillingSetting.
        :type use_decimal_rounding: bool
        """

        self._use_decimal_rounding = use_decimal_rounding

    @property
    def currency(self):
        """Gets the currency of this BillingSetting.

        Current user setting of currency

        :return: The currency of this BillingSetting.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BillingSetting.

        Current user setting of currency

        :param currency: The currency of this BillingSetting.
        :type currency: str
        """

        self._currency = currency

    @property
    def currency_sign(self):
        """Gets the currency_sign of this BillingSetting.

        The sign of the current currency

        :return: The currency_sign of this BillingSetting.
        :rtype: str
        """
        return self._currency_sign

    @currency_sign.setter
    def currency_sign(self, currency_sign):
        """Sets the currency_sign of this BillingSetting.

        The sign of the current currency

        :param currency_sign: The currency_sign of this BillingSetting.
        :type currency_sign: str
        """

        self._currency_sign = currency_sign

    @property
    def tax_rate(self):
        """Gets the tax_rate of this BillingSetting.

        Rate applied for primary tax on invoices using this BillingSetting

        :return: The tax_rate of this BillingSetting.
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this BillingSetting.

        Rate applied for primary tax on invoices using this BillingSetting

        :param tax_rate: The tax_rate of this BillingSetting.
        :type tax_rate: float
        """

        self._tax_rate = tax_rate

    @property
    def tax_name(self):
        """Gets the tax_name of this BillingSetting.

        Name shown for primary tax on invoices using this BillingSetting

        :return: The tax_name of this BillingSetting.
        :rtype: str
        """
        return self._tax_name

    @tax_name.setter
    def tax_name(self, tax_name):
        """Sets the tax_name of this BillingSetting.

        Name shown for primary tax on invoices using this BillingSetting

        :param tax_name: The tax_name of this BillingSetting.
        :type tax_name: str
        """

        self._tax_name = tax_name

    @property
    def apply_tax_by_default(self):
        """Gets the apply_tax_by_default of this BillingSetting.

        Used to determine if primary tax should be applied to invoices by default

        :return: The apply_tax_by_default of this BillingSetting.
        :rtype: bool
        """
        return self._apply_tax_by_default

    @apply_tax_by_default.setter
    def apply_tax_by_default(self, apply_tax_by_default):
        """Sets the apply_tax_by_default of this BillingSetting.

        Used to determine if primary tax should be applied to invoices by default

        :param apply_tax_by_default: The apply_tax_by_default of this BillingSetting.
        :type apply_tax_by_default: bool
        """

        self._apply_tax_by_default = apply_tax_by_default

    @property
    def time_on_flat_rate_contingency_matters_is_non_billable(self):
        """Gets the time_on_flat_rate_contingency_matters_is_non_billable of this BillingSetting.

        Used to determine if hourly time entries on flat rate or contingency fee matters should be non-billable by default

        :return: The time_on_flat_rate_contingency_matters_is_non_billable of this BillingSetting.
        :rtype: bool
        """
        return self._time_on_flat_rate_contingency_matters_is_non_billable

    @time_on_flat_rate_contingency_matters_is_non_billable.setter
    def time_on_flat_rate_contingency_matters_is_non_billable(self, time_on_flat_rate_contingency_matters_is_non_billable):
        """Sets the time_on_flat_rate_contingency_matters_is_non_billable of this BillingSetting.

        Used to determine if hourly time entries on flat rate or contingency fee matters should be non-billable by default

        :param time_on_flat_rate_contingency_matters_is_non_billable: The time_on_flat_rate_contingency_matters_is_non_billable of this BillingSetting.
        :type time_on_flat_rate_contingency_matters_is_non_billable: bool
        """

        self._time_on_flat_rate_contingency_matters_is_non_billable = time_on_flat_rate_contingency_matters_is_non_billable

    @property
    def use_secondary_tax(self):
        """Gets the use_secondary_tax of this BillingSetting.

        Used to determine if secondary tax applies to invoices using this BillingSetting

        :return: The use_secondary_tax of this BillingSetting.
        :rtype: bool
        """
        return self._use_secondary_tax

    @use_secondary_tax.setter
    def use_secondary_tax(self, use_secondary_tax):
        """Sets the use_secondary_tax of this BillingSetting.

        Used to determine if secondary tax applies to invoices using this BillingSetting

        :param use_secondary_tax: The use_secondary_tax of this BillingSetting.
        :type use_secondary_tax: bool
        """

        self._use_secondary_tax = use_secondary_tax

    @property
    def secondary_tax_rate(self):
        """Gets the secondary_tax_rate of this BillingSetting.

        Rate applied for secondary tax on invoices using this BillingSetting

        :return: The secondary_tax_rate of this BillingSetting.
        :rtype: float
        """
        return self._secondary_tax_rate

    @secondary_tax_rate.setter
    def secondary_tax_rate(self, secondary_tax_rate):
        """Sets the secondary_tax_rate of this BillingSetting.

        Rate applied for secondary tax on invoices using this BillingSetting

        :param secondary_tax_rate: The secondary_tax_rate of this BillingSetting.
        :type secondary_tax_rate: float
        """

        self._secondary_tax_rate = secondary_tax_rate

    @property
    def secondary_tax_rule(self):
        """Gets the secondary_tax_rule of this BillingSetting.

        Used to determine if secondary tax should be applied separately or additionally to primary tax

        :return: The secondary_tax_rule of this BillingSetting.
        :rtype: str
        """
        return self._secondary_tax_rule

    @secondary_tax_rule.setter
    def secondary_tax_rule(self, secondary_tax_rule):
        """Sets the secondary_tax_rule of this BillingSetting.

        Used to determine if secondary tax should be applied separately or additionally to primary tax

        :param secondary_tax_rule: The secondary_tax_rule of this BillingSetting.
        :type secondary_tax_rule: str
        """
        allowed_values = ["Pre", "Post"]  # noqa: E501
        if secondary_tax_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `secondary_tax_rule` ({0}), must be one of {1}"
                .format(secondary_tax_rule, allowed_values)
            )

        self._secondary_tax_rule = secondary_tax_rule

    @property
    def secondary_tax_name(self):
        """Gets the secondary_tax_name of this BillingSetting.

        Name shown for secondary tax on invoices using this BillingSetting

        :return: The secondary_tax_name of this BillingSetting.
        :rtype: str
        """
        return self._secondary_tax_name

    @secondary_tax_name.setter
    def secondary_tax_name(self, secondary_tax_name):
        """Sets the secondary_tax_name of this BillingSetting.

        Name shown for secondary tax on invoices using this BillingSetting

        :param secondary_tax_name: The secondary_tax_name of this BillingSetting.
        :type secondary_tax_name: str
        """

        self._secondary_tax_name = secondary_tax_name

    @property
    def notify_after_bill_created(self):
        """Gets the notify_after_bill_created of this BillingSetting.

        Flag to indicate if users should have the option to notify other users when generating a bill

        :return: The notify_after_bill_created of this BillingSetting.
        :rtype: bool
        """
        return self._notify_after_bill_created

    @notify_after_bill_created.setter
    def notify_after_bill_created(self, notify_after_bill_created):
        """Sets the notify_after_bill_created of this BillingSetting.

        Flag to indicate if users should have the option to notify other users when generating a bill

        :param notify_after_bill_created: The notify_after_bill_created of this BillingSetting.
        :type notify_after_bill_created: bool
        """

        self._notify_after_bill_created = notify_after_bill_created

    @property
    def use_utbms_codes(self):
        """Gets the use_utbms_codes of this BillingSetting.

        Controls usage of UTBMS codes, allowing creation of coded time entries and expenses

        :return: The use_utbms_codes of this BillingSetting.
        :rtype: bool
        """
        return self._use_utbms_codes

    @use_utbms_codes.setter
    def use_utbms_codes(self, use_utbms_codes):
        """Sets the use_utbms_codes of this BillingSetting.

        Controls usage of UTBMS codes, allowing creation of coded time entries and expenses

        :param use_utbms_codes: The use_utbms_codes of this BillingSetting.
        :type use_utbms_codes: bool
        """

        self._use_utbms_codes = use_utbms_codes

    @property
    def created_at(self):
        """Gets the created_at of this BillingSetting.

        The time the *BillingSetting* was created (as a ISO-8601 timestamp)

        :return: The created_at of this BillingSetting.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BillingSetting.

        The time the *BillingSetting* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this BillingSetting.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BillingSetting.

        The time the *BillingSetting* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this BillingSetting.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BillingSetting.

        The time the *BillingSetting* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this BillingSetting.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
