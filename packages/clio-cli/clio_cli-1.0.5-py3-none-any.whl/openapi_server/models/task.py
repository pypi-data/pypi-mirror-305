# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_base import ActivityBase
from openapi_server.models.matter_base import MatterBase
from openapi_server.models.participant import Participant
from openapi_server.models.reminder_base import ReminderBase
from openapi_server.models.task_type_base import TaskTypeBase
from openapi_server.models.user_base import UserBase
from openapi_server import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, name: str=None, status: str=None, description: str=None, priority: str=None, due_at: date=None, permission: str=None, completed_at: datetime=None, notify_completion: bool=None, statute_of_limitations: bool=None, time_estimated: int=None, created_at: datetime=None, updated_at: datetime=None, time_entries_count: int=None, time_entries: List[ActivityBase]=None, task_type: TaskTypeBase=None, assigner: UserBase=None, matter: MatterBase=None, assignee: Participant=None, reminders: List[ReminderBase]=None):
        """Task - a model defined in OpenAPI

        :param id: The id of this Task.
        :param etag: The etag of this Task.
        :param name: The name of this Task.
        :param status: The status of this Task.
        :param description: The description of this Task.
        :param priority: The priority of this Task.
        :param due_at: The due_at of this Task.
        :param permission: The permission of this Task.
        :param completed_at: The completed_at of this Task.
        :param notify_completion: The notify_completion of this Task.
        :param statute_of_limitations: The statute_of_limitations of this Task.
        :param time_estimated: The time_estimated of this Task.
        :param created_at: The created_at of this Task.
        :param updated_at: The updated_at of this Task.
        :param time_entries_count: The time_entries_count of this Task.
        :param time_entries: The time_entries of this Task.
        :param task_type: The task_type of this Task.
        :param assigner: The assigner of this Task.
        :param matter: The matter of this Task.
        :param assignee: The assignee of this Task.
        :param reminders: The reminders of this Task.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'name': str,
            'status': str,
            'description': str,
            'priority': str,
            'due_at': date,
            'permission': str,
            'completed_at': datetime,
            'notify_completion': bool,
            'statute_of_limitations': bool,
            'time_estimated': int,
            'created_at': datetime,
            'updated_at': datetime,
            'time_entries_count': int,
            'time_entries': List[ActivityBase],
            'task_type': TaskTypeBase,
            'assigner': UserBase,
            'matter': MatterBase,
            'assignee': Participant,
            'reminders': List[ReminderBase]
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'name': 'name',
            'status': 'status',
            'description': 'description',
            'priority': 'priority',
            'due_at': 'due_at',
            'permission': 'permission',
            'completed_at': 'completed_at',
            'notify_completion': 'notify_completion',
            'statute_of_limitations': 'statute_of_limitations',
            'time_estimated': 'time_estimated',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'time_entries_count': 'time_entries_count',
            'time_entries': 'time_entries',
            'task_type': 'task_type',
            'assigner': 'assigner',
            'matter': 'matter',
            'assignee': 'assignee',
            'reminders': 'reminders'
        }

        self._id = id
        self._etag = etag
        self._name = name
        self._status = status
        self._description = description
        self._priority = priority
        self._due_at = due_at
        self._permission = permission
        self._completed_at = completed_at
        self._notify_completion = notify_completion
        self._statute_of_limitations = statute_of_limitations
        self._time_estimated = time_estimated
        self._created_at = created_at
        self._updated_at = updated_at
        self._time_entries_count = time_entries_count
        self._time_entries = time_entries
        self._task_type = task_type
        self._assigner = assigner
        self._matter = matter
        self._assignee = assignee
        self._reminders = reminders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task of this Task.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Task.

        Unique identifier for the *Task*

        :return: The id of this Task.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.

        Unique identifier for the *Task*

        :param id: The id of this Task.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this Task.

        ETag for the *Task*

        :return: The etag of this Task.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Task.

        ETag for the *Task*

        :param etag: The etag of this Task.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this Task.

        The name of the *Task*

        :return: The name of this Task.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.

        The name of the *Task*

        :param name: The name of this Task.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Task.

        Status of the *Task*. (Note that users without advanced tasks can only have either complete or pending)

        :return: The status of this Task.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.

        Status of the *Task*. (Note that users without advanced tasks can only have either complete or pending)

        :param status: The status of this Task.
        :type status: str
        """
        allowed_values = ["pending", "in_progress", "in_review", "complete"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def description(self):
        """Gets the description of this Task.

        A detailed description of the *Task*

        :return: The description of this Task.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Task.

        A detailed description of the *Task*

        :param description: The description of this Task.
        :type description: str
        """

        self._description = description

    @property
    def priority(self):
        """Gets the priority of this Task.

        The priority of the *Task*

        :return: The priority of this Task.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Task.

        The priority of the *Task*

        :param priority: The priority of this Task.
        :type priority: str
        """
        allowed_values = ["High", "Normal", "Low"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def due_at(self):
        """Gets the due_at of this Task.

        The date the *Task* is due (as a ISO-8601 date)

        :return: The due_at of this Task.
        :rtype: date
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this Task.

        The date the *Task* is due (as a ISO-8601 date)

        :param due_at: The due_at of this Task.
        :type due_at: date
        """

        self._due_at = due_at

    @property
    def permission(self):
        """Gets the permission of this Task.

        The permission of the *Task*

        :return: The permission of this Task.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this Task.

        The permission of the *Task*

        :param permission: The permission of this Task.
        :type permission: str
        """

        self._permission = permission

    @property
    def completed_at(self):
        """Gets the completed_at of this Task.

        The time the *Task* was completed (as a ISO-8601 timestamp)

        :return: The completed_at of this Task.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this Task.

        The time the *Task* was completed (as a ISO-8601 timestamp)

        :param completed_at: The completed_at of this Task.
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def notify_completion(self):
        """Gets the notify_completion of this Task.

        Whether to notify the assigner of the task's completion

        :return: The notify_completion of this Task.
        :rtype: bool
        """
        return self._notify_completion

    @notify_completion.setter
    def notify_completion(self, notify_completion):
        """Sets the notify_completion of this Task.

        Whether to notify the assigner of the task's completion

        :param notify_completion: The notify_completion of this Task.
        :type notify_completion: bool
        """

        self._notify_completion = notify_completion

    @property
    def statute_of_limitations(self):
        """Gets the statute_of_limitations of this Task.

        Whether the task is a statute of limitations

        :return: The statute_of_limitations of this Task.
        :rtype: bool
        """
        return self._statute_of_limitations

    @statute_of_limitations.setter
    def statute_of_limitations(self, statute_of_limitations):
        """Sets the statute_of_limitations of this Task.

        Whether the task is a statute of limitations

        :param statute_of_limitations: The statute_of_limitations of this Task.
        :type statute_of_limitations: bool
        """

        self._statute_of_limitations = statute_of_limitations

    @property
    def time_estimated(self):
        """Gets the time_estimated of this Task.

        Time the *Task* should take to complete

        :return: The time_estimated of this Task.
        :rtype: int
        """
        return self._time_estimated

    @time_estimated.setter
    def time_estimated(self, time_estimated):
        """Sets the time_estimated of this Task.

        Time the *Task* should take to complete

        :param time_estimated: The time_estimated of this Task.
        :type time_estimated: int
        """

        self._time_estimated = time_estimated

    @property
    def created_at(self):
        """Gets the created_at of this Task.

        The time the *Task* was created (as a ISO-8601 timestamp)

        :return: The created_at of this Task.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Task.

        The time the *Task* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this Task.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Task.

        The time the *Task* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this Task.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Task.

        The time the *Task* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this Task.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def time_entries_count(self):
        """Gets the time_entries_count of this Task.

        The number of time entries associated with this task

        :return: The time_entries_count of this Task.
        :rtype: int
        """
        return self._time_entries_count

    @time_entries_count.setter
    def time_entries_count(self, time_entries_count):
        """Sets the time_entries_count of this Task.

        The number of time entries associated with this task

        :param time_entries_count: The time_entries_count of this Task.
        :type time_entries_count: int
        """

        self._time_entries_count = time_entries_count

    @property
    def time_entries(self):
        """Gets the time_entries of this Task.

        Activity

        :return: The time_entries of this Task.
        :rtype: List[ActivityBase]
        """
        return self._time_entries

    @time_entries.setter
    def time_entries(self, time_entries):
        """Sets the time_entries of this Task.

        Activity

        :param time_entries: The time_entries of this Task.
        :type time_entries: List[ActivityBase]
        """

        self._time_entries = time_entries

    @property
    def task_type(self):
        """Gets the task_type of this Task.


        :return: The task_type of this Task.
        :rtype: TaskTypeBase
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this Task.


        :param task_type: The task_type of this Task.
        :type task_type: TaskTypeBase
        """

        self._task_type = task_type

    @property
    def assigner(self):
        """Gets the assigner of this Task.


        :return: The assigner of this Task.
        :rtype: UserBase
        """
        return self._assigner

    @assigner.setter
    def assigner(self, assigner):
        """Sets the assigner of this Task.


        :param assigner: The assigner of this Task.
        :type assigner: UserBase
        """

        self._assigner = assigner

    @property
    def matter(self):
        """Gets the matter of this Task.


        :return: The matter of this Task.
        :rtype: MatterBase
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this Task.


        :param matter: The matter of this Task.
        :type matter: MatterBase
        """

        self._matter = matter

    @property
    def assignee(self):
        """Gets the assignee of this Task.


        :return: The assignee of this Task.
        :rtype: Participant
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this Task.


        :param assignee: The assignee of this Task.
        :type assignee: Participant
        """

        self._assignee = assignee

    @property
    def reminders(self):
        """Gets the reminders of this Task.

        Reminder

        :return: The reminders of this Task.
        :rtype: List[ReminderBase]
        """
        return self._reminders

    @reminders.setter
    def reminders(self, reminders):
        """Sets the reminders of this Task.

        Reminder

        :param reminders: The reminders of this Task.
        :type reminders: List[ReminderBase]
        """

        self._reminders = reminders
