# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Balance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, amount: float=None, type: str=None, interest_amount: float=None, due: float=None):
        """Balance - a model defined in OpenAPI

        :param id: The id of this Balance.
        :param amount: The amount of this Balance.
        :param type: The type of this Balance.
        :param interest_amount: The interest_amount of this Balance.
        :param due: The due of this Balance.
        """
        self.openapi_types = {
            'id': int,
            'amount': float,
            'type': str,
            'interest_amount': float,
            'due': float
        }

        self.attribute_map = {
            'id': 'id',
            'amount': 'amount',
            'type': 'type',
            'interest_amount': 'interest_amount',
            'due': 'due'
        }

        self._id = id
        self._amount = amount
        self._type = type
        self._interest_amount = interest_amount
        self._due = due

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Balance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Balance of this Balance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Balance.

        Unique identifier for the *Balance*

        :return: The id of this Balance.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Balance.

        Unique identifier for the *Balance*

        :param id: The id of this Balance.
        :type id: int
        """

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this Balance.

        The amount for this Balance.

        :return: The amount of this Balance.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Balance.

        The amount for this Balance.

        :param amount: The amount of this Balance.
        :type amount: float
        """

        self._amount = amount

    @property
    def type(self):
        """Gets the type of this Balance.

        The type of Balance this data is for.

        :return: The type of this Balance.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Balance.

        The type of Balance this data is for.

        :param type: The type of this Balance.
        :type type: str
        """
        allowed_values = ["Matter", "Client"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def interest_amount(self):
        """Gets the interest_amount of this Balance.

        The interest amount for this Balance.

        :return: The interest_amount of this Balance.
        :rtype: float
        """
        return self._interest_amount

    @interest_amount.setter
    def interest_amount(self, interest_amount):
        """Sets the interest_amount of this Balance.

        The interest amount for this Balance.

        :param interest_amount: The interest_amount of this Balance.
        :type interest_amount: float
        """

        self._interest_amount = interest_amount

    @property
    def due(self):
        """Gets the due of this Balance.

        The amount due for this Balance, factoring in applicable discounts.

        :return: The due of this Balance.
        :rtype: float
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this Balance.

        The amount due for this Balance, factoring in applicable discounts.

        :param due: The due of this Balance.
        :type due: float
        """

        self._due = due
