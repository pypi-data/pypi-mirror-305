# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_version_base import DocumentVersionBase
from openapi_server.models.user_base import UserBase
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, message: str=None, created_at: datetime=None, updated_at: datetime=None, creator: UserBase=None, document_version: DocumentVersionBase=None):
        """Comment - a model defined in OpenAPI

        :param id: The id of this Comment.
        :param etag: The etag of this Comment.
        :param message: The message of this Comment.
        :param created_at: The created_at of this Comment.
        :param updated_at: The updated_at of this Comment.
        :param creator: The creator of this Comment.
        :param document_version: The document_version of this Comment.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'message': str,
            'created_at': datetime,
            'updated_at': datetime,
            'creator': UserBase,
            'document_version': DocumentVersionBase
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'message': 'message',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'creator': 'creator',
            'document_version': 'document_version'
        }

        self._id = id
        self._etag = etag
        self._message = message
        self._created_at = created_at
        self._updated_at = updated_at
        self._creator = creator
        self._document_version = document_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Comment.

        Unique identifier for the *Comment*

        :return: The id of this Comment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.

        Unique identifier for the *Comment*

        :param id: The id of this Comment.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this Comment.

        ETag for the *Comment*

        :return: The etag of this Comment.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Comment.

        ETag for the *Comment*

        :param etag: The etag of this Comment.
        :type etag: str
        """

        self._etag = etag

    @property
    def message(self):
        """Gets the message of this Comment.

        The content of the Comment

        :return: The message of this Comment.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Comment.

        The content of the Comment

        :param message: The message of this Comment.
        :type message: str
        """

        self._message = message

    @property
    def created_at(self):
        """Gets the created_at of this Comment.

        The time the *Comment* was created (as a ISO-8601 timestamp)

        :return: The created_at of this Comment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Comment.

        The time the *Comment* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this Comment.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Comment.

        The time the *Comment* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this Comment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Comment.

        The time the *Comment* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this Comment.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def creator(self):
        """Gets the creator of this Comment.


        :return: The creator of this Comment.
        :rtype: UserBase
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Comment.


        :param creator: The creator of this Comment.
        :type creator: UserBase
        """

        self._creator = creator

    @property
    def document_version(self):
        """Gets the document_version of this Comment.


        :return: The document_version of this Comment.
        :rtype: DocumentVersionBase
        """
        return self._document_version

    @document_version.setter
    def document_version(self, document_version):
        """Sets the document_version of this Comment.


        :param document_version: The document_version of this Comment.
        :type document_version: DocumentVersionBase
        """

        self._document_version = document_version
