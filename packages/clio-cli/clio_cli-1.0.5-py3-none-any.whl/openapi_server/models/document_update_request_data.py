# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_copy_request_data_document_category import DocumentCopyRequestDataDocumentCategory
from openapi_server.models.document_copy_request_data_external_properties_inner import DocumentCopyRequestDataExternalPropertiesInner
from openapi_server.models.document_update_request_data_multiparts_inner import DocumentUpdateRequestDataMultipartsInner
from openapi_server.models.document_update_request_data_parent import DocumentUpdateRequestDataParent
from openapi_server import util


class DocumentUpdateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, communication_id: int=None, copy_version: bool=None, document_category: DocumentCopyRequestDataDocumentCategory=None, external_properties: List[DocumentCopyRequestDataExternalPropertiesInner]=None, fully_uploaded: bool=None, multiparts: List[DocumentUpdateRequestDataMultipartsInner]=None, name: str=None, parent: DocumentUpdateRequestDataParent=None, received_at: datetime=None, restore: bool=None, uuid: str=None):
        """DocumentUpdateRequestData - a model defined in OpenAPI

        :param communication_id: The communication_id of this DocumentUpdateRequestData.
        :param copy_version: The copy_version of this DocumentUpdateRequestData.
        :param document_category: The document_category of this DocumentUpdateRequestData.
        :param external_properties: The external_properties of this DocumentUpdateRequestData.
        :param fully_uploaded: The fully_uploaded of this DocumentUpdateRequestData.
        :param multiparts: The multiparts of this DocumentUpdateRequestData.
        :param name: The name of this DocumentUpdateRequestData.
        :param parent: The parent of this DocumentUpdateRequestData.
        :param received_at: The received_at of this DocumentUpdateRequestData.
        :param restore: The restore of this DocumentUpdateRequestData.
        :param uuid: The uuid of this DocumentUpdateRequestData.
        """
        self.openapi_types = {
            'communication_id': int,
            'copy_version': bool,
            'document_category': DocumentCopyRequestDataDocumentCategory,
            'external_properties': List[DocumentCopyRequestDataExternalPropertiesInner],
            'fully_uploaded': bool,
            'multiparts': List[DocumentUpdateRequestDataMultipartsInner],
            'name': str,
            'parent': DocumentUpdateRequestDataParent,
            'received_at': datetime,
            'restore': bool,
            'uuid': str
        }

        self.attribute_map = {
            'communication_id': 'communication_id',
            'copy_version': 'copy_version',
            'document_category': 'document_category',
            'external_properties': 'external_properties',
            'fully_uploaded': 'fully_uploaded',
            'multiparts': 'multiparts',
            'name': 'name',
            'parent': 'parent',
            'received_at': 'received_at',
            'restore': 'restore',
            'uuid': 'uuid'
        }

        self._communication_id = communication_id
        self._copy_version = copy_version
        self._document_category = document_category
        self._external_properties = external_properties
        self._fully_uploaded = fully_uploaded
        self._multiparts = multiparts
        self._name = name
        self._parent = parent
        self._received_at = received_at
        self._restore = restore
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentUpdateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Document_update_request_data of this DocumentUpdateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def communication_id(self):
        """Gets the communication_id of this DocumentUpdateRequestData.

        Related communication record.

        :return: The communication_id of this DocumentUpdateRequestData.
        :rtype: int
        """
        return self._communication_id

    @communication_id.setter
    def communication_id(self, communication_id):
        """Sets the communication_id of this DocumentUpdateRequestData.

        Related communication record.

        :param communication_id: The communication_id of this DocumentUpdateRequestData.
        :type communication_id: int
        """

        self._communication_id = communication_id

    @property
    def copy_version(self):
        """Gets the copy_version of this DocumentUpdateRequestData.

        Indicates whether to create a new version with the updated filename on rename. This is intended to handle cases where the document extension has been changed; if the document extension has not changed, no new version will be created.

        :return: The copy_version of this DocumentUpdateRequestData.
        :rtype: bool
        """
        return self._copy_version

    @copy_version.setter
    def copy_version(self, copy_version):
        """Sets the copy_version of this DocumentUpdateRequestData.

        Indicates whether to create a new version with the updated filename on rename. This is intended to handle cases where the document extension has been changed; if the document extension has not changed, no new version will be created.

        :param copy_version: The copy_version of this DocumentUpdateRequestData.
        :type copy_version: bool
        """

        self._copy_version = copy_version

    @property
    def document_category(self):
        """Gets the document_category of this DocumentUpdateRequestData.


        :return: The document_category of this DocumentUpdateRequestData.
        :rtype: DocumentCopyRequestDataDocumentCategory
        """
        return self._document_category

    @document_category.setter
    def document_category(self, document_category):
        """Sets the document_category of this DocumentUpdateRequestData.


        :param document_category: The document_category of this DocumentUpdateRequestData.
        :type document_category: DocumentCopyRequestDataDocumentCategory
        """

        self._document_category = document_category

    @property
    def external_properties(self):
        """Gets the external_properties of this DocumentUpdateRequestData.


        :return: The external_properties of this DocumentUpdateRequestData.
        :rtype: List[DocumentCopyRequestDataExternalPropertiesInner]
        """
        return self._external_properties

    @external_properties.setter
    def external_properties(self, external_properties):
        """Sets the external_properties of this DocumentUpdateRequestData.


        :param external_properties: The external_properties of this DocumentUpdateRequestData.
        :type external_properties: List[DocumentCopyRequestDataExternalPropertiesInner]
        """

        self._external_properties = external_properties

    @property
    def fully_uploaded(self):
        """Gets the fully_uploaded of this DocumentUpdateRequestData.

        Indicates whether document is uploaded.  When marking the document fully uploaded, it arises errors when: * The file is not successfully uploaded. * Not all the file parts are uploaded. * The document is already marked as fully uploaded. 

        :return: The fully_uploaded of this DocumentUpdateRequestData.
        :rtype: bool
        """
        return self._fully_uploaded

    @fully_uploaded.setter
    def fully_uploaded(self, fully_uploaded):
        """Sets the fully_uploaded of this DocumentUpdateRequestData.

        Indicates whether document is uploaded.  When marking the document fully uploaded, it arises errors when: * The file is not successfully uploaded. * Not all the file parts are uploaded. * The document is already marked as fully uploaded. 

        :param fully_uploaded: The fully_uploaded of this DocumentUpdateRequestData.
        :type fully_uploaded: bool
        """

        self._fully_uploaded = fully_uploaded

    @property
    def multiparts(self):
        """Gets the multiparts of this DocumentUpdateRequestData.


        :return: The multiparts of this DocumentUpdateRequestData.
        :rtype: List[DocumentUpdateRequestDataMultipartsInner]
        """
        return self._multiparts

    @multiparts.setter
    def multiparts(self, multiparts):
        """Sets the multiparts of this DocumentUpdateRequestData.


        :param multiparts: The multiparts of this DocumentUpdateRequestData.
        :type multiparts: List[DocumentUpdateRequestDataMultipartsInner]
        """

        self._multiparts = multiparts

    @property
    def name(self):
        """Gets the name of this DocumentUpdateRequestData.

        Document name.

        :return: The name of this DocumentUpdateRequestData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentUpdateRequestData.

        Document name.

        :param name: The name of this DocumentUpdateRequestData.
        :type name: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this DocumentUpdateRequestData.


        :return: The parent of this DocumentUpdateRequestData.
        :rtype: DocumentUpdateRequestDataParent
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this DocumentUpdateRequestData.


        :param parent: The parent of this DocumentUpdateRequestData.
        :type parent: DocumentUpdateRequestDataParent
        """

        self._parent = parent

    @property
    def received_at(self):
        """Gets the received_at of this DocumentUpdateRequestData.

        Date and time the document was received (Expects an ISO-8601 timestamp).

        :return: The received_at of this DocumentUpdateRequestData.
        :rtype: datetime
        """
        return self._received_at

    @received_at.setter
    def received_at(self, received_at):
        """Sets the received_at of this DocumentUpdateRequestData.

        Date and time the document was received (Expects an ISO-8601 timestamp).

        :param received_at: The received_at of this DocumentUpdateRequestData.
        :type received_at: datetime
        """

        self._received_at = received_at

    @property
    def restore(self):
        """Gets the restore of this DocumentUpdateRequestData.

        Whether or not a trashed Document should be restored.

        :return: The restore of this DocumentUpdateRequestData.
        :rtype: bool
        """
        return self._restore

    @restore.setter
    def restore(self, restore):
        """Sets the restore of this DocumentUpdateRequestData.

        Whether or not a trashed Document should be restored.

        :param restore: The restore of this DocumentUpdateRequestData.
        :type restore: bool
        """

        self._restore = restore

    @property
    def uuid(self):
        """Gets the uuid of this DocumentUpdateRequestData.

        UUID associated with the document version. UUID is required to mark a document fully uploaded.

        :return: The uuid of this DocumentUpdateRequestData.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DocumentUpdateRequestData.

        UUID associated with the document version. UUID is required to mark a document fully uploaded.

        :param uuid: The uuid of this DocumentUpdateRequestData.
        :type uuid: str
        """

        self._uuid = uuid
