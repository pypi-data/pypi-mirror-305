# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomActionBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, created_at: datetime=None, updated_at: datetime=None, label: str=None, target_url: str=None, ui_reference: str=None):
        """CustomActionBase - a model defined in OpenAPI

        :param id: The id of this CustomActionBase.
        :param etag: The etag of this CustomActionBase.
        :param created_at: The created_at of this CustomActionBase.
        :param updated_at: The updated_at of this CustomActionBase.
        :param label: The label of this CustomActionBase.
        :param target_url: The target_url of this CustomActionBase.
        :param ui_reference: The ui_reference of this CustomActionBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'created_at': datetime,
            'updated_at': datetime,
            'label': str,
            'target_url': str,
            'ui_reference': str
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'label': 'label',
            'target_url': 'target_url',
            'ui_reference': 'ui_reference'
        }

        self._id = id
        self._etag = etag
        self._created_at = created_at
        self._updated_at = updated_at
        self._label = label
        self._target_url = target_url
        self._ui_reference = ui_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomActionBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomAction_base of this CustomActionBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CustomActionBase.

        Unique identifier for the *CustomAction*

        :return: The id of this CustomActionBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomActionBase.

        Unique identifier for the *CustomAction*

        :param id: The id of this CustomActionBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this CustomActionBase.

        ETag for the *CustomAction*

        :return: The etag of this CustomActionBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this CustomActionBase.

        ETag for the *CustomAction*

        :param etag: The etag of this CustomActionBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def created_at(self):
        """Gets the created_at of this CustomActionBase.

        The time the *CustomAction* was created (as a ISO-8601 timestamp)

        :return: The created_at of this CustomActionBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CustomActionBase.

        The time the *CustomAction* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this CustomActionBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CustomActionBase.

        The time the *CustomAction* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this CustomActionBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CustomActionBase.

        The time the *CustomAction* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this CustomActionBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def label(self):
        """Gets the label of this CustomActionBase.

        Text label to be displayed on the custom link.

        :return: The label of this CustomActionBase.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CustomActionBase.

        Text label to be displayed on the custom link.

        :param label: The label of this CustomActionBase.
        :type label: str
        """

        self._label = label

    @property
    def target_url(self):
        """Gets the target_url of this CustomActionBase.

        Target URL which will be opened in a new tab when the user clicks the custom link.

        :return: The target_url of this CustomActionBase.
        :rtype: str
        """
        return self._target_url

    @target_url.setter
    def target_url(self, target_url):
        """Sets the target_url of this CustomActionBase.

        Target URL which will be opened in a new tab when the user clicks the custom link.

        :param target_url: The target_url of this CustomActionBase.
        :type target_url: str
        """

        self._target_url = target_url

    @property
    def ui_reference(self):
        """Gets the ui_reference of this CustomActionBase.

        UI reference location within Clio where the link will be displayed.

        :return: The ui_reference of this CustomActionBase.
        :rtype: str
        """
        return self._ui_reference

    @ui_reference.setter
    def ui_reference(self, ui_reference):
        """Sets the ui_reference of this CustomActionBase.

        UI reference location within Clio where the link will be displayed.

        :param ui_reference: The ui_reference of this CustomActionBase.
        :type ui_reference: str
        """
        allowed_values = ["activities/show", "documents/show", "contacts/show", "matters/show", "folders/show"]  # noqa: E501
        if ui_reference not in allowed_values:
            raise ValueError(
                "Invalid value for `ui_reference` ({0}), must be one of {1}"
                .format(ui_reference, allowed_values)
            )

        self._ui_reference = ui_reference
