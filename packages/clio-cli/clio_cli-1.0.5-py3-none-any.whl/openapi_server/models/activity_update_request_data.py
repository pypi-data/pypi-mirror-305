# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_create_request_data_activity_description import ActivityCreateRequestDataActivityDescription
from openapi_server.models.activity_create_request_data_calendar_entry import ActivityCreateRequestDataCalendarEntry
from openapi_server.models.activity_create_request_data_client_portal import ActivityCreateRequestDataClientPortal
from openapi_server.models.activity_create_request_data_communication import ActivityCreateRequestDataCommunication
from openapi_server.models.activity_create_request_data_contact_note import ActivityCreateRequestDataContactNote
from openapi_server.models.activity_create_request_data_expense_category import ActivityCreateRequestDataExpenseCategory
from openapi_server.models.activity_create_request_data_matter import ActivityCreateRequestDataMatter
from openapi_server.models.activity_create_request_data_task import ActivityCreateRequestDataTask
from openapi_server.models.activity_create_request_data_text_message_conversation import ActivityCreateRequestDataTextMessageConversation
from openapi_server.models.activity_create_request_data_user import ActivityCreateRequestDataUser
from openapi_server.models.activity_create_request_data_utbms_expense import ActivityCreateRequestDataUtbmsExpense
from openapi_server.models.activity_create_request_data_vendor import ActivityCreateRequestDataVendor
from openapi_server import util


class ActivityUpdateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_description: ActivityCreateRequestDataActivityDescription=None, calendar_entry: ActivityCreateRequestDataCalendarEntry=None, client_portal: ActivityCreateRequestDataClientPortal=None, communication: ActivityCreateRequestDataCommunication=None, contact_note: ActivityCreateRequestDataContactNote=None, _date: date=None, expense_category: ActivityCreateRequestDataExpenseCategory=None, matter: ActivityCreateRequestDataMatter=None, matter_note: ActivityCreateRequestDataContactNote=None, no_charge: bool=None, non_billable: bool=None, note: str=None, price: float=None, quantity: float=None, reference: str=None, start_timer: bool=None, task: ActivityCreateRequestDataTask=None, tax_setting: str=None, text_message_conversation: ActivityCreateRequestDataTextMessageConversation=None, type: str=None, user: ActivityCreateRequestDataUser=None, utbms_expense: ActivityCreateRequestDataUtbmsExpense=None, vendor: ActivityCreateRequestDataVendor=None):
        """ActivityUpdateRequestData - a model defined in OpenAPI

        :param activity_description: The activity_description of this ActivityUpdateRequestData.
        :param calendar_entry: The calendar_entry of this ActivityUpdateRequestData.
        :param client_portal: The client_portal of this ActivityUpdateRequestData.
        :param communication: The communication of this ActivityUpdateRequestData.
        :param contact_note: The contact_note of this ActivityUpdateRequestData.
        :param _date: The _date of this ActivityUpdateRequestData.
        :param expense_category: The expense_category of this ActivityUpdateRequestData.
        :param matter: The matter of this ActivityUpdateRequestData.
        :param matter_note: The matter_note of this ActivityUpdateRequestData.
        :param no_charge: The no_charge of this ActivityUpdateRequestData.
        :param non_billable: The non_billable of this ActivityUpdateRequestData.
        :param note: The note of this ActivityUpdateRequestData.
        :param price: The price of this ActivityUpdateRequestData.
        :param quantity: The quantity of this ActivityUpdateRequestData.
        :param reference: The reference of this ActivityUpdateRequestData.
        :param start_timer: The start_timer of this ActivityUpdateRequestData.
        :param task: The task of this ActivityUpdateRequestData.
        :param tax_setting: The tax_setting of this ActivityUpdateRequestData.
        :param text_message_conversation: The text_message_conversation of this ActivityUpdateRequestData.
        :param type: The type of this ActivityUpdateRequestData.
        :param user: The user of this ActivityUpdateRequestData.
        :param utbms_expense: The utbms_expense of this ActivityUpdateRequestData.
        :param vendor: The vendor of this ActivityUpdateRequestData.
        """
        self.openapi_types = {
            'activity_description': ActivityCreateRequestDataActivityDescription,
            'calendar_entry': ActivityCreateRequestDataCalendarEntry,
            'client_portal': ActivityCreateRequestDataClientPortal,
            'communication': ActivityCreateRequestDataCommunication,
            'contact_note': ActivityCreateRequestDataContactNote,
            '_date': date,
            'expense_category': ActivityCreateRequestDataExpenseCategory,
            'matter': ActivityCreateRequestDataMatter,
            'matter_note': ActivityCreateRequestDataContactNote,
            'no_charge': bool,
            'non_billable': bool,
            'note': str,
            'price': float,
            'quantity': float,
            'reference': str,
            'start_timer': bool,
            'task': ActivityCreateRequestDataTask,
            'tax_setting': str,
            'text_message_conversation': ActivityCreateRequestDataTextMessageConversation,
            'type': str,
            'user': ActivityCreateRequestDataUser,
            'utbms_expense': ActivityCreateRequestDataUtbmsExpense,
            'vendor': ActivityCreateRequestDataVendor
        }

        self.attribute_map = {
            'activity_description': 'activity_description',
            'calendar_entry': 'calendar_entry',
            'client_portal': 'client_portal',
            'communication': 'communication',
            'contact_note': 'contact_note',
            '_date': 'date',
            'expense_category': 'expense_category',
            'matter': 'matter',
            'matter_note': 'matter_note',
            'no_charge': 'no_charge',
            'non_billable': 'non_billable',
            'note': 'note',
            'price': 'price',
            'quantity': 'quantity',
            'reference': 'reference',
            'start_timer': 'start_timer',
            'task': 'task',
            'tax_setting': 'tax_setting',
            'text_message_conversation': 'text_message_conversation',
            'type': 'type',
            'user': 'user',
            'utbms_expense': 'utbms_expense',
            'vendor': 'vendor'
        }

        self._activity_description = activity_description
        self._calendar_entry = calendar_entry
        self._client_portal = client_portal
        self._communication = communication
        self._contact_note = contact_note
        self.__date = _date
        self._expense_category = expense_category
        self._matter = matter
        self._matter_note = matter_note
        self._no_charge = no_charge
        self._non_billable = non_billable
        self._note = note
        self._price = price
        self._quantity = quantity
        self._reference = reference
        self._start_timer = start_timer
        self._task = task
        self._tax_setting = tax_setting
        self._text_message_conversation = text_message_conversation
        self._type = type
        self._user = user
        self._utbms_expense = utbms_expense
        self._vendor = vendor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityUpdateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activity_update_request_data of this ActivityUpdateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_description(self):
        """Gets the activity_description of this ActivityUpdateRequestData.


        :return: The activity_description of this ActivityUpdateRequestData.
        :rtype: ActivityCreateRequestDataActivityDescription
        """
        return self._activity_description

    @activity_description.setter
    def activity_description(self, activity_description):
        """Sets the activity_description of this ActivityUpdateRequestData.


        :param activity_description: The activity_description of this ActivityUpdateRequestData.
        :type activity_description: ActivityCreateRequestDataActivityDescription
        """

        self._activity_description = activity_description

    @property
    def calendar_entry(self):
        """Gets the calendar_entry of this ActivityUpdateRequestData.


        :return: The calendar_entry of this ActivityUpdateRequestData.
        :rtype: ActivityCreateRequestDataCalendarEntry
        """
        return self._calendar_entry

    @calendar_entry.setter
    def calendar_entry(self, calendar_entry):
        """Sets the calendar_entry of this ActivityUpdateRequestData.


        :param calendar_entry: The calendar_entry of this ActivityUpdateRequestData.
        :type calendar_entry: ActivityCreateRequestDataCalendarEntry
        """

        self._calendar_entry = calendar_entry

    @property
    def client_portal(self):
        """Gets the client_portal of this ActivityUpdateRequestData.


        :return: The client_portal of this ActivityUpdateRequestData.
        :rtype: ActivityCreateRequestDataClientPortal
        """
        return self._client_portal

    @client_portal.setter
    def client_portal(self, client_portal):
        """Sets the client_portal of this ActivityUpdateRequestData.


        :param client_portal: The client_portal of this ActivityUpdateRequestData.
        :type client_portal: ActivityCreateRequestDataClientPortal
        """

        self._client_portal = client_portal

    @property
    def communication(self):
        """Gets the communication of this ActivityUpdateRequestData.


        :return: The communication of this ActivityUpdateRequestData.
        :rtype: ActivityCreateRequestDataCommunication
        """
        return self._communication

    @communication.setter
    def communication(self, communication):
        """Sets the communication of this ActivityUpdateRequestData.


        :param communication: The communication of this ActivityUpdateRequestData.
        :type communication: ActivityCreateRequestDataCommunication
        """

        self._communication = communication

    @property
    def contact_note(self):
        """Gets the contact_note of this ActivityUpdateRequestData.


        :return: The contact_note of this ActivityUpdateRequestData.
        :rtype: ActivityCreateRequestDataContactNote
        """
        return self._contact_note

    @contact_note.setter
    def contact_note(self, contact_note):
        """Sets the contact_note of this ActivityUpdateRequestData.


        :param contact_note: The contact_note of this ActivityUpdateRequestData.
        :type contact_note: ActivityCreateRequestDataContactNote
        """

        self._contact_note = contact_note

    @property
    def _date(self):
        """Gets the _date of this ActivityUpdateRequestData.

        The date the Activity was performed. (Expects an ISO-8601 date).

        :return: The _date of this ActivityUpdateRequestData.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ActivityUpdateRequestData.

        The date the Activity was performed. (Expects an ISO-8601 date).

        :param _date: The _date of this ActivityUpdateRequestData.
        :type _date: date
        """

        self.__date = _date

    @property
    def expense_category(self):
        """Gets the expense_category of this ActivityUpdateRequestData.


        :return: The expense_category of this ActivityUpdateRequestData.
        :rtype: ActivityCreateRequestDataExpenseCategory
        """
        return self._expense_category

    @expense_category.setter
    def expense_category(self, expense_category):
        """Sets the expense_category of this ActivityUpdateRequestData.


        :param expense_category: The expense_category of this ActivityUpdateRequestData.
        :type expense_category: ActivityCreateRequestDataExpenseCategory
        """

        self._expense_category = expense_category

    @property
    def matter(self):
        """Gets the matter of this ActivityUpdateRequestData.


        :return: The matter of this ActivityUpdateRequestData.
        :rtype: ActivityCreateRequestDataMatter
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this ActivityUpdateRequestData.


        :param matter: The matter of this ActivityUpdateRequestData.
        :type matter: ActivityCreateRequestDataMatter
        """

        self._matter = matter

    @property
    def matter_note(self):
        """Gets the matter_note of this ActivityUpdateRequestData.


        :return: The matter_note of this ActivityUpdateRequestData.
        :rtype: ActivityCreateRequestDataContactNote
        """
        return self._matter_note

    @matter_note.setter
    def matter_note(self, matter_note):
        """Sets the matter_note of this ActivityUpdateRequestData.


        :param matter_note: The matter_note of this ActivityUpdateRequestData.
        :type matter_note: ActivityCreateRequestDataContactNote
        """

        self._matter_note = matter_note

    @property
    def no_charge(self):
        """Gets the no_charge of this ActivityUpdateRequestData.

        Whether the non-billable *Activity* will be shown on the bill.

        :return: The no_charge of this ActivityUpdateRequestData.
        :rtype: bool
        """
        return self._no_charge

    @no_charge.setter
    def no_charge(self, no_charge):
        """Sets the no_charge of this ActivityUpdateRequestData.

        Whether the non-billable *Activity* will be shown on the bill.

        :param no_charge: The no_charge of this ActivityUpdateRequestData.
        :type no_charge: bool
        """

        self._no_charge = no_charge

    @property
    def non_billable(self):
        """Gets the non_billable of this ActivityUpdateRequestData.

        Whether or not this Activity is prevented from appearing as a line item in a bill. Only valid for non-billed TimeEntries, and with the exception of the Activity having no_charge set to true. 

        :return: The non_billable of this ActivityUpdateRequestData.
        :rtype: bool
        """
        return self._non_billable

    @non_billable.setter
    def non_billable(self, non_billable):
        """Sets the non_billable of this ActivityUpdateRequestData.

        Whether or not this Activity is prevented from appearing as a line item in a bill. Only valid for non-billed TimeEntries, and with the exception of the Activity having no_charge set to true. 

        :param non_billable: The non_billable of this ActivityUpdateRequestData.
        :type non_billable: bool
        """

        self._non_billable = non_billable

    @property
    def note(self):
        """Gets the note of this ActivityUpdateRequestData.

        A custom note to describe what the Activity is for.

        :return: The note of this ActivityUpdateRequestData.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ActivityUpdateRequestData.

        A custom note to describe what the Activity is for.

        :param note: The note of this ActivityUpdateRequestData.
        :type note: str
        """

        self._note = note

    @property
    def price(self):
        """Gets the price of this ActivityUpdateRequestData.

        For an ExpenseEntry, HardCostEntry, and SoftCostEntry, it is the expense amount.  [Support Link for ExpenseEntry](https://help.clio.com/hc/en-us/articles/9289745356571-Expenses)  [Support Link for HardCostEntry and SoftCostEntry](https://help.clio.com/hc/en-us/articles/9289745356571-Expenses#enable-hard-and-soft-cost-expenses-0-0)  For a TimeEntry, it is the hourly or flat amount. When updating a TimeEntry, if the price is not given or the user does not have the permission to view the rate, and its activity description, matter and/or user is changed, the price is reset according to the rate defined for the activity description, matter, client or user.  [Support Link for Rates Hierarchy](https://help.clio.com/hc/en-us/articles/9289801180187-Rates-and-Rate-Hierarchies-)  [Support Link for Billing Rate Visibility](https://help.clio.com/hc/en-us/articles/9285360193819-Permissions-and-Billing-Rates#billing-rate-visibility-0-3) 

        :return: The price of this ActivityUpdateRequestData.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ActivityUpdateRequestData.

        For an ExpenseEntry, HardCostEntry, and SoftCostEntry, it is the expense amount.  [Support Link for ExpenseEntry](https://help.clio.com/hc/en-us/articles/9289745356571-Expenses)  [Support Link for HardCostEntry and SoftCostEntry](https://help.clio.com/hc/en-us/articles/9289745356571-Expenses#enable-hard-and-soft-cost-expenses-0-0)  For a TimeEntry, it is the hourly or flat amount. When updating a TimeEntry, if the price is not given or the user does not have the permission to view the rate, and its activity description, matter and/or user is changed, the price is reset according to the rate defined for the activity description, matter, client or user.  [Support Link for Rates Hierarchy](https://help.clio.com/hc/en-us/articles/9289801180187-Rates-and-Rate-Hierarchies-)  [Support Link for Billing Rate Visibility](https://help.clio.com/hc/en-us/articles/9285360193819-Permissions-and-Billing-Rates#billing-rate-visibility-0-3) 

        :param price: The price of this ActivityUpdateRequestData.
        :type price: float
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this ActivityUpdateRequestData.

        The field is applicable to TimeEntry, ExpenseEntry, and SoftCostEntry.  **Version <= 4.0.3:** The number of hours the TimeEntry took.  **Latest version:** The number of seconds the TimeEntry took. 

        :return: The quantity of this ActivityUpdateRequestData.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ActivityUpdateRequestData.

        The field is applicable to TimeEntry, ExpenseEntry, and SoftCostEntry.  **Version <= 4.0.3:** The number of hours the TimeEntry took.  **Latest version:** The number of seconds the TimeEntry took. 

        :param quantity: The quantity of this ActivityUpdateRequestData.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def reference(self):
        """Gets the reference of this ActivityUpdateRequestData.

        A check reference for a HardCostEntry.

        :return: The reference of this ActivityUpdateRequestData.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ActivityUpdateRequestData.

        A check reference for a HardCostEntry.

        :param reference: The reference of this ActivityUpdateRequestData.
        :type reference: str
        """

        self._reference = reference

    @property
    def start_timer(self):
        """Gets the start_timer of this ActivityUpdateRequestData.

        Whether or not a timer should be started for this Activity. Only valid for non-FlatRate, non-billed TimeEntries.

        :return: The start_timer of this ActivityUpdateRequestData.
        :rtype: bool
        """
        return self._start_timer

    @start_timer.setter
    def start_timer(self, start_timer):
        """Sets the start_timer of this ActivityUpdateRequestData.

        Whether or not a timer should be started for this Activity. Only valid for non-FlatRate, non-billed TimeEntries.

        :param start_timer: The start_timer of this ActivityUpdateRequestData.
        :type start_timer: bool
        """

        self._start_timer = start_timer

    @property
    def task(self):
        """Gets the task of this ActivityUpdateRequestData.


        :return: The task of this ActivityUpdateRequestData.
        :rtype: ActivityCreateRequestDataTask
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this ActivityUpdateRequestData.


        :param task: The task of this ActivityUpdateRequestData.
        :type task: ActivityCreateRequestDataTask
        """

        self._task = task

    @property
    def tax_setting(self):
        """Gets the tax_setting of this ActivityUpdateRequestData.

        The option denoting whether primary tax, secondary tax, or both is applied to an expense entry.

        :return: The tax_setting of this ActivityUpdateRequestData.
        :rtype: str
        """
        return self._tax_setting

    @tax_setting.setter
    def tax_setting(self, tax_setting):
        """Sets the tax_setting of this ActivityUpdateRequestData.

        The option denoting whether primary tax, secondary tax, or both is applied to an expense entry.

        :param tax_setting: The tax_setting of this ActivityUpdateRequestData.
        :type tax_setting: str
        """
        allowed_values = ["no_tax", "tax_1_only", "tax_2_only", "tax_1_and_tax_2"]  # noqa: E501
        if tax_setting not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_setting` ({0}), must be one of {1}"
                .format(tax_setting, allowed_values)
            )

        self._tax_setting = tax_setting

    @property
    def text_message_conversation(self):
        """Gets the text_message_conversation of this ActivityUpdateRequestData.


        :return: The text_message_conversation of this ActivityUpdateRequestData.
        :rtype: ActivityCreateRequestDataTextMessageConversation
        """
        return self._text_message_conversation

    @text_message_conversation.setter
    def text_message_conversation(self, text_message_conversation):
        """Sets the text_message_conversation of this ActivityUpdateRequestData.


        :param text_message_conversation: The text_message_conversation of this ActivityUpdateRequestData.
        :type text_message_conversation: ActivityCreateRequestDataTextMessageConversation
        """

        self._text_message_conversation = text_message_conversation

    @property
    def type(self):
        """Gets the type of this ActivityUpdateRequestData.

        The type of the Activity.

        :return: The type of this ActivityUpdateRequestData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActivityUpdateRequestData.

        The type of the Activity.

        :param type: The type of this ActivityUpdateRequestData.
        :type type: str
        """
        allowed_values = ["TimeEntry", "ExpenseEntry", "HardCostEntry", "SoftCostEntry"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user(self):
        """Gets the user of this ActivityUpdateRequestData.


        :return: The user of this ActivityUpdateRequestData.
        :rtype: ActivityCreateRequestDataUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ActivityUpdateRequestData.


        :param user: The user of this ActivityUpdateRequestData.
        :type user: ActivityCreateRequestDataUser
        """

        self._user = user

    @property
    def utbms_expense(self):
        """Gets the utbms_expense of this ActivityUpdateRequestData.


        :return: The utbms_expense of this ActivityUpdateRequestData.
        :rtype: ActivityCreateRequestDataUtbmsExpense
        """
        return self._utbms_expense

    @utbms_expense.setter
    def utbms_expense(self, utbms_expense):
        """Sets the utbms_expense of this ActivityUpdateRequestData.


        :param utbms_expense: The utbms_expense of this ActivityUpdateRequestData.
        :type utbms_expense: ActivityCreateRequestDataUtbmsExpense
        """

        self._utbms_expense = utbms_expense

    @property
    def vendor(self):
        """Gets the vendor of this ActivityUpdateRequestData.


        :return: The vendor of this ActivityUpdateRequestData.
        :rtype: ActivityCreateRequestDataVendor
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ActivityUpdateRequestData.


        :param vendor: The vendor of this ActivityUpdateRequestData.
        :type vendor: ActivityCreateRequestDataVendor
        """

        self._vendor = vendor
