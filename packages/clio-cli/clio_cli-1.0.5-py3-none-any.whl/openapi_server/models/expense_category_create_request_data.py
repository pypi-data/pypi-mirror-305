# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expense_category_create_request_data_groups_inner import ExpenseCategoryCreateRequestDataGroupsInner
from openapi_server.models.expense_category_create_request_data_utbms_code import ExpenseCategoryCreateRequestDataUtbmsCode
from openapi_server import util


class ExpenseCategoryCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entry_type: str=None, groups: List[ExpenseCategoryCreateRequestDataGroupsInner]=None, name: str=None, rate: float=None, utbms_code: ExpenseCategoryCreateRequestDataUtbmsCode=None):
        """ExpenseCategoryCreateRequestData - a model defined in OpenAPI

        :param entry_type: The entry_type of this ExpenseCategoryCreateRequestData.
        :param groups: The groups of this ExpenseCategoryCreateRequestData.
        :param name: The name of this ExpenseCategoryCreateRequestData.
        :param rate: The rate of this ExpenseCategoryCreateRequestData.
        :param utbms_code: The utbms_code of this ExpenseCategoryCreateRequestData.
        """
        self.openapi_types = {
            'entry_type': str,
            'groups': List[ExpenseCategoryCreateRequestDataGroupsInner],
            'name': str,
            'rate': float,
            'utbms_code': ExpenseCategoryCreateRequestDataUtbmsCode
        }

        self.attribute_map = {
            'entry_type': 'entry_type',
            'groups': 'groups',
            'name': 'name',
            'rate': 'rate',
            'utbms_code': 'utbms_code'
        }

        self._entry_type = entry_type
        self._groups = groups
        self._name = name
        self._rate = rate
        self._utbms_code = utbms_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpenseCategoryCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpenseCategory_create_request_data of this ExpenseCategoryCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entry_type(self):
        """Gets the entry_type of this ExpenseCategoryCreateRequestData.

        Defaults to unassociated.

        :return: The entry_type of this ExpenseCategoryCreateRequestData.
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this ExpenseCategoryCreateRequestData.

        Defaults to unassociated.

        :param entry_type: The entry_type of this ExpenseCategoryCreateRequestData.
        :type entry_type: str
        """
        allowed_values = ["hard_cost", "soft_cost", "unassociated"]  # noqa: E501
        if entry_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entry_type` ({0}), must be one of {1}"
                .format(entry_type, allowed_values)
            )

        self._entry_type = entry_type

    @property
    def groups(self):
        """Gets the groups of this ExpenseCategoryCreateRequestData.


        :return: The groups of this ExpenseCategoryCreateRequestData.
        :rtype: List[ExpenseCategoryCreateRequestDataGroupsInner]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ExpenseCategoryCreateRequestData.


        :param groups: The groups of this ExpenseCategoryCreateRequestData.
        :type groups: List[ExpenseCategoryCreateRequestDataGroupsInner]
        """

        self._groups = groups

    @property
    def name(self):
        """Gets the name of this ExpenseCategoryCreateRequestData.

        Name of the Expense Category.

        :return: The name of this ExpenseCategoryCreateRequestData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExpenseCategoryCreateRequestData.

        Name of the Expense Category.

        :param name: The name of this ExpenseCategoryCreateRequestData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rate(self):
        """Gets the rate of this ExpenseCategoryCreateRequestData.

        Rate of the Expense Category, default is null.

        :return: The rate of this ExpenseCategoryCreateRequestData.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this ExpenseCategoryCreateRequestData.

        Rate of the Expense Category, default is null.

        :param rate: The rate of this ExpenseCategoryCreateRequestData.
        :type rate: float
        """

        self._rate = rate

    @property
    def utbms_code(self):
        """Gets the utbms_code of this ExpenseCategoryCreateRequestData.


        :return: The utbms_code of this ExpenseCategoryCreateRequestData.
        :rtype: ExpenseCategoryCreateRequestDataUtbmsCode
        """
        return self._utbms_code

    @utbms_code.setter
    def utbms_code(self, utbms_code):
        """Sets the utbms_code of this ExpenseCategoryCreateRequestData.


        :param utbms_code: The utbms_code of this ExpenseCategoryCreateRequestData.
        :type utbms_code: ExpenseCategoryCreateRequestDataUtbmsCode
        """

        self._utbms_code = utbms_code
