# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReminderTemplateBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, duration: int=None, notification_type: str=None, created_at: datetime=None, updated_at: datetime=None):
        """ReminderTemplateBase - a model defined in OpenAPI

        :param id: The id of this ReminderTemplateBase.
        :param etag: The etag of this ReminderTemplateBase.
        :param duration: The duration of this ReminderTemplateBase.
        :param notification_type: The notification_type of this ReminderTemplateBase.
        :param created_at: The created_at of this ReminderTemplateBase.
        :param updated_at: The updated_at of this ReminderTemplateBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'duration': int,
            'notification_type': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'duration': 'duration',
            'notification_type': 'notification_type',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._etag = etag
        self._duration = duration
        self._notification_type = notification_type
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReminderTemplateBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReminderTemplate_base of this ReminderTemplateBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ReminderTemplateBase.

        Unique identifier for the *ReminderTemplate*

        :return: The id of this ReminderTemplateBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReminderTemplateBase.

        Unique identifier for the *ReminderTemplate*

        :param id: The id of this ReminderTemplateBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this ReminderTemplateBase.

        ETag for the *ReminderTemplate*

        :return: The etag of this ReminderTemplateBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ReminderTemplateBase.

        ETag for the *ReminderTemplate*

        :param etag: The etag of this ReminderTemplateBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def duration(self):
        """Gets the duration of this ReminderTemplateBase.

        The time in minutes to remind user before the subject.

        :return: The duration of this ReminderTemplateBase.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ReminderTemplateBase.

        The time in minutes to remind user before the subject.

        :param duration: The duration of this ReminderTemplateBase.
        :type duration: int
        """

        self._duration = duration

    @property
    def notification_type(self):
        """Gets the notification_type of this ReminderTemplateBase.

        The type of method to be notified by

        :return: The notification_type of this ReminderTemplateBase.
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this ReminderTemplateBase.

        The type of method to be notified by

        :param notification_type: The notification_type of this ReminderTemplateBase.
        :type notification_type: str
        """
        allowed_values = ["Email", "Popup"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def created_at(self):
        """Gets the created_at of this ReminderTemplateBase.

        The time the *ReminderTemplate* was created (as a ISO-8601 timestamp)

        :return: The created_at of this ReminderTemplateBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReminderTemplateBase.

        The time the *ReminderTemplate* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this ReminderTemplateBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ReminderTemplateBase.

        The time the *ReminderTemplate* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this ReminderTemplateBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ReminderTemplateBase.

        The time the *ReminderTemplate* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this ReminderTemplateBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
