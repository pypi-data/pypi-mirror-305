# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clio_payments_link_create_request_data_destination_account import ClioPaymentsLinkCreateRequestDataDestinationAccount
from openapi_server.models.clio_payments_link_create_request_data_destination_contact import ClioPaymentsLinkCreateRequestDataDestinationContact
from openapi_server.models.clio_payments_link_create_request_data_subject import ClioPaymentsLinkCreateRequestDataSubject
from openapi_server import util


class ClioPaymentsLinkCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, currency: str=None, description: str=None, destination_account: ClioPaymentsLinkCreateRequestDataDestinationAccount=None, destination_contact: ClioPaymentsLinkCreateRequestDataDestinationContact=None, duration: int=None, email_address: str=None, is_allocated_as_revenue: bool=None, subject: ClioPaymentsLinkCreateRequestDataSubject=None):
        """ClioPaymentsLinkCreateRequestData - a model defined in OpenAPI

        :param amount: The amount of this ClioPaymentsLinkCreateRequestData.
        :param currency: The currency of this ClioPaymentsLinkCreateRequestData.
        :param description: The description of this ClioPaymentsLinkCreateRequestData.
        :param destination_account: The destination_account of this ClioPaymentsLinkCreateRequestData.
        :param destination_contact: The destination_contact of this ClioPaymentsLinkCreateRequestData.
        :param duration: The duration of this ClioPaymentsLinkCreateRequestData.
        :param email_address: The email_address of this ClioPaymentsLinkCreateRequestData.
        :param is_allocated_as_revenue: The is_allocated_as_revenue of this ClioPaymentsLinkCreateRequestData.
        :param subject: The subject of this ClioPaymentsLinkCreateRequestData.
        """
        self.openapi_types = {
            'amount': float,
            'currency': str,
            'description': str,
            'destination_account': ClioPaymentsLinkCreateRequestDataDestinationAccount,
            'destination_contact': ClioPaymentsLinkCreateRequestDataDestinationContact,
            'duration': int,
            'email_address': str,
            'is_allocated_as_revenue': bool,
            'subject': ClioPaymentsLinkCreateRequestDataSubject
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency',
            'description': 'description',
            'destination_account': 'destination_account',
            'destination_contact': 'destination_contact',
            'duration': 'duration',
            'email_address': 'email_address',
            'is_allocated_as_revenue': 'is_allocated_as_revenue',
            'subject': 'subject'
        }

        self._amount = amount
        self._currency = currency
        self._description = description
        self._destination_account = destination_account
        self._destination_contact = destination_contact
        self._duration = duration
        self._email_address = email_address
        self._is_allocated_as_revenue = is_allocated_as_revenue
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClioPaymentsLinkCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClioPaymentsLink_create_request_data of this ClioPaymentsLinkCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ClioPaymentsLinkCreateRequestData.

        The amount to be paid. If not provided, the client will be able to specify an amount.

        :return: The amount of this ClioPaymentsLinkCreateRequestData.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ClioPaymentsLinkCreateRequestData.

        The amount to be paid. If not provided, the client will be able to specify an amount.

        :param amount: The amount of this ClioPaymentsLinkCreateRequestData.
        :type amount: float
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this ClioPaymentsLinkCreateRequestData.

        The currency the payment will be processed in. The supported currency depends on the account's location ('USD' for a US account). The currency must be a valid ISO 4217 currency code.

        :return: The currency of this ClioPaymentsLinkCreateRequestData.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ClioPaymentsLinkCreateRequestData.

        The currency the payment will be processed in. The supported currency depends on the account's location ('USD' for a US account). The currency must be a valid ISO 4217 currency code.

        :param currency: The currency of this ClioPaymentsLinkCreateRequestData.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this ClioPaymentsLinkCreateRequestData.

        Only applicable for a direct payment. A short description of the purpose of the payment. Max 255 characters.

        :return: The description of this ClioPaymentsLinkCreateRequestData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClioPaymentsLinkCreateRequestData.

        Only applicable for a direct payment. A short description of the purpose of the payment. Max 255 characters.

        :param description: The description of this ClioPaymentsLinkCreateRequestData.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def destination_account(self):
        """Gets the destination_account of this ClioPaymentsLinkCreateRequestData.


        :return: The destination_account of this ClioPaymentsLinkCreateRequestData.
        :rtype: ClioPaymentsLinkCreateRequestDataDestinationAccount
        """
        return self._destination_account

    @destination_account.setter
    def destination_account(self, destination_account):
        """Sets the destination_account of this ClioPaymentsLinkCreateRequestData.


        :param destination_account: The destination_account of this ClioPaymentsLinkCreateRequestData.
        :type destination_account: ClioPaymentsLinkCreateRequestDataDestinationAccount
        """
        if destination_account is None:
            raise ValueError("Invalid value for `destination_account`, must not be `None`")

        self._destination_account = destination_account

    @property
    def destination_contact(self):
        """Gets the destination_contact of this ClioPaymentsLinkCreateRequestData.


        :return: The destination_contact of this ClioPaymentsLinkCreateRequestData.
        :rtype: ClioPaymentsLinkCreateRequestDataDestinationContact
        """
        return self._destination_contact

    @destination_contact.setter
    def destination_contact(self, destination_contact):
        """Sets the destination_contact of this ClioPaymentsLinkCreateRequestData.


        :param destination_contact: The destination_contact of this ClioPaymentsLinkCreateRequestData.
        :type destination_contact: ClioPaymentsLinkCreateRequestDataDestinationContact
        """

        self._destination_contact = destination_contact

    @property
    def duration(self):
        """Gets the duration of this ClioPaymentsLinkCreateRequestData.

        The amount of time, in seconds, that the payment link will be active for. The maximum allowed value is '7776000' (90 days in seconds).

        :return: The duration of this ClioPaymentsLinkCreateRequestData.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ClioPaymentsLinkCreateRequestData.

        The amount of time, in seconds, that the payment link will be active for. The maximum allowed value is '7776000' (90 days in seconds).

        :param duration: The duration of this ClioPaymentsLinkCreateRequestData.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def email_address(self):
        """Gets the email_address of this ClioPaymentsLinkCreateRequestData.

        Pre-fills the relevant field for the client when filling out their details in the payment link.

        :return: The email_address of this ClioPaymentsLinkCreateRequestData.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this ClioPaymentsLinkCreateRequestData.

        Pre-fills the relevant field for the client when filling out their details in the payment link.

        :param email_address: The email_address of this ClioPaymentsLinkCreateRequestData.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def is_allocated_as_revenue(self):
        """Gets the is_allocated_as_revenue of this ClioPaymentsLinkCreateRequestData.

        Only applicable for a direct payment. If true, the payment will be allocated as revenue. If false, the payment will be collected as an unallocated balance. Payments into trust can not be allocated as revenue. Defaults to false.

        :return: The is_allocated_as_revenue of this ClioPaymentsLinkCreateRequestData.
        :rtype: bool
        """
        return self._is_allocated_as_revenue

    @is_allocated_as_revenue.setter
    def is_allocated_as_revenue(self, is_allocated_as_revenue):
        """Sets the is_allocated_as_revenue of this ClioPaymentsLinkCreateRequestData.

        Only applicable for a direct payment. If true, the payment will be allocated as revenue. If false, the payment will be collected as an unallocated balance. Payments into trust can not be allocated as revenue. Defaults to false.

        :param is_allocated_as_revenue: The is_allocated_as_revenue of this ClioPaymentsLinkCreateRequestData.
        :type is_allocated_as_revenue: bool
        """

        self._is_allocated_as_revenue = is_allocated_as_revenue

    @property
    def subject(self):
        """Gets the subject of this ClioPaymentsLinkCreateRequestData.


        :return: The subject of this ClioPaymentsLinkCreateRequestData.
        :rtype: ClioPaymentsLinkCreateRequestDataSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ClioPaymentsLinkCreateRequestData.


        :param subject: The subject of this ClioPaymentsLinkCreateRequestData.
        :type subject: ClioPaymentsLinkCreateRequestDataSubject
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject
