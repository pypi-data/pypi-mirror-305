# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_base import AddressBase
from openapi_server.models.avatar_base import AvatarBase
from openapi_server.models.contact_base import ContactBase
from openapi_server.models.custom_field_value_base import CustomFieldValueBase
from openapi_server.models.email_address_base import EmailAddressBase
from openapi_server.models.phone_number_base import PhoneNumberBase
from openapi_server.models.relationship_base import RelationshipBase
from openapi_server.models.web_site_base import WebSiteBase
from openapi_server import util


class MatterContacts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_created_at: datetime=None, contact_updated_at: datetime=None, created_at: datetime=None, description: str=None, etag: str=None, first_name: str=None, id: int=None, initials: str=None, is_client: bool=None, last_name: str=None, matter_id: int=None, matter_number: str=None, middle_name: str=None, name: str=None, prefix: str=None, primary_email_address: str=None, primary_phone_number: str=None, relationship_name: str=None, secondary_email_address: str=None, secondary_phone_number: str=None, title: str=None, type: str=None, updated_at: datetime=None, client_connect_user_id: int=None, avatar: AvatarBase=None, company: ContactBase=None, primary_address: AddressBase=None, primary_web_site: WebSiteBase=None, secondary_address: AddressBase=None, secondary_web_site: WebSiteBase=None, addresses: List[AddressBase]=None, custom_field_values: List[CustomFieldValueBase]=None, email_addresses: List[EmailAddressBase]=None, phone_numbers: List[PhoneNumberBase]=None, web_sites: List[WebSiteBase]=None, relationship: RelationshipBase=None):
        """MatterContacts - a model defined in OpenAPI

        :param contact_created_at: The contact_created_at of this MatterContacts.
        :param contact_updated_at: The contact_updated_at of this MatterContacts.
        :param created_at: The created_at of this MatterContacts.
        :param description: The description of this MatterContacts.
        :param etag: The etag of this MatterContacts.
        :param first_name: The first_name of this MatterContacts.
        :param id: The id of this MatterContacts.
        :param initials: The initials of this MatterContacts.
        :param is_client: The is_client of this MatterContacts.
        :param last_name: The last_name of this MatterContacts.
        :param matter_id: The matter_id of this MatterContacts.
        :param matter_number: The matter_number of this MatterContacts.
        :param middle_name: The middle_name of this MatterContacts.
        :param name: The name of this MatterContacts.
        :param prefix: The prefix of this MatterContacts.
        :param primary_email_address: The primary_email_address of this MatterContacts.
        :param primary_phone_number: The primary_phone_number of this MatterContacts.
        :param relationship_name: The relationship_name of this MatterContacts.
        :param secondary_email_address: The secondary_email_address of this MatterContacts.
        :param secondary_phone_number: The secondary_phone_number of this MatterContacts.
        :param title: The title of this MatterContacts.
        :param type: The type of this MatterContacts.
        :param updated_at: The updated_at of this MatterContacts.
        :param client_connect_user_id: The client_connect_user_id of this MatterContacts.
        :param avatar: The avatar of this MatterContacts.
        :param company: The company of this MatterContacts.
        :param primary_address: The primary_address of this MatterContacts.
        :param primary_web_site: The primary_web_site of this MatterContacts.
        :param secondary_address: The secondary_address of this MatterContacts.
        :param secondary_web_site: The secondary_web_site of this MatterContacts.
        :param addresses: The addresses of this MatterContacts.
        :param custom_field_values: The custom_field_values of this MatterContacts.
        :param email_addresses: The email_addresses of this MatterContacts.
        :param phone_numbers: The phone_numbers of this MatterContacts.
        :param web_sites: The web_sites of this MatterContacts.
        :param relationship: The relationship of this MatterContacts.
        """
        self.openapi_types = {
            'contact_created_at': datetime,
            'contact_updated_at': datetime,
            'created_at': datetime,
            'description': str,
            'etag': str,
            'first_name': str,
            'id': int,
            'initials': str,
            'is_client': bool,
            'last_name': str,
            'matter_id': int,
            'matter_number': str,
            'middle_name': str,
            'name': str,
            'prefix': str,
            'primary_email_address': str,
            'primary_phone_number': str,
            'relationship_name': str,
            'secondary_email_address': str,
            'secondary_phone_number': str,
            'title': str,
            'type': str,
            'updated_at': datetime,
            'client_connect_user_id': int,
            'avatar': AvatarBase,
            'company': ContactBase,
            'primary_address': AddressBase,
            'primary_web_site': WebSiteBase,
            'secondary_address': AddressBase,
            'secondary_web_site': WebSiteBase,
            'addresses': List[AddressBase],
            'custom_field_values': List[CustomFieldValueBase],
            'email_addresses': List[EmailAddressBase],
            'phone_numbers': List[PhoneNumberBase],
            'web_sites': List[WebSiteBase],
            'relationship': RelationshipBase
        }

        self.attribute_map = {
            'contact_created_at': 'contact_created_at',
            'contact_updated_at': 'contact_updated_at',
            'created_at': 'created_at',
            'description': 'description',
            'etag': 'etag',
            'first_name': 'first_name',
            'id': 'id',
            'initials': 'initials',
            'is_client': 'is_client',
            'last_name': 'last_name',
            'matter_id': 'matter_id',
            'matter_number': 'matter_number',
            'middle_name': 'middle_name',
            'name': 'name',
            'prefix': 'prefix',
            'primary_email_address': 'primary_email_address',
            'primary_phone_number': 'primary_phone_number',
            'relationship_name': 'relationship_name',
            'secondary_email_address': 'secondary_email_address',
            'secondary_phone_number': 'secondary_phone_number',
            'title': 'title',
            'type': 'type',
            'updated_at': 'updated_at',
            'client_connect_user_id': 'client_connect_user_id',
            'avatar': 'avatar',
            'company': 'company',
            'primary_address': 'primary_address',
            'primary_web_site': 'primary_web_site',
            'secondary_address': 'secondary_address',
            'secondary_web_site': 'secondary_web_site',
            'addresses': 'addresses',
            'custom_field_values': 'custom_field_values',
            'email_addresses': 'email_addresses',
            'phone_numbers': 'phone_numbers',
            'web_sites': 'web_sites',
            'relationship': 'relationship'
        }

        self._contact_created_at = contact_created_at
        self._contact_updated_at = contact_updated_at
        self._created_at = created_at
        self._description = description
        self._etag = etag
        self._first_name = first_name
        self._id = id
        self._initials = initials
        self._is_client = is_client
        self._last_name = last_name
        self._matter_id = matter_id
        self._matter_number = matter_number
        self._middle_name = middle_name
        self._name = name
        self._prefix = prefix
        self._primary_email_address = primary_email_address
        self._primary_phone_number = primary_phone_number
        self._relationship_name = relationship_name
        self._secondary_email_address = secondary_email_address
        self._secondary_phone_number = secondary_phone_number
        self._title = title
        self._type = type
        self._updated_at = updated_at
        self._client_connect_user_id = client_connect_user_id
        self._avatar = avatar
        self._company = company
        self._primary_address = primary_address
        self._primary_web_site = primary_web_site
        self._secondary_address = secondary_address
        self._secondary_web_site = secondary_web_site
        self._addresses = addresses
        self._custom_field_values = custom_field_values
        self._email_addresses = email_addresses
        self._phone_numbers = phone_numbers
        self._web_sites = web_sites
        self._relationship = relationship

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatterContacts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatterContacts of this MatterContacts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_created_at(self):
        """Gets the contact_created_at of this MatterContacts.

        Timestamp of the time the contact was created

        :return: The contact_created_at of this MatterContacts.
        :rtype: datetime
        """
        return self._contact_created_at

    @contact_created_at.setter
    def contact_created_at(self, contact_created_at):
        """Sets the contact_created_at of this MatterContacts.

        Timestamp of the time the contact was created

        :param contact_created_at: The contact_created_at of this MatterContacts.
        :type contact_created_at: datetime
        """

        self._contact_created_at = contact_created_at

    @property
    def contact_updated_at(self):
        """Gets the contact_updated_at of this MatterContacts.

        Timestamp of the time the contact was created

        :return: The contact_updated_at of this MatterContacts.
        :rtype: datetime
        """
        return self._contact_updated_at

    @contact_updated_at.setter
    def contact_updated_at(self, contact_updated_at):
        """Sets the contact_updated_at of this MatterContacts.

        Timestamp of the time the contact was created

        :param contact_updated_at: The contact_updated_at of this MatterContacts.
        :type contact_updated_at: datetime
        """

        self._contact_updated_at = contact_updated_at

    @property
    def created_at(self):
        """Gets the created_at of this MatterContacts.

        The time the *MatterContacts* was created (as a ISO-8601 timestamp)

        :return: The created_at of this MatterContacts.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MatterContacts.

        The time the *MatterContacts* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this MatterContacts.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this MatterContacts.

        Description of the matter

        :return: The description of this MatterContacts.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MatterContacts.

        Description of the matter

        :param description: The description of this MatterContacts.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this MatterContacts.

        ETag for the *MatterContacts*

        :return: The etag of this MatterContacts.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this MatterContacts.

        ETag for the *MatterContacts*

        :param etag: The etag of this MatterContacts.
        :type etag: str
        """

        self._etag = etag

    @property
    def first_name(self):
        """Gets the first_name of this MatterContacts.

        First name of the Person

        :return: The first_name of this MatterContacts.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this MatterContacts.

        First name of the Person

        :param first_name: The first_name of this MatterContacts.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this MatterContacts.

        Unique identifier for the *MatterContacts*

        :return: The id of this MatterContacts.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MatterContacts.

        Unique identifier for the *MatterContacts*

        :param id: The id of this MatterContacts.
        :type id: int
        """

        self._id = id

    @property
    def initials(self):
        """Gets the initials of this MatterContacts.

        The initials of the *MatterContacts*

        :return: The initials of this MatterContacts.
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this MatterContacts.

        The initials of the *MatterContacts*

        :param initials: The initials of this MatterContacts.
        :type initials: str
        """

        self._initials = initials

    @property
    def is_client(self):
        """Gets the is_client of this MatterContacts.

        Whether or not the MatterContacts is a client

        :return: The is_client of this MatterContacts.
        :rtype: bool
        """
        return self._is_client

    @is_client.setter
    def is_client(self, is_client):
        """Sets the is_client of this MatterContacts.

        Whether or not the MatterContacts is a client

        :param is_client: The is_client of this MatterContacts.
        :type is_client: bool
        """

        self._is_client = is_client

    @property
    def last_name(self):
        """Gets the last_name of this MatterContacts.

        Last name of the Person

        :return: The last_name of this MatterContacts.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this MatterContacts.

        Last name of the Person

        :param last_name: The last_name of this MatterContacts.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def matter_id(self):
        """Gets the matter_id of this MatterContacts.

        ID of the matter

        :return: The matter_id of this MatterContacts.
        :rtype: int
        """
        return self._matter_id

    @matter_id.setter
    def matter_id(self, matter_id):
        """Sets the matter_id of this MatterContacts.

        ID of the matter

        :param matter_id: The matter_id of this MatterContacts.
        :type matter_id: int
        """

        self._matter_id = matter_id

    @property
    def matter_number(self):
        """Gets the matter_number of this MatterContacts.

        Number of the matter

        :return: The matter_number of this MatterContacts.
        :rtype: str
        """
        return self._matter_number

    @matter_number.setter
    def matter_number(self, matter_number):
        """Sets the matter_number of this MatterContacts.

        Number of the matter

        :param matter_number: The matter_number of this MatterContacts.
        :type matter_number: str
        """

        self._matter_number = matter_number

    @property
    def middle_name(self):
        """Gets the middle_name of this MatterContacts.

        Middle name of the Person

        :return: The middle_name of this MatterContacts.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this MatterContacts.

        Middle name of the Person

        :param middle_name: The middle_name of this MatterContacts.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def name(self):
        """Gets the name of this MatterContacts.

        The full name of the *MatterContacts*

        :return: The name of this MatterContacts.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MatterContacts.

        The full name of the *MatterContacts*

        :param name: The name of this MatterContacts.
        :type name: str
        """

        self._name = name

    @property
    def prefix(self):
        """Gets the prefix of this MatterContacts.

        The prefix of the *MatterContacts* (Mr, Mrs, etc)

        :return: The prefix of this MatterContacts.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this MatterContacts.

        The prefix of the *MatterContacts* (Mr, Mrs, etc)

        :param prefix: The prefix of this MatterContacts.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def primary_email_address(self):
        """Gets the primary_email_address of this MatterContacts.

        The primary email address associated with this *MatterContacts*.

        :return: The primary_email_address of this MatterContacts.
        :rtype: str
        """
        return self._primary_email_address

    @primary_email_address.setter
    def primary_email_address(self, primary_email_address):
        """Sets the primary_email_address of this MatterContacts.

        The primary email address associated with this *MatterContacts*.

        :param primary_email_address: The primary_email_address of this MatterContacts.
        :type primary_email_address: str
        """

        self._primary_email_address = primary_email_address

    @property
    def primary_phone_number(self):
        """Gets the primary_phone_number of this MatterContacts.

        The primary phone number associated with this *MatterContacts*.

        :return: The primary_phone_number of this MatterContacts.
        :rtype: str
        """
        return self._primary_phone_number

    @primary_phone_number.setter
    def primary_phone_number(self, primary_phone_number):
        """Sets the primary_phone_number of this MatterContacts.

        The primary phone number associated with this *MatterContacts*.

        :param primary_phone_number: The primary_phone_number of this MatterContacts.
        :type primary_phone_number: str
        """

        self._primary_phone_number = primary_phone_number

    @property
    def relationship_name(self):
        """Gets the relationship_name of this MatterContacts.

        The description of the relation between the contact and the matter, or \"Client\" if the user is the client.

        :return: The relationship_name of this MatterContacts.
        :rtype: str
        """
        return self._relationship_name

    @relationship_name.setter
    def relationship_name(self, relationship_name):
        """Sets the relationship_name of this MatterContacts.

        The description of the relation between the contact and the matter, or \"Client\" if the user is the client.

        :param relationship_name: The relationship_name of this MatterContacts.
        :type relationship_name: str
        """

        self._relationship_name = relationship_name

    @property
    def secondary_email_address(self):
        """Gets the secondary_email_address of this MatterContacts.

        The secondary email address of the contact

        :return: The secondary_email_address of this MatterContacts.
        :rtype: str
        """
        return self._secondary_email_address

    @secondary_email_address.setter
    def secondary_email_address(self, secondary_email_address):
        """Sets the secondary_email_address of this MatterContacts.

        The secondary email address of the contact

        :param secondary_email_address: The secondary_email_address of this MatterContacts.
        :type secondary_email_address: str
        """

        self._secondary_email_address = secondary_email_address

    @property
    def secondary_phone_number(self):
        """Gets the secondary_phone_number of this MatterContacts.

        The secondary phone number of the contact

        :return: The secondary_phone_number of this MatterContacts.
        :rtype: str
        """
        return self._secondary_phone_number

    @secondary_phone_number.setter
    def secondary_phone_number(self, secondary_phone_number):
        """Sets the secondary_phone_number of this MatterContacts.

        The secondary phone number of the contact

        :param secondary_phone_number: The secondary_phone_number of this MatterContacts.
        :type secondary_phone_number: str
        """

        self._secondary_phone_number = secondary_phone_number

    @property
    def title(self):
        """Gets the title of this MatterContacts.

        The designated title of the *MatterContacts*

        :return: The title of this MatterContacts.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MatterContacts.

        The designated title of the *MatterContacts*

        :param title: The title of this MatterContacts.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this MatterContacts.

        The type of the *MatterContacts*

        :return: The type of this MatterContacts.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MatterContacts.

        The type of the *MatterContacts*

        :param type: The type of this MatterContacts.
        :type type: str
        """
        allowed_values = ["Company", "Person"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this MatterContacts.

        The time the *MatterContacts* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this MatterContacts.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MatterContacts.

        The time the *MatterContacts* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this MatterContacts.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def client_connect_user_id(self):
        """Gets the client_connect_user_id of this MatterContacts.

        The client connect ID of the contacts associated user

        :return: The client_connect_user_id of this MatterContacts.
        :rtype: int
        """
        return self._client_connect_user_id

    @client_connect_user_id.setter
    def client_connect_user_id(self, client_connect_user_id):
        """Sets the client_connect_user_id of this MatterContacts.

        The client connect ID of the contacts associated user

        :param client_connect_user_id: The client_connect_user_id of this MatterContacts.
        :type client_connect_user_id: int
        """

        self._client_connect_user_id = client_connect_user_id

    @property
    def avatar(self):
        """Gets the avatar of this MatterContacts.


        :return: The avatar of this MatterContacts.
        :rtype: AvatarBase
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this MatterContacts.


        :param avatar: The avatar of this MatterContacts.
        :type avatar: AvatarBase
        """

        self._avatar = avatar

    @property
    def company(self):
        """Gets the company of this MatterContacts.


        :return: The company of this MatterContacts.
        :rtype: ContactBase
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this MatterContacts.


        :param company: The company of this MatterContacts.
        :type company: ContactBase
        """

        self._company = company

    @property
    def primary_address(self):
        """Gets the primary_address of this MatterContacts.


        :return: The primary_address of this MatterContacts.
        :rtype: AddressBase
        """
        return self._primary_address

    @primary_address.setter
    def primary_address(self, primary_address):
        """Sets the primary_address of this MatterContacts.


        :param primary_address: The primary_address of this MatterContacts.
        :type primary_address: AddressBase
        """

        self._primary_address = primary_address

    @property
    def primary_web_site(self):
        """Gets the primary_web_site of this MatterContacts.


        :return: The primary_web_site of this MatterContacts.
        :rtype: WebSiteBase
        """
        return self._primary_web_site

    @primary_web_site.setter
    def primary_web_site(self, primary_web_site):
        """Sets the primary_web_site of this MatterContacts.


        :param primary_web_site: The primary_web_site of this MatterContacts.
        :type primary_web_site: WebSiteBase
        """

        self._primary_web_site = primary_web_site

    @property
    def secondary_address(self):
        """Gets the secondary_address of this MatterContacts.


        :return: The secondary_address of this MatterContacts.
        :rtype: AddressBase
        """
        return self._secondary_address

    @secondary_address.setter
    def secondary_address(self, secondary_address):
        """Sets the secondary_address of this MatterContacts.


        :param secondary_address: The secondary_address of this MatterContacts.
        :type secondary_address: AddressBase
        """

        self._secondary_address = secondary_address

    @property
    def secondary_web_site(self):
        """Gets the secondary_web_site of this MatterContacts.


        :return: The secondary_web_site of this MatterContacts.
        :rtype: WebSiteBase
        """
        return self._secondary_web_site

    @secondary_web_site.setter
    def secondary_web_site(self, secondary_web_site):
        """Sets the secondary_web_site of this MatterContacts.


        :param secondary_web_site: The secondary_web_site of this MatterContacts.
        :type secondary_web_site: WebSiteBase
        """

        self._secondary_web_site = secondary_web_site

    @property
    def addresses(self):
        """Gets the addresses of this MatterContacts.

        Address

        :return: The addresses of this MatterContacts.
        :rtype: List[AddressBase]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this MatterContacts.

        Address

        :param addresses: The addresses of this MatterContacts.
        :type addresses: List[AddressBase]
        """

        self._addresses = addresses

    @property
    def custom_field_values(self):
        """Gets the custom_field_values of this MatterContacts.

        CustomFieldValue

        :return: The custom_field_values of this MatterContacts.
        :rtype: List[CustomFieldValueBase]
        """
        return self._custom_field_values

    @custom_field_values.setter
    def custom_field_values(self, custom_field_values):
        """Sets the custom_field_values of this MatterContacts.

        CustomFieldValue

        :param custom_field_values: The custom_field_values of this MatterContacts.
        :type custom_field_values: List[CustomFieldValueBase]
        """

        self._custom_field_values = custom_field_values

    @property
    def email_addresses(self):
        """Gets the email_addresses of this MatterContacts.

        EmailAddress

        :return: The email_addresses of this MatterContacts.
        :rtype: List[EmailAddressBase]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this MatterContacts.

        EmailAddress

        :param email_addresses: The email_addresses of this MatterContacts.
        :type email_addresses: List[EmailAddressBase]
        """

        self._email_addresses = email_addresses

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this MatterContacts.

        PhoneNumber

        :return: The phone_numbers of this MatterContacts.
        :rtype: List[PhoneNumberBase]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this MatterContacts.

        PhoneNumber

        :param phone_numbers: The phone_numbers of this MatterContacts.
        :type phone_numbers: List[PhoneNumberBase]
        """

        self._phone_numbers = phone_numbers

    @property
    def web_sites(self):
        """Gets the web_sites of this MatterContacts.

        WebSite

        :return: The web_sites of this MatterContacts.
        :rtype: List[WebSiteBase]
        """
        return self._web_sites

    @web_sites.setter
    def web_sites(self, web_sites):
        """Sets the web_sites of this MatterContacts.

        WebSite

        :param web_sites: The web_sites of this MatterContacts.
        :type web_sites: List[WebSiteBase]
        """

        self._web_sites = web_sites

    @property
    def relationship(self):
        """Gets the relationship of this MatterContacts.


        :return: The relationship of this MatterContacts.
        :rtype: RelationshipBase
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this MatterContacts.


        :param relationship: The relationship of this MatterContacts.
        :type relationship: RelationshipBase
        """

        self._relationship = relationship
