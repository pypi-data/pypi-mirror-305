# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivityRateBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, rate: float=None, flat_rate: bool=None, created_at: datetime=None, updated_at: datetime=None, contact_id: int=None, co_counsel_contact_id: int=None):
        """ActivityRateBase - a model defined in OpenAPI

        :param id: The id of this ActivityRateBase.
        :param etag: The etag of this ActivityRateBase.
        :param rate: The rate of this ActivityRateBase.
        :param flat_rate: The flat_rate of this ActivityRateBase.
        :param created_at: The created_at of this ActivityRateBase.
        :param updated_at: The updated_at of this ActivityRateBase.
        :param contact_id: The contact_id of this ActivityRateBase.
        :param co_counsel_contact_id: The co_counsel_contact_id of this ActivityRateBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'rate': float,
            'flat_rate': bool,
            'created_at': datetime,
            'updated_at': datetime,
            'contact_id': int,
            'co_counsel_contact_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'rate': 'rate',
            'flat_rate': 'flat_rate',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'contact_id': 'contact_id',
            'co_counsel_contact_id': 'co_counsel_contact_id'
        }

        self._id = id
        self._etag = etag
        self._rate = rate
        self._flat_rate = flat_rate
        self._created_at = created_at
        self._updated_at = updated_at
        self._contact_id = contact_id
        self._co_counsel_contact_id = co_counsel_contact_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityRateBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityRate_base of this ActivityRateBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ActivityRateBase.

        Unique identifier for the *ActivityRate*

        :return: The id of this ActivityRateBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityRateBase.

        Unique identifier for the *ActivityRate*

        :param id: The id of this ActivityRateBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this ActivityRateBase.

        ETag for the *ActivityRate*

        :return: The etag of this ActivityRateBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ActivityRateBase.

        ETag for the *ActivityRate*

        :param etag: The etag of this ActivityRateBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def rate(self):
        """Gets the rate of this ActivityRateBase.

        Monetary value of this rate. Either hourly value or flat rate value

        :return: The rate of this ActivityRateBase.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this ActivityRateBase.

        Monetary value of this rate. Either hourly value or flat rate value

        :param rate: The rate of this ActivityRateBase.
        :type rate: float
        """

        self._rate = rate

    @property
    def flat_rate(self):
        """Gets the flat_rate of this ActivityRateBase.

        Whether this is a flat rate

        :return: The flat_rate of this ActivityRateBase.
        :rtype: bool
        """
        return self._flat_rate

    @flat_rate.setter
    def flat_rate(self, flat_rate):
        """Sets the flat_rate of this ActivityRateBase.

        Whether this is a flat rate

        :param flat_rate: The flat_rate of this ActivityRateBase.
        :type flat_rate: bool
        """

        self._flat_rate = flat_rate

    @property
    def created_at(self):
        """Gets the created_at of this ActivityRateBase.

        The time the *ActivityRate* was created (as a ISO-8601 timestamp)

        :return: The created_at of this ActivityRateBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ActivityRateBase.

        The time the *ActivityRate* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this ActivityRateBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ActivityRateBase.

        The time the *ActivityRate* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this ActivityRateBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ActivityRateBase.

        The time the *ActivityRate* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this ActivityRateBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def contact_id(self):
        """Gets the contact_id of this ActivityRateBase.

        Filter ActivityRate records for the contact.

        :return: The contact_id of this ActivityRateBase.
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this ActivityRateBase.

        Filter ActivityRate records for the contact.

        :param contact_id: The contact_id of this ActivityRateBase.
        :type contact_id: int
        """

        self._contact_id = contact_id

    @property
    def co_counsel_contact_id(self):
        """Gets the co_counsel_contact_id of this ActivityRateBase.

        Filter ActivityRate records for the co-counsel.

        :return: The co_counsel_contact_id of this ActivityRateBase.
        :rtype: int
        """
        return self._co_counsel_contact_id

    @co_counsel_contact_id.setter
    def co_counsel_contact_id(self, co_counsel_contact_id):
        """Sets the co_counsel_contact_id of this ActivityRateBase.

        Filter ActivityRate records for the co-counsel.

        :param co_counsel_contact_id: The co_counsel_contact_id of this ActivityRateBase.
        :type co_counsel_contact_id: int
        """

        self._co_counsel_contact_id = co_counsel_contact_id
