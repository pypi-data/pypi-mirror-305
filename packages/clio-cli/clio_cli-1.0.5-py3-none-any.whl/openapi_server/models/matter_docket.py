# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.calendar_entry_base import CalendarEntryBase
from openapi_server.models.jurisdiction_base import JurisdictionBase
from openapi_server.models.jurisdictions_to_trigger_base import JurisdictionsToTriggerBase
from openapi_server.models.matter_base import MatterBase
from openapi_server.models.service_type_base import ServiceTypeBase
from openapi_server import util


class MatterDocket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, name: str=None, start_date: date=None, start_time: datetime=None, status: str=None, created_at: datetime=None, updated_at: datetime=None, deleted_at: datetime=None, matter: MatterBase=None, jurisdiction: JurisdictionBase=None, trigger: JurisdictionsToTriggerBase=None, service_type: ServiceTypeBase=None, calendar_entries: List[CalendarEntryBase]=None):
        """MatterDocket - a model defined in OpenAPI

        :param id: The id of this MatterDocket.
        :param etag: The etag of this MatterDocket.
        :param name: The name of this MatterDocket.
        :param start_date: The start_date of this MatterDocket.
        :param start_time: The start_time of this MatterDocket.
        :param status: The status of this MatterDocket.
        :param created_at: The created_at of this MatterDocket.
        :param updated_at: The updated_at of this MatterDocket.
        :param deleted_at: The deleted_at of this MatterDocket.
        :param matter: The matter of this MatterDocket.
        :param jurisdiction: The jurisdiction of this MatterDocket.
        :param trigger: The trigger of this MatterDocket.
        :param service_type: The service_type of this MatterDocket.
        :param calendar_entries: The calendar_entries of this MatterDocket.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'name': str,
            'start_date': date,
            'start_time': datetime,
            'status': str,
            'created_at': datetime,
            'updated_at': datetime,
            'deleted_at': datetime,
            'matter': MatterBase,
            'jurisdiction': JurisdictionBase,
            'trigger': JurisdictionsToTriggerBase,
            'service_type': ServiceTypeBase,
            'calendar_entries': List[CalendarEntryBase]
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'name': 'name',
            'start_date': 'start_date',
            'start_time': 'start_time',
            'status': 'status',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'deleted_at': 'deleted_at',
            'matter': 'matter',
            'jurisdiction': 'jurisdiction',
            'trigger': 'trigger',
            'service_type': 'service_type',
            'calendar_entries': 'calendar_entries'
        }

        self._id = id
        self._etag = etag
        self._name = name
        self._start_date = start_date
        self._start_time = start_time
        self._status = status
        self._created_at = created_at
        self._updated_at = updated_at
        self._deleted_at = deleted_at
        self._matter = matter
        self._jurisdiction = jurisdiction
        self._trigger = trigger
        self._service_type = service_type
        self._calendar_entries = calendar_entries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatterDocket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatterDocket of this MatterDocket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MatterDocket.

        Unique identifier for the *MatterDocket*

        :return: The id of this MatterDocket.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MatterDocket.

        Unique identifier for the *MatterDocket*

        :param id: The id of this MatterDocket.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this MatterDocket.

        ETag for the *MatterDocket*

        :return: The etag of this MatterDocket.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this MatterDocket.

        ETag for the *MatterDocket*

        :param etag: The etag of this MatterDocket.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this MatterDocket.

        The name of the *MatterDocket*

        :return: The name of this MatterDocket.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MatterDocket.

        The name of the *MatterDocket*

        :param name: The name of this MatterDocket.
        :type name: str
        """

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this MatterDocket.

        The date the *MatterDocket* will start (as a ISO-8601 date)

        :return: The start_date of this MatterDocket.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this MatterDocket.

        The date the *MatterDocket* will start (as a ISO-8601 date)

        :param start_date: The start_date of this MatterDocket.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def start_time(self):
        """Gets the start_time of this MatterDocket.

        The time the *MatterDocket* will start, required for specific triggers (as a ISO-8601 timestamp)

        :return: The start_time of this MatterDocket.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MatterDocket.

        The time the *MatterDocket* will start, required for specific triggers (as a ISO-8601 timestamp)

        :param start_time: The start_time of this MatterDocket.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this MatterDocket.

        The status of the *MatterDocket* creation

        :return: The status of this MatterDocket.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MatterDocket.

        The status of the *MatterDocket* creation

        :param status: The status of this MatterDocket.
        :type status: str
        """

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this MatterDocket.

        The time the *MatterDocket* was created (as a ISO-8601 timestamp)

        :return: The created_at of this MatterDocket.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MatterDocket.

        The time the *MatterDocket* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this MatterDocket.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MatterDocket.

        The time the *MatterDocket* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this MatterDocket.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MatterDocket.

        The time the *MatterDocket* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this MatterDocket.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this MatterDocket.

        The time the *MatterDocket* was deleted (as a ISO-8601 timestamp)

        :return: The deleted_at of this MatterDocket.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this MatterDocket.

        The time the *MatterDocket* was deleted (as a ISO-8601 timestamp)

        :param deleted_at: The deleted_at of this MatterDocket.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def matter(self):
        """Gets the matter of this MatterDocket.


        :return: The matter of this MatterDocket.
        :rtype: MatterBase
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this MatterDocket.


        :param matter: The matter of this MatterDocket.
        :type matter: MatterBase
        """

        self._matter = matter

    @property
    def jurisdiction(self):
        """Gets the jurisdiction of this MatterDocket.


        :return: The jurisdiction of this MatterDocket.
        :rtype: JurisdictionBase
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction):
        """Sets the jurisdiction of this MatterDocket.


        :param jurisdiction: The jurisdiction of this MatterDocket.
        :type jurisdiction: JurisdictionBase
        """

        self._jurisdiction = jurisdiction

    @property
    def trigger(self):
        """Gets the trigger of this MatterDocket.


        :return: The trigger of this MatterDocket.
        :rtype: JurisdictionsToTriggerBase
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this MatterDocket.


        :param trigger: The trigger of this MatterDocket.
        :type trigger: JurisdictionsToTriggerBase
        """

        self._trigger = trigger

    @property
    def service_type(self):
        """Gets the service_type of this MatterDocket.


        :return: The service_type of this MatterDocket.
        :rtype: ServiceTypeBase
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this MatterDocket.


        :param service_type: The service_type of this MatterDocket.
        :type service_type: ServiceTypeBase
        """

        self._service_type = service_type

    @property
    def calendar_entries(self):
        """Gets the calendar_entries of this MatterDocket.

        CalendarEntry

        :return: The calendar_entries of this MatterDocket.
        :rtype: List[CalendarEntryBase]
        """
        return self._calendar_entries

    @calendar_entries.setter
    def calendar_entries(self, calendar_entries):
        """Sets the calendar_entries of this MatterDocket.

        CalendarEntry

        :param calendar_entries: The calendar_entries of this MatterDocket.
        :type calendar_entries: List[CalendarEntryBase]
        """

        self._calendar_entries = calendar_entries
