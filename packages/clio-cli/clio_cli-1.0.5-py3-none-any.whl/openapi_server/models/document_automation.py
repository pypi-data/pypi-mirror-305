# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_base import DocumentBase
from openapi_server.models.document_template_base import DocumentTemplateBase
from openapi_server.models.matter_base import MatterBase
from openapi_server import util


class DocumentAutomation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, state: str=None, export_formats: str=None, filename: str=None, created_at: datetime=None, updated_at: datetime=None, matter: MatterBase=None, document_template: DocumentTemplateBase=None, documents: List[DocumentBase]=None):
        """DocumentAutomation - a model defined in OpenAPI

        :param id: The id of this DocumentAutomation.
        :param etag: The etag of this DocumentAutomation.
        :param state: The state of this DocumentAutomation.
        :param export_formats: The export_formats of this DocumentAutomation.
        :param filename: The filename of this DocumentAutomation.
        :param created_at: The created_at of this DocumentAutomation.
        :param updated_at: The updated_at of this DocumentAutomation.
        :param matter: The matter of this DocumentAutomation.
        :param document_template: The document_template of this DocumentAutomation.
        :param documents: The documents of this DocumentAutomation.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'state': str,
            'export_formats': str,
            'filename': str,
            'created_at': datetime,
            'updated_at': datetime,
            'matter': MatterBase,
            'document_template': DocumentTemplateBase,
            'documents': List[DocumentBase]
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'state': 'state',
            'export_formats': 'export_formats',
            'filename': 'filename',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'matter': 'matter',
            'document_template': 'document_template',
            'documents': 'documents'
        }

        self._id = id
        self._etag = etag
        self._state = state
        self._export_formats = export_formats
        self._filename = filename
        self._created_at = created_at
        self._updated_at = updated_at
        self._matter = matter
        self._document_template = document_template
        self._documents = documents

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentAutomation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentAutomation of this DocumentAutomation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DocumentAutomation.

        Unique identifier for the *DocumentAutomation*

        :return: The id of this DocumentAutomation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentAutomation.

        Unique identifier for the *DocumentAutomation*

        :param id: The id of this DocumentAutomation.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this DocumentAutomation.

        ETag for the *DocumentAutomation*

        :return: The etag of this DocumentAutomation.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this DocumentAutomation.

        ETag for the *DocumentAutomation*

        :param etag: The etag of this DocumentAutomation.
        :type etag: str
        """

        self._etag = etag

    @property
    def state(self):
        """Gets the state of this DocumentAutomation.

        A text description of what the automation is currently doing

        :return: The state of this DocumentAutomation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DocumentAutomation.

        A text description of what the automation is currently doing

        :param state: The state of this DocumentAutomation.
        :type state: str
        """
        allowed_values = ["not_started", "queued", "in_progress", "empty", "failed", "completed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def export_formats(self):
        """Gets the export_formats of this DocumentAutomation.

        An array of what formats were requested

        :return: The export_formats of this DocumentAutomation.
        :rtype: str
        """
        return self._export_formats

    @export_formats.setter
    def export_formats(self, export_formats):
        """Sets the export_formats of this DocumentAutomation.

        An array of what formats were requested

        :param export_formats: The export_formats of this DocumentAutomation.
        :type export_formats: str
        """
        allowed_values = ["pdf", "original"]  # noqa: E501
        if export_formats not in allowed_values:
            raise ValueError(
                "Invalid value for `export_formats` ({0}), must be one of {1}"
                .format(export_formats, allowed_values)
            )

        self._export_formats = export_formats

    @property
    def filename(self):
        """Gets the filename of this DocumentAutomation.

        The name of the file being generated.

        :return: The filename of this DocumentAutomation.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this DocumentAutomation.

        The name of the file being generated.

        :param filename: The filename of this DocumentAutomation.
        :type filename: str
        """

        self._filename = filename

    @property
    def created_at(self):
        """Gets the created_at of this DocumentAutomation.

        The time the *DocumentAutomation* was created (as a ISO-8601 timestamp)

        :return: The created_at of this DocumentAutomation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DocumentAutomation.

        The time the *DocumentAutomation* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this DocumentAutomation.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DocumentAutomation.

        The time the *DocumentAutomation* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this DocumentAutomation.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DocumentAutomation.

        The time the *DocumentAutomation* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this DocumentAutomation.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def matter(self):
        """Gets the matter of this DocumentAutomation.


        :return: The matter of this DocumentAutomation.
        :rtype: MatterBase
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this DocumentAutomation.


        :param matter: The matter of this DocumentAutomation.
        :type matter: MatterBase
        """

        self._matter = matter

    @property
    def document_template(self):
        """Gets the document_template of this DocumentAutomation.


        :return: The document_template of this DocumentAutomation.
        :rtype: DocumentTemplateBase
        """
        return self._document_template

    @document_template.setter
    def document_template(self, document_template):
        """Sets the document_template of this DocumentAutomation.


        :param document_template: The document_template of this DocumentAutomation.
        :type document_template: DocumentTemplateBase
        """

        self._document_template = document_template

    @property
    def documents(self):
        """Gets the documents of this DocumentAutomation.

        Document

        :return: The documents of this DocumentAutomation.
        :rtype: List[DocumentBase]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this DocumentAutomation.

        Document

        :param documents: The documents of this DocumentAutomation.
        :type documents: List[DocumentBase]
        """

        self._documents = documents
