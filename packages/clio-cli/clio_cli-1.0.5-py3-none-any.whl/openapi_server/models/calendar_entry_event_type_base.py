# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CalendarEntryEventTypeBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, created_at: datetime=None, updated_at: datetime=None, color: str=None, name: str=None):
        """CalendarEntryEventTypeBase - a model defined in OpenAPI

        :param id: The id of this CalendarEntryEventTypeBase.
        :param etag: The etag of this CalendarEntryEventTypeBase.
        :param created_at: The created_at of this CalendarEntryEventTypeBase.
        :param updated_at: The updated_at of this CalendarEntryEventTypeBase.
        :param color: The color of this CalendarEntryEventTypeBase.
        :param name: The name of this CalendarEntryEventTypeBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'created_at': datetime,
            'updated_at': datetime,
            'color': str,
            'name': str
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'color': 'color',
            'name': 'name'
        }

        self._id = id
        self._etag = etag
        self._created_at = created_at
        self._updated_at = updated_at
        self._color = color
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalendarEntryEventTypeBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalendarEntryEventType_base of this CalendarEntryEventTypeBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CalendarEntryEventTypeBase.

        Unique identifier for the *CalendarEntryEventType*

        :return: The id of this CalendarEntryEventTypeBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalendarEntryEventTypeBase.

        Unique identifier for the *CalendarEntryEventType*

        :param id: The id of this CalendarEntryEventTypeBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this CalendarEntryEventTypeBase.

        ETag for the *CalendarEntryEventType*

        :return: The etag of this CalendarEntryEventTypeBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this CalendarEntryEventTypeBase.

        ETag for the *CalendarEntryEventType*

        :param etag: The etag of this CalendarEntryEventTypeBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def created_at(self):
        """Gets the created_at of this CalendarEntryEventTypeBase.

        The time the *CalendarEntryEventType* was created (as a ISO-8601 timestamp)

        :return: The created_at of this CalendarEntryEventTypeBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CalendarEntryEventTypeBase.

        The time the *CalendarEntryEventType* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this CalendarEntryEventTypeBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CalendarEntryEventTypeBase.

        The time the *CalendarEntryEventType* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this CalendarEntryEventTypeBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CalendarEntryEventTypeBase.

        The time the *CalendarEntryEventType* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this CalendarEntryEventTypeBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def color(self):
        """Gets the color of this CalendarEntryEventTypeBase.

        The color describing the *CalendarEntryEventType*

        :return: The color of this CalendarEntryEventTypeBase.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CalendarEntryEventTypeBase.

        The color describing the *CalendarEntryEventType*

        :param color: The color of this CalendarEntryEventTypeBase.
        :type color: str
        """
        allowed_values = ["#367B9C", "#FFA5A4", "#83D17F", "#FFAC7B", "#8E3F64", "#C75300", "#009CEC", "#62D6B1", "#9EEDCB", "#F9A2C4", "#616161", "#BBDA81", "#DFD3F8", "#D6C4A5", "#FFD478", "#6AC9DE", "#EABBB0", "#BFC2E1", "#DADADA", "#CDE2F5"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def name(self):
        """Gets the name of this CalendarEntryEventTypeBase.

        The name for the *CalendarEntryEventType*

        :return: The name of this CalendarEntryEventTypeBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalendarEntryEventTypeBase.

        The name for the *CalendarEntryEventType*

        :param name: The name of this CalendarEntryEventTypeBase.
        :type name: str
        """

        self._name = name
