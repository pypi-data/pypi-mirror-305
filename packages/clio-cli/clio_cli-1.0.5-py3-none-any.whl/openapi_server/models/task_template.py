# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cascading_task_template_base import CascadingTaskTemplateBase
from openapi_server.models.reminder_template_base import ReminderTemplateBase
from openapi_server.models.task_template_list_base import TaskTemplateListBase
from openapi_server.models.task_type_base import TaskTypeBase
from openapi_server.models.user_base import UserBase
from openapi_server import util


class TaskTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, name: str=None, description: str=None, priority: str=None, private: bool=None, created_at: datetime=None, updated_at: datetime=None, cascading_source: CascadingTaskTemplateBase=None, assignee: UserBase=None, task_template_list: TaskTemplateListBase=None, task_type: TaskTypeBase=None, template_creator: UserBase=None, reminder_templates: List[ReminderTemplateBase]=None):
        """TaskTemplate - a model defined in OpenAPI

        :param id: The id of this TaskTemplate.
        :param etag: The etag of this TaskTemplate.
        :param name: The name of this TaskTemplate.
        :param description: The description of this TaskTemplate.
        :param priority: The priority of this TaskTemplate.
        :param private: The private of this TaskTemplate.
        :param created_at: The created_at of this TaskTemplate.
        :param updated_at: The updated_at of this TaskTemplate.
        :param cascading_source: The cascading_source of this TaskTemplate.
        :param assignee: The assignee of this TaskTemplate.
        :param task_template_list: The task_template_list of this TaskTemplate.
        :param task_type: The task_type of this TaskTemplate.
        :param template_creator: The template_creator of this TaskTemplate.
        :param reminder_templates: The reminder_templates of this TaskTemplate.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'name': str,
            'description': str,
            'priority': str,
            'private': bool,
            'created_at': datetime,
            'updated_at': datetime,
            'cascading_source': CascadingTaskTemplateBase,
            'assignee': UserBase,
            'task_template_list': TaskTemplateListBase,
            'task_type': TaskTypeBase,
            'template_creator': UserBase,
            'reminder_templates': List[ReminderTemplateBase]
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'name': 'name',
            'description': 'description',
            'priority': 'priority',
            'private': 'private',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'cascading_source': 'cascading_source',
            'assignee': 'assignee',
            'task_template_list': 'task_template_list',
            'task_type': 'task_type',
            'template_creator': 'template_creator',
            'reminder_templates': 'reminder_templates'
        }

        self._id = id
        self._etag = etag
        self._name = name
        self._description = description
        self._priority = priority
        self._private = private
        self._created_at = created_at
        self._updated_at = updated_at
        self._cascading_source = cascading_source
        self._assignee = assignee
        self._task_template_list = task_template_list
        self._task_type = task_type
        self._template_creator = template_creator
        self._reminder_templates = reminder_templates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskTemplate of this TaskTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TaskTemplate.

        Unique identifier for the *TaskTemplate*

        :return: The id of this TaskTemplate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskTemplate.

        Unique identifier for the *TaskTemplate*

        :param id: The id of this TaskTemplate.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this TaskTemplate.

        ETag for the *TaskTemplate*

        :return: The etag of this TaskTemplate.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TaskTemplate.

        ETag for the *TaskTemplate*

        :param etag: The etag of this TaskTemplate.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this TaskTemplate.

        The name of the *TaskTemplate*

        :return: The name of this TaskTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskTemplate.

        The name of the *TaskTemplate*

        :param name: The name of this TaskTemplate.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this TaskTemplate.

        A detailed description of the *TaskTemplate*

        :return: The description of this TaskTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskTemplate.

        A detailed description of the *TaskTemplate*

        :param description: The description of this TaskTemplate.
        :type description: str
        """

        self._description = description

    @property
    def priority(self):
        """Gets the priority of this TaskTemplate.

        *TaskTemplate* priority

        :return: The priority of this TaskTemplate.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TaskTemplate.

        *TaskTemplate* priority

        :param priority: The priority of this TaskTemplate.
        :type priority: str
        """
        allowed_values = ["High", "Normal", "Low"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def private(self):
        """Gets the private of this TaskTemplate.

        Whether the *TaskTemplate* is private.

        :return: The private of this TaskTemplate.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this TaskTemplate.

        Whether the *TaskTemplate* is private.

        :param private: The private of this TaskTemplate.
        :type private: bool
        """

        self._private = private

    @property
    def created_at(self):
        """Gets the created_at of this TaskTemplate.

        The time the *TaskTemplate* was created (as a ISO-8601 timestamp)

        :return: The created_at of this TaskTemplate.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TaskTemplate.

        The time the *TaskTemplate* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this TaskTemplate.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TaskTemplate.

        The time the *TaskTemplate* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this TaskTemplate.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TaskTemplate.

        The time the *TaskTemplate* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this TaskTemplate.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def cascading_source(self):
        """Gets the cascading_source of this TaskTemplate.


        :return: The cascading_source of this TaskTemplate.
        :rtype: CascadingTaskTemplateBase
        """
        return self._cascading_source

    @cascading_source.setter
    def cascading_source(self, cascading_source):
        """Sets the cascading_source of this TaskTemplate.


        :param cascading_source: The cascading_source of this TaskTemplate.
        :type cascading_source: CascadingTaskTemplateBase
        """

        self._cascading_source = cascading_source

    @property
    def assignee(self):
        """Gets the assignee of this TaskTemplate.


        :return: The assignee of this TaskTemplate.
        :rtype: UserBase
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this TaskTemplate.


        :param assignee: The assignee of this TaskTemplate.
        :type assignee: UserBase
        """

        self._assignee = assignee

    @property
    def task_template_list(self):
        """Gets the task_template_list of this TaskTemplate.


        :return: The task_template_list of this TaskTemplate.
        :rtype: TaskTemplateListBase
        """
        return self._task_template_list

    @task_template_list.setter
    def task_template_list(self, task_template_list):
        """Sets the task_template_list of this TaskTemplate.


        :param task_template_list: The task_template_list of this TaskTemplate.
        :type task_template_list: TaskTemplateListBase
        """

        self._task_template_list = task_template_list

    @property
    def task_type(self):
        """Gets the task_type of this TaskTemplate.


        :return: The task_type of this TaskTemplate.
        :rtype: TaskTypeBase
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this TaskTemplate.


        :param task_type: The task_type of this TaskTemplate.
        :type task_type: TaskTypeBase
        """

        self._task_type = task_type

    @property
    def template_creator(self):
        """Gets the template_creator of this TaskTemplate.


        :return: The template_creator of this TaskTemplate.
        :rtype: UserBase
        """
        return self._template_creator

    @template_creator.setter
    def template_creator(self, template_creator):
        """Sets the template_creator of this TaskTemplate.


        :param template_creator: The template_creator of this TaskTemplate.
        :type template_creator: UserBase
        """

        self._template_creator = template_creator

    @property
    def reminder_templates(self):
        """Gets the reminder_templates of this TaskTemplate.

        ReminderTemplate

        :return: The reminder_templates of this TaskTemplate.
        :rtype: List[ReminderTemplateBase]
        """
        return self._reminder_templates

    @reminder_templates.setter
    def reminder_templates(self, reminder_templates):
        """Sets the reminder_templates of this TaskTemplate.

        ReminderTemplate

        :param reminder_templates: The reminder_templates of this TaskTemplate.
        :type reminder_templates: List[ReminderTemplateBase]
        """

        self._reminder_templates = reminder_templates
