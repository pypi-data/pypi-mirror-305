# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LineItemTotalsBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quantity: float=None, price: float=None, discount_percent: float=None, total: float=None, sub_total: float=None):
        """LineItemTotalsBase - a model defined in OpenAPI

        :param quantity: The quantity of this LineItemTotalsBase.
        :param price: The price of this LineItemTotalsBase.
        :param discount_percent: The discount_percent of this LineItemTotalsBase.
        :param total: The total of this LineItemTotalsBase.
        :param sub_total: The sub_total of this LineItemTotalsBase.
        """
        self.openapi_types = {
            'quantity': float,
            'price': float,
            'discount_percent': float,
            'total': float,
            'sub_total': float
        }

        self.attribute_map = {
            'quantity': 'quantity',
            'price': 'price',
            'discount_percent': 'discount_percent',
            'total': 'total',
            'sub_total': 'sub_total'
        }

        self._quantity = quantity
        self._price = price
        self._discount_percent = discount_percent
        self._total = total
        self._sub_total = sub_total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineItemTotalsBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineItemTotals_base of this LineItemTotalsBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quantity(self):
        """Gets the quantity of this LineItemTotalsBase.

        Sum of quantity for included line items.

        :return: The quantity of this LineItemTotalsBase.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this LineItemTotalsBase.

        Sum of quantity for included line items.

        :param quantity: The quantity of this LineItemTotalsBase.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def price(self):
        """Gets the price of this LineItemTotalsBase.

        Sum of price for included line items.

        :return: The price of this LineItemTotalsBase.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this LineItemTotalsBase.

        Sum of price for included line items.

        :param price: The price of this LineItemTotalsBase.
        :type price: float
        """

        self._price = price

    @property
    def discount_percent(self):
        """Gets the discount_percent of this LineItemTotalsBase.

        Sum of discount as percentage for included line items.

        :return: The discount_percent of this LineItemTotalsBase.
        :rtype: float
        """
        return self._discount_percent

    @discount_percent.setter
    def discount_percent(self, discount_percent):
        """Sets the discount_percent of this LineItemTotalsBase.

        Sum of discount as percentage for included line items.

        :param discount_percent: The discount_percent of this LineItemTotalsBase.
        :type discount_percent: float
        """

        self._discount_percent = discount_percent

    @property
    def total(self):
        """Gets the total of this LineItemTotalsBase.

        Sum of total for included line items.

        :return: The total of this LineItemTotalsBase.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this LineItemTotalsBase.

        Sum of total for included line items.

        :param total: The total of this LineItemTotalsBase.
        :type total: float
        """

        self._total = total

    @property
    def sub_total(self):
        """Gets the sub_total of this LineItemTotalsBase.

        Sum of total before discount and tax is applied.

        :return: The sub_total of this LineItemTotalsBase.
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this LineItemTotalsBase.

        Sum of total before discount and tax is applied.

        :param sub_total: The sub_total of this LineItemTotalsBase.
        :type sub_total: float
        """

        self._sub_total = sub_total
