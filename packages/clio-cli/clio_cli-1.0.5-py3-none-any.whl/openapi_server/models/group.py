# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_base import UserBase
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_connect_user: bool=None, etag: str=None, id: int=None, name: str=None, type: str=None, updated_at: datetime=None, users: List[UserBase]=None):
        """Group - a model defined in OpenAPI

        :param client_connect_user: The client_connect_user of this Group.
        :param etag: The etag of this Group.
        :param id: The id of this Group.
        :param name: The name of this Group.
        :param type: The type of this Group.
        :param updated_at: The updated_at of this Group.
        :param users: The users of this Group.
        """
        self.openapi_types = {
            'client_connect_user': bool,
            'etag': str,
            'id': int,
            'name': str,
            'type': str,
            'updated_at': datetime,
            'users': List[UserBase]
        }

        self.attribute_map = {
            'client_connect_user': 'client_connect_user',
            'etag': 'etag',
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'updated_at': 'updated_at',
            'users': 'users'
        }

        self._client_connect_user = client_connect_user
        self._etag = etag
        self._id = id
        self._name = name
        self._type = type
        self._updated_at = updated_at
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_connect_user(self):
        """Gets the client_connect_user of this Group.

        Whether or not the Group is a UserGroup for a Clio Connect User

        :return: The client_connect_user of this Group.
        :rtype: bool
        """
        return self._client_connect_user

    @client_connect_user.setter
    def client_connect_user(self, client_connect_user):
        """Sets the client_connect_user of this Group.

        Whether or not the Group is a UserGroup for a Clio Connect User

        :param client_connect_user: The client_connect_user of this Group.
        :type client_connect_user: bool
        """

        self._client_connect_user = client_connect_user

    @property
    def etag(self):
        """Gets the etag of this Group.

        ETag for the *Group*

        :return: The etag of this Group.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Group.

        ETag for the *Group*

        :param etag: The etag of this Group.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Group.

        Unique identifier for the *Group*

        :return: The id of this Group.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        Unique identifier for the *Group*

        :param id: The id of this Group.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Group.

        The name of the *Group*

        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        The name of the *Group*

        :param name: The name of this Group.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Group.

        The type of the *Group*

        :return: The type of this Group.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Group.

        The type of the *Group*

        :param type: The type of this Group.
        :type type: str
        """
        allowed_values = ["UserGroup", "AdhocGroup", "AccountGroup", "TeamGroup"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Group.

        The time the *Group* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this Group.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Group.

        The time the *Group* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this Group.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def users(self):
        """Gets the users of this Group.

        User

        :return: The users of this Group.
        :rtype: List[UserBase]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Group.

        User

        :param users: The users of this Group.
        :type users: List[UserBase]
        """

        self._users = users
