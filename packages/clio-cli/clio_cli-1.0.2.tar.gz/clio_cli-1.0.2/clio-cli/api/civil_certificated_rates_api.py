# coding: utf-8

"""
    Clio API Documentation

    # Developer Support and Feedback * Clio takes the availability and stability of our API seriously; please report any **degradations** or **breakages** to Clio's API Support team at [api@clio.com](mailto:api@clio.com). * For business and partnership inquiries, contact our API Partnerships team at [api.partnerships@clio.com](mailto:api.partnerships@clio.com). * For best practices and tips from the Clio development community, join the conversation in the [Clio Developer Slack Channel](https://join.slack.com/t/clio-public/shared_invite/zt-1bd5nfbiv-WloZR3ZjepoUTv28SI1ezw).  A community-driven [Clio Developers Stack Overflow Group](https://stackoverflow.com/questions/tagged/clio-api) also exists where you can connect and ask questions from other Clio API users. # Getting Started > **Note:** The API is available in four distinct data regions: Australia (au.app.clio.com), Canada (ca.app.clio.com), EU (eu.app.clio.com) and US (app.clio.com). > > Likewise, the developer portal is available at region-specific links for the [Australia](https://au.developers.clio.com), [Canada](https://ca.developers.clio.com), [EU](https://eu.developers.clio.com), and [US](https://developers.clio.com) regions. > > This document assumes the US region is being used (app.clio.com). If you're building in one of the other regions, you should adapt the links and examples as necessary.  To start building on the Clio API, you’ll need a Clio account – you can review our [Developer Handbook](https://docs.developers.clio.com/) and follow the steps to sign up for an account.  Once you have an account, you can [create a developer application](https://docs.developers.clio.com/api-docs/applications) from the [Developer Portal](https://developers.clio.com) and start building! # Authorization with OAuth 2.0 See our [Authorization documentation →](https://docs.developers.clio.com/api-docs/authorization) # Permissions See our [Permissions documentation →](https://docs.developers.clio.com/api-docs/permissions) # Fields See our [Fields documentation →](https://docs.developers.clio.com/api-docs/fields) # Rate Limiting See our [Rate Limits documentation →](https://docs.developers.clio.com/api-docs/rate-limits) # Paging See our [Pagination documentation →](https://docs.developers.clio.com/api-docs/paging) # ETags See our [ETags documentation →](https://docs.developers.clio.com/api-docs/etags) # Minor Versions API v4 supports multiple minor versions. Versions are of the form '4.X.Y'. To request a specific version, you can use an `X-API-VERSION` header in your request, with the header value set to the API version you're requesting. If this header is omitted, it will be treated as a request for the default API version. If the header is present but invalid, it will return a `410 Gone` response. If the header is present and valid, but it is no longer supported, it will return a `410 Gone` response.  An `X-API-VERSION` will be included in all successful responses, with the value being set to the API version used.  You can find our [API Versioning Policy and Guidelines](https://docs.developers.clio.com/api-docs/api-versioning-policy) in our documentation hub.  The [API Changelog](https://docs.developers.clio.com/api-docs/api-changelog) explains each version's changes in further detail. - 4.0.4    Update `quantity` field to return values in seconds rather than hours for Activities  - 4.0.5    * Remove `matter_balances` field from Bills   * Standardize status/state enum values   * Add a Document association to completed DocumentAutomations   * Add rate visibility handling for Activity's price and total  - 4.0.6    Remove `document_versions` collection field from Documents  - 4.0.7    Change secure link format  - 4.0.8    * `Activity` hours are redacted in the response based on the activity hours visibility setting for the user   * Add `quantity_redacted` field to activities  - 4.0.9    **This is the default version**    Contacts are filtered and redacted in the response based on the new 'Contacts Visibility' user permission setting.  - 4.0.10    Fixed validation of `type` query parameter when querying Notes   

    The version of the OpenAPI document: v4
    Contact: api@clio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr

from typing import Optional

from clio-cli.models.lauk_civil_certificated_rate_list import LaukCivilCertificatedRateList

from clio-cli.api_client import ApiClient
from clio-cli.api_response import ApiResponse
from clio-cli.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CivilCertificatedRatesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def lauk_civil_certificated_rate_index(self, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, activity : Annotated[Optional[StrictStr], Field(description="Filter by activity.")] = None, activity_sub_category : Annotated[Optional[StrictStr], Field(description="Filter by activity sub-category.")] = None, attended_several_hearings_for_multiple_clients : Annotated[Optional[StrictBool], Field(description="Filter by whether multiple hearings were attended for multiple clients.")] = None, category_of_law : Annotated[Optional[StrictStr], Field(description="Filter by category of law.")] = None, change_of_solicitor : Annotated[Optional[StrictBool], Field(description="Filter by change of solicitor status.")] = None, court : Annotated[Optional[StrictStr], Field(description="Filter by court.")] = None, eligible_for_sqm : Annotated[Optional[StrictBool], Field(description="Filter by SQM eligibility.")] = None, fee_scheme : Annotated[Optional[StrictStr], Field(description="Fee scheme")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, first_conducting_solicitor : Annotated[Optional[StrictBool], Field(description="Filter by first conducting solicitor status.")] = None, key : Annotated[Optional[StrictStr], Field(description="Filter by key.")] = None, limit : Annotated[Optional[StrictInt], Field(description="A limit on the number of LaukCivilCertificatedRate records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None, number_of_clients : Annotated[Optional[StrictStr], Field(description="Filter by number of clients.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None, party : Annotated[Optional[StrictStr], Field(description="Filter by party.")] = None, post_transfer_clients_represented : Annotated[Optional[StrictStr], Field(description="Filter by post-transfer clients represented.")] = None, rate_type : Annotated[Optional[StrictStr], Field(description="Filter by rate type.")] = None, region : Annotated[Optional[StrictStr], Field(description="Filter by region.")] = None, session_type : Annotated[Optional[StrictStr], Field(description="Filter by session type.")] = None, user_type : Annotated[Optional[StrictStr], Field(description="Filter by user type.")] = None, **kwargs) -> LaukCivilCertificatedRateList:  # noqa: E501
        """List Civil Certificated Rates  # noqa: E501

        Outlines the parameters, optional and required, used when requesting the data for all LaukCivilCertificatedRates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lauk_civil_certificated_rate_index(x_api_version, activity, activity_sub_category, attended_several_hearings_for_multiple_clients, category_of_law, change_of_solicitor, court, eligible_for_sqm, fee_scheme, fields, first_conducting_solicitor, key, limit, number_of_clients, page_token, party, post_transfer_clients_represented, rate_type, region, session_type, user_type, async_req=True)
        >>> result = thread.get()

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param activity: Filter by activity.
        :type activity: str
        :param activity_sub_category: Filter by activity sub-category.
        :type activity_sub_category: str
        :param attended_several_hearings_for_multiple_clients: Filter by whether multiple hearings were attended for multiple clients.
        :type attended_several_hearings_for_multiple_clients: bool
        :param category_of_law: Filter by category of law.
        :type category_of_law: str
        :param change_of_solicitor: Filter by change of solicitor status.
        :type change_of_solicitor: bool
        :param court: Filter by court.
        :type court: str
        :param eligible_for_sqm: Filter by SQM eligibility.
        :type eligible_for_sqm: bool
        :param fee_scheme: Fee scheme
        :type fee_scheme: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param first_conducting_solicitor: Filter by first conducting solicitor status.
        :type first_conducting_solicitor: bool
        :param key: Filter by key.
        :type key: str
        :param limit: A limit on the number of LaukCivilCertificatedRate records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param number_of_clients: Filter by number of clients.
        :type number_of_clients: str
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param party: Filter by party.
        :type party: str
        :param post_transfer_clients_represented: Filter by post-transfer clients represented.
        :type post_transfer_clients_represented: str
        :param rate_type: Filter by rate type.
        :type rate_type: str
        :param region: Filter by region.
        :type region: str
        :param session_type: Filter by session type.
        :type session_type: str
        :param user_type: Filter by user type.
        :type user_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: LaukCivilCertificatedRateList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the lauk_civil_certificated_rate_index_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.lauk_civil_certificated_rate_index_with_http_info(x_api_version, activity, activity_sub_category, attended_several_hearings_for_multiple_clients, category_of_law, change_of_solicitor, court, eligible_for_sqm, fee_scheme, fields, first_conducting_solicitor, key, limit, number_of_clients, page_token, party, post_transfer_clients_represented, rate_type, region, session_type, user_type, **kwargs)  # noqa: E501

    @validate_arguments
    def lauk_civil_certificated_rate_index_with_http_info(self, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, activity : Annotated[Optional[StrictStr], Field(description="Filter by activity.")] = None, activity_sub_category : Annotated[Optional[StrictStr], Field(description="Filter by activity sub-category.")] = None, attended_several_hearings_for_multiple_clients : Annotated[Optional[StrictBool], Field(description="Filter by whether multiple hearings were attended for multiple clients.")] = None, category_of_law : Annotated[Optional[StrictStr], Field(description="Filter by category of law.")] = None, change_of_solicitor : Annotated[Optional[StrictBool], Field(description="Filter by change of solicitor status.")] = None, court : Annotated[Optional[StrictStr], Field(description="Filter by court.")] = None, eligible_for_sqm : Annotated[Optional[StrictBool], Field(description="Filter by SQM eligibility.")] = None, fee_scheme : Annotated[Optional[StrictStr], Field(description="Fee scheme")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, first_conducting_solicitor : Annotated[Optional[StrictBool], Field(description="Filter by first conducting solicitor status.")] = None, key : Annotated[Optional[StrictStr], Field(description="Filter by key.")] = None, limit : Annotated[Optional[StrictInt], Field(description="A limit on the number of LaukCivilCertificatedRate records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None, number_of_clients : Annotated[Optional[StrictStr], Field(description="Filter by number of clients.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None, party : Annotated[Optional[StrictStr], Field(description="Filter by party.")] = None, post_transfer_clients_represented : Annotated[Optional[StrictStr], Field(description="Filter by post-transfer clients represented.")] = None, rate_type : Annotated[Optional[StrictStr], Field(description="Filter by rate type.")] = None, region : Annotated[Optional[StrictStr], Field(description="Filter by region.")] = None, session_type : Annotated[Optional[StrictStr], Field(description="Filter by session type.")] = None, user_type : Annotated[Optional[StrictStr], Field(description="Filter by user type.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List Civil Certificated Rates  # noqa: E501

        Outlines the parameters, optional and required, used when requesting the data for all LaukCivilCertificatedRates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.lauk_civil_certificated_rate_index_with_http_info(x_api_version, activity, activity_sub_category, attended_several_hearings_for_multiple_clients, category_of_law, change_of_solicitor, court, eligible_for_sqm, fee_scheme, fields, first_conducting_solicitor, key, limit, number_of_clients, page_token, party, post_transfer_clients_represented, rate_type, region, session_type, user_type, async_req=True)
        >>> result = thread.get()

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param activity: Filter by activity.
        :type activity: str
        :param activity_sub_category: Filter by activity sub-category.
        :type activity_sub_category: str
        :param attended_several_hearings_for_multiple_clients: Filter by whether multiple hearings were attended for multiple clients.
        :type attended_several_hearings_for_multiple_clients: bool
        :param category_of_law: Filter by category of law.
        :type category_of_law: str
        :param change_of_solicitor: Filter by change of solicitor status.
        :type change_of_solicitor: bool
        :param court: Filter by court.
        :type court: str
        :param eligible_for_sqm: Filter by SQM eligibility.
        :type eligible_for_sqm: bool
        :param fee_scheme: Fee scheme
        :type fee_scheme: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param first_conducting_solicitor: Filter by first conducting solicitor status.
        :type first_conducting_solicitor: bool
        :param key: Filter by key.
        :type key: str
        :param limit: A limit on the number of LaukCivilCertificatedRate records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param number_of_clients: Filter by number of clients.
        :type number_of_clients: str
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param party: Filter by party.
        :type party: str
        :param post_transfer_clients_represented: Filter by post-transfer clients represented.
        :type post_transfer_clients_represented: str
        :param rate_type: Filter by rate type.
        :type rate_type: str
        :param region: Filter by region.
        :type region: str
        :param session_type: Filter by session type.
        :type session_type: str
        :param user_type: Filter by user type.
        :type user_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(LaukCivilCertificatedRateList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_api_version',
            'activity',
            'activity_sub_category',
            'attended_several_hearings_for_multiple_clients',
            'category_of_law',
            'change_of_solicitor',
            'court',
            'eligible_for_sqm',
            'fee_scheme',
            'fields',
            'first_conducting_solicitor',
            'key',
            'limit',
            'number_of_clients',
            'page_token',
            'party',
            'post_transfer_clients_represented',
            'rate_type',
            'region',
            'session_type',
            'user_type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lauk_civil_certificated_rate_index" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('activity') is not None:  # noqa: E501
            _query_params.append(('activity', _params['activity']))

        if _params.get('activity_sub_category') is not None:  # noqa: E501
            _query_params.append(('activity_sub_category', _params['activity_sub_category']))

        if _params.get('attended_several_hearings_for_multiple_clients') is not None:  # noqa: E501
            _query_params.append(('attended_several_hearings_for_multiple_clients', _params['attended_several_hearings_for_multiple_clients']))

        if _params.get('category_of_law') is not None:  # noqa: E501
            _query_params.append(('category_of_law', _params['category_of_law']))

        if _params.get('change_of_solicitor') is not None:  # noqa: E501
            _query_params.append(('change_of_solicitor', _params['change_of_solicitor']))

        if _params.get('court') is not None:  # noqa: E501
            _query_params.append(('court', _params['court']))

        if _params.get('eligible_for_sqm') is not None:  # noqa: E501
            _query_params.append(('eligible_for_sqm', _params['eligible_for_sqm']))

        if _params.get('fee_scheme') is not None:  # noqa: E501
            _query_params.append(('fee_scheme', _params['fee_scheme']))

        if _params.get('fields') is not None:  # noqa: E501
            _query_params.append(('fields', _params['fields']))

        if _params.get('first_conducting_solicitor') is not None:  # noqa: E501
            _query_params.append(('first_conducting_solicitor', _params['first_conducting_solicitor']))

        if _params.get('key') is not None:  # noqa: E501
            _query_params.append(('key', _params['key']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('number_of_clients') is not None:  # noqa: E501
            _query_params.append(('number_of_clients', _params['number_of_clients']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('page_token', _params['page_token']))

        if _params.get('party') is not None:  # noqa: E501
            _query_params.append(('party', _params['party']))

        if _params.get('post_transfer_clients_represented') is not None:  # noqa: E501
            _query_params.append(('post_transfer_clients_represented', _params['post_transfer_clients_represented']))

        if _params.get('rate_type') is not None:  # noqa: E501
            _query_params.append(('rate_type', _params['rate_type']))

        if _params.get('region') is not None:  # noqa: E501
            _query_params.append(('region', _params['region']))

        if _params.get('session_type') is not None:  # noqa: E501
            _query_params.append(('session_type', _params['session_type']))

        if _params.get('user_type') is not None:  # noqa: E501
            _query_params.append(('user_type', _params['user_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_api_version'] is not None:
            _header_params['X-API-VERSION'] = _params['x_api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "LaukCivilCertificatedRateList",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '429': "Error",
        }

        return self.api_client.call_api(
            '/lauk_civil_certificated_rates.json', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
