# coding: utf-8

"""
    Clio API Documentation

    # Developer Support and Feedback * Clio takes the availability and stability of our API seriously; please report any **degradations** or **breakages** to Clio's API Support team at [api@clio.com](mailto:api@clio.com). * For business and partnership inquiries, contact our API Partnerships team at [api.partnerships@clio.com](mailto:api.partnerships@clio.com). * For best practices and tips from the Clio development community, join the conversation in the [Clio Developer Slack Channel](https://join.slack.com/t/clio-public/shared_invite/zt-1bd5nfbiv-WloZR3ZjepoUTv28SI1ezw).  A community-driven [Clio Developers Stack Overflow Group](https://stackoverflow.com/questions/tagged/clio-api) also exists where you can connect and ask questions from other Clio API users. # Getting Started > **Note:** The API is available in four distinct data regions: Australia (au.app.clio.com), Canada (ca.app.clio.com), EU (eu.app.clio.com) and US (app.clio.com). > > Likewise, the developer portal is available at region-specific links for the [Australia](https://au.developers.clio.com), [Canada](https://ca.developers.clio.com), [EU](https://eu.developers.clio.com), and [US](https://developers.clio.com) regions. > > This document assumes the US region is being used (app.clio.com). If you're building in one of the other regions, you should adapt the links and examples as necessary.  To start building on the Clio API, you’ll need a Clio account – you can review our [Developer Handbook](https://docs.developers.clio.com/) and follow the steps to sign up for an account.  Once you have an account, you can [create a developer application](https://docs.developers.clio.com/api-docs/applications) from the [Developer Portal](https://developers.clio.com) and start building! # Authorization with OAuth 2.0 See our [Authorization documentation →](https://docs.developers.clio.com/api-docs/authorization) # Permissions See our [Permissions documentation →](https://docs.developers.clio.com/api-docs/permissions) # Fields See our [Fields documentation →](https://docs.developers.clio.com/api-docs/fields) # Rate Limiting See our [Rate Limits documentation →](https://docs.developers.clio.com/api-docs/rate-limits) # Paging See our [Pagination documentation →](https://docs.developers.clio.com/api-docs/paging) # ETags See our [ETags documentation →](https://docs.developers.clio.com/api-docs/etags) # Minor Versions API v4 supports multiple minor versions. Versions are of the form '4.X.Y'. To request a specific version, you can use an `X-API-VERSION` header in your request, with the header value set to the API version you're requesting. If this header is omitted, it will be treated as a request for the default API version. If the header is present but invalid, it will return a `410 Gone` response. If the header is present and valid, but it is no longer supported, it will return a `410 Gone` response.  An `X-API-VERSION` will be included in all successful responses, with the value being set to the API version used.  You can find our [API Versioning Policy and Guidelines](https://docs.developers.clio.com/api-docs/api-versioning-policy) in our documentation hub.  The [API Changelog](https://docs.developers.clio.com/api-docs/api-changelog) explains each version's changes in further detail. - 4.0.4    Update `quantity` field to return values in seconds rather than hours for Activities  - 4.0.5    * Remove `matter_balances` field from Bills   * Standardize status/state enum values   * Add a Document association to completed DocumentAutomations   * Add rate visibility handling for Activity's price and total  - 4.0.6    Remove `document_versions` collection field from Documents  - 4.0.7    Change secure link format  - 4.0.8    * `Activity` hours are redacted in the response based on the activity hours visibility setting for the user   * Add `quantity_redacted` field to activities  - 4.0.9    **This is the default version**    Contacts are filtered and redacted in the response based on the new 'Contacts Visibility' user permission setting.  - 4.0.10    Fixed validation of `type` query parameter when querying Notes   

    The version of the OpenAPI document: v4
    Contact: api@clio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import date, datetime

from pydantic import Field, StrictBool, StrictInt, StrictStr

from typing import Optional

from openapi_client.models.bill_list import BillList
from openapi_client.models.bill_show import BillShow
from openapi_client.models.bill_update_request import BillUpdateRequest

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class BillsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def bill_destroy(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Bill.")], x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete or void a Bill  # noqa: E501

        This endpoint will transition a bill to either its deleted or voided state. A bill can only be deleted or voided if it has no payments recorded and its current state is one of the following: * Draft * Pending Approval * Unpaid  A bill will automatically be moved to a deleted or void state based on its current state. The mappings for this are: * Draft -> Deleted * Pending Approval -> Deleted * Unpaid -> Void   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bill_destroy(id, x_api_version, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Bill. (required)
        :type id: int
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the bill_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.bill_destroy_with_http_info(id, x_api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def bill_destroy_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Bill.")], x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete or void a Bill  # noqa: E501

        This endpoint will transition a bill to either its deleted or voided state. A bill can only be deleted or voided if it has no payments recorded and its current state is one of the following: * Draft * Pending Approval * Unpaid  A bill will automatically be moved to a deleted or void state based on its current state. The mappings for this are: * Draft -> Deleted * Pending Approval -> Deleted * Unpaid -> Void   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bill_destroy_with_http_info(id, x_api_version, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Bill. (required)
        :type id: int
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'x_api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bill_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_api_version'] is not None:
            _header_params['X-API-VERSION'] = _params['x_api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/bills/{id}.json', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def bill_index(self, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, client_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Contact. The keyword `null` is not valid for this field. The list will be filtered to include only the Bill records with the matching property.")] = None, created_since : Annotated[Optional[datetime], Field(description="Filter Bill records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None, custom_field_values : Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given custom field(s) set. The value is compared using the operator provided, or, if the value type only supports one operator, the supported operator is used. In the latter case, no check for operator is performed on the input string. The key for the custom field value filter is the custom_field.id. e.g. `custom_field_values[12345]` If an operator is used for a type that does not support it, an `400 Bad Request` is returned.  *Supported operators:* * `checkbox`, `contact`, `matter`, `picklist` : `=`  e.g. `?custom_field_values[1]=42`  * `currency`, `date`, `time`, `numeric` : `=`, `<`, `>`, `<=`, `>=`  e.g. `?custom_field_values[1]=>=105.4`  * `email`, `text_area`, `text_line`, `url` : `=`  e.g. `?custom_field_values[1]=url_encoded`  *Multiple conditions for the same custom field:*  If you want to use more than one operator to filter a custom field, you can do so by passing in an array of values. e.g. `?custom_field_values[1]=[<=50, >=45]` ")] = None, due_after : Annotated[Optional[date], Field(description="Filter Bill records to those that have a `due_date` after the one provided (Expects an ISO-8601 date).")] = None, due_at : Annotated[Optional[date], Field(description="Filter Bill records to those that have a specific `due_date` (Expects an ISO-8601 date).")] = None, due_before : Annotated[Optional[date], Field(description="Filter Bill records to those that have a `due_date` before the one provided (Expects an ISO-8601 date).")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, ids : Annotated[Optional[StrictInt], Field(description="Filter Bill records to those having the specified unique identifiers.")] = None, issued_after : Annotated[Optional[date], Field(description="Filter Bill records to those that have an `issue_date` after the one provided (Expects an ISO-8601 date).")] = None, issued_before : Annotated[Optional[date], Field(description="Filter Bill records to those that have an `issue_date` before the one provided (Expects an ISO-8601 date).")] = None, last_sent_end_date : Annotated[Optional[date], Field(description="Filter Bill records for those whose bills have been sent before the specified date")] = None, last_sent_start_date : Annotated[Optional[date], Field(description="Filter Bill records for those whose bills have been sent after the specified date")] = None, limit : Annotated[Optional[StrictInt], Field(description="A limit on the number of Bill records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None, matter_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Matter. Use the keyword `null` to match those without a Bill. The list will be filtered to include only the Bill records with the matching property.")] = None, order : Annotated[Optional[StrictStr], Field(description="Orders the Bill records by the given field. Default: `id(asc)`.")] = None, originating_attorney_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single User. Use the keyword `null` to match those without a Bill. The list will be filtered to include only the Bill records with the matching property.")] = None, overdue_only : Annotated[Optional[StrictBool], Field(description="Filter Bill records to those that are overdue.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None, query : Annotated[Optional[StrictInt], Field(description="Allows matching search on invoice number.")] = None, responsible_attorney_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single User. Use the keyword `null` to match those without a Bill. The list will be filtered to include only the Bill records with the matching property.")] = None, state : Annotated[Optional[StrictStr], Field(description="Filter Bill records to those in a given state.")] = None, status : Annotated[Optional[StrictStr], Field(description="Filter Bill records to those with particular payment status.")] = None, type : Annotated[Optional[StrictStr], Field(description="Filter Bill records to those of a specific type.")] = None, updated_since : Annotated[Optional[datetime], Field(description="Filter Bill records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None, **kwargs) -> BillList:  # noqa: E501
        """Return the data for all Bills  # noqa: E501

        Outlines the parameters, optional and required, used when requesting the data for all Bills  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bill_index(x_api_version, client_id, created_since, custom_field_values, due_after, due_at, due_before, fields, ids, issued_after, issued_before, last_sent_end_date, last_sent_start_date, limit, matter_id, order, originating_attorney_id, overdue_only, page_token, query, responsible_attorney_id, state, status, type, updated_since, async_req=True)
        >>> result = thread.get()

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param client_id: The unique identifier for a single Contact. The keyword `null` is not valid for this field. The list will be filtered to include only the Bill records with the matching property.
        :type client_id: int
        :param created_since: Filter Bill records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type created_since: datetime
        :param custom_field_values: Filter records to only those with the given custom field(s) set. The value is compared using the operator provided, or, if the value type only supports one operator, the supported operator is used. In the latter case, no check for operator is performed on the input string. The key for the custom field value filter is the custom_field.id. e.g. `custom_field_values[12345]` If an operator is used for a type that does not support it, an `400 Bad Request` is returned.  *Supported operators:* * `checkbox`, `contact`, `matter`, `picklist` : `=`  e.g. `?custom_field_values[1]=42`  * `currency`, `date`, `time`, `numeric` : `=`, `<`, `>`, `<=`, `>=`  e.g. `?custom_field_values[1]=>=105.4`  * `email`, `text_area`, `text_line`, `url` : `=`  e.g. `?custom_field_values[1]=url_encoded`  *Multiple conditions for the same custom field:*  If you want to use more than one operator to filter a custom field, you can do so by passing in an array of values. e.g. `?custom_field_values[1]=[<=50, >=45]` 
        :type custom_field_values: str
        :param due_after: Filter Bill records to those that have a `due_date` after the one provided (Expects an ISO-8601 date).
        :type due_after: date
        :param due_at: Filter Bill records to those that have a specific `due_date` (Expects an ISO-8601 date).
        :type due_at: date
        :param due_before: Filter Bill records to those that have a `due_date` before the one provided (Expects an ISO-8601 date).
        :type due_before: date
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param ids: Filter Bill records to those having the specified unique identifiers.
        :type ids: int
        :param issued_after: Filter Bill records to those that have an `issue_date` after the one provided (Expects an ISO-8601 date).
        :type issued_after: date
        :param issued_before: Filter Bill records to those that have an `issue_date` before the one provided (Expects an ISO-8601 date).
        :type issued_before: date
        :param last_sent_end_date: Filter Bill records for those whose bills have been sent before the specified date
        :type last_sent_end_date: date
        :param last_sent_start_date: Filter Bill records for those whose bills have been sent after the specified date
        :type last_sent_start_date: date
        :param limit: A limit on the number of Bill records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param matter_id: The unique identifier for a single Matter. Use the keyword `null` to match those without a Bill. The list will be filtered to include only the Bill records with the matching property.
        :type matter_id: int
        :param order: Orders the Bill records by the given field. Default: `id(asc)`.
        :type order: str
        :param originating_attorney_id: The unique identifier for a single User. Use the keyword `null` to match those without a Bill. The list will be filtered to include only the Bill records with the matching property.
        :type originating_attorney_id: int
        :param overdue_only: Filter Bill records to those that are overdue.
        :type overdue_only: bool
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param query: Allows matching search on invoice number.
        :type query: int
        :param responsible_attorney_id: The unique identifier for a single User. Use the keyword `null` to match those without a Bill. The list will be filtered to include only the Bill records with the matching property.
        :type responsible_attorney_id: int
        :param state: Filter Bill records to those in a given state.
        :type state: str
        :param status: Filter Bill records to those with particular payment status.
        :type status: str
        :param type: Filter Bill records to those of a specific type.
        :type type: str
        :param updated_since: Filter Bill records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type updated_since: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BillList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the bill_index_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.bill_index_with_http_info(x_api_version, client_id, created_since, custom_field_values, due_after, due_at, due_before, fields, ids, issued_after, issued_before, last_sent_end_date, last_sent_start_date, limit, matter_id, order, originating_attorney_id, overdue_only, page_token, query, responsible_attorney_id, state, status, type, updated_since, **kwargs)  # noqa: E501

    @validate_arguments
    def bill_index_with_http_info(self, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, client_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Contact. The keyword `null` is not valid for this field. The list will be filtered to include only the Bill records with the matching property.")] = None, created_since : Annotated[Optional[datetime], Field(description="Filter Bill records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None, custom_field_values : Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given custom field(s) set. The value is compared using the operator provided, or, if the value type only supports one operator, the supported operator is used. In the latter case, no check for operator is performed on the input string. The key for the custom field value filter is the custom_field.id. e.g. `custom_field_values[12345]` If an operator is used for a type that does not support it, an `400 Bad Request` is returned.  *Supported operators:* * `checkbox`, `contact`, `matter`, `picklist` : `=`  e.g. `?custom_field_values[1]=42`  * `currency`, `date`, `time`, `numeric` : `=`, `<`, `>`, `<=`, `>=`  e.g. `?custom_field_values[1]=>=105.4`  * `email`, `text_area`, `text_line`, `url` : `=`  e.g. `?custom_field_values[1]=url_encoded`  *Multiple conditions for the same custom field:*  If you want to use more than one operator to filter a custom field, you can do so by passing in an array of values. e.g. `?custom_field_values[1]=[<=50, >=45]` ")] = None, due_after : Annotated[Optional[date], Field(description="Filter Bill records to those that have a `due_date` after the one provided (Expects an ISO-8601 date).")] = None, due_at : Annotated[Optional[date], Field(description="Filter Bill records to those that have a specific `due_date` (Expects an ISO-8601 date).")] = None, due_before : Annotated[Optional[date], Field(description="Filter Bill records to those that have a `due_date` before the one provided (Expects an ISO-8601 date).")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, ids : Annotated[Optional[StrictInt], Field(description="Filter Bill records to those having the specified unique identifiers.")] = None, issued_after : Annotated[Optional[date], Field(description="Filter Bill records to those that have an `issue_date` after the one provided (Expects an ISO-8601 date).")] = None, issued_before : Annotated[Optional[date], Field(description="Filter Bill records to those that have an `issue_date` before the one provided (Expects an ISO-8601 date).")] = None, last_sent_end_date : Annotated[Optional[date], Field(description="Filter Bill records for those whose bills have been sent before the specified date")] = None, last_sent_start_date : Annotated[Optional[date], Field(description="Filter Bill records for those whose bills have been sent after the specified date")] = None, limit : Annotated[Optional[StrictInt], Field(description="A limit on the number of Bill records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None, matter_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Matter. Use the keyword `null` to match those without a Bill. The list will be filtered to include only the Bill records with the matching property.")] = None, order : Annotated[Optional[StrictStr], Field(description="Orders the Bill records by the given field. Default: `id(asc)`.")] = None, originating_attorney_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single User. Use the keyword `null` to match those without a Bill. The list will be filtered to include only the Bill records with the matching property.")] = None, overdue_only : Annotated[Optional[StrictBool], Field(description="Filter Bill records to those that are overdue.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None, query : Annotated[Optional[StrictInt], Field(description="Allows matching search on invoice number.")] = None, responsible_attorney_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single User. Use the keyword `null` to match those without a Bill. The list will be filtered to include only the Bill records with the matching property.")] = None, state : Annotated[Optional[StrictStr], Field(description="Filter Bill records to those in a given state.")] = None, status : Annotated[Optional[StrictStr], Field(description="Filter Bill records to those with particular payment status.")] = None, type : Annotated[Optional[StrictStr], Field(description="Filter Bill records to those of a specific type.")] = None, updated_since : Annotated[Optional[datetime], Field(description="Filter Bill records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return the data for all Bills  # noqa: E501

        Outlines the parameters, optional and required, used when requesting the data for all Bills  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bill_index_with_http_info(x_api_version, client_id, created_since, custom_field_values, due_after, due_at, due_before, fields, ids, issued_after, issued_before, last_sent_end_date, last_sent_start_date, limit, matter_id, order, originating_attorney_id, overdue_only, page_token, query, responsible_attorney_id, state, status, type, updated_since, async_req=True)
        >>> result = thread.get()

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param client_id: The unique identifier for a single Contact. The keyword `null` is not valid for this field. The list will be filtered to include only the Bill records with the matching property.
        :type client_id: int
        :param created_since: Filter Bill records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type created_since: datetime
        :param custom_field_values: Filter records to only those with the given custom field(s) set. The value is compared using the operator provided, or, if the value type only supports one operator, the supported operator is used. In the latter case, no check for operator is performed on the input string. The key for the custom field value filter is the custom_field.id. e.g. `custom_field_values[12345]` If an operator is used for a type that does not support it, an `400 Bad Request` is returned.  *Supported operators:* * `checkbox`, `contact`, `matter`, `picklist` : `=`  e.g. `?custom_field_values[1]=42`  * `currency`, `date`, `time`, `numeric` : `=`, `<`, `>`, `<=`, `>=`  e.g. `?custom_field_values[1]=>=105.4`  * `email`, `text_area`, `text_line`, `url` : `=`  e.g. `?custom_field_values[1]=url_encoded`  *Multiple conditions for the same custom field:*  If you want to use more than one operator to filter a custom field, you can do so by passing in an array of values. e.g. `?custom_field_values[1]=[<=50, >=45]` 
        :type custom_field_values: str
        :param due_after: Filter Bill records to those that have a `due_date` after the one provided (Expects an ISO-8601 date).
        :type due_after: date
        :param due_at: Filter Bill records to those that have a specific `due_date` (Expects an ISO-8601 date).
        :type due_at: date
        :param due_before: Filter Bill records to those that have a `due_date` before the one provided (Expects an ISO-8601 date).
        :type due_before: date
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param ids: Filter Bill records to those having the specified unique identifiers.
        :type ids: int
        :param issued_after: Filter Bill records to those that have an `issue_date` after the one provided (Expects an ISO-8601 date).
        :type issued_after: date
        :param issued_before: Filter Bill records to those that have an `issue_date` before the one provided (Expects an ISO-8601 date).
        :type issued_before: date
        :param last_sent_end_date: Filter Bill records for those whose bills have been sent before the specified date
        :type last_sent_end_date: date
        :param last_sent_start_date: Filter Bill records for those whose bills have been sent after the specified date
        :type last_sent_start_date: date
        :param limit: A limit on the number of Bill records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param matter_id: The unique identifier for a single Matter. Use the keyword `null` to match those without a Bill. The list will be filtered to include only the Bill records with the matching property.
        :type matter_id: int
        :param order: Orders the Bill records by the given field. Default: `id(asc)`.
        :type order: str
        :param originating_attorney_id: The unique identifier for a single User. Use the keyword `null` to match those without a Bill. The list will be filtered to include only the Bill records with the matching property.
        :type originating_attorney_id: int
        :param overdue_only: Filter Bill records to those that are overdue.
        :type overdue_only: bool
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param query: Allows matching search on invoice number.
        :type query: int
        :param responsible_attorney_id: The unique identifier for a single User. Use the keyword `null` to match those without a Bill. The list will be filtered to include only the Bill records with the matching property.
        :type responsible_attorney_id: int
        :param state: Filter Bill records to those in a given state.
        :type state: str
        :param status: Filter Bill records to those with particular payment status.
        :type status: str
        :param type: Filter Bill records to those of a specific type.
        :type type: str
        :param updated_since: Filter Bill records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type updated_since: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BillList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_api_version',
            'client_id',
            'created_since',
            'custom_field_values',
            'due_after',
            'due_at',
            'due_before',
            'fields',
            'ids',
            'issued_after',
            'issued_before',
            'last_sent_end_date',
            'last_sent_start_date',
            'limit',
            'matter_id',
            'order',
            'originating_attorney_id',
            'overdue_only',
            'page_token',
            'query',
            'responsible_attorney_id',
            'state',
            'status',
            'type',
            'updated_since'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bill_index" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('client_id') is not None:  # noqa: E501
            _query_params.append(('client_id', _params['client_id']))

        if _params.get('created_since') is not None:  # noqa: E501
            if isinstance(_params['created_since'], datetime):
                _query_params.append(('created_since', _params['created_since'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created_since', _params['created_since']))

        if _params.get('custom_field_values') is not None:  # noqa: E501
            _query_params.append(('custom_field_values', _params['custom_field_values']))

        if _params.get('due_after') is not None:  # noqa: E501
            if isinstance(_params['due_after'], date):
                _query_params.append(('due_after', _params['due_after'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('due_after', _params['due_after']))

        if _params.get('due_at') is not None:  # noqa: E501
            if isinstance(_params['due_at'], date):
                _query_params.append(('due_at', _params['due_at'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('due_at', _params['due_at']))

        if _params.get('due_before') is not None:  # noqa: E501
            if isinstance(_params['due_before'], date):
                _query_params.append(('due_before', _params['due_before'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('due_before', _params['due_before']))

        if _params.get('fields') is not None:  # noqa: E501
            _query_params.append(('fields', _params['fields']))

        if _params.get('ids') is not None:  # noqa: E501
            _query_params.append(('ids[]', _params['ids']))

        if _params.get('issued_after') is not None:  # noqa: E501
            if isinstance(_params['issued_after'], date):
                _query_params.append(('issued_after', _params['issued_after'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('issued_after', _params['issued_after']))

        if _params.get('issued_before') is not None:  # noqa: E501
            if isinstance(_params['issued_before'], date):
                _query_params.append(('issued_before', _params['issued_before'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('issued_before', _params['issued_before']))

        if _params.get('last_sent_end_date') is not None:  # noqa: E501
            if isinstance(_params['last_sent_end_date'], date):
                _query_params.append(('last_sent_end_date', _params['last_sent_end_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('last_sent_end_date', _params['last_sent_end_date']))

        if _params.get('last_sent_start_date') is not None:  # noqa: E501
            if isinstance(_params['last_sent_start_date'], date):
                _query_params.append(('last_sent_start_date', _params['last_sent_start_date'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('last_sent_start_date', _params['last_sent_start_date']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('matter_id') is not None:  # noqa: E501
            _query_params.append(('matter_id', _params['matter_id']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('originating_attorney_id') is not None:  # noqa: E501
            _query_params.append(('originating_attorney_id', _params['originating_attorney_id']))

        if _params.get('overdue_only') is not None:  # noqa: E501
            _query_params.append(('overdue_only', _params['overdue_only']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('page_token', _params['page_token']))

        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('responsible_attorney_id') is not None:  # noqa: E501
            _query_params.append(('responsible_attorney_id', _params['responsible_attorney_id']))

        if _params.get('state') is not None:  # noqa: E501
            _query_params.append(('state', _params['state']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))

        if _params.get('updated_since') is not None:  # noqa: E501
            if isinstance(_params['updated_since'], datetime):
                _query_params.append(('updated_since', _params['updated_since'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('updated_since', _params['updated_since']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_api_version'] is not None:
            _header_params['X-API-VERSION'] = _params['x_api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "BillList",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '429': "Error",
        }

        return self.api_client.call_api(
            '/bills.json', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def bill_preview(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Bill.")], **kwargs) -> None:  # noqa: E501
        """Returns the pre-rendered html for the Bill  # noqa: E501

        This endpoint returns a pre-rendered HTML object that you can use to view a preview of your bills. The HTML provided contains all of the CSS rules it requires to show the bill correctly, as well as the DOCTYPE setting it requires. It's best to use an iframe, or similar object, to render the results of this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bill_preview(id, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Bill. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the bill_preview_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.bill_preview_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def bill_preview_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Bill.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Returns the pre-rendered html for the Bill  # noqa: E501

        This endpoint returns a pre-rendered HTML object that you can use to view a preview of your bills. The HTML provided contains all of the CSS rules it requires to show the bill correctly, as well as the DOCTYPE setting it requires. It's best to use an iframe, or similar object, to render the results of this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bill_preview_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Bill. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bill_preview" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/bills/{id}/preview.json', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def bill_show(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Bill.")], if_modified_since : Annotated[Optional[date], Field(description="The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).")] = None, if_none_match : Annotated[Optional[StrictStr], Field(description="The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.")] = None, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, navigation_next : Annotated[Optional[StrictInt], Field(description="The id of the next *Bill* available for viewing")] = None, navigation_previous : Annotated[Optional[StrictInt], Field(description="The id of the previous *Bill* available for viewing")] = None, **kwargs) -> BillShow:  # noqa: E501
        """Return the data for a single Bill  # noqa: E501

        Outlines the parameters, optional and required, used when requesting the data for a single Bill  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bill_show(id, if_modified_since, if_none_match, x_api_version, fields, navigation_next, navigation_previous, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Bill. (required)
        :type id: int
        :param if_modified_since: The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).
        :type if_modified_since: date
        :param if_none_match: The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.
        :type if_none_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param navigation_next: The id of the next *Bill* available for viewing
        :type navigation_next: int
        :param navigation_previous: The id of the previous *Bill* available for viewing
        :type navigation_previous: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BillShow
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the bill_show_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.bill_show_with_http_info(id, if_modified_since, if_none_match, x_api_version, fields, navigation_next, navigation_previous, **kwargs)  # noqa: E501

    @validate_arguments
    def bill_show_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Bill.")], if_modified_since : Annotated[Optional[date], Field(description="The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).")] = None, if_none_match : Annotated[Optional[StrictStr], Field(description="The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.")] = None, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, navigation_next : Annotated[Optional[StrictInt], Field(description="The id of the next *Bill* available for viewing")] = None, navigation_previous : Annotated[Optional[StrictInt], Field(description="The id of the previous *Bill* available for viewing")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return the data for a single Bill  # noqa: E501

        Outlines the parameters, optional and required, used when requesting the data for a single Bill  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bill_show_with_http_info(id, if_modified_since, if_none_match, x_api_version, fields, navigation_next, navigation_previous, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Bill. (required)
        :type id: int
        :param if_modified_since: The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).
        :type if_modified_since: date
        :param if_none_match: The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.
        :type if_none_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param navigation_next: The id of the next *Bill* available for viewing
        :type navigation_next: int
        :param navigation_previous: The id of the previous *Bill* available for viewing
        :type navigation_previous: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BillShow, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'if_modified_since',
            'if_none_match',
            'x_api_version',
            'fields',
            'navigation_next',
            'navigation_previous'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bill_show" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('fields') is not None:  # noqa: E501
            _query_params.append(('fields', _params['fields']))

        if _params.get('navigation_next') is not None:  # noqa: E501
            _query_params.append(('navigation.next', _params['navigation_next']))

        if _params.get('navigation_previous') is not None:  # noqa: E501
            _query_params.append(('navigation.previous', _params['navigation_previous']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['if_modified_since'] is not None:
            _header_params['IF-MODIFIED-SINCE'] = _params['if_modified_since']

        if _params['if_none_match'] is not None:
            _header_params['IF-NONE-MATCH'] = _params['if_none_match']

        if _params['x_api_version'] is not None:
            _header_params['X-API-VERSION'] = _params['x_api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "BillShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '401': "Error",
            '429': "Error",
            '304': None,
        }

        return self.api_client.call_api(
            '/bills/{id}.json', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def bill_update(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Bill.")], if_match : Annotated[Optional[StrictStr], Field(description="The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).")] = None, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, bill_update_request : Annotated[Optional[BillUpdateRequest], Field(description="Request Body for Bills")] = None, **kwargs) -> BillShow:  # noqa: E501
        """Update a single Bill  # noqa: E501

        Outlines the parameters and data fields used when updating a single Bill  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bill_update(id, if_match, x_api_version, fields, bill_update_request, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Bill. (required)
        :type id: int
        :param if_match: The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).
        :type if_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param bill_update_request: Request Body for Bills
        :type bill_update_request: BillUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BillShow
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the bill_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.bill_update_with_http_info(id, if_match, x_api_version, fields, bill_update_request, **kwargs)  # noqa: E501

    @validate_arguments
    def bill_update_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Bill.")], if_match : Annotated[Optional[StrictStr], Field(description="The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).")] = None, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, bill_update_request : Annotated[Optional[BillUpdateRequest], Field(description="Request Body for Bills")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update a single Bill  # noqa: E501

        Outlines the parameters and data fields used when updating a single Bill  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bill_update_with_http_info(id, if_match, x_api_version, fields, bill_update_request, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Bill. (required)
        :type id: int
        :param if_match: The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).
        :type if_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param bill_update_request: Request Body for Bills
        :type bill_update_request: BillUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BillShow, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'if_match',
            'x_api_version',
            'fields',
            'bill_update_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bill_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('fields') is not None:  # noqa: E501
            _query_params.append(('fields', _params['fields']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['if_match'] is not None:
            _header_params['IF-MATCH'] = _params['if_match']

        if _params['x_api_version'] is not None:
            _header_params['X-API-VERSION'] = _params['x_api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['bill_update_request'] is not None:
            _body_params = _params['bill_update_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "BillShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
            '412': "Error",
        }

        return self.api_client.call_api(
            '/bills/{id}.json', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
