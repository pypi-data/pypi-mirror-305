# coding: utf-8

"""
    Clio API Documentation

    # Developer Support and Feedback * Clio takes the availability and stability of our API seriously; please report any **degradations** or **breakages** to Clio's API Support team at [api@clio.com](mailto:api@clio.com). * For business and partnership inquiries, contact our API Partnerships team at [api.partnerships@clio.com](mailto:api.partnerships@clio.com). * For best practices and tips from the Clio development community, join the conversation in the [Clio Developer Slack Channel](https://join.slack.com/t/clio-public/shared_invite/zt-1bd5nfbiv-WloZR3ZjepoUTv28SI1ezw).  A community-driven [Clio Developers Stack Overflow Group](https://stackoverflow.com/questions/tagged/clio-api) also exists where you can connect and ask questions from other Clio API users. # Getting Started > **Note:** The API is available in four distinct data regions: Australia (au.app.clio.com), Canada (ca.app.clio.com), EU (eu.app.clio.com) and US (app.clio.com). > > Likewise, the developer portal is available at region-specific links for the [Australia](https://au.developers.clio.com), [Canada](https://ca.developers.clio.com), [EU](https://eu.developers.clio.com), and [US](https://developers.clio.com) regions. > > This document assumes the US region is being used (app.clio.com). If you're building in one of the other regions, you should adapt the links and examples as necessary.  To start building on the Clio API, you’ll need a Clio account – you can review our [Developer Handbook](https://docs.developers.clio.com/) and follow the steps to sign up for an account.  Once you have an account, you can [create a developer application](https://docs.developers.clio.com/api-docs/applications) from the [Developer Portal](https://developers.clio.com) and start building! # Authorization with OAuth 2.0 See our [Authorization documentation →](https://docs.developers.clio.com/api-docs/authorization) # Permissions See our [Permissions documentation →](https://docs.developers.clio.com/api-docs/permissions) # Fields See our [Fields documentation →](https://docs.developers.clio.com/api-docs/fields) # Rate Limiting See our [Rate Limits documentation →](https://docs.developers.clio.com/api-docs/rate-limits) # Paging See our [Pagination documentation →](https://docs.developers.clio.com/api-docs/paging) # ETags See our [ETags documentation →](https://docs.developers.clio.com/api-docs/etags) # Minor Versions API v4 supports multiple minor versions. Versions are of the form '4.X.Y'. To request a specific version, you can use an `X-API-VERSION` header in your request, with the header value set to the API version you're requesting. If this header is omitted, it will be treated as a request for the default API version. If the header is present but invalid, it will return a `410 Gone` response. If the header is present and valid, but it is no longer supported, it will return a `410 Gone` response.  An `X-API-VERSION` will be included in all successful responses, with the value being set to the API version used.  You can find our [API Versioning Policy and Guidelines](https://docs.developers.clio.com/api-docs/api-versioning-policy) in our documentation hub.  The [API Changelog](https://docs.developers.clio.com/api-docs/api-changelog) explains each version's changes in further detail. - 4.0.4    Update `quantity` field to return values in seconds rather than hours for Activities  - 4.0.5    * Remove `matter_balances` field from Bills   * Standardize status/state enum values   * Add a Document association to completed DocumentAutomations   * Add rate visibility handling for Activity's price and total  - 4.0.6    Remove `document_versions` collection field from Documents  - 4.0.7    Change secure link format  - 4.0.8    * `Activity` hours are redacted in the response based on the activity hours visibility setting for the user   * Add `quantity_redacted` field to activities  - 4.0.9    **This is the default version**    Contacts are filtered and redacted in the response based on the new 'Contacts Visibility' user permission setting.  - 4.0.10    Fixed validation of `type` query parameter when querying Notes   

    The version of the OpenAPI document: v4
    Contact: api@clio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import date, datetime

from pydantic import Field, StrictBool, StrictInt, StrictStr

from typing import Optional

from openapi_client.models.document_copy_request import DocumentCopyRequest
from openapi_client.models.document_create_request import DocumentCreateRequest
from openapi_client.models.document_list import DocumentList
from openapi_client.models.document_show import DocumentShow
from openapi_client.models.document_update_request import DocumentUpdateRequest

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DocumentsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def document_copy(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Document.")], fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, document_copy_request : Annotated[Optional[DocumentCopyRequest], Field(description="Request Body for Documents")] = None, **kwargs) -> DocumentShow:  # noqa: E501
        """Copy a Document  # noqa: E501

        Copies the latest document version of a Document into a new Document. The parameters `filename` and `name` will be copied from the source Document if none are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_copy(id, fields, document_copy_request, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Document. (required)
        :type id: int
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param document_copy_request: Request Body for Documents
        :type document_copy_request: DocumentCopyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DocumentShow
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the document_copy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.document_copy_with_http_info(id, fields, document_copy_request, **kwargs)  # noqa: E501

    @validate_arguments
    def document_copy_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Document.")], fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, document_copy_request : Annotated[Optional[DocumentCopyRequest], Field(description="Request Body for Documents")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Copy a Document  # noqa: E501

        Copies the latest document version of a Document into a new Document. The parameters `filename` and `name` will be copied from the source Document if none are provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_copy_with_http_info(id, fields, document_copy_request, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Document. (required)
        :type id: int
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param document_copy_request: Request Body for Documents
        :type document_copy_request: DocumentCopyRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DocumentShow, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'fields',
            'document_copy_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_copy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('fields') is not None:  # noqa: E501
            _query_params.append(('fields', _params['fields']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['document_copy_request'] is not None:
            _body_params = _params['document_copy_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '404': "Error",
            '400': "Error",
            '201': "DocumentShow",
        }

        return self.api_client.call_api(
            '/documents/{id}/copy.json', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def document_create(self, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, document_create_request : Annotated[Optional[DocumentCreateRequest], Field(description="Request Body for Documents")] = None, **kwargs) -> DocumentShow:  # noqa: E501
        """Create a new Document  # noqa: E501

        Create a Document, or Create Document Version to an existing Document.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_create(x_api_version, fields, document_create_request, async_req=True)
        >>> result = thread.get()

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param document_create_request: Request Body for Documents
        :type document_create_request: DocumentCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DocumentShow
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the document_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.document_create_with_http_info(x_api_version, fields, document_create_request, **kwargs)  # noqa: E501

    @validate_arguments
    def document_create_with_http_info(self, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, document_create_request : Annotated[Optional[DocumentCreateRequest], Field(description="Request Body for Documents")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new Document  # noqa: E501

        Create a Document, or Create Document Version to an existing Document.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_create_with_http_info(x_api_version, fields, document_create_request, async_req=True)
        >>> result = thread.get()

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param document_create_request: Request Body for Documents
        :type document_create_request: DocumentCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DocumentShow, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_api_version',
            'fields',
            'document_create_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('fields') is not None:  # noqa: E501
            _query_params.append(('fields', _params['fields']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_api_version'] is not None:
            _header_params['X-API-VERSION'] = _params['x_api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['document_create_request'] is not None:
            _body_params = _params['document_create_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '201': "DocumentShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
        }

        return self.api_client.call_api(
            '/documents.json', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def document_destroy(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Document.")], x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, **kwargs) -> None:  # noqa: E501
        """Delete a single Document  # noqa: E501

        Deleting a Document using this method will move it to the trash instead of permanently deleting it. Trashed Documents are permanently deleted after 30 days. The following errors may be returned:  - `409 Conflict`: The Document (or one of its ancestor folders) is currently being modified by another request, and cannot be trashed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_destroy(id, x_api_version, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Document. (required)
        :type id: int
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the document_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.document_destroy_with_http_info(id, x_api_version, **kwargs)  # noqa: E501

    @validate_arguments
    def document_destroy_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Document.")], x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a single Document  # noqa: E501

        Deleting a Document using this method will move it to the trash instead of permanently deleting it. Trashed Documents are permanently deleted after 30 days. The following errors may be returned:  - `409 Conflict`: The Document (or one of its ancestor folders) is currently being modified by another request, and cannot be trashed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_destroy_with_http_info(id, x_api_version, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Document. (required)
        :type id: int
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'x_api_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_api_version'] is not None:
            _header_params['X-API-VERSION'] = _params['x_api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/documents/{id}.json', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def document_download(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Document.")], document_version_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a DocumentVersion to be downloaded. Defaults to the latest.")] = None, **kwargs) -> None:  # noqa: E501
        """Download the Document  # noqa: E501

        Download the Document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_download(id, document_version_id, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Document. (required)
        :type id: int
        :param document_version_id: The unique identifier for a DocumentVersion to be downloaded. Defaults to the latest.
        :type document_version_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the document_download_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.document_download_with_http_info(id, document_version_id, **kwargs)  # noqa: E501

    @validate_arguments
    def document_download_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Document.")], document_version_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a DocumentVersion to be downloaded. Defaults to the latest.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download the Document  # noqa: E501

        Download the Document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_download_with_http_info(id, document_version_id, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Document. (required)
        :type id: int
        :param document_version_id: The unique identifier for a DocumentVersion to be downloaded. Defaults to the latest.
        :type document_version_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'document_version_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_download" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('document_version_id') is not None:  # noqa: E501
            _query_params.append(('document_version_id', _params['document_version_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/documents/{id}/download.json', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def document_index(self, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, contact_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Contact. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.")] = None, created_since : Annotated[Optional[datetime], Field(description="Filter Document records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None, document_category_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single DocumentCategory. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.")] = None, external_property_name : Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given external property(s) name set.  e.g. `?external_property_name=Name` ")] = None, external_property_value : Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given external property(s) value set. Requires external property name as well.  e.g. `?external_property_name=Name&external_property_value=Value` ")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, ids : Annotated[Optional[StrictInt], Field(description="Filter Document records to those having the specified unique identifiers.")] = None, include_deleted : Annotated[Optional[StrictBool], Field(description="Allow trashed Document record to be included.")] = None, limit : Annotated[Optional[StrictInt], Field(description="A limit on the number of Document records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None, matter_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Matter. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.")] = None, order : Annotated[Optional[StrictStr], Field(description="Orders the Document records by the given field. Default: `id(asc)`.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None, parent_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Folder. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.")] = None, query : Annotated[Optional[StrictStr], Field(description="Wildcard search for `name` matching the given string.")] = None, scope : Annotated[Optional[StrictStr], Field(description="Filters Document record to those being a child of the parent Folder, or a descendant of the parent Folder. Default is `children`.")] = None, show_uncompleted : Annotated[Optional[StrictBool], Field(description="Allow Document record being uploaded to be included.")] = None, updated_since : Annotated[Optional[datetime], Field(description="Filter Document records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None, **kwargs) -> DocumentList:  # noqa: E501
        """Return the data for all Documents  # noqa: E501

        Outlines the parameters, optional and required, used when requesting the data for all Documents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_index(x_api_version, contact_id, created_since, document_category_id, external_property_name, external_property_value, fields, ids, include_deleted, limit, matter_id, order, page_token, parent_id, query, scope, show_uncompleted, updated_since, async_req=True)
        >>> result = thread.get()

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param contact_id: The unique identifier for a single Contact. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.
        :type contact_id: int
        :param created_since: Filter Document records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type created_since: datetime
        :param document_category_id: The unique identifier for a single DocumentCategory. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.
        :type document_category_id: int
        :param external_property_name: Filter records to only those with the given external property(s) name set.  e.g. `?external_property_name=Name` 
        :type external_property_name: str
        :param external_property_value: Filter records to only those with the given external property(s) value set. Requires external property name as well.  e.g. `?external_property_name=Name&external_property_value=Value` 
        :type external_property_value: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param ids: Filter Document records to those having the specified unique identifiers.
        :type ids: int
        :param include_deleted: Allow trashed Document record to be included.
        :type include_deleted: bool
        :param limit: A limit on the number of Document records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param matter_id: The unique identifier for a single Matter. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.
        :type matter_id: int
        :param order: Orders the Document records by the given field. Default: `id(asc)`.
        :type order: str
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param parent_id: The unique identifier for a single Folder. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.
        :type parent_id: int
        :param query: Wildcard search for `name` matching the given string.
        :type query: str
        :param scope: Filters Document record to those being a child of the parent Folder, or a descendant of the parent Folder. Default is `children`.
        :type scope: str
        :param show_uncompleted: Allow Document record being uploaded to be included.
        :type show_uncompleted: bool
        :param updated_since: Filter Document records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type updated_since: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DocumentList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the document_index_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.document_index_with_http_info(x_api_version, contact_id, created_since, document_category_id, external_property_name, external_property_value, fields, ids, include_deleted, limit, matter_id, order, page_token, parent_id, query, scope, show_uncompleted, updated_since, **kwargs)  # noqa: E501

    @validate_arguments
    def document_index_with_http_info(self, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, contact_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Contact. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.")] = None, created_since : Annotated[Optional[datetime], Field(description="Filter Document records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None, document_category_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single DocumentCategory. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.")] = None, external_property_name : Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given external property(s) name set.  e.g. `?external_property_name=Name` ")] = None, external_property_value : Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given external property(s) value set. Requires external property name as well.  e.g. `?external_property_name=Name&external_property_value=Value` ")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, ids : Annotated[Optional[StrictInt], Field(description="Filter Document records to those having the specified unique identifiers.")] = None, include_deleted : Annotated[Optional[StrictBool], Field(description="Allow trashed Document record to be included.")] = None, limit : Annotated[Optional[StrictInt], Field(description="A limit on the number of Document records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None, matter_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Matter. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.")] = None, order : Annotated[Optional[StrictStr], Field(description="Orders the Document records by the given field. Default: `id(asc)`.")] = None, page_token : Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None, parent_id : Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Folder. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.")] = None, query : Annotated[Optional[StrictStr], Field(description="Wildcard search for `name` matching the given string.")] = None, scope : Annotated[Optional[StrictStr], Field(description="Filters Document record to those being a child of the parent Folder, or a descendant of the parent Folder. Default is `children`.")] = None, show_uncompleted : Annotated[Optional[StrictBool], Field(description="Allow Document record being uploaded to be included.")] = None, updated_since : Annotated[Optional[datetime], Field(description="Filter Document records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return the data for all Documents  # noqa: E501

        Outlines the parameters, optional and required, used when requesting the data for all Documents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_index_with_http_info(x_api_version, contact_id, created_since, document_category_id, external_property_name, external_property_value, fields, ids, include_deleted, limit, matter_id, order, page_token, parent_id, query, scope, show_uncompleted, updated_since, async_req=True)
        >>> result = thread.get()

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param contact_id: The unique identifier for a single Contact. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.
        :type contact_id: int
        :param created_since: Filter Document records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type created_since: datetime
        :param document_category_id: The unique identifier for a single DocumentCategory. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.
        :type document_category_id: int
        :param external_property_name: Filter records to only those with the given external property(s) name set.  e.g. `?external_property_name=Name` 
        :type external_property_name: str
        :param external_property_value: Filter records to only those with the given external property(s) value set. Requires external property name as well.  e.g. `?external_property_name=Name&external_property_value=Value` 
        :type external_property_value: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param ids: Filter Document records to those having the specified unique identifiers.
        :type ids: int
        :param include_deleted: Allow trashed Document record to be included.
        :type include_deleted: bool
        :param limit: A limit on the number of Document records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param matter_id: The unique identifier for a single Matter. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.
        :type matter_id: int
        :param order: Orders the Document records by the given field. Default: `id(asc)`.
        :type order: str
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param parent_id: The unique identifier for a single Folder. Use the keyword `null` to match those without a Document. The list will be filtered to include only the Document records with the matching property.
        :type parent_id: int
        :param query: Wildcard search for `name` matching the given string.
        :type query: str
        :param scope: Filters Document record to those being a child of the parent Folder, or a descendant of the parent Folder. Default is `children`.
        :type scope: str
        :param show_uncompleted: Allow Document record being uploaded to be included.
        :type show_uncompleted: bool
        :param updated_since: Filter Document records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type updated_since: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DocumentList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'x_api_version',
            'contact_id',
            'created_since',
            'document_category_id',
            'external_property_name',
            'external_property_value',
            'fields',
            'ids',
            'include_deleted',
            'limit',
            'matter_id',
            'order',
            'page_token',
            'parent_id',
            'query',
            'scope',
            'show_uncompleted',
            'updated_since'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_index" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('contact_id') is not None:  # noqa: E501
            _query_params.append(('contact_id', _params['contact_id']))

        if _params.get('created_since') is not None:  # noqa: E501
            if isinstance(_params['created_since'], datetime):
                _query_params.append(('created_since', _params['created_since'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created_since', _params['created_since']))

        if _params.get('document_category_id') is not None:  # noqa: E501
            _query_params.append(('document_category_id', _params['document_category_id']))

        if _params.get('external_property_name') is not None:  # noqa: E501
            _query_params.append(('external_property_name', _params['external_property_name']))

        if _params.get('external_property_value') is not None:  # noqa: E501
            _query_params.append(('external_property_value', _params['external_property_value']))

        if _params.get('fields') is not None:  # noqa: E501
            _query_params.append(('fields', _params['fields']))

        if _params.get('ids') is not None:  # noqa: E501
            _query_params.append(('ids[]', _params['ids']))

        if _params.get('include_deleted') is not None:  # noqa: E501
            _query_params.append(('include_deleted', _params['include_deleted']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('matter_id') is not None:  # noqa: E501
            _query_params.append(('matter_id', _params['matter_id']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('page_token') is not None:  # noqa: E501
            _query_params.append(('page_token', _params['page_token']))

        if _params.get('parent_id') is not None:  # noqa: E501
            _query_params.append(('parent_id', _params['parent_id']))

        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('scope') is not None:  # noqa: E501
            _query_params.append(('scope', _params['scope']))

        if _params.get('show_uncompleted') is not None:  # noqa: E501
            _query_params.append(('show_uncompleted', _params['show_uncompleted']))

        if _params.get('updated_since') is not None:  # noqa: E501
            if isinstance(_params['updated_since'], datetime):
                _query_params.append(('updated_since', _params['updated_since'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('updated_since', _params['updated_since']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_api_version'] is not None:
            _header_params['X-API-VERSION'] = _params['x_api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "DocumentList",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '429': "Error",
        }

        return self.api_client.call_api(
            '/documents.json', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def document_show(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Document.")], if_modified_since : Annotated[Optional[date], Field(description="The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).")] = None, if_none_match : Annotated[Optional[StrictStr], Field(description="The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.")] = None, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, **kwargs) -> DocumentShow:  # noqa: E501
        """Return the data for a single Document  # noqa: E501

        Outlines the parameters, optional and required, used when requesting the data for a single Document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_show(id, if_modified_since, if_none_match, x_api_version, fields, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Document. (required)
        :type id: int
        :param if_modified_since: The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).
        :type if_modified_since: date
        :param if_none_match: The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.
        :type if_none_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DocumentShow
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the document_show_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.document_show_with_http_info(id, if_modified_since, if_none_match, x_api_version, fields, **kwargs)  # noqa: E501

    @validate_arguments
    def document_show_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Document.")], if_modified_since : Annotated[Optional[date], Field(description="The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).")] = None, if_none_match : Annotated[Optional[StrictStr], Field(description="The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.")] = None, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Return the data for a single Document  # noqa: E501

        Outlines the parameters, optional and required, used when requesting the data for a single Document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_show_with_http_info(id, if_modified_since, if_none_match, x_api_version, fields, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Document. (required)
        :type id: int
        :param if_modified_since: The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).
        :type if_modified_since: date
        :param if_none_match: The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.
        :type if_none_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DocumentShow, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'if_modified_since',
            'if_none_match',
            'x_api_version',
            'fields'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_show" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('fields') is not None:  # noqa: E501
            _query_params.append(('fields', _params['fields']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['if_modified_since'] is not None:
            _header_params['IF-MODIFIED-SINCE'] = _params['if_modified_since']

        if _params['if_none_match'] is not None:
            _header_params['IF-NONE-MATCH'] = _params['if_none_match']

        if _params['x_api_version'] is not None:
            _header_params['X-API-VERSION'] = _params['x_api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "DocumentShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '401': "Error",
            '429': "Error",
            '304': None,
        }

        return self.api_client.call_api(
            '/documents/{id}.json', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def document_update(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Document.")], if_match : Annotated[Optional[StrictStr], Field(description="The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).")] = None, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, document_update_request : Annotated[Optional[DocumentUpdateRequest], Field(description="Request Body for Documents")] = None, **kwargs) -> DocumentShow:  # noqa: E501
        """Update a single Document  # noqa: E501

        Update Document, move Document to another Folder, and/or restore a trashed Document.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_update(id, if_match, x_api_version, fields, document_update_request, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Document. (required)
        :type id: int
        :param if_match: The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).
        :type if_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param document_update_request: Request Body for Documents
        :type document_update_request: DocumentUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DocumentShow
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the document_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.document_update_with_http_info(id, if_match, x_api_version, fields, document_update_request, **kwargs)  # noqa: E501

    @validate_arguments
    def document_update_with_http_info(self, id : Annotated[StrictInt, Field(..., description="The unique identifier for the Document.")], if_match : Annotated[Optional[StrictStr], Field(description="The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).")] = None, x_api_version : Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None, fields : Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None, document_update_request : Annotated[Optional[DocumentUpdateRequest], Field(description="Request Body for Documents")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update a single Document  # noqa: E501

        Update Document, move Document to another Folder, and/or restore a trashed Document.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_update_with_http_info(id, if_match, x_api_version, fields, document_update_request, async_req=True)
        >>> result = thread.get()

        :param id: The unique identifier for the Document. (required)
        :type id: int
        :param if_match: The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).
        :type if_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param document_update_request: Request Body for Documents
        :type document_update_request: DocumentUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DocumentShow, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'if_match',
            'x_api_version',
            'fields',
            'document_update_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('fields') is not None:  # noqa: E501
            _query_params.append(('fields', _params['fields']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['if_match'] is not None:
            _header_params['IF-MATCH'] = _params['if_match']

        if _params['x_api_version'] is not None:
            _header_params['X-API-VERSION'] = _params['x_api_version']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['document_update_request'] is not None:
            _body_params = _params['document_update_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2']  # noqa: E501

        _response_types_map = {
            '200': "DocumentShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
            '412': "Error",
        }

        return self.api_client.call_api(
            '/documents/{id}.json', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
