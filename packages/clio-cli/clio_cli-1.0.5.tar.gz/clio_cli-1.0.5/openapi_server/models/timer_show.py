# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.timer import Timer
from openapi_server import util


class TimerShow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: Timer=None):
        """TimerShow - a model defined in OpenAPI

        :param data: The data of this TimerShow.
        """
        self.openapi_types = {
            'data': Timer
        }

        self.attribute_map = {
            'data': 'data'
        }

        self._data = data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimerShow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Timer_Show of this TimerShow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this TimerShow.


        :return: The data of this TimerShow.
        :rtype: Timer
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TimerShow.


        :param data: The data of this TimerShow.
        :type data: Timer
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data
