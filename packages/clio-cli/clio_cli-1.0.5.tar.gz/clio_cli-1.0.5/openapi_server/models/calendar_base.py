# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CalendarBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, color: str=None, light_color: str=None, court_rules_default_calendar: bool=None, name: str=None, permission: str=None, type: str=None, visible: bool=None, created_at: datetime=None, updated_at: datetime=None, source: str=None):
        """CalendarBase - a model defined in OpenAPI

        :param id: The id of this CalendarBase.
        :param etag: The etag of this CalendarBase.
        :param color: The color of this CalendarBase.
        :param light_color: The light_color of this CalendarBase.
        :param court_rules_default_calendar: The court_rules_default_calendar of this CalendarBase.
        :param name: The name of this CalendarBase.
        :param permission: The permission of this CalendarBase.
        :param type: The type of this CalendarBase.
        :param visible: The visible of this CalendarBase.
        :param created_at: The created_at of this CalendarBase.
        :param updated_at: The updated_at of this CalendarBase.
        :param source: The source of this CalendarBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'color': str,
            'light_color': str,
            'court_rules_default_calendar': bool,
            'name': str,
            'permission': str,
            'type': str,
            'visible': bool,
            'created_at': datetime,
            'updated_at': datetime,
            'source': str
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'color': 'color',
            'light_color': 'light_color',
            'court_rules_default_calendar': 'court_rules_default_calendar',
            'name': 'name',
            'permission': 'permission',
            'type': 'type',
            'visible': 'visible',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'source': 'source'
        }

        self._id = id
        self._etag = etag
        self._color = color
        self._light_color = light_color
        self._court_rules_default_calendar = court_rules_default_calendar
        self._name = name
        self._permission = permission
        self._type = type
        self._visible = visible
        self._created_at = created_at
        self._updated_at = updated_at
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalendarBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Calendar_base of this CalendarBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CalendarBase.

        Unique identifier for the *Calendar*

        :return: The id of this CalendarBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalendarBase.

        Unique identifier for the *Calendar*

        :param id: The id of this CalendarBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this CalendarBase.

        ETag for the *Calendar*

        :return: The etag of this CalendarBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this CalendarBase.

        ETag for the *Calendar*

        :param etag: The etag of this CalendarBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def color(self):
        """Gets the color of this CalendarBase.

        Color

        :return: The color of this CalendarBase.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CalendarBase.

        Color

        :param color: The color of this CalendarBase.
        :type color: str
        """
        allowed_values = ["#367B9C", "#FFA5A4", "#83D17F", "#FFAC7B", "#8E3F64", "#C75300", "#009CEC", "#62D6B1", "#9EEDCB", "#F9A2C4", "#616161", "#BBDA81", "#DFD3F8", "#D6C4A5", "#FFD478", "#6AC9DE", "#EABBB0", "#BFC2E1", "#DADADA", "#CDE2F5"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def light_color(self):
        """Gets the light_color of this CalendarBase.

        Accent color to complement the main calendar color.

        :return: The light_color of this CalendarBase.
        :rtype: str
        """
        return self._light_color

    @light_color.setter
    def light_color(self, light_color):
        """Sets the light_color of this CalendarBase.

        Accent color to complement the main calendar color.

        :param light_color: The light_color of this CalendarBase.
        :type light_color: str
        """
        allowed_values = ["#5DA5C7", "#F95957", "#209412", "#FF7715", "#DE649D", "#FF6B02", "#56C4FC", "#00B177", "#50D19B", "#F14A8C", "#A3A2A2", "#84AB3B", "#B091EE", "#BD9E69", "#F2A000", "#00A5CA", "#CB5A3D", "#959CD0", "#B0B0B0", "#7BA6CD"]  # noqa: E501
        if light_color not in allowed_values:
            raise ValueError(
                "Invalid value for `light_color` ({0}), must be one of {1}"
                .format(light_color, allowed_values)
            )

        self._light_color = light_color

    @property
    def court_rules_default_calendar(self):
        """Gets the court_rules_default_calendar of this CalendarBase.

        Whether the calendar is default court rules calendar for current user

        :return: The court_rules_default_calendar of this CalendarBase.
        :rtype: bool
        """
        return self._court_rules_default_calendar

    @court_rules_default_calendar.setter
    def court_rules_default_calendar(self, court_rules_default_calendar):
        """Sets the court_rules_default_calendar of this CalendarBase.

        Whether the calendar is default court rules calendar for current user

        :param court_rules_default_calendar: The court_rules_default_calendar of this CalendarBase.
        :type court_rules_default_calendar: bool
        """

        self._court_rules_default_calendar = court_rules_default_calendar

    @property
    def name(self):
        """Gets the name of this CalendarBase.

        The name of the *Calendar*

        :return: The name of this CalendarBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalendarBase.

        The name of the *Calendar*

        :param name: The name of this CalendarBase.
        :type name: str
        """

        self._name = name

    @property
    def permission(self):
        """Gets the permission of this CalendarBase.

        The user's permission to the *Calendar*

        :return: The permission of this CalendarBase.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this CalendarBase.

        The user's permission to the *Calendar*

        :param permission: The permission of this CalendarBase.
        :type permission: str
        """
        allowed_values = ["owner", "editor", "viewer", "limited_viewer", "none"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"
                .format(permission, allowed_values)
            )

        self._permission = permission

    @property
    def type(self):
        """Gets the type of this CalendarBase.

        The type of the *Calendar*

        :return: The type of this CalendarBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CalendarBase.

        The type of the *Calendar*

        :param type: The type of this CalendarBase.
        :type type: str
        """
        allowed_values = ["AccountCalendar", "AdhocCalendar", "UserCalendar"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def visible(self):
        """Gets the visible of this CalendarBase.

        Whether the *Calendar* will be shown by default in the Clio Web UI (assuming no source is provided).

        :return: The visible of this CalendarBase.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this CalendarBase.

        Whether the *Calendar* will be shown by default in the Clio Web UI (assuming no source is provided).

        :param visible: The visible of this CalendarBase.
        :type visible: bool
        """

        self._visible = visible

    @property
    def created_at(self):
        """Gets the created_at of this CalendarBase.

        The time the *Calendar* was created (as a ISO-8601 timestamp)

        :return: The created_at of this CalendarBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CalendarBase.

        The time the *Calendar* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this CalendarBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CalendarBase.

        The time the *Calendar* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this CalendarBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CalendarBase.

        The time the *Calendar* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this CalendarBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def source(self):
        """Gets the source of this CalendarBase.

        The source that visible applies to, by default the Clio Web UI (Expects 'mobile' or 'web').

        :return: The source of this CalendarBase.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CalendarBase.

        The source that visible applies to, by default the Clio Web UI (Expects 'mobile' or 'web').

        :param source: The source of this CalendarBase.
        :type source: str
        """
        allowed_values = ["web", "mobile"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source
