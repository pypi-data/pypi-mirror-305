# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentArchiveBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, created_at: datetime=None, updated_at: datetime=None, size: int=None, progress: float=None, state: str=None, message: str=None):
        """DocumentArchiveBase - a model defined in OpenAPI

        :param id: The id of this DocumentArchiveBase.
        :param etag: The etag of this DocumentArchiveBase.
        :param created_at: The created_at of this DocumentArchiveBase.
        :param updated_at: The updated_at of this DocumentArchiveBase.
        :param size: The size of this DocumentArchiveBase.
        :param progress: The progress of this DocumentArchiveBase.
        :param state: The state of this DocumentArchiveBase.
        :param message: The message of this DocumentArchiveBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'created_at': datetime,
            'updated_at': datetime,
            'size': int,
            'progress': float,
            'state': str,
            'message': str
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'size': 'size',
            'progress': 'progress',
            'state': 'state',
            'message': 'message'
        }

        self._id = id
        self._etag = etag
        self._created_at = created_at
        self._updated_at = updated_at
        self._size = size
        self._progress = progress
        self._state = state
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentArchiveBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentArchive_base of this DocumentArchiveBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DocumentArchiveBase.

        Unique identifier for the *DocumentArchive*

        :return: The id of this DocumentArchiveBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentArchiveBase.

        Unique identifier for the *DocumentArchive*

        :param id: The id of this DocumentArchiveBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this DocumentArchiveBase.

        ETag for the *DocumentArchive*

        :return: The etag of this DocumentArchiveBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this DocumentArchiveBase.

        ETag for the *DocumentArchive*

        :param etag: The etag of this DocumentArchiveBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def created_at(self):
        """Gets the created_at of this DocumentArchiveBase.

        The time the *DocumentArchive* was created (as a ISO-8601 timestamp)

        :return: The created_at of this DocumentArchiveBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DocumentArchiveBase.

        The time the *DocumentArchive* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this DocumentArchiveBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DocumentArchiveBase.

        The time the *DocumentArchive* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this DocumentArchiveBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DocumentArchiveBase.

        The time the *DocumentArchive* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this DocumentArchiveBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def size(self):
        """Gets the size of this DocumentArchiveBase.

        The size of the DocumentArchive in bytes.

        :return: The size of this DocumentArchiveBase.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DocumentArchiveBase.

        The size of the DocumentArchive in bytes.

        :param size: The size of this DocumentArchiveBase.
        :type size: int
        """

        self._size = size

    @property
    def progress(self):
        """Gets the progress of this DocumentArchiveBase.

        The percent completion of the DocumentArchive.

        :return: The progress of this DocumentArchiveBase.
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this DocumentArchiveBase.

        The percent completion of the DocumentArchive.

        :param progress: The progress of this DocumentArchiveBase.
        :type progress: float
        """

        self._progress = progress

    @property
    def state(self):
        """Gets the state of this DocumentArchiveBase.

        The current state of the DocumentArchive.

        :return: The state of this DocumentArchiveBase.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DocumentArchiveBase.

        The current state of the DocumentArchive.

        :param state: The state of this DocumentArchiveBase.
        :type state: str
        """
        allowed_values = ["not_started", "queued", "in_progress", "completed", "failed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def message(self):
        """Gets the message of this DocumentArchiveBase.

        A message to indicate why the DocumentArchive didn't complete.

        :return: The message of this DocumentArchiveBase.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DocumentArchiveBase.

        A message to indicate why the DocumentArchive didn't complete.

        :param message: The message of this DocumentArchiveBase.
        :type message: str
        """

        self._message = message
