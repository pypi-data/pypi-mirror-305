# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_create_request_data_client import ReportCreateRequestDataClient
from openapi_server.models.report_create_request_data_matter import ReportCreateRequestDataMatter
from openapi_server.models.report_create_request_data_originating_attorney import ReportCreateRequestDataOriginatingAttorney
from openapi_server.models.report_create_request_data_practice_area import ReportCreateRequestDataPracticeArea
from openapi_server import util


class ReportCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client: ReportCreateRequestDataClient=None, end_date: date=None, format: str=None, kind: str=None, matter: ReportCreateRequestDataMatter=None, originating_attorney: ReportCreateRequestDataOriginatingAttorney=None, practice_area: ReportCreateRequestDataPracticeArea=None, responsible_attorney: ReportCreateRequestDataOriginatingAttorney=None, start_date: date=None, user: ReportCreateRequestDataOriginatingAttorney=None, year: str=None):
        """ReportCreateRequestData - a model defined in OpenAPI

        :param client: The client of this ReportCreateRequestData.
        :param end_date: The end_date of this ReportCreateRequestData.
        :param format: The format of this ReportCreateRequestData.
        :param kind: The kind of this ReportCreateRequestData.
        :param matter: The matter of this ReportCreateRequestData.
        :param originating_attorney: The originating_attorney of this ReportCreateRequestData.
        :param practice_area: The practice_area of this ReportCreateRequestData.
        :param responsible_attorney: The responsible_attorney of this ReportCreateRequestData.
        :param start_date: The start_date of this ReportCreateRequestData.
        :param user: The user of this ReportCreateRequestData.
        :param year: The year of this ReportCreateRequestData.
        """
        self.openapi_types = {
            'client': ReportCreateRequestDataClient,
            'end_date': date,
            'format': str,
            'kind': str,
            'matter': ReportCreateRequestDataMatter,
            'originating_attorney': ReportCreateRequestDataOriginatingAttorney,
            'practice_area': ReportCreateRequestDataPracticeArea,
            'responsible_attorney': ReportCreateRequestDataOriginatingAttorney,
            'start_date': date,
            'user': ReportCreateRequestDataOriginatingAttorney,
            'year': str
        }

        self.attribute_map = {
            'client': 'client',
            'end_date': 'end_date',
            'format': 'format',
            'kind': 'kind',
            'matter': 'matter',
            'originating_attorney': 'originating_attorney',
            'practice_area': 'practice_area',
            'responsible_attorney': 'responsible_attorney',
            'start_date': 'start_date',
            'user': 'user',
            'year': 'year'
        }

        self._client = client
        self._end_date = end_date
        self._format = format
        self._kind = kind
        self._matter = matter
        self._originating_attorney = originating_attorney
        self._practice_area = practice_area
        self._responsible_attorney = responsible_attorney
        self._start_date = start_date
        self._user = user
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report_create_request_data of this ReportCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client(self):
        """Gets the client of this ReportCreateRequestData.


        :return: The client of this ReportCreateRequestData.
        :rtype: ReportCreateRequestDataClient
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ReportCreateRequestData.


        :param client: The client of this ReportCreateRequestData.
        :type client: ReportCreateRequestDataClient
        """

        self._client = client

    @property
    def end_date(self):
        """Gets the end_date of this ReportCreateRequestData.

        Filters Report data by date. (Expects an ISO-8601 date).

        :return: The end_date of this ReportCreateRequestData.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ReportCreateRequestData.

        Filters Report data by date. (Expects an ISO-8601 date).

        :param end_date: The end_date of this ReportCreateRequestData.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def format(self):
        """Gets the format of this ReportCreateRequestData.

        What format the Report will be generated in.

        :return: The format of this ReportCreateRequestData.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ReportCreateRequestData.

        What format the Report will be generated in.

        :param format: The format of this ReportCreateRequestData.
        :type format: str
        """
        allowed_values = ["csv", "html", "json", "pdf", "xlsx", "zip"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def kind(self):
        """Gets the kind of this ReportCreateRequestData.

        What kind of Report will be generated.

        :return: The kind of this ReportCreateRequestData.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ReportCreateRequestData.

        What kind of Report will be generated.

        :param kind: The kind of this ReportCreateRequestData.
        :type kind: str
        """
        allowed_values = ["accounts_receivable", "accounts_receivable_aging", "bank_account_activity", "billing_history", "billing_rate", "client_activity", "client_ledger", "clio_payments_deposit", "clio_payments_ledger", "clio_payments_monthly_statement", "clio_payments_sales_tax", "clio_payments_transaction", "contact_information", "disbursement_payment", "fee_allocation", "general_ledger", "grant_matters", "invoice_payments_v2", "law_society_of_alberta", "law_society_of_alberta_al", "law_society_of_alberta_bar", "law_society_of_alberta_tl", "law_society_of_alberta_tt", "matter", "matter_balance_summary", "matter_productivity_by_user", "matters_by_responsible_attorney", "originating_attorney_revenue", "other_revenue", "productivity_by_client", "productivity_by_user", "revenue", "task_productivity_by_user", "task_progress_by_user", "trust_ledger", "trust_ledger_nsw", "trust_listing", "trust_management", "work_in_progress"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def matter(self):
        """Gets the matter of this ReportCreateRequestData.


        :return: The matter of this ReportCreateRequestData.
        :rtype: ReportCreateRequestDataMatter
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this ReportCreateRequestData.


        :param matter: The matter of this ReportCreateRequestData.
        :type matter: ReportCreateRequestDataMatter
        """

        self._matter = matter

    @property
    def originating_attorney(self):
        """Gets the originating_attorney of this ReportCreateRequestData.


        :return: The originating_attorney of this ReportCreateRequestData.
        :rtype: ReportCreateRequestDataOriginatingAttorney
        """
        return self._originating_attorney

    @originating_attorney.setter
    def originating_attorney(self, originating_attorney):
        """Sets the originating_attorney of this ReportCreateRequestData.


        :param originating_attorney: The originating_attorney of this ReportCreateRequestData.
        :type originating_attorney: ReportCreateRequestDataOriginatingAttorney
        """

        self._originating_attorney = originating_attorney

    @property
    def practice_area(self):
        """Gets the practice_area of this ReportCreateRequestData.


        :return: The practice_area of this ReportCreateRequestData.
        :rtype: ReportCreateRequestDataPracticeArea
        """
        return self._practice_area

    @practice_area.setter
    def practice_area(self, practice_area):
        """Sets the practice_area of this ReportCreateRequestData.


        :param practice_area: The practice_area of this ReportCreateRequestData.
        :type practice_area: ReportCreateRequestDataPracticeArea
        """

        self._practice_area = practice_area

    @property
    def responsible_attorney(self):
        """Gets the responsible_attorney of this ReportCreateRequestData.


        :return: The responsible_attorney of this ReportCreateRequestData.
        :rtype: ReportCreateRequestDataOriginatingAttorney
        """
        return self._responsible_attorney

    @responsible_attorney.setter
    def responsible_attorney(self, responsible_attorney):
        """Sets the responsible_attorney of this ReportCreateRequestData.


        :param responsible_attorney: The responsible_attorney of this ReportCreateRequestData.
        :type responsible_attorney: ReportCreateRequestDataOriginatingAttorney
        """

        self._responsible_attorney = responsible_attorney

    @property
    def start_date(self):
        """Gets the start_date of this ReportCreateRequestData.

        Filters Report data by date. (Expects an ISO-8601 date).

        :return: The start_date of this ReportCreateRequestData.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ReportCreateRequestData.

        Filters Report data by date. (Expects an ISO-8601 date).

        :param start_date: The start_date of this ReportCreateRequestData.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def user(self):
        """Gets the user of this ReportCreateRequestData.


        :return: The user of this ReportCreateRequestData.
        :rtype: ReportCreateRequestDataOriginatingAttorney
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ReportCreateRequestData.


        :param user: The user of this ReportCreateRequestData.
        :type user: ReportCreateRequestDataOriginatingAttorney
        """

        self._user = user

    @property
    def year(self):
        """Gets the year of this ReportCreateRequestData.

        Filters Report data by year. Sets start_date and end_date. (Expects a year).

        :return: The year of this ReportCreateRequestData.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this ReportCreateRequestData.

        Filters Report data by year. Sets start_date and end_date. (Expects a year).

        :param year: The year of this ReportCreateRequestData.
        :type year: str
        """

        self._year = year
