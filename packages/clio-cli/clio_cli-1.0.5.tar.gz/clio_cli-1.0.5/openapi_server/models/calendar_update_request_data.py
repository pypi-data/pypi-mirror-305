# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CalendarUpdateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: str=None, name: str=None, source: str=None, visible: bool=None):
        """CalendarUpdateRequestData - a model defined in OpenAPI

        :param color: The color of this CalendarUpdateRequestData.
        :param name: The name of this CalendarUpdateRequestData.
        :param source: The source of this CalendarUpdateRequestData.
        :param visible: The visible of this CalendarUpdateRequestData.
        """
        self.openapi_types = {
            'color': str,
            'name': str,
            'source': str,
            'visible': bool
        }

        self.attribute_map = {
            'color': 'color',
            'name': 'name',
            'source': 'source',
            'visible': 'visible'
        }

        self._color = color
        self._name = name
        self._source = source
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalendarUpdateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Calendar_update_request_data of this CalendarUpdateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this CalendarUpdateRequestData.

        Calendar color as seen in the Clio Web UI.

        :return: The color of this CalendarUpdateRequestData.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CalendarUpdateRequestData.

        Calendar color as seen in the Clio Web UI.

        :param color: The color of this CalendarUpdateRequestData.
        :type color: str
        """
        allowed_values = ["#367B9C", "#FFA5A4", "#83D17F", "#FFAC7B", "#8E3F64", "#C75300", "#009CEC", "#62D6B1", "#9EEDCB", "#F9A2C4", "#616161", "#BBDA81", "#DFD3F8", "#D6C4A5", "#FFD478", "#6AC9DE", "#EABBB0", "#BFC2E1", "#DADADA", "#CDE2F5"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def name(self):
        """Gets the name of this CalendarUpdateRequestData.

        Calendar name.

        :return: The name of this CalendarUpdateRequestData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CalendarUpdateRequestData.

        Calendar name.

        :param name: The name of this CalendarUpdateRequestData.
        :type name: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this CalendarUpdateRequestData.

        The source that visible applies to, by default the Clio Web UI (Expects 'mobile' or 'web').

        :return: The source of this CalendarUpdateRequestData.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CalendarUpdateRequestData.

        The source that visible applies to, by default the Clio Web UI (Expects 'mobile' or 'web').

        :param source: The source of this CalendarUpdateRequestData.
        :type source: str
        """
        allowed_values = ["web", "mobile"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def visible(self):
        """Gets the visible of this CalendarUpdateRequestData.

        Whether or not the Calendar should be visible by default in the Clio Web UI (assuming no source is provided).

        :return: The visible of this CalendarUpdateRequestData.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this CalendarUpdateRequestData.

        Whether or not the Calendar should be visible by default in the Clio Web UI (assuming no source is provided).

        :param visible: The visible of this CalendarUpdateRequestData.
        :type visible: bool
        """

        self._visible = visible
