# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TextSnippetUpdateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, phrase: str=None, snippet: str=None, whole_word: bool=None):
        """TextSnippetUpdateRequestData - a model defined in OpenAPI

        :param phrase: The phrase of this TextSnippetUpdateRequestData.
        :param snippet: The snippet of this TextSnippetUpdateRequestData.
        :param whole_word: The whole_word of this TextSnippetUpdateRequestData.
        """
        self.openapi_types = {
            'phrase': str,
            'snippet': str,
            'whole_word': bool
        }

        self.attribute_map = {
            'phrase': 'phrase',
            'snippet': 'snippet',
            'whole_word': 'whole_word'
        }

        self._phrase = phrase
        self._snippet = snippet
        self._whole_word = whole_word

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextSnippetUpdateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextSnippet_update_request_data of this TextSnippetUpdateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def phrase(self):
        """Gets the phrase of this TextSnippetUpdateRequestData.

        The phrase expanded to from a TextSnippet.

        :return: The phrase of this TextSnippetUpdateRequestData.
        :rtype: str
        """
        return self._phrase

    @phrase.setter
    def phrase(self, phrase):
        """Sets the phrase of this TextSnippetUpdateRequestData.

        The phrase expanded to from a TextSnippet.

        :param phrase: The phrase of this TextSnippetUpdateRequestData.
        :type phrase: str
        """

        self._phrase = phrase

    @property
    def snippet(self):
        """Gets the snippet of this TextSnippetUpdateRequestData.

        The abbreviation that expands to a phrase.

        :return: The snippet of this TextSnippetUpdateRequestData.
        :rtype: str
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this TextSnippetUpdateRequestData.

        The abbreviation that expands to a phrase.

        :param snippet: The snippet of this TextSnippetUpdateRequestData.
        :type snippet: str
        """

        self._snippet = snippet

    @property
    def whole_word(self):
        """Gets the whole_word of this TextSnippetUpdateRequestData.

        Whether or not the TextSnippet requires a space after to trigger the expansion.

        :return: The whole_word of this TextSnippetUpdateRequestData.
        :rtype: bool
        """
        return self._whole_word

    @whole_word.setter
    def whole_word(self, whole_word):
        """Sets the whole_word of this TextSnippetUpdateRequestData.

        Whether or not the TextSnippet requires a space after to trigger the expansion.

        :param whole_word: The whole_word of this TextSnippetUpdateRequestData.
        :type whole_word: bool
        """

        self._whole_word = whole_word
