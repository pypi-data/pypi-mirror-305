# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JurisdictionsToTriggerBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, system_id: int=None, description: str=None, do_not_recalculate: bool=None, is_served: bool=None, is_requirements_required: bool=None, created_at: datetime=None, updated_at: datetime=None):
        """JurisdictionsToTriggerBase - a model defined in OpenAPI

        :param id: The id of this JurisdictionsToTriggerBase.
        :param etag: The etag of this JurisdictionsToTriggerBase.
        :param system_id: The system_id of this JurisdictionsToTriggerBase.
        :param description: The description of this JurisdictionsToTriggerBase.
        :param do_not_recalculate: The do_not_recalculate of this JurisdictionsToTriggerBase.
        :param is_served: The is_served of this JurisdictionsToTriggerBase.
        :param is_requirements_required: The is_requirements_required of this JurisdictionsToTriggerBase.
        :param created_at: The created_at of this JurisdictionsToTriggerBase.
        :param updated_at: The updated_at of this JurisdictionsToTriggerBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'system_id': int,
            'description': str,
            'do_not_recalculate': bool,
            'is_served': bool,
            'is_requirements_required': bool,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'system_id': 'system_id',
            'description': 'description',
            'do_not_recalculate': 'do_not_recalculate',
            'is_served': 'is_served',
            'is_requirements_required': 'is_requirements_required',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._etag = etag
        self._system_id = system_id
        self._description = description
        self._do_not_recalculate = do_not_recalculate
        self._is_served = is_served
        self._is_requirements_required = is_requirements_required
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JurisdictionsToTriggerBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JurisdictionsToTrigger_base of this JurisdictionsToTriggerBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this JurisdictionsToTriggerBase.

        Unique identifier for the *JurisdictionsToTrigger*

        :return: The id of this JurisdictionsToTriggerBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JurisdictionsToTriggerBase.

        Unique identifier for the *JurisdictionsToTrigger*

        :param id: The id of this JurisdictionsToTriggerBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this JurisdictionsToTriggerBase.

        ETag for the *JurisdictionsToTrigger*

        :return: The etag of this JurisdictionsToTriggerBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this JurisdictionsToTriggerBase.

        ETag for the *JurisdictionsToTrigger*

        :param etag: The etag of this JurisdictionsToTriggerBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def system_id(self):
        """Gets the system_id of this JurisdictionsToTriggerBase.

        Server id

        :return: The system_id of this JurisdictionsToTriggerBase.
        :rtype: int
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this JurisdictionsToTriggerBase.

        Server id

        :param system_id: The system_id of this JurisdictionsToTriggerBase.
        :type system_id: int
        """

        self._system_id = system_id

    @property
    def description(self):
        """Gets the description of this JurisdictionsToTriggerBase.

        A detailed description of the *JurisdictionsToTrigger*

        :return: The description of this JurisdictionsToTriggerBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JurisdictionsToTriggerBase.

        A detailed description of the *JurisdictionsToTrigger*

        :param description: The description of this JurisdictionsToTriggerBase.
        :type description: str
        """

        self._description = description

    @property
    def do_not_recalculate(self):
        """Gets the do_not_recalculate of this JurisdictionsToTriggerBase.

        Whether the associated dates should not be recalculated

        :return: The do_not_recalculate of this JurisdictionsToTriggerBase.
        :rtype: bool
        """
        return self._do_not_recalculate

    @do_not_recalculate.setter
    def do_not_recalculate(self, do_not_recalculate):
        """Sets the do_not_recalculate of this JurisdictionsToTriggerBase.

        Whether the associated dates should not be recalculated

        :param do_not_recalculate: The do_not_recalculate of this JurisdictionsToTriggerBase.
        :type do_not_recalculate: bool
        """

        self._do_not_recalculate = do_not_recalculate

    @property
    def is_served(self):
        """Gets the is_served of this JurisdictionsToTriggerBase.

        Whether the user must select a Date Offset (Service Type)

        :return: The is_served of this JurisdictionsToTriggerBase.
        :rtype: bool
        """
        return self._is_served

    @is_served.setter
    def is_served(self, is_served):
        """Sets the is_served of this JurisdictionsToTriggerBase.

        Whether the user must select a Date Offset (Service Type)

        :param is_served: The is_served of this JurisdictionsToTriggerBase.
        :type is_served: bool
        """

        self._is_served = is_served

    @property
    def is_requirements_required(self):
        """Gets the is_requirements_required of this JurisdictionsToTriggerBase.

        Whether the trigger has requirements

        :return: The is_requirements_required of this JurisdictionsToTriggerBase.
        :rtype: bool
        """
        return self._is_requirements_required

    @is_requirements_required.setter
    def is_requirements_required(self, is_requirements_required):
        """Sets the is_requirements_required of this JurisdictionsToTriggerBase.

        Whether the trigger has requirements

        :param is_requirements_required: The is_requirements_required of this JurisdictionsToTriggerBase.
        :type is_requirements_required: bool
        """

        self._is_requirements_required = is_requirements_required

    @property
    def created_at(self):
        """Gets the created_at of this JurisdictionsToTriggerBase.

        The time the *JurisdictionsToTrigger* was created (as a ISO-8601 timestamp)

        :return: The created_at of this JurisdictionsToTriggerBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this JurisdictionsToTriggerBase.

        The time the *JurisdictionsToTrigger* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this JurisdictionsToTriggerBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this JurisdictionsToTriggerBase.

        The time the *JurisdictionsToTrigger* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this JurisdictionsToTriggerBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this JurisdictionsToTriggerBase.

        The time the *JurisdictionsToTrigger* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this JurisdictionsToTriggerBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
