# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, name: str=None, state: str=None, kind: str=None, format: str=None, progress: int=None, created_at: datetime=None, updated_at: datetime=None, category: str=None, source: str=None):
        """ReportBase - a model defined in OpenAPI

        :param id: The id of this ReportBase.
        :param etag: The etag of this ReportBase.
        :param name: The name of this ReportBase.
        :param state: The state of this ReportBase.
        :param kind: The kind of this ReportBase.
        :param format: The format of this ReportBase.
        :param progress: The progress of this ReportBase.
        :param created_at: The created_at of this ReportBase.
        :param updated_at: The updated_at of this ReportBase.
        :param category: The category of this ReportBase.
        :param source: The source of this ReportBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'name': str,
            'state': str,
            'kind': str,
            'format': str,
            'progress': int,
            'created_at': datetime,
            'updated_at': datetime,
            'category': str,
            'source': str
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'name': 'name',
            'state': 'state',
            'kind': 'kind',
            'format': 'format',
            'progress': 'progress',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'category': 'category',
            'source': 'source'
        }

        self._id = id
        self._etag = etag
        self._name = name
        self._state = state
        self._kind = kind
        self._format = format
        self._progress = progress
        self._created_at = created_at
        self._updated_at = updated_at
        self._category = category
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report_base of this ReportBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ReportBase.

        Unique identifier for the *Report*

        :return: The id of this ReportBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportBase.

        Unique identifier for the *Report*

        :param id: The id of this ReportBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this ReportBase.

        ETag for the *Report*

        :return: The etag of this ReportBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ReportBase.

        ETag for the *Report*

        :param etag: The etag of this ReportBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this ReportBase.

        A specified name for the report

        :return: The name of this ReportBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportBase.

        A specified name for the report

        :param name: The name of this ReportBase.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this ReportBase.

        The current state of the report

        :return: The state of this ReportBase.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ReportBase.

        The current state of the report

        :param state: The state of this ReportBase.
        :type state: str
        """
        allowed_values = ["not_started", "queued", "in_progress", "failed", "completed", "empty"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def kind(self):
        """Gets the kind of this ReportBase.

        The kind of report to generate

        :return: The kind of this ReportBase.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ReportBase.

        The kind of report to generate

        :param kind: The kind of this ReportBase.
        :type kind: str
        """
        allowed_values = ["accounts_receivable", "accounts_receivable_aging", "bank_account_activity", "billing_history", "billing_rate", "client_activity", "client_ledger", "clio_payments_deposit", "clio_payments_ledger", "clio_payments_monthly_statement", "clio_payments_sales_tax", "clio_payments_transaction", "contact_information", "disbursement_payment", "fee_allocation", "general_ledger", "grant_matters", "invoice_payments_v2", "law_society_of_alberta", "law_society_of_alberta_al", "law_society_of_alberta_bar", "law_society_of_alberta_tl", "law_society_of_alberta_tt", "matter", "matter_balance_summary", "matter_productivity_by_user", "matters_by_responsible_attorney", "originating_attorney_revenue", "other_revenue", "productivity_by_client", "productivity_by_user", "revenue", "task_productivity_by_user", "task_progress_by_user", "trust_ledger", "trust_ledger_nsw", "trust_listing", "trust_management", "work_in_progress"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def format(self):
        """Gets the format of this ReportBase.

        The requested format of the report

        :return: The format of this ReportBase.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ReportBase.

        The requested format of the report

        :param format: The format of this ReportBase.
        :type format: str
        """
        allowed_values = ["csv", "html", "json", "pdf", "xlsx", "zip"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def progress(self):
        """Gets the progress of this ReportBase.

        The integer percentage of how complete the report is.

        :return: The progress of this ReportBase.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this ReportBase.

        The integer percentage of how complete the report is.

        :param progress: The progress of this ReportBase.
        :type progress: int
        """

        self._progress = progress

    @property
    def created_at(self):
        """Gets the created_at of this ReportBase.

        The time the *Report* was created (as a ISO-8601 timestamp)

        :return: The created_at of this ReportBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReportBase.

        The time the *Report* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this ReportBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ReportBase.

        The time the *Report* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this ReportBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ReportBase.

        The time the *Report* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this ReportBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def category(self):
        """Gets the category of this ReportBase.

        The category of the report

        :return: The category of this ReportBase.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ReportBase.

        The category of the report

        :param category: The category of this ReportBase.
        :type category: str
        """
        allowed_values = ["billing", "client", "compliance", "financial", "matter", "online_payments", "productivity", "revenue", "task"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def source(self):
        """Gets the source of this ReportBase.

        The source of the report

        :return: The source of this ReportBase.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ReportBase.

        The source of the report

        :param source: The source of this ReportBase.
        :type source: str
        """
        allowed_values = ["reports", "presets", "scheduled"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source
