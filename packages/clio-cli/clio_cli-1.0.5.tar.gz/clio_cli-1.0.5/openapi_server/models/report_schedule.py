# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, time_of_day: datetime=None, frequency: str=None, days_of_week: List[int]=None, day_of_month: int=None, status: str=None, status_updated_at: datetime=None, next_scheduled_date: datetime=None, time_zone: str=None, report_preset_id: int=None, created_at: datetime=None, updated_at: datetime=None, every_no_of_months: int=None, effective_from: date=None):
        """ReportSchedule - a model defined in OpenAPI

        :param id: The id of this ReportSchedule.
        :param etag: The etag of this ReportSchedule.
        :param time_of_day: The time_of_day of this ReportSchedule.
        :param frequency: The frequency of this ReportSchedule.
        :param days_of_week: The days_of_week of this ReportSchedule.
        :param day_of_month: The day_of_month of this ReportSchedule.
        :param status: The status of this ReportSchedule.
        :param status_updated_at: The status_updated_at of this ReportSchedule.
        :param next_scheduled_date: The next_scheduled_date of this ReportSchedule.
        :param time_zone: The time_zone of this ReportSchedule.
        :param report_preset_id: The report_preset_id of this ReportSchedule.
        :param created_at: The created_at of this ReportSchedule.
        :param updated_at: The updated_at of this ReportSchedule.
        :param every_no_of_months: The every_no_of_months of this ReportSchedule.
        :param effective_from: The effective_from of this ReportSchedule.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'time_of_day': datetime,
            'frequency': str,
            'days_of_week': List[int],
            'day_of_month': int,
            'status': str,
            'status_updated_at': datetime,
            'next_scheduled_date': datetime,
            'time_zone': str,
            'report_preset_id': int,
            'created_at': datetime,
            'updated_at': datetime,
            'every_no_of_months': int,
            'effective_from': date
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'time_of_day': 'time_of_day',
            'frequency': 'frequency',
            'days_of_week': 'days_of_week',
            'day_of_month': 'day_of_month',
            'status': 'status',
            'status_updated_at': 'status_updated_at',
            'next_scheduled_date': 'next_scheduled_date',
            'time_zone': 'time_zone',
            'report_preset_id': 'report_preset_id',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'every_no_of_months': 'every_no_of_months',
            'effective_from': 'effective_from'
        }

        self._id = id
        self._etag = etag
        self._time_of_day = time_of_day
        self._frequency = frequency
        self._days_of_week = days_of_week
        self._day_of_month = day_of_month
        self._status = status
        self._status_updated_at = status_updated_at
        self._next_scheduled_date = next_scheduled_date
        self._time_zone = time_zone
        self._report_preset_id = report_preset_id
        self._created_at = created_at
        self._updated_at = updated_at
        self._every_no_of_months = every_no_of_months
        self._effective_from = effective_from

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportSchedule of this ReportSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ReportSchedule.

        Unique identifier for the *ReportSchedule*

        :return: The id of this ReportSchedule.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportSchedule.

        Unique identifier for the *ReportSchedule*

        :param id: The id of this ReportSchedule.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this ReportSchedule.

        ETag for the *ReportSchedule*

        :return: The etag of this ReportSchedule.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ReportSchedule.

        ETag for the *ReportSchedule*

        :param etag: The etag of this ReportSchedule.
        :type etag: str
        """

        self._etag = etag

    @property
    def time_of_day(self):
        """Gets the time_of_day of this ReportSchedule.

        What time the Report Schedule is run

        :return: The time_of_day of this ReportSchedule.
        :rtype: datetime
        """
        return self._time_of_day

    @time_of_day.setter
    def time_of_day(self, time_of_day):
        """Sets the time_of_day of this ReportSchedule.

        What time the Report Schedule is run

        :param time_of_day: The time_of_day of this ReportSchedule.
        :type time_of_day: datetime
        """

        self._time_of_day = time_of_day

    @property
    def frequency(self):
        """Gets the frequency of this ReportSchedule.

        How often the Report Schedule is run

        :return: The frequency of this ReportSchedule.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ReportSchedule.

        How often the Report Schedule is run

        :param frequency: The frequency of this ReportSchedule.
        :type frequency: str
        """
        allowed_values = ["daily", "weekly", "monthly"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def days_of_week(self):
        """Gets the days_of_week of this ReportSchedule.

        If the frequency is weekly, which days of the week the Report Schedule is run. Values are 0 to 6, representing Sunday to Saturday.

        :return: The days_of_week of this ReportSchedule.
        :rtype: List[int]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this ReportSchedule.

        If the frequency is weekly, which days of the week the Report Schedule is run. Values are 0 to 6, representing Sunday to Saturday.

        :param days_of_week: The days_of_week of this ReportSchedule.
        :type days_of_week: List[int]
        """

        self._days_of_week = days_of_week

    @property
    def day_of_month(self):
        """Gets the day_of_month of this ReportSchedule.

        If the frequency is monthly, which day of the month the Report Schedule is run. 32 is used to represent the last day of the month.

        :return: The day_of_month of this ReportSchedule.
        :rtype: int
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this ReportSchedule.

        If the frequency is monthly, which day of the month the Report Schedule is run. 32 is used to represent the last day of the month.

        :param day_of_month: The day_of_month of this ReportSchedule.
        :type day_of_month: int
        """

        self._day_of_month = day_of_month

    @property
    def status(self):
        """Gets the status of this ReportSchedule.

        The status of the Report Schedule

        :return: The status of this ReportSchedule.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReportSchedule.

        The status of the Report Schedule

        :param status: The status of this ReportSchedule.
        :type status: str
        """
        allowed_values = ["initial", "queued", "processing", "failed", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_updated_at(self):
        """Gets the status_updated_at of this ReportSchedule.

        When the status of the Report Schedule was last updated

        :return: The status_updated_at of this ReportSchedule.
        :rtype: datetime
        """
        return self._status_updated_at

    @status_updated_at.setter
    def status_updated_at(self, status_updated_at):
        """Sets the status_updated_at of this ReportSchedule.

        When the status of the Report Schedule was last updated

        :param status_updated_at: The status_updated_at of this ReportSchedule.
        :type status_updated_at: datetime
        """

        self._status_updated_at = status_updated_at

    @property
    def next_scheduled_date(self):
        """Gets the next_scheduled_date of this ReportSchedule.

        The next time the Report Schedule should run

        :return: The next_scheduled_date of this ReportSchedule.
        :rtype: datetime
        """
        return self._next_scheduled_date

    @next_scheduled_date.setter
    def next_scheduled_date(self, next_scheduled_date):
        """Sets the next_scheduled_date of this ReportSchedule.

        The next time the Report Schedule should run

        :param next_scheduled_date: The next_scheduled_date of this ReportSchedule.
        :type next_scheduled_date: datetime
        """

        self._next_scheduled_date = next_scheduled_date

    @property
    def time_zone(self):
        """Gets the time_zone of this ReportSchedule.

        Used in conjunction with `time_of_day` to determine when the Report Schedule should run

        :return: The time_zone of this ReportSchedule.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ReportSchedule.

        Used in conjunction with `time_of_day` to determine when the Report Schedule should run

        :param time_zone: The time_zone of this ReportSchedule.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def report_preset_id(self):
        """Gets the report_preset_id of this ReportSchedule.

        The unique identifier of the Report Preset to use when generating the scheduled report

        :return: The report_preset_id of this ReportSchedule.
        :rtype: int
        """
        return self._report_preset_id

    @report_preset_id.setter
    def report_preset_id(self, report_preset_id):
        """Sets the report_preset_id of this ReportSchedule.

        The unique identifier of the Report Preset to use when generating the scheduled report

        :param report_preset_id: The report_preset_id of this ReportSchedule.
        :type report_preset_id: int
        """

        self._report_preset_id = report_preset_id

    @property
    def created_at(self):
        """Gets the created_at of this ReportSchedule.

        The time the *ReportSchedule* was created (as a ISO-8601 timestamp)

        :return: The created_at of this ReportSchedule.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReportSchedule.

        The time the *ReportSchedule* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this ReportSchedule.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ReportSchedule.

        The time the *ReportSchedule* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this ReportSchedule.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ReportSchedule.

        The time the *ReportSchedule* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this ReportSchedule.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def every_no_of_months(self):
        """Gets the every_no_of_months of this ReportSchedule.

        If the frequency is monthly, how many months between each run of the Report Schedule

        :return: The every_no_of_months of this ReportSchedule.
        :rtype: int
        """
        return self._every_no_of_months

    @every_no_of_months.setter
    def every_no_of_months(self, every_no_of_months):
        """Sets the every_no_of_months of this ReportSchedule.

        If the frequency is monthly, how many months between each run of the Report Schedule

        :param every_no_of_months: The every_no_of_months of this ReportSchedule.
        :type every_no_of_months: int
        """

        self._every_no_of_months = every_no_of_months

    @property
    def effective_from(self):
        """Gets the effective_from of this ReportSchedule.

        The date the Report Schedule will become enabled (a ISO-8601 date)

        :return: The effective_from of this ReportSchedule.
        :rtype: date
        """
        return self._effective_from

    @effective_from.setter
    def effective_from(self, effective_from):
        """Sets the effective_from of this ReportSchedule.

        The date the Report Schedule will become enabled (a ISO-8601 date)

        :param effective_from: The effective_from of this ReportSchedule.
        :type effective_from: date
        """

        self._effective_from = effective_from
