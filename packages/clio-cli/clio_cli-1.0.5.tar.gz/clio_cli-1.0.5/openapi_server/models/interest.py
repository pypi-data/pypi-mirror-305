# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Interest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: float=None, period: int=None, rate: float=None, total: float=None, type: str=None):
        """Interest - a model defined in OpenAPI

        :param balance: The balance of this Interest.
        :param period: The period of this Interest.
        :param rate: The rate of this Interest.
        :param total: The total of this Interest.
        :param type: The type of this Interest.
        """
        self.openapi_types = {
            'balance': float,
            'period': int,
            'rate': float,
            'total': float,
            'type': str
        }

        self.attribute_map = {
            'balance': 'balance',
            'period': 'period',
            'rate': 'rate',
            'total': 'total',
            'type': 'type'
        }

        self._balance = balance
        self._period = period
        self._rate = rate
        self._total = total
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Interest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Interest of this Interest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this Interest.

        Interest balance for the object

        :return: The balance of this Interest.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Interest.

        Interest balance for the object

        :param balance: The balance of this Interest.
        :type balance: float
        """

        self._balance = balance

    @property
    def period(self):
        """Gets the period of this Interest.

        Number of days that represent the frequency which your *Interest%* will be applied

        :return: The period of this Interest.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Interest.

        Number of days that represent the frequency which your *Interest%* will be applied

        :param period: The period of this Interest.
        :type period: int
        """

        self._period = period

    @property
    def rate(self):
        """Gets the rate of this Interest.

        Rate for the *Interest%*

        :return: The rate of this Interest.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this Interest.

        Rate for the *Interest%*

        :param rate: The rate of this Interest.
        :type rate: float
        """

        self._rate = rate

    @property
    def total(self):
        """Gets the total of this Interest.

        Interest total for the object

        :return: The total of this Interest.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Interest.

        Interest total for the object

        :param total: The total of this Interest.
        :type total: float
        """

        self._total = total

    @property
    def type(self):
        """Gets the type of this Interest.

        Type of *Interest%* being applied

        :return: The type of this Interest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Interest.

        Type of *Interest%* being applied

        :param type: The type of this Interest.
        :type type: str
        """
        allowed_values = ["simple", "compound"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
