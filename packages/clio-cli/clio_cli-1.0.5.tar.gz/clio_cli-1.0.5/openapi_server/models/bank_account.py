# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_base import UserBase
from openapi_server import util


class BankAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, balance: float=None, bank_transactions_count: int=None, clio_payment_page_link: str=None, clio_payment_page_qr_code: str=None, clio_payments_enabled: bool=None, controlled_account: bool=None, created_at: datetime=None, currency: str=None, default_account: bool=None, domicile_branch: str=None, etag: str=None, general_ledger_number: str=None, holder: str=None, id: int=None, institution: str=None, name: str=None, swift: str=None, transit_number: str=None, type: str=None, updated_at: datetime=None, user: UserBase=None):
        """BankAccount - a model defined in OpenAPI

        :param account_number: The account_number of this BankAccount.
        :param balance: The balance of this BankAccount.
        :param bank_transactions_count: The bank_transactions_count of this BankAccount.
        :param clio_payment_page_link: The clio_payment_page_link of this BankAccount.
        :param clio_payment_page_qr_code: The clio_payment_page_qr_code of this BankAccount.
        :param clio_payments_enabled: The clio_payments_enabled of this BankAccount.
        :param controlled_account: The controlled_account of this BankAccount.
        :param created_at: The created_at of this BankAccount.
        :param currency: The currency of this BankAccount.
        :param default_account: The default_account of this BankAccount.
        :param domicile_branch: The domicile_branch of this BankAccount.
        :param etag: The etag of this BankAccount.
        :param general_ledger_number: The general_ledger_number of this BankAccount.
        :param holder: The holder of this BankAccount.
        :param id: The id of this BankAccount.
        :param institution: The institution of this BankAccount.
        :param name: The name of this BankAccount.
        :param swift: The swift of this BankAccount.
        :param transit_number: The transit_number of this BankAccount.
        :param type: The type of this BankAccount.
        :param updated_at: The updated_at of this BankAccount.
        :param user: The user of this BankAccount.
        """
        self.openapi_types = {
            'account_number': str,
            'balance': float,
            'bank_transactions_count': int,
            'clio_payment_page_link': str,
            'clio_payment_page_qr_code': str,
            'clio_payments_enabled': bool,
            'controlled_account': bool,
            'created_at': datetime,
            'currency': str,
            'default_account': bool,
            'domicile_branch': str,
            'etag': str,
            'general_ledger_number': str,
            'holder': str,
            'id': int,
            'institution': str,
            'name': str,
            'swift': str,
            'transit_number': str,
            'type': str,
            'updated_at': datetime,
            'user': UserBase
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'balance': 'balance',
            'bank_transactions_count': 'bank_transactions_count',
            'clio_payment_page_link': 'clio_payment_page_link',
            'clio_payment_page_qr_code': 'clio_payment_page_qr_code',
            'clio_payments_enabled': 'clio_payments_enabled',
            'controlled_account': 'controlled_account',
            'created_at': 'created_at',
            'currency': 'currency',
            'default_account': 'default_account',
            'domicile_branch': 'domicile_branch',
            'etag': 'etag',
            'general_ledger_number': 'general_ledger_number',
            'holder': 'holder',
            'id': 'id',
            'institution': 'institution',
            'name': 'name',
            'swift': 'swift',
            'transit_number': 'transit_number',
            'type': 'type',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._account_number = account_number
        self._balance = balance
        self._bank_transactions_count = bank_transactions_count
        self._clio_payment_page_link = clio_payment_page_link
        self._clio_payment_page_qr_code = clio_payment_page_qr_code
        self._clio_payments_enabled = clio_payments_enabled
        self._controlled_account = controlled_account
        self._created_at = created_at
        self._currency = currency
        self._default_account = default_account
        self._domicile_branch = domicile_branch
        self._etag = etag
        self._general_ledger_number = general_ledger_number
        self._holder = holder
        self._id = id
        self._institution = institution
        self._name = name
        self._swift = swift
        self._transit_number = transit_number
        self._type = type
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccount of this BankAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this BankAccount.

        The account number for *BankAccount*

        :return: The account_number of this BankAccount.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankAccount.

        The account number for *BankAccount*

        :param account_number: The account_number of this BankAccount.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def balance(self):
        """Gets the balance of this BankAccount.

        The current balance of the *BankAccount*

        :return: The balance of this BankAccount.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this BankAccount.

        The current balance of the *BankAccount*

        :param balance: The balance of this BankAccount.
        :type balance: float
        """

        self._balance = balance

    @property
    def bank_transactions_count(self):
        """Gets the bank_transactions_count of this BankAccount.

        The number of bank transactions associated with the account.

        :return: The bank_transactions_count of this BankAccount.
        :rtype: int
        """
        return self._bank_transactions_count

    @bank_transactions_count.setter
    def bank_transactions_count(self, bank_transactions_count):
        """Sets the bank_transactions_count of this BankAccount.

        The number of bank transactions associated with the account.

        :param bank_transactions_count: The bank_transactions_count of this BankAccount.
        :type bank_transactions_count: int
        """

        self._bank_transactions_count = bank_transactions_count

    @property
    def clio_payment_page_link(self):
        """Gets the clio_payment_page_link of this BankAccount.

        Link to Single Payment Page which allows to transfer funds without logging in.

        :return: The clio_payment_page_link of this BankAccount.
        :rtype: str
        """
        return self._clio_payment_page_link

    @clio_payment_page_link.setter
    def clio_payment_page_link(self, clio_payment_page_link):
        """Sets the clio_payment_page_link of this BankAccount.

        Link to Single Payment Page which allows to transfer funds without logging in.

        :param clio_payment_page_link: The clio_payment_page_link of this BankAccount.
        :type clio_payment_page_link: str
        """

        self._clio_payment_page_link = clio_payment_page_link

    @property
    def clio_payment_page_qr_code(self):
        """Gets the clio_payment_page_qr_code of this BankAccount.

        A QR code that links to a Single Payment Page which allows to transfer funds without logging in.

        :return: The clio_payment_page_qr_code of this BankAccount.
        :rtype: str
        """
        return self._clio_payment_page_qr_code

    @clio_payment_page_qr_code.setter
    def clio_payment_page_qr_code(self, clio_payment_page_qr_code):
        """Sets the clio_payment_page_qr_code of this BankAccount.

        A QR code that links to a Single Payment Page which allows to transfer funds without logging in.

        :param clio_payment_page_qr_code: The clio_payment_page_qr_code of this BankAccount.
        :type clio_payment_page_qr_code: str
        """

        self._clio_payment_page_qr_code = clio_payment_page_qr_code

    @property
    def clio_payments_enabled(self):
        """Gets the clio_payments_enabled of this BankAccount.

        Whether the bank account is connected to Clio Payments

        :return: The clio_payments_enabled of this BankAccount.
        :rtype: bool
        """
        return self._clio_payments_enabled

    @clio_payments_enabled.setter
    def clio_payments_enabled(self, clio_payments_enabled):
        """Sets the clio_payments_enabled of this BankAccount.

        Whether the bank account is connected to Clio Payments

        :param clio_payments_enabled: The clio_payments_enabled of this BankAccount.
        :type clio_payments_enabled: bool
        """

        self._clio_payments_enabled = clio_payments_enabled

    @property
    def controlled_account(self):
        """Gets the controlled_account of this BankAccount.

        Whether is a controlled account

        :return: The controlled_account of this BankAccount.
        :rtype: bool
        """
        return self._controlled_account

    @controlled_account.setter
    def controlled_account(self, controlled_account):
        """Sets the controlled_account of this BankAccount.

        Whether is a controlled account

        :param controlled_account: The controlled_account of this BankAccount.
        :type controlled_account: bool
        """

        self._controlled_account = controlled_account

    @property
    def created_at(self):
        """Gets the created_at of this BankAccount.

        The time the *BankAccount* was created (as a ISO-8601 timestamp)

        :return: The created_at of this BankAccount.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BankAccount.

        The time the *BankAccount* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this BankAccount.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this BankAccount.

        The currency type of the *BankAccount*

        :return: The currency of this BankAccount.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BankAccount.

        The currency type of the *BankAccount*

        :param currency: The currency of this BankAccount.
        :type currency: str
        """

        self._currency = currency

    @property
    def default_account(self):
        """Gets the default_account of this BankAccount.

        Whether it is the default account

        :return: The default_account of this BankAccount.
        :rtype: bool
        """
        return self._default_account

    @default_account.setter
    def default_account(self, default_account):
        """Sets the default_account of this BankAccount.

        Whether it is the default account

        :param default_account: The default_account of this BankAccount.
        :type default_account: bool
        """

        self._default_account = default_account

    @property
    def domicile_branch(self):
        """Gets the domicile_branch of this BankAccount.

        The name of the branch where the account was opened

        :return: The domicile_branch of this BankAccount.
        :rtype: str
        """
        return self._domicile_branch

    @domicile_branch.setter
    def domicile_branch(self, domicile_branch):
        """Sets the domicile_branch of this BankAccount.

        The name of the branch where the account was opened

        :param domicile_branch: The domicile_branch of this BankAccount.
        :type domicile_branch: str
        """

        self._domicile_branch = domicile_branch

    @property
    def etag(self):
        """Gets the etag of this BankAccount.

        ETag for the *BankAccount*

        :return: The etag of this BankAccount.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this BankAccount.

        ETag for the *BankAccount*

        :param etag: The etag of this BankAccount.
        :type etag: str
        """

        self._etag = etag

    @property
    def general_ledger_number(self):
        """Gets the general_ledger_number of this BankAccount.

        General ledger number

        :return: The general_ledger_number of this BankAccount.
        :rtype: str
        """
        return self._general_ledger_number

    @general_ledger_number.setter
    def general_ledger_number(self, general_ledger_number):
        """Sets the general_ledger_number of this BankAccount.

        General ledger number

        :param general_ledger_number: The general_ledger_number of this BankAccount.
        :type general_ledger_number: str
        """

        self._general_ledger_number = general_ledger_number

    @property
    def holder(self):
        """Gets the holder of this BankAccount.

        The name of the person or business that owns the *BankAccount*

        :return: The holder of this BankAccount.
        :rtype: str
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this BankAccount.

        The name of the person or business that owns the *BankAccount*

        :param holder: The holder of this BankAccount.
        :type holder: str
        """

        self._holder = holder

    @property
    def id(self):
        """Gets the id of this BankAccount.

        Unique identifier for the *BankAccount*

        :return: The id of this BankAccount.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankAccount.

        Unique identifier for the *BankAccount*

        :param id: The id of this BankAccount.
        :type id: int
        """

        self._id = id

    @property
    def institution(self):
        """Gets the institution of this BankAccount.

        The financial institution where the *BankAccount* is registered

        :return: The institution of this BankAccount.
        :rtype: str
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this BankAccount.

        The financial institution where the *BankAccount* is registered

        :param institution: The institution of this BankAccount.
        :type institution: str
        """

        self._institution = institution

    @property
    def name(self):
        """Gets the name of this BankAccount.

        The name of the *BankAccount*

        :return: The name of this BankAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BankAccount.

        The name of the *BankAccount*

        :param name: The name of this BankAccount.
        :type name: str
        """

        self._name = name

    @property
    def swift(self):
        """Gets the swift of this BankAccount.

        A unique identification code for the financial institution

        :return: The swift of this BankAccount.
        :rtype: str
        """
        return self._swift

    @swift.setter
    def swift(self, swift):
        """Sets the swift of this BankAccount.

        A unique identification code for the financial institution

        :param swift: The swift of this BankAccount.
        :type swift: str
        """

        self._swift = swift

    @property
    def transit_number(self):
        """Gets the transit_number of this BankAccount.

        Transit number for the bank account branch

        :return: The transit_number of this BankAccount.
        :rtype: str
        """
        return self._transit_number

    @transit_number.setter
    def transit_number(self, transit_number):
        """Sets the transit_number of this BankAccount.

        Transit number for the bank account branch

        :param transit_number: The transit_number of this BankAccount.
        :type transit_number: str
        """

        self._transit_number = transit_number

    @property
    def type(self):
        """Gets the type of this BankAccount.

        The type of the *BankAccount*

        :return: The type of this BankAccount.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankAccount.

        The type of the *BankAccount*

        :param type: The type of this BankAccount.
        :type type: str
        """
        allowed_values = ["Operating", "Trust"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this BankAccount.

        The time the *BankAccount* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this BankAccount.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BankAccount.

        The time the *BankAccount* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this BankAccount.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this BankAccount.


        :return: The user of this BankAccount.
        :rtype: UserBase
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this BankAccount.


        :param user: The user of this BankAccount.
        :type user: UserBase
        """

        self._user = user
