# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BankTransferBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, amount: float=None, _date: datetime=None, description: str=None, primary_authorizer: str=None, secondary_authorizer: str=None, created_at: datetime=None, updated_at: datetime=None):
        """BankTransferBase - a model defined in OpenAPI

        :param id: The id of this BankTransferBase.
        :param etag: The etag of this BankTransferBase.
        :param amount: The amount of this BankTransferBase.
        :param _date: The _date of this BankTransferBase.
        :param description: The description of this BankTransferBase.
        :param primary_authorizer: The primary_authorizer of this BankTransferBase.
        :param secondary_authorizer: The secondary_authorizer of this BankTransferBase.
        :param created_at: The created_at of this BankTransferBase.
        :param updated_at: The updated_at of this BankTransferBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'amount': float,
            '_date': datetime,
            'description': str,
            'primary_authorizer': str,
            'secondary_authorizer': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'amount': 'amount',
            '_date': 'date',
            'description': 'description',
            'primary_authorizer': 'primary_authorizer',
            'secondary_authorizer': 'secondary_authorizer',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._etag = etag
        self._amount = amount
        self.__date = _date
        self._description = description
        self._primary_authorizer = primary_authorizer
        self._secondary_authorizer = secondary_authorizer
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankTransferBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankTransfer_base of this BankTransferBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BankTransferBase.

        Unique identifier for the *BankTransfer*

        :return: The id of this BankTransferBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankTransferBase.

        Unique identifier for the *BankTransfer*

        :param id: The id of this BankTransferBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this BankTransferBase.

        ETag for the *BankTransfer*

        :return: The etag of this BankTransferBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this BankTransferBase.

        ETag for the *BankTransfer*

        :param etag: The etag of this BankTransferBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def amount(self):
        """Gets the amount of this BankTransferBase.

        The amount of the transfer.

        :return: The amount of this BankTransferBase.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BankTransferBase.

        The amount of the transfer.

        :param amount: The amount of this BankTransferBase.
        :type amount: float
        """

        self._amount = amount

    @property
    def _date(self):
        """Gets the _date of this BankTransferBase.

        The date of the transfer.

        :return: The _date of this BankTransferBase.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this BankTransferBase.

        The date of the transfer.

        :param _date: The _date of this BankTransferBase.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this BankTransferBase.

        The description of the transfer.

        :return: The description of this BankTransferBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BankTransferBase.

        The description of the transfer.

        :param description: The description of this BankTransferBase.
        :type description: str
        """

        self._description = description

    @property
    def primary_authorizer(self):
        """Gets the primary_authorizer of this BankTransferBase.

        The primary authorizer of the transfer.

        :return: The primary_authorizer of this BankTransferBase.
        :rtype: str
        """
        return self._primary_authorizer

    @primary_authorizer.setter
    def primary_authorizer(self, primary_authorizer):
        """Sets the primary_authorizer of this BankTransferBase.

        The primary authorizer of the transfer.

        :param primary_authorizer: The primary_authorizer of this BankTransferBase.
        :type primary_authorizer: str
        """

        self._primary_authorizer = primary_authorizer

    @property
    def secondary_authorizer(self):
        """Gets the secondary_authorizer of this BankTransferBase.

        The secondary authorizer of the transfer.

        :return: The secondary_authorizer of this BankTransferBase.
        :rtype: str
        """
        return self._secondary_authorizer

    @secondary_authorizer.setter
    def secondary_authorizer(self, secondary_authorizer):
        """Sets the secondary_authorizer of this BankTransferBase.

        The secondary authorizer of the transfer.

        :param secondary_authorizer: The secondary_authorizer of this BankTransferBase.
        :type secondary_authorizer: str
        """

        self._secondary_authorizer = secondary_authorizer

    @property
    def created_at(self):
        """Gets the created_at of this BankTransferBase.

        The time the *BankTransfer* was created (as a ISO-8601 timestamp)

        :return: The created_at of this BankTransferBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BankTransferBase.

        The time the *BankTransfer* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this BankTransferBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BankTransferBase.

        The time the *BankTransfer* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this BankTransferBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BankTransferBase.

        The time the *BankTransfer* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this BankTransferBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
