# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaskTemplateBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, name: str=None, description: str=None, priority: str=None, private: bool=None, created_at: datetime=None, updated_at: datetime=None):
        """TaskTemplateBase - a model defined in OpenAPI

        :param id: The id of this TaskTemplateBase.
        :param etag: The etag of this TaskTemplateBase.
        :param name: The name of this TaskTemplateBase.
        :param description: The description of this TaskTemplateBase.
        :param priority: The priority of this TaskTemplateBase.
        :param private: The private of this TaskTemplateBase.
        :param created_at: The created_at of this TaskTemplateBase.
        :param updated_at: The updated_at of this TaskTemplateBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'name': str,
            'description': str,
            'priority': str,
            'private': bool,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'name': 'name',
            'description': 'description',
            'priority': 'priority',
            'private': 'private',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._etag = etag
        self._name = name
        self._description = description
        self._priority = priority
        self._private = private
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskTemplateBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskTemplate_base of this TaskTemplateBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TaskTemplateBase.

        Unique identifier for the *TaskTemplate*

        :return: The id of this TaskTemplateBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskTemplateBase.

        Unique identifier for the *TaskTemplate*

        :param id: The id of this TaskTemplateBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this TaskTemplateBase.

        ETag for the *TaskTemplate*

        :return: The etag of this TaskTemplateBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TaskTemplateBase.

        ETag for the *TaskTemplate*

        :param etag: The etag of this TaskTemplateBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this TaskTemplateBase.

        The name of the *TaskTemplate*

        :return: The name of this TaskTemplateBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskTemplateBase.

        The name of the *TaskTemplate*

        :param name: The name of this TaskTemplateBase.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this TaskTemplateBase.

        A detailed description of the *TaskTemplate*

        :return: The description of this TaskTemplateBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskTemplateBase.

        A detailed description of the *TaskTemplate*

        :param description: The description of this TaskTemplateBase.
        :type description: str
        """

        self._description = description

    @property
    def priority(self):
        """Gets the priority of this TaskTemplateBase.

        *TaskTemplate* priority

        :return: The priority of this TaskTemplateBase.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TaskTemplateBase.

        *TaskTemplate* priority

        :param priority: The priority of this TaskTemplateBase.
        :type priority: str
        """
        allowed_values = ["High", "Normal", "Low"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def private(self):
        """Gets the private of this TaskTemplateBase.

        Whether the *TaskTemplate* is private.

        :return: The private of this TaskTemplateBase.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this TaskTemplateBase.

        Whether the *TaskTemplate* is private.

        :param private: The private of this TaskTemplateBase.
        :type private: bool
        """

        self._private = private

    @property
    def created_at(self):
        """Gets the created_at of this TaskTemplateBase.

        The time the *TaskTemplate* was created (as a ISO-8601 timestamp)

        :return: The created_at of this TaskTemplateBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TaskTemplateBase.

        The time the *TaskTemplate* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this TaskTemplateBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TaskTemplateBase.

        The time the *TaskTemplate* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this TaskTemplateBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TaskTemplateBase.

        The time the *TaskTemplate* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this TaskTemplateBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
