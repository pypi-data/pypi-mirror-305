# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolymorphicObjectBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, type: str=None, identifier: str=None, secondary_identifier: str=None, tertiary_identifier: str=None):
        """PolymorphicObjectBase - a model defined in OpenAPI

        :param id: The id of this PolymorphicObjectBase.
        :param type: The type of this PolymorphicObjectBase.
        :param identifier: The identifier of this PolymorphicObjectBase.
        :param secondary_identifier: The secondary_identifier of this PolymorphicObjectBase.
        :param tertiary_identifier: The tertiary_identifier of this PolymorphicObjectBase.
        """
        self.openapi_types = {
            'id': int,
            'type': str,
            'identifier': str,
            'secondary_identifier': str,
            'tertiary_identifier': str
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'identifier': 'identifier',
            'secondary_identifier': 'secondary_identifier',
            'tertiary_identifier': 'tertiary_identifier'
        }

        self._id = id
        self._type = type
        self._identifier = identifier
        self._secondary_identifier = secondary_identifier
        self._tertiary_identifier = tertiary_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolymorphicObjectBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolymorphicObject_base of this PolymorphicObjectBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PolymorphicObjectBase.

        Unique identifier for the *PolymorphicObject*

        :return: The id of this PolymorphicObjectBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolymorphicObjectBase.

        Unique identifier for the *PolymorphicObject*

        :param id: The id of this PolymorphicObjectBase.
        :type id: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this PolymorphicObjectBase.

        The type of the *PolymorphicObject*

        :return: The type of this PolymorphicObjectBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PolymorphicObjectBase.

        The type of the *PolymorphicObject*

        :param type: The type of this PolymorphicObjectBase.
        :type type: str
        """
        allowed_values = ["Task", "CalendarEntry", "MatterNote", "ContactNote", "Matter", "Contact", "User", "CreditMemo", "Payment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def identifier(self):
        """Gets the identifier of this PolymorphicObjectBase.

        A string to identify the *PolymorphicObject*

        :return: The identifier of this PolymorphicObjectBase.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PolymorphicObjectBase.

        A string to identify the *PolymorphicObject*

        :param identifier: The identifier of this PolymorphicObjectBase.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def secondary_identifier(self):
        """Gets the secondary_identifier of this PolymorphicObjectBase.

        A secondary string to identify the *PolymorphicObject*

        :return: The secondary_identifier of this PolymorphicObjectBase.
        :rtype: str
        """
        return self._secondary_identifier

    @secondary_identifier.setter
    def secondary_identifier(self, secondary_identifier):
        """Sets the secondary_identifier of this PolymorphicObjectBase.

        A secondary string to identify the *PolymorphicObject*

        :param secondary_identifier: The secondary_identifier of this PolymorphicObjectBase.
        :type secondary_identifier: str
        """

        self._secondary_identifier = secondary_identifier

    @property
    def tertiary_identifier(self):
        """Gets the tertiary_identifier of this PolymorphicObjectBase.

        A tertiary string to identify the *PolymorphicObject*

        :return: The tertiary_identifier of this PolymorphicObjectBase.
        :rtype: str
        """
        return self._tertiary_identifier

    @tertiary_identifier.setter
    def tertiary_identifier(self, tertiary_identifier):
        """Sets the tertiary_identifier of this PolymorphicObjectBase.

        A tertiary string to identify the *PolymorphicObject*

        :param tertiary_identifier: The tertiary_identifier of this PolymorphicObjectBase.
        :type tertiary_identifier: str
        """

        self._tertiary_identifier = tertiary_identifier
