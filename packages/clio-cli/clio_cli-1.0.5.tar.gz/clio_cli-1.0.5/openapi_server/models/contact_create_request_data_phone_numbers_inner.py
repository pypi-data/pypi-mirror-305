# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactCreateRequestDataPhoneNumbersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str='Other', number: str=None, default_number: bool=None):
        """ContactCreateRequestDataPhoneNumbersInner - a model defined in OpenAPI

        :param name: The name of this ContactCreateRequestDataPhoneNumbersInner.
        :param number: The number of this ContactCreateRequestDataPhoneNumbersInner.
        :param default_number: The default_number of this ContactCreateRequestDataPhoneNumbersInner.
        """
        self.openapi_types = {
            'name': str,
            'number': str,
            'default_number': bool
        }

        self.attribute_map = {
            'name': 'name',
            'number': 'number',
            'default_number': 'default_number'
        }

        self._name = name
        self._number = number
        self._default_number = default_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactCreateRequestDataPhoneNumbersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact_create_request_data_phone_numbers_inner of this ContactCreateRequestDataPhoneNumbersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ContactCreateRequestDataPhoneNumbersInner.

        Name of the PhoneNumber.

        :return: The name of this ContactCreateRequestDataPhoneNumbersInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactCreateRequestDataPhoneNumbersInner.

        Name of the PhoneNumber.

        :param name: The name of this ContactCreateRequestDataPhoneNumbersInner.
        :type name: str
        """
        allowed_values = ["Work", "Home", "Mobile", "Fax", "Pager", "Skype", "Other"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def number(self):
        """Gets the number of this ContactCreateRequestDataPhoneNumbersInner.

        Phone number.

        :return: The number of this ContactCreateRequestDataPhoneNumbersInner.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ContactCreateRequestDataPhoneNumbersInner.

        Phone number.

        :param number: The number of this ContactCreateRequestDataPhoneNumbersInner.
        :type number: str
        """

        self._number = number

    @property
    def default_number(self):
        """Gets the default_number of this ContactCreateRequestDataPhoneNumbersInner.

        Whether or not the PhoneNumber should be the default number for the Contact.

        :return: The default_number of this ContactCreateRequestDataPhoneNumbersInner.
        :rtype: bool
        """
        return self._default_number

    @default_number.setter
    def default_number(self, default_number):
        """Sets the default_number of this ContactCreateRequestDataPhoneNumbersInner.

        Whether or not the PhoneNumber should be the default number for the Contact.

        :param default_number: The default_number of this ContactCreateRequestDataPhoneNumbersInner.
        :type default_number: bool
        """

        self._default_number = default_number
