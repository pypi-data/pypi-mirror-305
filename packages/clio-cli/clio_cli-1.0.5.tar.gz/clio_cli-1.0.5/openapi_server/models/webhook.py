# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_base import UserBase
from openapi_server import util


class Webhook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, url: str=None, fields: str=None, shared_secret: str=None, model: str=None, status: str=None, events: List[str]=None, expires_at: datetime=None, created_at: datetime=None, updated_at: datetime=None, user: UserBase=None):
        """Webhook - a model defined in OpenAPI

        :param id: The id of this Webhook.
        :param etag: The etag of this Webhook.
        :param url: The url of this Webhook.
        :param fields: The fields of this Webhook.
        :param shared_secret: The shared_secret of this Webhook.
        :param model: The model of this Webhook.
        :param status: The status of this Webhook.
        :param events: The events of this Webhook.
        :param expires_at: The expires_at of this Webhook.
        :param created_at: The created_at of this Webhook.
        :param updated_at: The updated_at of this Webhook.
        :param user: The user of this Webhook.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'url': str,
            'fields': str,
            'shared_secret': str,
            'model': str,
            'status': str,
            'events': List[str],
            'expires_at': datetime,
            'created_at': datetime,
            'updated_at': datetime,
            'user': UserBase
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'url': 'url',
            'fields': 'fields',
            'shared_secret': 'shared_secret',
            'model': 'model',
            'status': 'status',
            'events': 'events',
            'expires_at': 'expires_at',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._id = id
        self._etag = etag
        self._url = url
        self._fields = fields
        self._shared_secret = shared_secret
        self._model = model
        self._status = status
        self._events = events
        self._expires_at = expires_at
        self._created_at = created_at
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Webhook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Webhook of this Webhook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Webhook.

        Unique identifier for the *Webhook*

        :return: The id of this Webhook.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhook.

        Unique identifier for the *Webhook*

        :param id: The id of this Webhook.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this Webhook.

        ETag for the *Webhook*

        :return: The etag of this Webhook.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Webhook.

        ETag for the *Webhook*

        :param etag: The etag of this Webhook.
        :type etag: str
        """

        self._etag = etag

    @property
    def url(self):
        """Gets the url of this Webhook.

        The `https` URL to send the data to when the events are triggered

        :return: The url of this Webhook.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Webhook.

        The `https` URL to send the data to when the events are triggered

        :param url: The url of this Webhook.
        :type url: str
        """

        self._url = url

    @property
    def fields(self):
        """Gets the fields of this Webhook.

        Fields to be included in the webhook request

        :return: The fields of this Webhook.
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Webhook.

        Fields to be included in the webhook request

        :param fields: The fields of this Webhook.
        :type fields: str
        """

        self._fields = fields

    @property
    def shared_secret(self):
        """Gets the shared_secret of this Webhook.

        A shared secret used to create a signature for the payload

        :return: The shared_secret of this Webhook.
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this Webhook.

        A shared secret used to create a signature for the payload

        :param shared_secret: The shared_secret of this Webhook.
        :type shared_secret: str
        """

        self._shared_secret = shared_secret

    @property
    def model(self):
        """Gets the model of this Webhook.

        What kind of records the webhook is for

        :return: The model of this Webhook.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Webhook.

        What kind of records the webhook is for

        :param model: The model of this Webhook.
        :type model: str
        """
        allowed_values = ["activity", "bill", "calendar_entry", "clio_payments_payment", "communication", "contact", "document", "folder", "matter", "task"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def status(self):
        """Gets the status of this Webhook.

        The current status of the webhook.

        :return: The status of this Webhook.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Webhook.

        The current status of the webhook.

        :param status: The status of this Webhook.
        :type status: str
        """
        allowed_values = ["pending", "enabled", "suspended"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def events(self):
        """Gets the events of this Webhook.

        The events your webhook is subscribed to.

        :return: The events of this Webhook.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Webhook.

        The events your webhook is subscribed to.

        :param events: The events of this Webhook.
        :type events: List[str]
        """
        allowed_values = ["created", "updated", "deleted", "matter_opened", "matter_pended", "matter_closed"]  # noqa: E501
        if not set(events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(events) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events

    @property
    def expires_at(self):
        """Gets the expires_at of this Webhook.

        The time webhook will expire (as a ISO-8601 timestamp)

        :return: The expires_at of this Webhook.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Webhook.

        The time webhook will expire (as a ISO-8601 timestamp)

        :param expires_at: The expires_at of this Webhook.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def created_at(self):
        """Gets the created_at of this Webhook.

        The time the *Webhook* was created (as a ISO-8601 timestamp)

        :return: The created_at of this Webhook.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Webhook.

        The time the *Webhook* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this Webhook.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Webhook.

        The time the *Webhook* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this Webhook.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Webhook.

        The time the *Webhook* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this Webhook.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Webhook.


        :return: The user of this Webhook.
        :rtype: UserBase
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Webhook.


        :param user: The user of this Webhook.
        :type user: UserBase
        """

        self._user = user
