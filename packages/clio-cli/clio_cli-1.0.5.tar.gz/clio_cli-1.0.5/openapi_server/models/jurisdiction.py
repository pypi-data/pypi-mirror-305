# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_type_base import ServiceTypeBase
from openapi_server import util


class Jurisdiction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, created_at: datetime=None, updated_at: datetime=None, system_id: int=None, description: str=None, default: bool=None, display_timezone: str=None, valid_subscription: bool=None, is_local_timezone: bool=None, service_types: List[ServiceTypeBase]=None):
        """Jurisdiction - a model defined in OpenAPI

        :param id: The id of this Jurisdiction.
        :param etag: The etag of this Jurisdiction.
        :param created_at: The created_at of this Jurisdiction.
        :param updated_at: The updated_at of this Jurisdiction.
        :param system_id: The system_id of this Jurisdiction.
        :param description: The description of this Jurisdiction.
        :param default: The default of this Jurisdiction.
        :param display_timezone: The display_timezone of this Jurisdiction.
        :param valid_subscription: The valid_subscription of this Jurisdiction.
        :param is_local_timezone: The is_local_timezone of this Jurisdiction.
        :param service_types: The service_types of this Jurisdiction.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'created_at': datetime,
            'updated_at': datetime,
            'system_id': int,
            'description': str,
            'default': bool,
            'display_timezone': str,
            'valid_subscription': bool,
            'is_local_timezone': bool,
            'service_types': List[ServiceTypeBase]
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'system_id': 'system_id',
            'description': 'description',
            'default': 'default',
            'display_timezone': 'display_timezone',
            'valid_subscription': 'valid_subscription',
            'is_local_timezone': 'is_local_timezone',
            'service_types': 'service_types'
        }

        self._id = id
        self._etag = etag
        self._created_at = created_at
        self._updated_at = updated_at
        self._system_id = system_id
        self._description = description
        self._default = default
        self._display_timezone = display_timezone
        self._valid_subscription = valid_subscription
        self._is_local_timezone = is_local_timezone
        self._service_types = service_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Jurisdiction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Jurisdiction of this Jurisdiction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Jurisdiction.

        Unique identifier for the *Jurisdiction*

        :return: The id of this Jurisdiction.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Jurisdiction.

        Unique identifier for the *Jurisdiction*

        :param id: The id of this Jurisdiction.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this Jurisdiction.

        ETag for the *Jurisdiction*

        :return: The etag of this Jurisdiction.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Jurisdiction.

        ETag for the *Jurisdiction*

        :param etag: The etag of this Jurisdiction.
        :type etag: str
        """

        self._etag = etag

    @property
    def created_at(self):
        """Gets the created_at of this Jurisdiction.

        The time the *Jurisdiction* was created (as a ISO-8601 timestamp)

        :return: The created_at of this Jurisdiction.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Jurisdiction.

        The time the *Jurisdiction* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this Jurisdiction.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Jurisdiction.

        The time the *Jurisdiction* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this Jurisdiction.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Jurisdiction.

        The time the *Jurisdiction* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this Jurisdiction.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def system_id(self):
        """Gets the system_id of this Jurisdiction.

        Server ID

        :return: The system_id of this Jurisdiction.
        :rtype: int
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this Jurisdiction.

        Server ID

        :param system_id: The system_id of this Jurisdiction.
        :type system_id: int
        """

        self._system_id = system_id

    @property
    def description(self):
        """Gets the description of this Jurisdiction.

        Description

        :return: The description of this Jurisdiction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Jurisdiction.

        Description

        :param description: The description of this Jurisdiction.
        :type description: str
        """

        self._description = description

    @property
    def default(self):
        """Gets the default of this Jurisdiction.

        Whether the *Jurisdiction* is default for the current user

        :return: The default of this Jurisdiction.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Jurisdiction.

        Whether the *Jurisdiction* is default for the current user

        :param default: The default of this Jurisdiction.
        :type default: bool
        """

        self._default = default

    @property
    def display_timezone(self):
        """Gets the display_timezone of this Jurisdiction.

        Formatted IANA timezone with UTC offset

        :return: The display_timezone of this Jurisdiction.
        :rtype: str
        """
        return self._display_timezone

    @display_timezone.setter
    def display_timezone(self, display_timezone):
        """Sets the display_timezone of this Jurisdiction.

        Formatted IANA timezone with UTC offset

        :param display_timezone: The display_timezone of this Jurisdiction.
        :type display_timezone: str
        """

        self._display_timezone = display_timezone

    @property
    def valid_subscription(self):
        """Gets the valid_subscription of this Jurisdiction.

        Boolean value for whether the user has the jurisdictions

        :return: The valid_subscription of this Jurisdiction.
        :rtype: bool
        """
        return self._valid_subscription

    @valid_subscription.setter
    def valid_subscription(self, valid_subscription):
        """Sets the valid_subscription of this Jurisdiction.

        Boolean value for whether the user has the jurisdictions

        :param valid_subscription: The valid_subscription of this Jurisdiction.
        :type valid_subscription: bool
        """

        self._valid_subscription = valid_subscription

    @property
    def is_local_timezone(self):
        """Gets the is_local_timezone of this Jurisdiction.

        Boolean value for when the timezone is in the local users timezone

        :return: The is_local_timezone of this Jurisdiction.
        :rtype: bool
        """
        return self._is_local_timezone

    @is_local_timezone.setter
    def is_local_timezone(self, is_local_timezone):
        """Sets the is_local_timezone of this Jurisdiction.

        Boolean value for when the timezone is in the local users timezone

        :param is_local_timezone: The is_local_timezone of this Jurisdiction.
        :type is_local_timezone: bool
        """

        self._is_local_timezone = is_local_timezone

    @property
    def service_types(self):
        """Gets the service_types of this Jurisdiction.

        ServiceType

        :return: The service_types of this Jurisdiction.
        :rtype: List[ServiceTypeBase]
        """
        return self._service_types

    @service_types.setter
    def service_types(self, service_types):
        """Sets the service_types of this Jurisdiction.

        ServiceType

        :param service_types: The service_types of this Jurisdiction.
        :type service_types: List[ServiceTypeBase]
        """

        self._service_types = service_types
