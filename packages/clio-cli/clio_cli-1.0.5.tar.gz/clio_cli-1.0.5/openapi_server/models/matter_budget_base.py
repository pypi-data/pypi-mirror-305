# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MatterBudgetBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, budget: float=None, include_expenses: bool=None, notification_threshold: int=None, notify_users: bool=None, created_at: datetime=None, updated_at: datetime=None):
        """MatterBudgetBase - a model defined in OpenAPI

        :param id: The id of this MatterBudgetBase.
        :param etag: The etag of this MatterBudgetBase.
        :param budget: The budget of this MatterBudgetBase.
        :param include_expenses: The include_expenses of this MatterBudgetBase.
        :param notification_threshold: The notification_threshold of this MatterBudgetBase.
        :param notify_users: The notify_users of this MatterBudgetBase.
        :param created_at: The created_at of this MatterBudgetBase.
        :param updated_at: The updated_at of this MatterBudgetBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'budget': float,
            'include_expenses': bool,
            'notification_threshold': int,
            'notify_users': bool,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'budget': 'budget',
            'include_expenses': 'include_expenses',
            'notification_threshold': 'notification_threshold',
            'notify_users': 'notify_users',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._etag = etag
        self._budget = budget
        self._include_expenses = include_expenses
        self._notification_threshold = notification_threshold
        self._notify_users = notify_users
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatterBudgetBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatterBudget_base of this MatterBudgetBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MatterBudgetBase.

        Unique identifier for the *MatterBudget*

        :return: The id of this MatterBudgetBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MatterBudgetBase.

        Unique identifier for the *MatterBudget*

        :param id: The id of this MatterBudgetBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this MatterBudgetBase.

        ETag for the *MatterBudget*

        :return: The etag of this MatterBudgetBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this MatterBudgetBase.

        ETag for the *MatterBudget*

        :param etag: The etag of this MatterBudgetBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def budget(self):
        """Gets the budget of this MatterBudgetBase.

        The amount allocated for the matter.

        :return: The budget of this MatterBudgetBase.
        :rtype: float
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this MatterBudgetBase.

        The amount allocated for the matter.

        :param budget: The budget of this MatterBudgetBase.
        :type budget: float
        """

        self._budget = budget

    @property
    def include_expenses(self):
        """Gets the include_expenses of this MatterBudgetBase.

        Whether the budget includes expenses.

        :return: The include_expenses of this MatterBudgetBase.
        :rtype: bool
        """
        return self._include_expenses

    @include_expenses.setter
    def include_expenses(self, include_expenses):
        """Sets the include_expenses of this MatterBudgetBase.

        Whether the budget includes expenses.

        :param include_expenses: The include_expenses of this MatterBudgetBase.
        :type include_expenses: bool
        """

        self._include_expenses = include_expenses

    @property
    def notification_threshold(self):
        """Gets the notification_threshold of this MatterBudgetBase.

        Percentage of the budget when it starts notifying users. The number must be between 0 and 100.

        :return: The notification_threshold of this MatterBudgetBase.
        :rtype: int
        """
        return self._notification_threshold

    @notification_threshold.setter
    def notification_threshold(self, notification_threshold):
        """Sets the notification_threshold of this MatterBudgetBase.

        Percentage of the budget when it starts notifying users. The number must be between 0 and 100.

        :param notification_threshold: The notification_threshold of this MatterBudgetBase.
        :type notification_threshold: int
        """

        self._notification_threshold = notification_threshold

    @property
    def notify_users(self):
        """Gets the notify_users of this MatterBudgetBase.

        Whether to notify users when the matter reaches the notification threshold.

        :return: The notify_users of this MatterBudgetBase.
        :rtype: bool
        """
        return self._notify_users

    @notify_users.setter
    def notify_users(self, notify_users):
        """Sets the notify_users of this MatterBudgetBase.

        Whether to notify users when the matter reaches the notification threshold.

        :param notify_users: The notify_users of this MatterBudgetBase.
        :type notify_users: bool
        """

        self._notify_users = notify_users

    @property
    def created_at(self):
        """Gets the created_at of this MatterBudgetBase.

        The time the *MatterBudget* was created (as a ISO-8601 timestamp)

        :return: The created_at of this MatterBudgetBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MatterBudgetBase.

        The time the *MatterBudget* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this MatterBudgetBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MatterBudgetBase.

        The time the *MatterBudget* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this MatterBudgetBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MatterBudgetBase.

        The time the *MatterBudget* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this MatterBudgetBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
