# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.matter_create_request_data_custom_rate_rates_inner import MatterCreateRequestDataCustomRateRatesInner
from openapi_server import util


class MatterCreateRequestDataCustomRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, rates: List[MatterCreateRequestDataCustomRateRatesInner]=None):
        """MatterCreateRequestDataCustomRate - a model defined in OpenAPI

        :param type: The type of this MatterCreateRequestDataCustomRate.
        :param rates: The rates of this MatterCreateRequestDataCustomRate.
        """
        self.openapi_types = {
            'type': str,
            'rates': List[MatterCreateRequestDataCustomRateRatesInner]
        }

        self.attribute_map = {
            'type': 'type',
            'rates': 'rates'
        }

        self._type = type
        self._rates = rates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatterCreateRequestDataCustomRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Matter_create_request_data_custom_rate of this MatterCreateRequestDataCustomRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this MatterCreateRequestDataCustomRate.

        The type of custom rate for the Matter.

        :return: The type of this MatterCreateRequestDataCustomRate.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MatterCreateRequestDataCustomRate.

        The type of custom rate for the Matter.

        :param type: The type of this MatterCreateRequestDataCustomRate.
        :type type: str
        """
        allowed_values = ["FlatRate", "HourlyRate", "ContingencyFee"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def rates(self):
        """Gets the rates of this MatterCreateRequestDataCustomRate.


        :return: The rates of this MatterCreateRequestDataCustomRate.
        :rtype: List[MatterCreateRequestDataCustomRateRatesInner]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this MatterCreateRequestDataCustomRate.


        :param rates: The rates of this MatterCreateRequestDataCustomRate.
        :type rates: List[MatterCreateRequestDataCustomRateRatesInner]
        """

        self._rates = rates
