# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_field_create_request_data_picklist_options_inner import CustomFieldCreateRequestDataPicklistOptionsInner
from openapi_server import util


class CustomFieldCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_order: int=None, displayed: bool=True, field_type: str=None, name: str=None, parent_type: str=None, picklist_options: List[CustomFieldCreateRequestDataPicklistOptionsInner]=None, required: bool=False):
        """CustomFieldCreateRequestData - a model defined in OpenAPI

        :param display_order: The display_order of this CustomFieldCreateRequestData.
        :param displayed: The displayed of this CustomFieldCreateRequestData.
        :param field_type: The field_type of this CustomFieldCreateRequestData.
        :param name: The name of this CustomFieldCreateRequestData.
        :param parent_type: The parent_type of this CustomFieldCreateRequestData.
        :param picklist_options: The picklist_options of this CustomFieldCreateRequestData.
        :param required: The required of this CustomFieldCreateRequestData.
        """
        self.openapi_types = {
            'display_order': int,
            'displayed': bool,
            'field_type': str,
            'name': str,
            'parent_type': str,
            'picklist_options': List[CustomFieldCreateRequestDataPicklistOptionsInner],
            'required': bool
        }

        self.attribute_map = {
            'display_order': 'display_order',
            'displayed': 'displayed',
            'field_type': 'field_type',
            'name': 'name',
            'parent_type': 'parent_type',
            'picklist_options': 'picklist_options',
            'required': 'required'
        }

        self._display_order = display_order
        self._displayed = displayed
        self._field_type = field_type
        self._name = name
        self._parent_type = parent_type
        self._picklist_options = picklist_options
        self._required = required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomFieldCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomField_create_request_data of this CustomFieldCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_order(self):
        """Gets the display_order of this CustomFieldCreateRequestData.

        The display position of the CustomField.

        :return: The display_order of this CustomFieldCreateRequestData.
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this CustomFieldCreateRequestData.

        The display position of the CustomField.

        :param display_order: The display_order of this CustomFieldCreateRequestData.
        :type display_order: int
        """

        self._display_order = display_order

    @property
    def displayed(self):
        """Gets the displayed of this CustomFieldCreateRequestData.

        Whether or not the CustomField should be displayed by default.

        :return: The displayed of this CustomFieldCreateRequestData.
        :rtype: bool
        """
        return self._displayed

    @displayed.setter
    def displayed(self, displayed):
        """Sets the displayed of this CustomFieldCreateRequestData.

        Whether or not the CustomField should be displayed by default.

        :param displayed: The displayed of this CustomFieldCreateRequestData.
        :type displayed: bool
        """

        self._displayed = displayed

    @property
    def field_type(self):
        """Gets the field_type of this CustomFieldCreateRequestData.

        Field type of the CustomField.

        :return: The field_type of this CustomFieldCreateRequestData.
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this CustomFieldCreateRequestData.

        Field type of the CustomField.

        :param field_type: The field_type of this CustomFieldCreateRequestData.
        :type field_type: str
        """
        allowed_values = ["checkbox", "contact", "currency", "date", "time", "email", "matter", "numeric", "picklist", "text_area", "text_line", "url"]  # noqa: E501
        if field_type not in allowed_values:
            raise ValueError(
                "Invalid value for `field_type` ({0}), must be one of {1}"
                .format(field_type, allowed_values)
            )

        self._field_type = field_type

    @property
    def name(self):
        """Gets the name of this CustomFieldCreateRequestData.

        CustomField name.

        :return: The name of this CustomFieldCreateRequestData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomFieldCreateRequestData.

        CustomField name.

        :param name: The name of this CustomFieldCreateRequestData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent_type(self):
        """Gets the parent_type of this CustomFieldCreateRequestData.

        Type of object the CustomField is for.

        :return: The parent_type of this CustomFieldCreateRequestData.
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type):
        """Sets the parent_type of this CustomFieldCreateRequestData.

        Type of object the CustomField is for.

        :param parent_type: The parent_type of this CustomFieldCreateRequestData.
        :type parent_type: str
        """
        allowed_values = ["Contact", "Matter"]  # noqa: E501
        if parent_type not in allowed_values:
            raise ValueError(
                "Invalid value for `parent_type` ({0}), must be one of {1}"
                .format(parent_type, allowed_values)
            )

        self._parent_type = parent_type

    @property
    def picklist_options(self):
        """Gets the picklist_options of this CustomFieldCreateRequestData.


        :return: The picklist_options of this CustomFieldCreateRequestData.
        :rtype: List[CustomFieldCreateRequestDataPicklistOptionsInner]
        """
        return self._picklist_options

    @picklist_options.setter
    def picklist_options(self, picklist_options):
        """Sets the picklist_options of this CustomFieldCreateRequestData.


        :param picklist_options: The picklist_options of this CustomFieldCreateRequestData.
        :type picklist_options: List[CustomFieldCreateRequestDataPicklistOptionsInner]
        """

        self._picklist_options = picklist_options

    @property
    def required(self):
        """Gets the required of this CustomFieldCreateRequestData.

        Whether or not the CustomField should require a value.

        :return: The required of this CustomFieldCreateRequestData.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this CustomFieldCreateRequestData.

        Whether or not the CustomField should require a value.

        :param required: The required of this CustomFieldCreateRequestData.
        :type required: bool
        """

        self._required = required
