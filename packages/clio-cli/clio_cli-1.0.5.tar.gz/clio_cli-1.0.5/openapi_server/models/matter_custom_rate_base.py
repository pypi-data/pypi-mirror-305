# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MatterCustomRateBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, on_invoice: bool=None):
        """MatterCustomRateBase - a model defined in OpenAPI

        :param type: The type of this MatterCustomRateBase.
        :param on_invoice: The on_invoice of this MatterCustomRateBase.
        """
        self.openapi_types = {
            'type': str,
            'on_invoice': bool
        }

        self.attribute_map = {
            'type': 'type',
            'on_invoice': 'on_invoice'
        }

        self._type = type
        self._on_invoice = on_invoice

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatterCustomRateBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatterCustomRate_base of this MatterCustomRateBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this MatterCustomRateBase.

        The type of the *MatterCustomRate*

        :return: The type of this MatterCustomRateBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MatterCustomRateBase.

        The type of the *MatterCustomRate*

        :param type: The type of this MatterCustomRateBase.
        :type type: str
        """
        allowed_values = ["FlatRate", "HourlyRate", "ContingencyFee"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def on_invoice(self):
        """Gets the on_invoice of this MatterCustomRateBase.

        Specifies if the matter's associated activity is posted or on a bill.

        :return: The on_invoice of this MatterCustomRateBase.
        :rtype: bool
        """
        return self._on_invoice

    @on_invoice.setter
    def on_invoice(self, on_invoice):
        """Sets the on_invoice of this MatterCustomRateBase.

        Specifies if the matter's associated activity is posted or on a bill.

        :param on_invoice: The on_invoice of this MatterCustomRateBase.
        :type on_invoice: bool
        """

        self._on_invoice = on_invoice
