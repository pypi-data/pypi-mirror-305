# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiscountBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rate: float=None, type: str=None, note: str=None, early_payment_rate: int=None, early_payment_period: int=None):
        """DiscountBase - a model defined in OpenAPI

        :param rate: The rate of this DiscountBase.
        :param type: The type of this DiscountBase.
        :param note: The note of this DiscountBase.
        :param early_payment_rate: The early_payment_rate of this DiscountBase.
        :param early_payment_period: The early_payment_period of this DiscountBase.
        """
        self.openapi_types = {
            'rate': float,
            'type': str,
            'note': str,
            'early_payment_rate': int,
            'early_payment_period': int
        }

        self.attribute_map = {
            'rate': 'rate',
            'type': 'type',
            'note': 'note',
            'early_payment_rate': 'early_payment_rate',
            'early_payment_period': 'early_payment_period'
        }

        self._rate = rate
        self._type = type
        self._note = note
        self._early_payment_rate = early_payment_rate
        self._early_payment_period = early_payment_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscountBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Discount_base of this DiscountBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rate(self):
        """Gets the rate of this DiscountBase.

        The rate of the *Discount%*

        :return: The rate of this DiscountBase.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this DiscountBase.

        The rate of the *Discount%*

        :param rate: The rate of this DiscountBase.
        :type rate: float
        """

        self._rate = rate

    @property
    def type(self):
        """Gets the type of this DiscountBase.

        The type of *Discount* being applied in your *Discount* rate.

        :return: The type of this DiscountBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DiscountBase.

        The type of *Discount* being applied in your *Discount* rate.

        :param type: The type of this DiscountBase.
        :type type: str
        """
        allowed_values = ["percentage", "money"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def note(self):
        """Gets the note of this DiscountBase.

        A note for your *Discount*

        :return: The note of this DiscountBase.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this DiscountBase.

        A note for your *Discount*

        :param note: The note of this DiscountBase.
        :type note: str
        """

        self._note = note

    @property
    def early_payment_rate(self):
        """Gets the early_payment_rate of this DiscountBase.

        The % discount that will be applied if your *Discount* is paid within the early payment period.

        :return: The early_payment_rate of this DiscountBase.
        :rtype: int
        """
        return self._early_payment_rate

    @early_payment_rate.setter
    def early_payment_rate(self, early_payment_rate):
        """Sets the early_payment_rate of this DiscountBase.

        The % discount that will be applied if your *Discount* is paid within the early payment period.

        :param early_payment_rate: The early_payment_rate of this DiscountBase.
        :type early_payment_rate: int
        """

        self._early_payment_rate = early_payment_rate

    @property
    def early_payment_period(self):
        """Gets the early_payment_period of this DiscountBase.

        The number of days for your *Discount* period. If your bill is paid within this time, apply your *Discount* rate to the bill.

        :return: The early_payment_period of this DiscountBase.
        :rtype: int
        """
        return self._early_payment_period

    @early_payment_period.setter
    def early_payment_period(self, early_payment_period):
        """Sets the early_payment_period of this DiscountBase.

        The number of days for your *Discount* period. If your bill is paid within this time, apply your *Discount* rate to the bill.

        :param early_payment_period: The early_payment_period of this DiscountBase.
        :type early_payment_period: int
        """

        self._early_payment_period = early_payment_period
