# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebhookUpdateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: List[str]=None, expires_at: datetime=None, fields: str=None, model: str=None, url: str=None):
        """WebhookUpdateRequestData - a model defined in OpenAPI

        :param events: The events of this WebhookUpdateRequestData.
        :param expires_at: The expires_at of this WebhookUpdateRequestData.
        :param fields: The fields of this WebhookUpdateRequestData.
        :param model: The model of this WebhookUpdateRequestData.
        :param url: The url of this WebhookUpdateRequestData.
        """
        self.openapi_types = {
            'events': List[str],
            'expires_at': datetime,
            'fields': str,
            'model': str,
            'url': str
        }

        self.attribute_map = {
            'events': 'events',
            'expires_at': 'expires_at',
            'fields': 'fields',
            'model': 'model',
            'url': 'url'
        }

        self._events = events
        self._expires_at = expires_at
        self._fields = fields
        self._model = model
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookUpdateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Webhook_update_request_data of this WebhookUpdateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this WebhookUpdateRequestData.

        The events your webhook is subscribed to.

        :return: The events of this WebhookUpdateRequestData.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this WebhookUpdateRequestData.

        The events your webhook is subscribed to.

        :param events: The events of this WebhookUpdateRequestData.
        :type events: List[str]
        """
        allowed_values = ["created", "updated", "deleted", "matter_opened", "matter_pended", "matter_closed"]  # noqa: E501
        if not set(events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(events) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events

    @property
    def expires_at(self):
        """Gets the expires_at of this WebhookUpdateRequestData.

        The date and time when the Webhook will expire. (Expects an ISO-8601 timestamp).

        :return: The expires_at of this WebhookUpdateRequestData.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this WebhookUpdateRequestData.

        The date and time when the Webhook will expire. (Expects an ISO-8601 timestamp).

        :param expires_at: The expires_at of this WebhookUpdateRequestData.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def fields(self):
        """Gets the fields of this WebhookUpdateRequestData.

        Fields to be included in the Webhook request.

        :return: The fields of this WebhookUpdateRequestData.
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this WebhookUpdateRequestData.

        Fields to be included in the Webhook request.

        :param fields: The fields of this WebhookUpdateRequestData.
        :type fields: str
        """

        self._fields = fields

    @property
    def model(self):
        """Gets the model of this WebhookUpdateRequestData.

        What model the Webhook is for. This field accepts either [the string identifier of the model or its ID](#section/Supported-Models)

        :return: The model of this WebhookUpdateRequestData.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this WebhookUpdateRequestData.

        What model the Webhook is for. This field accepts either [the string identifier of the model or its ID](#section/Supported-Models)

        :param model: The model of this WebhookUpdateRequestData.
        :type model: str
        """
        allowed_values = ["activity", "bill", "calendar_entry", "clio_payments_payment", "communication", "contact", "document", "folder", "matter", "task"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def url(self):
        """Gets the url of this WebhookUpdateRequestData.

        The URL of where to POST the Webhook. Note that only URLs using the `https` protocol will be accepted.

        :return: The url of this WebhookUpdateRequestData.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookUpdateRequestData.

        The URL of where to POST the Webhook. Note that only URLs using the `https` protocol will be accepted.

        :param url: The url of this WebhookUpdateRequestData.
        :type url: str
        """

        self._url = url
