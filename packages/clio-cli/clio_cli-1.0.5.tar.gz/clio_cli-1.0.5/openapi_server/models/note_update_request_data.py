# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.note_update_request_data_notification_event_subscribers_inner import NoteUpdateRequestDataNotificationEventSubscribersInner
from openapi_server import util


class NoteUpdateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: date=None, detail: str=None, notification_event_subscribers: List[NoteUpdateRequestDataNotificationEventSubscribersInner]=None, subject: str=None):
        """NoteUpdateRequestData - a model defined in OpenAPI

        :param _date: The _date of this NoteUpdateRequestData.
        :param detail: The detail of this NoteUpdateRequestData.
        :param notification_event_subscribers: The notification_event_subscribers of this NoteUpdateRequestData.
        :param subject: The subject of this NoteUpdateRequestData.
        """
        self.openapi_types = {
            '_date': date,
            'detail': str,
            'notification_event_subscribers': List[NoteUpdateRequestDataNotificationEventSubscribersInner],
            'subject': str
        }

        self.attribute_map = {
            '_date': 'date',
            'detail': 'detail',
            'notification_event_subscribers': 'notification_event_subscribers',
            'subject': 'subject'
        }

        self.__date = _date
        self._detail = detail
        self._notification_event_subscribers = notification_event_subscribers
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NoteUpdateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Note_update_request_data of this NoteUpdateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this NoteUpdateRequestData.

        Date for the Note. (Expects an ISO-8601 date).

        :return: The _date of this NoteUpdateRequestData.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this NoteUpdateRequestData.

        Date for the Note. (Expects an ISO-8601 date).

        :param _date: The _date of this NoteUpdateRequestData.
        :type _date: date
        """

        self.__date = _date

    @property
    def detail(self):
        """Gets the detail of this NoteUpdateRequestData.

        Note body.

        :return: The detail of this NoteUpdateRequestData.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this NoteUpdateRequestData.

        Note body.

        :param detail: The detail of this NoteUpdateRequestData.
        :type detail: str
        """

        self._detail = detail

    @property
    def notification_event_subscribers(self):
        """Gets the notification_event_subscribers of this NoteUpdateRequestData.


        :return: The notification_event_subscribers of this NoteUpdateRequestData.
        :rtype: List[NoteUpdateRequestDataNotificationEventSubscribersInner]
        """
        return self._notification_event_subscribers

    @notification_event_subscribers.setter
    def notification_event_subscribers(self, notification_event_subscribers):
        """Sets the notification_event_subscribers of this NoteUpdateRequestData.


        :param notification_event_subscribers: The notification_event_subscribers of this NoteUpdateRequestData.
        :type notification_event_subscribers: List[NoteUpdateRequestDataNotificationEventSubscribersInner]
        """

        self._notification_event_subscribers = notification_event_subscribers

    @property
    def subject(self):
        """Gets the subject of this NoteUpdateRequestData.

        Note subject.

        :return: The subject of this NoteUpdateRequestData.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this NoteUpdateRequestData.

        Note subject.

        :param subject: The subject of this NoteUpdateRequestData.
        :type subject: str
        """

        self._subject = subject
