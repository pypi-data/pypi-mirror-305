# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MatterCreateRequestDataSplitInvoicePayersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: int=None, send_to_bill_recipients: bool=None, split_portion: float=None):
        """MatterCreateRequestDataSplitInvoicePayersInner - a model defined in OpenAPI

        :param contact_id: The contact_id of this MatterCreateRequestDataSplitInvoicePayersInner.
        :param send_to_bill_recipients: The send_to_bill_recipients of this MatterCreateRequestDataSplitInvoicePayersInner.
        :param split_portion: The split_portion of this MatterCreateRequestDataSplitInvoicePayersInner.
        """
        self.openapi_types = {
            'contact_id': int,
            'send_to_bill_recipients': bool,
            'split_portion': float
        }

        self.attribute_map = {
            'contact_id': 'contact_id',
            'send_to_bill_recipients': 'send_to_bill_recipients',
            'split_portion': 'split_portion'
        }

        self._contact_id = contact_id
        self._send_to_bill_recipients = send_to_bill_recipients
        self._split_portion = split_portion

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatterCreateRequestDataSplitInvoicePayersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Matter_create_request_data_split_invoice_payers_inner of this MatterCreateRequestDataSplitInvoicePayersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this MatterCreateRequestDataSplitInvoicePayersInner.

        Contact id for the matter payer.

        :return: The contact_id of this MatterCreateRequestDataSplitInvoicePayersInner.
        :rtype: int
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this MatterCreateRequestDataSplitInvoicePayersInner.

        Contact id for the matter payer.

        :param contact_id: The contact_id of this MatterCreateRequestDataSplitInvoicePayersInner.
        :type contact_id: int
        """
        if contact_id is None:
            raise ValueError("Invalid value for `contact_id`, must not be `None`")

        self._contact_id = contact_id

    @property
    def send_to_bill_recipients(self):
        """Gets the send_to_bill_recipients of this MatterCreateRequestDataSplitInvoicePayersInner.

        Boolean indication to send a split invoice to all bill recipients.

        :return: The send_to_bill_recipients of this MatterCreateRequestDataSplitInvoicePayersInner.
        :rtype: bool
        """
        return self._send_to_bill_recipients

    @send_to_bill_recipients.setter
    def send_to_bill_recipients(self, send_to_bill_recipients):
        """Sets the send_to_bill_recipients of this MatterCreateRequestDataSplitInvoicePayersInner.

        Boolean indication to send a split invoice to all bill recipients.

        :param send_to_bill_recipients: The send_to_bill_recipients of this MatterCreateRequestDataSplitInvoicePayersInner.
        :type send_to_bill_recipients: bool
        """

        self._send_to_bill_recipients = send_to_bill_recipients

    @property
    def split_portion(self):
        """Gets the split_portion of this MatterCreateRequestDataSplitInvoicePayersInner.

        The split portion for the payer.

        :return: The split_portion of this MatterCreateRequestDataSplitInvoicePayersInner.
        :rtype: float
        """
        return self._split_portion

    @split_portion.setter
    def split_portion(self, split_portion):
        """Sets the split_portion of this MatterCreateRequestDataSplitInvoicePayersInner.

        The split portion for the payer.

        :param split_portion: The split_portion of this MatterCreateRequestDataSplitInvoicePayersInner.
        :type split_portion: float
        """
        if split_portion is None:
            raise ValueError("Invalid value for `split_portion`, must not be `None`")

        self._split_portion = split_portion
