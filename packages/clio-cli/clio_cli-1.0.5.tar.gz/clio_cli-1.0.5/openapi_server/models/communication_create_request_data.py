# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.communication_create_request_data_external_properties_inner import CommunicationCreateRequestDataExternalPropertiesInner
from openapi_server.models.communication_create_request_data_matter import CommunicationCreateRequestDataMatter
from openapi_server.models.communication_create_request_data_notification_event_subscribers_inner import CommunicationCreateRequestDataNotificationEventSubscribersInner
from openapi_server.models.communication_create_request_data_receivers_inner import CommunicationCreateRequestDataReceiversInner
from openapi_server.models.communication_create_request_data_senders_inner import CommunicationCreateRequestDataSendersInner
from openapi_server import util


class CommunicationCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, _date: str=None, external_properties: List[CommunicationCreateRequestDataExternalPropertiesInner]=None, matter: CommunicationCreateRequestDataMatter=None, notification_event_subscribers: List[CommunicationCreateRequestDataNotificationEventSubscribersInner]=None, received_at: str=None, receivers: List[CommunicationCreateRequestDataReceiversInner]=None, senders: List[CommunicationCreateRequestDataSendersInner]=None, subject: str=None, type: str=None):
        """CommunicationCreateRequestData - a model defined in OpenAPI

        :param body: The body of this CommunicationCreateRequestData.
        :param _date: The _date of this CommunicationCreateRequestData.
        :param external_properties: The external_properties of this CommunicationCreateRequestData.
        :param matter: The matter of this CommunicationCreateRequestData.
        :param notification_event_subscribers: The notification_event_subscribers of this CommunicationCreateRequestData.
        :param received_at: The received_at of this CommunicationCreateRequestData.
        :param receivers: The receivers of this CommunicationCreateRequestData.
        :param senders: The senders of this CommunicationCreateRequestData.
        :param subject: The subject of this CommunicationCreateRequestData.
        :param type: The type of this CommunicationCreateRequestData.
        """
        self.openapi_types = {
            'body': str,
            '_date': str,
            'external_properties': List[CommunicationCreateRequestDataExternalPropertiesInner],
            'matter': CommunicationCreateRequestDataMatter,
            'notification_event_subscribers': List[CommunicationCreateRequestDataNotificationEventSubscribersInner],
            'received_at': str,
            'receivers': List[CommunicationCreateRequestDataReceiversInner],
            'senders': List[CommunicationCreateRequestDataSendersInner],
            'subject': str,
            'type': str
        }

        self.attribute_map = {
            'body': 'body',
            '_date': 'date',
            'external_properties': 'external_properties',
            'matter': 'matter',
            'notification_event_subscribers': 'notification_event_subscribers',
            'received_at': 'received_at',
            'receivers': 'receivers',
            'senders': 'senders',
            'subject': 'subject',
            'type': 'type'
        }

        self._body = body
        self.__date = _date
        self._external_properties = external_properties
        self._matter = matter
        self._notification_event_subscribers = notification_event_subscribers
        self._received_at = received_at
        self._receivers = receivers
        self._senders = senders
        self._subject = subject
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommunicationCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Communication_create_request_data of this CommunicationCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this CommunicationCreateRequestData.

        The body value.

        :return: The body of this CommunicationCreateRequestData.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CommunicationCreateRequestData.

        The body value.

        :param body: The body of this CommunicationCreateRequestData.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def _date(self):
        """Gets the _date of this CommunicationCreateRequestData.

        The date for the Communication. (Expects an ISO-8601 date.)

        :return: The _date of this CommunicationCreateRequestData.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CommunicationCreateRequestData.

        The date for the Communication. (Expects an ISO-8601 date.)

        :param _date: The _date of this CommunicationCreateRequestData.
        :type _date: str
        """

        self.__date = _date

    @property
    def external_properties(self):
        """Gets the external_properties of this CommunicationCreateRequestData.


        :return: The external_properties of this CommunicationCreateRequestData.
        :rtype: List[CommunicationCreateRequestDataExternalPropertiesInner]
        """
        return self._external_properties

    @external_properties.setter
    def external_properties(self, external_properties):
        """Sets the external_properties of this CommunicationCreateRequestData.


        :param external_properties: The external_properties of this CommunicationCreateRequestData.
        :type external_properties: List[CommunicationCreateRequestDataExternalPropertiesInner]
        """

        self._external_properties = external_properties

    @property
    def matter(self):
        """Gets the matter of this CommunicationCreateRequestData.


        :return: The matter of this CommunicationCreateRequestData.
        :rtype: CommunicationCreateRequestDataMatter
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this CommunicationCreateRequestData.


        :param matter: The matter of this CommunicationCreateRequestData.
        :type matter: CommunicationCreateRequestDataMatter
        """

        self._matter = matter

    @property
    def notification_event_subscribers(self):
        """Gets the notification_event_subscribers of this CommunicationCreateRequestData.


        :return: The notification_event_subscribers of this CommunicationCreateRequestData.
        :rtype: List[CommunicationCreateRequestDataNotificationEventSubscribersInner]
        """
        return self._notification_event_subscribers

    @notification_event_subscribers.setter
    def notification_event_subscribers(self, notification_event_subscribers):
        """Sets the notification_event_subscribers of this CommunicationCreateRequestData.


        :param notification_event_subscribers: The notification_event_subscribers of this CommunicationCreateRequestData.
        :type notification_event_subscribers: List[CommunicationCreateRequestDataNotificationEventSubscribersInner]
        """

        self._notification_event_subscribers = notification_event_subscribers

    @property
    def received_at(self):
        """Gets the received_at of this CommunicationCreateRequestData.

        The date-time for the Communication. (Expects an ISO-8601 date-time.)

        :return: The received_at of this CommunicationCreateRequestData.
        :rtype: str
        """
        return self._received_at

    @received_at.setter
    def received_at(self, received_at):
        """Sets the received_at of this CommunicationCreateRequestData.

        The date-time for the Communication. (Expects an ISO-8601 date-time.)

        :param received_at: The received_at of this CommunicationCreateRequestData.
        :type received_at: str
        """

        self._received_at = received_at

    @property
    def receivers(self):
        """Gets the receivers of this CommunicationCreateRequestData.


        :return: The receivers of this CommunicationCreateRequestData.
        :rtype: List[CommunicationCreateRequestDataReceiversInner]
        """
        return self._receivers

    @receivers.setter
    def receivers(self, receivers):
        """Sets the receivers of this CommunicationCreateRequestData.


        :param receivers: The receivers of this CommunicationCreateRequestData.
        :type receivers: List[CommunicationCreateRequestDataReceiversInner]
        """

        self._receivers = receivers

    @property
    def senders(self):
        """Gets the senders of this CommunicationCreateRequestData.


        :return: The senders of this CommunicationCreateRequestData.
        :rtype: List[CommunicationCreateRequestDataSendersInner]
        """
        return self._senders

    @senders.setter
    def senders(self, senders):
        """Sets the senders of this CommunicationCreateRequestData.


        :param senders: The senders of this CommunicationCreateRequestData.
        :type senders: List[CommunicationCreateRequestDataSendersInner]
        """

        self._senders = senders

    @property
    def subject(self):
        """Gets the subject of this CommunicationCreateRequestData.

        The subject value.

        :return: The subject of this CommunicationCreateRequestData.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CommunicationCreateRequestData.

        The subject value.

        :param subject: The subject of this CommunicationCreateRequestData.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def type(self):
        """Gets the type of this CommunicationCreateRequestData.

        Type of the Communication.

        :return: The type of this CommunicationCreateRequestData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CommunicationCreateRequestData.

        Type of the Communication.

        :param type: The type of this CommunicationCreateRequestData.
        :type type: str
        """
        allowed_values = ["PhoneCommunication", "EmailCommunication"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
