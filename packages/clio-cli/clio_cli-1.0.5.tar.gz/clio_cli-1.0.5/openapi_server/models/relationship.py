# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_base import ContactBase
from openapi_server.models.matter_base import MatterBase
from openapi_server import util


class Relationship(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, description: str=None, created_at: datetime=None, updated_at: datetime=None, matter: MatterBase=None, contact: ContactBase=None):
        """Relationship - a model defined in OpenAPI

        :param id: The id of this Relationship.
        :param etag: The etag of this Relationship.
        :param description: The description of this Relationship.
        :param created_at: The created_at of this Relationship.
        :param updated_at: The updated_at of this Relationship.
        :param matter: The matter of this Relationship.
        :param contact: The contact of this Relationship.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'description': str,
            'created_at': datetime,
            'updated_at': datetime,
            'matter': MatterBase,
            'contact': ContactBase
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'description': 'description',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'matter': 'matter',
            'contact': 'contact'
        }

        self._id = id
        self._etag = etag
        self._description = description
        self._created_at = created_at
        self._updated_at = updated_at
        self._matter = matter
        self._contact = contact

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Relationship':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Relationship of this Relationship.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Relationship.

        Unique identifier for the *Relationship*

        :return: The id of this Relationship.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Relationship.

        Unique identifier for the *Relationship*

        :param id: The id of this Relationship.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this Relationship.

        ETag for the *Relationship*

        :return: The etag of this Relationship.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Relationship.

        ETag for the *Relationship*

        :param etag: The etag of this Relationship.
        :type etag: str
        """

        self._etag = etag

    @property
    def description(self):
        """Gets the description of this Relationship.

        A detailed description of the *Relationship*

        :return: The description of this Relationship.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Relationship.

        A detailed description of the *Relationship*

        :param description: The description of this Relationship.
        :type description: str
        """

        self._description = description

    @property
    def created_at(self):
        """Gets the created_at of this Relationship.

        The time the *Relationship* was created (as a ISO-8601 timestamp)

        :return: The created_at of this Relationship.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Relationship.

        The time the *Relationship* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this Relationship.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Relationship.

        The time the *Relationship* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this Relationship.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Relationship.

        The time the *Relationship* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this Relationship.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def matter(self):
        """Gets the matter of this Relationship.


        :return: The matter of this Relationship.
        :rtype: MatterBase
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this Relationship.


        :param matter: The matter of this Relationship.
        :type matter: MatterBase
        """

        self._matter = matter

    @property
    def contact(self):
        """Gets the contact of this Relationship.


        :return: The contact of this Relationship.
        :rtype: ContactBase
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Relationship.


        :param contact: The contact of this Relationship.
        :type contact: ContactBase
        """

        self._contact = contact
