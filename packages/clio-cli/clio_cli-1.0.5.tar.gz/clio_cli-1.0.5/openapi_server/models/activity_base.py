# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivityBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, type: str=None, _date: date=None, quantity_in_hours: float=None, rounded_quantity_in_hours: float=None, quantity: float=None, rounded_quantity: float=None, quantity_redacted: bool=None, price: float=None, note: str=None, flat_rate: bool=None, billed: bool=None, on_bill: bool=None, total: float=None, contingency_fee: bool=None, created_at: datetime=None, updated_at: datetime=None, reference: str=None, non_billable: bool=None, non_billable_total: float=None, no_charge: bool=None, tax_setting: str=None):
        """ActivityBase - a model defined in OpenAPI

        :param id: The id of this ActivityBase.
        :param etag: The etag of this ActivityBase.
        :param type: The type of this ActivityBase.
        :param _date: The _date of this ActivityBase.
        :param quantity_in_hours: The quantity_in_hours of this ActivityBase.
        :param rounded_quantity_in_hours: The rounded_quantity_in_hours of this ActivityBase.
        :param quantity: The quantity of this ActivityBase.
        :param rounded_quantity: The rounded_quantity of this ActivityBase.
        :param quantity_redacted: The quantity_redacted of this ActivityBase.
        :param price: The price of this ActivityBase.
        :param note: The note of this ActivityBase.
        :param flat_rate: The flat_rate of this ActivityBase.
        :param billed: The billed of this ActivityBase.
        :param on_bill: The on_bill of this ActivityBase.
        :param total: The total of this ActivityBase.
        :param contingency_fee: The contingency_fee of this ActivityBase.
        :param created_at: The created_at of this ActivityBase.
        :param updated_at: The updated_at of this ActivityBase.
        :param reference: The reference of this ActivityBase.
        :param non_billable: The non_billable of this ActivityBase.
        :param non_billable_total: The non_billable_total of this ActivityBase.
        :param no_charge: The no_charge of this ActivityBase.
        :param tax_setting: The tax_setting of this ActivityBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'type': str,
            '_date': date,
            'quantity_in_hours': float,
            'rounded_quantity_in_hours': float,
            'quantity': float,
            'rounded_quantity': float,
            'quantity_redacted': bool,
            'price': float,
            'note': str,
            'flat_rate': bool,
            'billed': bool,
            'on_bill': bool,
            'total': float,
            'contingency_fee': bool,
            'created_at': datetime,
            'updated_at': datetime,
            'reference': str,
            'non_billable': bool,
            'non_billable_total': float,
            'no_charge': bool,
            'tax_setting': str
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'type': 'type',
            '_date': 'date',
            'quantity_in_hours': 'quantity_in_hours',
            'rounded_quantity_in_hours': 'rounded_quantity_in_hours',
            'quantity': 'quantity',
            'rounded_quantity': 'rounded_quantity',
            'quantity_redacted': 'quantity_redacted',
            'price': 'price',
            'note': 'note',
            'flat_rate': 'flat_rate',
            'billed': 'billed',
            'on_bill': 'on_bill',
            'total': 'total',
            'contingency_fee': 'contingency_fee',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'reference': 'reference',
            'non_billable': 'non_billable',
            'non_billable_total': 'non_billable_total',
            'no_charge': 'no_charge',
            'tax_setting': 'tax_setting'
        }

        self._id = id
        self._etag = etag
        self._type = type
        self.__date = _date
        self._quantity_in_hours = quantity_in_hours
        self._rounded_quantity_in_hours = rounded_quantity_in_hours
        self._quantity = quantity
        self._rounded_quantity = rounded_quantity
        self._quantity_redacted = quantity_redacted
        self._price = price
        self._note = note
        self._flat_rate = flat_rate
        self._billed = billed
        self._on_bill = on_bill
        self._total = total
        self._contingency_fee = contingency_fee
        self._created_at = created_at
        self._updated_at = updated_at
        self._reference = reference
        self._non_billable = non_billable
        self._non_billable_total = non_billable_total
        self._no_charge = no_charge
        self._tax_setting = tax_setting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activity_base of this ActivityBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ActivityBase.

        Unique identifier for the *Activity*

        :return: The id of this ActivityBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityBase.

        Unique identifier for the *Activity*

        :param id: The id of this ActivityBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this ActivityBase.

        ETag for the *Activity*

        :return: The etag of this ActivityBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ActivityBase.

        ETag for the *Activity*

        :param etag: The etag of this ActivityBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def type(self):
        """Gets the type of this ActivityBase.

        The type of the *Activity*

        :return: The type of this ActivityBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActivityBase.

        The type of the *Activity*

        :param type: The type of this ActivityBase.
        :type type: str
        """
        allowed_values = ["TimeEntry", "ExpenseEntry", "HardCostEntry", "SoftCostEntry"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def _date(self):
        """Gets the _date of this ActivityBase.

        The date the *Activity* was performed (as a ISO-8601 date)

        :return: The _date of this ActivityBase.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ActivityBase.

        The date the *Activity* was performed (as a ISO-8601 date)

        :param _date: The _date of this ActivityBase.
        :type _date: date
        """

        self.__date = _date

    @property
    def quantity_in_hours(self):
        """Gets the quantity_in_hours of this ActivityBase.

        The number of hours the TimeEntry took.

        :return: The quantity_in_hours of this ActivityBase.
        :rtype: float
        """
        return self._quantity_in_hours

    @quantity_in_hours.setter
    def quantity_in_hours(self, quantity_in_hours):
        """Sets the quantity_in_hours of this ActivityBase.

        The number of hours the TimeEntry took.

        :param quantity_in_hours: The quantity_in_hours of this ActivityBase.
        :type quantity_in_hours: float
        """

        self._quantity_in_hours = quantity_in_hours

    @property
    def rounded_quantity_in_hours(self):
        """Gets the rounded_quantity_in_hours of this ActivityBase.

        The number of hours rounded accordingly to the billing settings. The rounded value is used to calculate the total. 

        :return: The rounded_quantity_in_hours of this ActivityBase.
        :rtype: float
        """
        return self._rounded_quantity_in_hours

    @rounded_quantity_in_hours.setter
    def rounded_quantity_in_hours(self, rounded_quantity_in_hours):
        """Sets the rounded_quantity_in_hours of this ActivityBase.

        The number of hours rounded accordingly to the billing settings. The rounded value is used to calculate the total. 

        :param rounded_quantity_in_hours: The rounded_quantity_in_hours of this ActivityBase.
        :type rounded_quantity_in_hours: float
        """

        self._rounded_quantity_in_hours = rounded_quantity_in_hours

    @property
    def quantity(self):
        """Gets the quantity of this ActivityBase.

        The field is applicable to TimeEntry, ExpenseEntry, and SoftCostEntry.  **Version <= 4.0.3:** The number of hours the TimeEntry took.  **Latest version:** The number of seconds the TimeEntry took. 

        :return: The quantity of this ActivityBase.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ActivityBase.

        The field is applicable to TimeEntry, ExpenseEntry, and SoftCostEntry.  **Version <= 4.0.3:** The number of hours the TimeEntry took.  **Latest version:** The number of seconds the TimeEntry took. 

        :param quantity: The quantity of this ActivityBase.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def rounded_quantity(self):
        """Gets the rounded_quantity of this ActivityBase.

        The field is applicable to time entries only.  **Version <= 4.0.3:** The number of hours rounded accordingly to the billing settings. The rounded value is used to calculate the total.  **Latest version:** The number of seconds rounded accordingly to the billing settings. The rounded value is used to calculate the total. 

        :return: The rounded_quantity of this ActivityBase.
        :rtype: float
        """
        return self._rounded_quantity

    @rounded_quantity.setter
    def rounded_quantity(self, rounded_quantity):
        """Sets the rounded_quantity of this ActivityBase.

        The field is applicable to time entries only.  **Version <= 4.0.3:** The number of hours rounded accordingly to the billing settings. The rounded value is used to calculate the total.  **Latest version:** The number of seconds rounded accordingly to the billing settings. The rounded value is used to calculate the total. 

        :param rounded_quantity: The rounded_quantity of this ActivityBase.
        :type rounded_quantity: float
        """

        self._rounded_quantity = rounded_quantity

    @property
    def quantity_redacted(self):
        """Gets the quantity_redacted of this ActivityBase.

        Is `true` if any of the following fields are redacted: `quantity`, `rounded_quantity`, `rounded_quantity_in_hours`, `quantity_in_hours`, `total`, `non_billable_total` 

        :return: The quantity_redacted of this ActivityBase.
        :rtype: bool
        """
        return self._quantity_redacted

    @quantity_redacted.setter
    def quantity_redacted(self, quantity_redacted):
        """Sets the quantity_redacted of this ActivityBase.

        Is `true` if any of the following fields are redacted: `quantity`, `rounded_quantity`, `rounded_quantity_in_hours`, `quantity_in_hours`, `total`, `non_billable_total` 

        :param quantity_redacted: The quantity_redacted of this ActivityBase.
        :type quantity_redacted: bool
        """

        self._quantity_redacted = quantity_redacted

    @property
    def price(self):
        """Gets the price of this ActivityBase.

        The hourly or flat rate of the *Activity*

        :return: The price of this ActivityBase.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ActivityBase.

        The hourly or flat rate of the *Activity*

        :param price: The price of this ActivityBase.
        :type price: float
        """

        self._price = price

    @property
    def note(self):
        """Gets the note of this ActivityBase.

        The details about the *Activity*

        :return: The note of this ActivityBase.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ActivityBase.

        The details about the *Activity*

        :param note: The note of this ActivityBase.
        :type note: str
        """

        self._note = note

    @property
    def flat_rate(self):
        """Gets the flat_rate of this ActivityBase.

        Whether the *Activity* is a flat rate

        :return: The flat_rate of this ActivityBase.
        :rtype: bool
        """
        return self._flat_rate

    @flat_rate.setter
    def flat_rate(self, flat_rate):
        """Sets the flat_rate of this ActivityBase.

        Whether the *Activity* is a flat rate

        :param flat_rate: The flat_rate of this ActivityBase.
        :type flat_rate: bool
        """

        self._flat_rate = flat_rate

    @property
    def billed(self):
        """Gets the billed of this ActivityBase.

        Whether the *Activity* has been added to an active bill that is in the state of `awaiting_payment` or `paid`

        :return: The billed of this ActivityBase.
        :rtype: bool
        """
        return self._billed

    @billed.setter
    def billed(self, billed):
        """Sets the billed of this ActivityBase.

        Whether the *Activity* has been added to an active bill that is in the state of `awaiting_payment` or `paid`

        :param billed: The billed of this ActivityBase.
        :type billed: bool
        """

        self._billed = billed

    @property
    def on_bill(self):
        """Gets the on_bill of this ActivityBase.

        Whether the *Activity* has been added to an active bill that is in the state of `draft`, `awaiting_approval`, `awaiting_payment` or `paid`

        :return: The on_bill of this ActivityBase.
        :rtype: bool
        """
        return self._on_bill

    @on_bill.setter
    def on_bill(self, on_bill):
        """Sets the on_bill of this ActivityBase.

        Whether the *Activity* has been added to an active bill that is in the state of `draft`, `awaiting_approval`, `awaiting_payment` or `paid`

        :param on_bill: The on_bill of this ActivityBase.
        :type on_bill: bool
        """

        self._on_bill = on_bill

    @property
    def total(self):
        """Gets the total of this ActivityBase.

        The total cost of draft, billable and billed items in the *Activity*

        :return: The total of this ActivityBase.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ActivityBase.

        The total cost of draft, billable and billed items in the *Activity*

        :param total: The total of this ActivityBase.
        :type total: float
        """

        self._total = total

    @property
    def contingency_fee(self):
        """Gets the contingency_fee of this ActivityBase.

        Whether or not the *Activity* is a contingency fee

        :return: The contingency_fee of this ActivityBase.
        :rtype: bool
        """
        return self._contingency_fee

    @contingency_fee.setter
    def contingency_fee(self, contingency_fee):
        """Sets the contingency_fee of this ActivityBase.

        Whether or not the *Activity* is a contingency fee

        :param contingency_fee: The contingency_fee of this ActivityBase.
        :type contingency_fee: bool
        """

        self._contingency_fee = contingency_fee

    @property
    def created_at(self):
        """Gets the created_at of this ActivityBase.

        The time the *Activity* was created (as a ISO-8601 timestamp)

        :return: The created_at of this ActivityBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ActivityBase.

        The time the *Activity* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this ActivityBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ActivityBase.

        The time the *Activity* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this ActivityBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ActivityBase.

        The time the *Activity* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this ActivityBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def reference(self):
        """Gets the reference of this ActivityBase.

        A check reference for a HardCostEntry.

        :return: The reference of this ActivityBase.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ActivityBase.

        A check reference for a HardCostEntry.

        :param reference: The reference of this ActivityBase.
        :type reference: str
        """

        self._reference = reference

    @property
    def non_billable(self):
        """Gets the non_billable of this ActivityBase.

        Whether the *Activity* is non-billable

        :return: The non_billable of this ActivityBase.
        :rtype: bool
        """
        return self._non_billable

    @non_billable.setter
    def non_billable(self, non_billable):
        """Sets the non_billable of this ActivityBase.

        Whether the *Activity* is non-billable

        :param non_billable: The non_billable of this ActivityBase.
        :type non_billable: bool
        """

        self._non_billable = non_billable

    @property
    def non_billable_total(self):
        """Gets the non_billable_total of this ActivityBase.

        The total cost of non-billable items in the *Activity*

        :return: The non_billable_total of this ActivityBase.
        :rtype: float
        """
        return self._non_billable_total

    @non_billable_total.setter
    def non_billable_total(self, non_billable_total):
        """Sets the non_billable_total of this ActivityBase.

        The total cost of non-billable items in the *Activity*

        :param non_billable_total: The non_billable_total of this ActivityBase.
        :type non_billable_total: float
        """

        self._non_billable_total = non_billable_total

    @property
    def no_charge(self):
        """Gets the no_charge of this ActivityBase.

        Whether the non-billable *Activity* is shown on the bill.

        :return: The no_charge of this ActivityBase.
        :rtype: bool
        """
        return self._no_charge

    @no_charge.setter
    def no_charge(self, no_charge):
        """Sets the no_charge of this ActivityBase.

        Whether the non-billable *Activity* is shown on the bill.

        :param no_charge: The no_charge of this ActivityBase.
        :type no_charge: bool
        """

        self._no_charge = no_charge

    @property
    def tax_setting(self):
        """Gets the tax_setting of this ActivityBase.

        The option denoting whether primary tax, secondary tax, or both is applied to an expense entry.

        :return: The tax_setting of this ActivityBase.
        :rtype: str
        """
        return self._tax_setting

    @tax_setting.setter
    def tax_setting(self, tax_setting):
        """Sets the tax_setting of this ActivityBase.

        The option denoting whether primary tax, secondary tax, or both is applied to an expense entry.

        :param tax_setting: The tax_setting of this ActivityBase.
        :type tax_setting: str
        """
        allowed_values = ["no_tax", "tax_1_only", "tax_2_only", "tax_1_and_tax_2"]  # noqa: E501
        if tax_setting not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_setting` ({0}), must be one of {1}"
                .format(tax_setting, allowed_values)
            )

        self._tax_setting = tax_setting
