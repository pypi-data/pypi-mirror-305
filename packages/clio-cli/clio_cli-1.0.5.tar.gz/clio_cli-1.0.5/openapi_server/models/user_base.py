# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_owner: bool=None, clio_connect: bool=None, court_rules_default_attendee: bool=None, created_at: datetime=None, default_calendar_id: int=None, email: str=None, enabled: bool=None, etag: str=None, first_name: str=None, id: int=None, initials: str=None, last_name: str=None, name: str=None, phone_number: str=None, rate: float=None, roles: List[str]=None, subscription_type: str=None, time_zone: str=None, updated_at: datetime=None):
        """UserBase - a model defined in OpenAPI

        :param account_owner: The account_owner of this UserBase.
        :param clio_connect: The clio_connect of this UserBase.
        :param court_rules_default_attendee: The court_rules_default_attendee of this UserBase.
        :param created_at: The created_at of this UserBase.
        :param default_calendar_id: The default_calendar_id of this UserBase.
        :param email: The email of this UserBase.
        :param enabled: The enabled of this UserBase.
        :param etag: The etag of this UserBase.
        :param first_name: The first_name of this UserBase.
        :param id: The id of this UserBase.
        :param initials: The initials of this UserBase.
        :param last_name: The last_name of this UserBase.
        :param name: The name of this UserBase.
        :param phone_number: The phone_number of this UserBase.
        :param rate: The rate of this UserBase.
        :param roles: The roles of this UserBase.
        :param subscription_type: The subscription_type of this UserBase.
        :param time_zone: The time_zone of this UserBase.
        :param updated_at: The updated_at of this UserBase.
        """
        self.openapi_types = {
            'account_owner': bool,
            'clio_connect': bool,
            'court_rules_default_attendee': bool,
            'created_at': datetime,
            'default_calendar_id': int,
            'email': str,
            'enabled': bool,
            'etag': str,
            'first_name': str,
            'id': int,
            'initials': str,
            'last_name': str,
            'name': str,
            'phone_number': str,
            'rate': float,
            'roles': List[str],
            'subscription_type': str,
            'time_zone': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'account_owner': 'account_owner',
            'clio_connect': 'clio_connect',
            'court_rules_default_attendee': 'court_rules_default_attendee',
            'created_at': 'created_at',
            'default_calendar_id': 'default_calendar_id',
            'email': 'email',
            'enabled': 'enabled',
            'etag': 'etag',
            'first_name': 'first_name',
            'id': 'id',
            'initials': 'initials',
            'last_name': 'last_name',
            'name': 'name',
            'phone_number': 'phone_number',
            'rate': 'rate',
            'roles': 'roles',
            'subscription_type': 'subscription_type',
            'time_zone': 'time_zone',
            'updated_at': 'updated_at'
        }

        self._account_owner = account_owner
        self._clio_connect = clio_connect
        self._court_rules_default_attendee = court_rules_default_attendee
        self._created_at = created_at
        self._default_calendar_id = default_calendar_id
        self._email = email
        self._enabled = enabled
        self._etag = etag
        self._first_name = first_name
        self._id = id
        self._initials = initials
        self._last_name = last_name
        self._name = name
        self._phone_number = phone_number
        self._rate = rate
        self._roles = roles
        self._subscription_type = subscription_type
        self._time_zone = time_zone
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User_base of this UserBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_owner(self):
        """Gets the account_owner of this UserBase.

        Whether the *User* is the owner of the account

        :return: The account_owner of this UserBase.
        :rtype: bool
        """
        return self._account_owner

    @account_owner.setter
    def account_owner(self, account_owner):
        """Sets the account_owner of this UserBase.

        Whether the *User* is the owner of the account

        :param account_owner: The account_owner of this UserBase.
        :type account_owner: bool
        """

        self._account_owner = account_owner

    @property
    def clio_connect(self):
        """Gets the clio_connect of this UserBase.

        Whether the *User* is a Clio Connect user

        :return: The clio_connect of this UserBase.
        :rtype: bool
        """
        return self._clio_connect

    @clio_connect.setter
    def clio_connect(self, clio_connect):
        """Sets the clio_connect of this UserBase.

        Whether the *User* is a Clio Connect user

        :param clio_connect: The clio_connect of this UserBase.
        :type clio_connect: bool
        """

        self._clio_connect = clio_connect

    @property
    def court_rules_default_attendee(self):
        """Gets the court_rules_default_attendee of this UserBase.

        Whether the *User* is a default attendee for court rules events

        :return: The court_rules_default_attendee of this UserBase.
        :rtype: bool
        """
        return self._court_rules_default_attendee

    @court_rules_default_attendee.setter
    def court_rules_default_attendee(self, court_rules_default_attendee):
        """Sets the court_rules_default_attendee of this UserBase.

        Whether the *User* is a default attendee for court rules events

        :param court_rules_default_attendee: The court_rules_default_attendee of this UserBase.
        :type court_rules_default_attendee: bool
        """

        self._court_rules_default_attendee = court_rules_default_attendee

    @property
    def created_at(self):
        """Gets the created_at of this UserBase.

        The time the *User* was created (as a ISO-8601 timestamp)

        :return: The created_at of this UserBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserBase.

        The time the *User* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this UserBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def default_calendar_id(self):
        """Gets the default_calendar_id of this UserBase.

        Default calendar id for *User*.

        :return: The default_calendar_id of this UserBase.
        :rtype: int
        """
        return self._default_calendar_id

    @default_calendar_id.setter
    def default_calendar_id(self, default_calendar_id):
        """Sets the default_calendar_id of this UserBase.

        Default calendar id for *User*.

        :param default_calendar_id: The default_calendar_id of this UserBase.
        :type default_calendar_id: int
        """

        self._default_calendar_id = default_calendar_id

    @property
    def email(self):
        """Gets the email of this UserBase.

        The email of the *User*

        :return: The email of this UserBase.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserBase.

        The email of the *User*

        :param email: The email of this UserBase.
        :type email: str
        """

        self._email = email

    @property
    def enabled(self):
        """Gets the enabled of this UserBase.

        Whether the *User* is allowed to log in

        :return: The enabled of this UserBase.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UserBase.

        Whether the *User* is allowed to log in

        :param enabled: The enabled of this UserBase.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def etag(self):
        """Gets the etag of this UserBase.

        ETag for the *User*

        :return: The etag of this UserBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this UserBase.

        ETag for the *User*

        :param etag: The etag of this UserBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def first_name(self):
        """Gets the first_name of this UserBase.

        The first name of the *User*

        :return: The first_name of this UserBase.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserBase.

        The first name of the *User*

        :param first_name: The first_name of this UserBase.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this UserBase.

        Unique identifier for the *User*

        :return: The id of this UserBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserBase.

        Unique identifier for the *User*

        :param id: The id of this UserBase.
        :type id: int
        """

        self._id = id

    @property
    def initials(self):
        """Gets the initials of this UserBase.

        The initials of the *User*

        :return: The initials of this UserBase.
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this UserBase.

        The initials of the *User*

        :param initials: The initials of this UserBase.
        :type initials: str
        """

        self._initials = initials

    @property
    def last_name(self):
        """Gets the last_name of this UserBase.

        The last name of the *User*

        :return: The last_name of this UserBase.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserBase.

        The last name of the *User*

        :param last_name: The last_name of this UserBase.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def name(self):
        """Gets the name of this UserBase.

        The full name of the *User*

        :return: The name of this UserBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserBase.

        The full name of the *User*

        :param name: The name of this UserBase.
        :type name: str
        """

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this UserBase.

        The primary phone number for the *User*.

        :return: The phone_number of this UserBase.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserBase.

        The primary phone number for the *User*.

        :param phone_number: The phone_number of this UserBase.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def rate(self):
        """Gets the rate of this UserBase.

        Default user activity rate for *User*.

        :return: The rate of this UserBase.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this UserBase.

        Default user activity rate for *User*.

        :param rate: The rate of this UserBase.
        :type rate: float
        """

        self._rate = rate

    @property
    def roles(self):
        """Gets the roles of this UserBase.

        An array of roles assigned to this *User*

        :return: The roles of this UserBase.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserBase.

        An array of roles assigned to this *User*

        :param roles: The roles of this UserBase.
        :type roles: List[str]
        """

        self._roles = roles

    @property
    def subscription_type(self):
        """Gets the subscription_type of this UserBase.

        The subscription type of the *User*

        :return: The subscription_type of this UserBase.
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this UserBase.

        The subscription type of the *User*

        :param subscription_type: The subscription_type of this UserBase.
        :type subscription_type: str
        """
        allowed_values = ["Attorney", "NonAttorney"]  # noqa: E501
        if subscription_type not in allowed_values:
            raise ValueError(
                "Invalid value for `subscription_type` ({0}), must be one of {1}"
                .format(subscription_type, allowed_values)
            )

        self._subscription_type = subscription_type

    @property
    def time_zone(self):
        """Gets the time_zone of this UserBase.

        The selected time zone of the *User*

        :return: The time_zone of this UserBase.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this UserBase.

        The selected time zone of the *User*

        :param time_zone: The time_zone of this UserBase.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def updated_at(self):
        """Gets the updated_at of this UserBase.

        The time the *User* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this UserBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserBase.

        The time the *User* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this UserBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
