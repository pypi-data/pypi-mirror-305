# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conversation_update_request_data_matter import ConversationUpdateRequestDataMatter
from openapi_server import util


class ConversationUpdateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, matter: ConversationUpdateRequestDataMatter=None, read: bool=None):
        """ConversationUpdateRequestData - a model defined in OpenAPI

        :param archived: The archived of this ConversationUpdateRequestData.
        :param matter: The matter of this ConversationUpdateRequestData.
        :param read: The read of this ConversationUpdateRequestData.
        """
        self.openapi_types = {
            'archived': bool,
            'matter': ConversationUpdateRequestDataMatter,
            'read': bool
        }

        self.attribute_map = {
            'archived': 'archived',
            'matter': 'matter',
            'read': 'read'
        }

        self._archived = archived
        self._matter = matter
        self._read = read

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationUpdateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conversation_update_request_data of this ConversationUpdateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this ConversationUpdateRequestData.

        Whether or not the Conversation has been archived.

        :return: The archived of this ConversationUpdateRequestData.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ConversationUpdateRequestData.

        Whether or not the Conversation has been archived.

        :param archived: The archived of this ConversationUpdateRequestData.
        :type archived: bool
        """

        self._archived = archived

    @property
    def matter(self):
        """Gets the matter of this ConversationUpdateRequestData.


        :return: The matter of this ConversationUpdateRequestData.
        :rtype: ConversationUpdateRequestDataMatter
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this ConversationUpdateRequestData.


        :param matter: The matter of this ConversationUpdateRequestData.
        :type matter: ConversationUpdateRequestDataMatter
        """

        self._matter = matter

    @property
    def read(self):
        """Gets the read of this ConversationUpdateRequestData.

        Whether or not the Conversation has been read.

        :return: The read of this ConversationUpdateRequestData.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this ConversationUpdateRequestData.

        Whether or not the Conversation has been read.

        :param read: The read of this ConversationUpdateRequestData.
        :type read: bool
        """

        self._read = read
