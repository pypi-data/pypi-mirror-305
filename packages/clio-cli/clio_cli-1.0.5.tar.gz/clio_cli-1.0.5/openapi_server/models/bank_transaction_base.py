# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BankTransactionBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, type: str=None, etag: str=None, created_at: datetime=None, updated_at: datetime=None, bank_account_id: int=None, source: str=None, confirmation: str=None, _date: date=None, amount: float=None, currency: str=None, description: str=None, exchange_rate: float=None, transaction_type: str=None, funds_in: float=None, funds_out: float=None, clio_payments_transaction: bool=None, current_account_balance: float=None, read_only_confirmation: bool=None):
        """BankTransactionBase - a model defined in OpenAPI

        :param id: The id of this BankTransactionBase.
        :param type: The type of this BankTransactionBase.
        :param etag: The etag of this BankTransactionBase.
        :param created_at: The created_at of this BankTransactionBase.
        :param updated_at: The updated_at of this BankTransactionBase.
        :param bank_account_id: The bank_account_id of this BankTransactionBase.
        :param source: The source of this BankTransactionBase.
        :param confirmation: The confirmation of this BankTransactionBase.
        :param _date: The _date of this BankTransactionBase.
        :param amount: The amount of this BankTransactionBase.
        :param currency: The currency of this BankTransactionBase.
        :param description: The description of this BankTransactionBase.
        :param exchange_rate: The exchange_rate of this BankTransactionBase.
        :param transaction_type: The transaction_type of this BankTransactionBase.
        :param funds_in: The funds_in of this BankTransactionBase.
        :param funds_out: The funds_out of this BankTransactionBase.
        :param clio_payments_transaction: The clio_payments_transaction of this BankTransactionBase.
        :param current_account_balance: The current_account_balance of this BankTransactionBase.
        :param read_only_confirmation: The read_only_confirmation of this BankTransactionBase.
        """
        self.openapi_types = {
            'id': int,
            'type': str,
            'etag': str,
            'created_at': datetime,
            'updated_at': datetime,
            'bank_account_id': int,
            'source': str,
            'confirmation': str,
            '_date': date,
            'amount': float,
            'currency': str,
            'description': str,
            'exchange_rate': float,
            'transaction_type': str,
            'funds_in': float,
            'funds_out': float,
            'clio_payments_transaction': bool,
            'current_account_balance': float,
            'read_only_confirmation': bool
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'etag': 'etag',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'bank_account_id': 'bank_account_id',
            'source': 'source',
            'confirmation': 'confirmation',
            '_date': 'date',
            'amount': 'amount',
            'currency': 'currency',
            'description': 'description',
            'exchange_rate': 'exchange_rate',
            'transaction_type': 'transaction_type',
            'funds_in': 'funds_in',
            'funds_out': 'funds_out',
            'clio_payments_transaction': 'clio_payments_transaction',
            'current_account_balance': 'current_account_balance',
            'read_only_confirmation': 'read_only_confirmation'
        }

        self._id = id
        self._type = type
        self._etag = etag
        self._created_at = created_at
        self._updated_at = updated_at
        self._bank_account_id = bank_account_id
        self._source = source
        self._confirmation = confirmation
        self.__date = _date
        self._amount = amount
        self._currency = currency
        self._description = description
        self._exchange_rate = exchange_rate
        self._transaction_type = transaction_type
        self._funds_in = funds_in
        self._funds_out = funds_out
        self._clio_payments_transaction = clio_payments_transaction
        self._current_account_balance = current_account_balance
        self._read_only_confirmation = read_only_confirmation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankTransactionBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankTransaction_base of this BankTransactionBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BankTransactionBase.

        Unique identifier for the *BankTransaction*

        :return: The id of this BankTransactionBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankTransactionBase.

        Unique identifier for the *BankTransaction*

        :param id: The id of this BankTransactionBase.
        :type id: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this BankTransactionBase.

        The type of the *BankTransaction*

        :return: The type of this BankTransactionBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankTransactionBase.

        The type of the *BankTransaction*

        :param type: The type of this BankTransactionBase.
        :type type: str
        """

        self._type = type

    @property
    def etag(self):
        """Gets the etag of this BankTransactionBase.

        ETag for the *BankTransaction*

        :return: The etag of this BankTransactionBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this BankTransactionBase.

        ETag for the *BankTransaction*

        :param etag: The etag of this BankTransactionBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def created_at(self):
        """Gets the created_at of this BankTransactionBase.

        The time the *BankTransaction* was created (as a ISO-8601 timestamp)

        :return: The created_at of this BankTransactionBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BankTransactionBase.

        The time the *BankTransaction* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this BankTransactionBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this BankTransactionBase.

        The time the *BankTransaction* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this BankTransactionBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BankTransactionBase.

        The time the *BankTransaction* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this BankTransactionBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def bank_account_id(self):
        """Gets the bank_account_id of this BankTransactionBase.

        The associated bank account.

        :return: The bank_account_id of this BankTransactionBase.
        :rtype: int
        """
        return self._bank_account_id

    @bank_account_id.setter
    def bank_account_id(self, bank_account_id):
        """Sets the bank_account_id of this BankTransactionBase.

        The associated bank account.

        :param bank_account_id: The bank_account_id of this BankTransactionBase.
        :type bank_account_id: int
        """

        self._bank_account_id = bank_account_id

    @property
    def source(self):
        """Gets the source of this BankTransactionBase.

        Where the transaction came from.

        :return: The source of this BankTransactionBase.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this BankTransactionBase.

        Where the transaction came from.

        :param source: The source of this BankTransactionBase.
        :type source: str
        """

        self._source = source

    @property
    def confirmation(self):
        """Gets the confirmation of this BankTransactionBase.

        The reference code for the transaction.

        :return: The confirmation of this BankTransactionBase.
        :rtype: str
        """
        return self._confirmation

    @confirmation.setter
    def confirmation(self, confirmation):
        """Sets the confirmation of this BankTransactionBase.

        The reference code for the transaction.

        :param confirmation: The confirmation of this BankTransactionBase.
        :type confirmation: str
        """

        self._confirmation = confirmation

    @property
    def _date(self):
        """Gets the _date of this BankTransactionBase.

        The date of the transaction.

        :return: The _date of this BankTransactionBase.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this BankTransactionBase.

        The date of the transaction.

        :param _date: The _date of this BankTransactionBase.
        :type _date: date
        """

        self.__date = _date

    @property
    def amount(self):
        """Gets the amount of this BankTransactionBase.

        The amount of the transaction.

        :return: The amount of this BankTransactionBase.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BankTransactionBase.

        The amount of the transaction.

        :param amount: The amount of this BankTransactionBase.
        :type amount: float
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this BankTransactionBase.

        The currency of the transaction.

        :return: The currency of this BankTransactionBase.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BankTransactionBase.

        The currency of the transaction.

        :param currency: The currency of this BankTransactionBase.
        :type currency: str
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this BankTransactionBase.

        The description of the transaction.

        :return: The description of this BankTransactionBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BankTransactionBase.

        The description of the transaction.

        :param description: The description of this BankTransactionBase.
        :type description: str
        """

        self._description = description

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this BankTransactionBase.

        The exchange rate of the transaction.

        :return: The exchange_rate of this BankTransactionBase.
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this BankTransactionBase.

        The exchange rate of the transaction.

        :param exchange_rate: The exchange_rate of this BankTransactionBase.
        :type exchange_rate: float
        """

        self._exchange_rate = exchange_rate

    @property
    def transaction_type(self):
        """Gets the transaction_type of this BankTransactionBase.

        What kind of transaction.

        :return: The transaction_type of this BankTransactionBase.
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this BankTransactionBase.

        What kind of transaction.

        :param transaction_type: The transaction_type of this BankTransactionBase.
        :type transaction_type: str
        """

        self._transaction_type = transaction_type

    @property
    def funds_in(self):
        """Gets the funds_in of this BankTransactionBase.

        The amount of funds received in this transaction.

        :return: The funds_in of this BankTransactionBase.
        :rtype: float
        """
        return self._funds_in

    @funds_in.setter
    def funds_in(self, funds_in):
        """Sets the funds_in of this BankTransactionBase.

        The amount of funds received in this transaction.

        :param funds_in: The funds_in of this BankTransactionBase.
        :type funds_in: float
        """

        self._funds_in = funds_in

    @property
    def funds_out(self):
        """Gets the funds_out of this BankTransactionBase.

        The amount of funds withdrawn in this transaction.

        :return: The funds_out of this BankTransactionBase.
        :rtype: float
        """
        return self._funds_out

    @funds_out.setter
    def funds_out(self, funds_out):
        """Sets the funds_out of this BankTransactionBase.

        The amount of funds withdrawn in this transaction.

        :param funds_out: The funds_out of this BankTransactionBase.
        :type funds_out: float
        """

        self._funds_out = funds_out

    @property
    def clio_payments_transaction(self):
        """Gets the clio_payments_transaction of this BankTransactionBase.

        Whether the transaction was created through online payments.

        :return: The clio_payments_transaction of this BankTransactionBase.
        :rtype: bool
        """
        return self._clio_payments_transaction

    @clio_payments_transaction.setter
    def clio_payments_transaction(self, clio_payments_transaction):
        """Sets the clio_payments_transaction of this BankTransactionBase.

        Whether the transaction was created through online payments.

        :param clio_payments_transaction: The clio_payments_transaction of this BankTransactionBase.
        :type clio_payments_transaction: bool
        """

        self._clio_payments_transaction = clio_payments_transaction

    @property
    def current_account_balance(self):
        """Gets the current_account_balance of this BankTransactionBase.

        The current account balance.

        :return: The current_account_balance of this BankTransactionBase.
        :rtype: float
        """
        return self._current_account_balance

    @current_account_balance.setter
    def current_account_balance(self, current_account_balance):
        """Sets the current_account_balance of this BankTransactionBase.

        The current account balance.

        :param current_account_balance: The current_account_balance of this BankTransactionBase.
        :type current_account_balance: float
        """

        self._current_account_balance = current_account_balance

    @property
    def read_only_confirmation(self):
        """Gets the read_only_confirmation of this BankTransactionBase.

        Whether the transaction's reference code is read-only.

        :return: The read_only_confirmation of this BankTransactionBase.
        :rtype: bool
        """
        return self._read_only_confirmation

    @read_only_confirmation.setter
    def read_only_confirmation(self, read_only_confirmation):
        """Sets the read_only_confirmation of this BankTransactionBase.

        Whether the transaction's reference code is read-only.

        :param read_only_confirmation: The read_only_confirmation of this BankTransactionBase.
        :type read_only_confirmation: bool
        """

        self._read_only_confirmation = read_only_confirmation
