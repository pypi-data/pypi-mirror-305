# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactCreateRequestDataEmailAddressesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str='Other', address: str=None, default_email: bool=None):
        """ContactCreateRequestDataEmailAddressesInner - a model defined in OpenAPI

        :param name: The name of this ContactCreateRequestDataEmailAddressesInner.
        :param address: The address of this ContactCreateRequestDataEmailAddressesInner.
        :param default_email: The default_email of this ContactCreateRequestDataEmailAddressesInner.
        """
        self.openapi_types = {
            'name': str,
            'address': str,
            'default_email': bool
        }

        self.attribute_map = {
            'name': 'name',
            'address': 'address',
            'default_email': 'default_email'
        }

        self._name = name
        self._address = address
        self._default_email = default_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactCreateRequestDataEmailAddressesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact_create_request_data_email_addresses_inner of this ContactCreateRequestDataEmailAddressesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ContactCreateRequestDataEmailAddressesInner.

        Name of the EmailAddress.

        :return: The name of this ContactCreateRequestDataEmailAddressesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactCreateRequestDataEmailAddressesInner.

        Name of the EmailAddress.

        :param name: The name of this ContactCreateRequestDataEmailAddressesInner.
        :type name: str
        """
        allowed_values = ["Work", "Home", "Other"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def address(self):
        """Gets the address of this ContactCreateRequestDataEmailAddressesInner.

        Email address.

        :return: The address of this ContactCreateRequestDataEmailAddressesInner.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ContactCreateRequestDataEmailAddressesInner.

        Email address.

        :param address: The address of this ContactCreateRequestDataEmailAddressesInner.
        :type address: str
        """

        self._address = address

    @property
    def default_email(self):
        """Gets the default_email of this ContactCreateRequestDataEmailAddressesInner.

        Whether or not the Contact should be the default email for the Contact.

        :return: The default_email of this ContactCreateRequestDataEmailAddressesInner.
        :rtype: bool
        """
        return self._default_email

    @default_email.setter
    def default_email(self, default_email):
        """Sets the default_email of this ContactCreateRequestDataEmailAddressesInner.

        Whether or not the Contact should be the default email for the Contact.

        :param default_email: The default_email of this ContactCreateRequestDataEmailAddressesInner.
        :type default_email: bool
        """

        self._default_email = default_email
