# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, message: str=None, icon: str=None, title: str=None, title_url: str=None, description: str=None, description_url: str=None, primary_detail: str=None, primary_detail_url: str=None, secondary_detail: str=None, secondary_detail_url: str=None, occurred_at: datetime=None, mobile_icon: str=None, subject_type: str=None, subject_id: int=None):
        """Event - a model defined in OpenAPI

        :param id: The id of this Event.
        :param etag: The etag of this Event.
        :param message: The message of this Event.
        :param icon: The icon of this Event.
        :param title: The title of this Event.
        :param title_url: The title_url of this Event.
        :param description: The description of this Event.
        :param description_url: The description_url of this Event.
        :param primary_detail: The primary_detail of this Event.
        :param primary_detail_url: The primary_detail_url of this Event.
        :param secondary_detail: The secondary_detail of this Event.
        :param secondary_detail_url: The secondary_detail_url of this Event.
        :param occurred_at: The occurred_at of this Event.
        :param mobile_icon: The mobile_icon of this Event.
        :param subject_type: The subject_type of this Event.
        :param subject_id: The subject_id of this Event.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'message': str,
            'icon': str,
            'title': str,
            'title_url': str,
            'description': str,
            'description_url': str,
            'primary_detail': str,
            'primary_detail_url': str,
            'secondary_detail': str,
            'secondary_detail_url': str,
            'occurred_at': datetime,
            'mobile_icon': str,
            'subject_type': str,
            'subject_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'message': 'message',
            'icon': 'icon',
            'title': 'title',
            'title_url': 'title_url',
            'description': 'description',
            'description_url': 'description_url',
            'primary_detail': 'primary_detail',
            'primary_detail_url': 'primary_detail_url',
            'secondary_detail': 'secondary_detail',
            'secondary_detail_url': 'secondary_detail_url',
            'occurred_at': 'occurred_at',
            'mobile_icon': 'mobile_icon',
            'subject_type': 'subject_type',
            'subject_id': 'subject_id'
        }

        self._id = id
        self._etag = etag
        self._message = message
        self._icon = icon
        self._title = title
        self._title_url = title_url
        self._description = description
        self._description_url = description_url
        self._primary_detail = primary_detail
        self._primary_detail_url = primary_detail_url
        self._secondary_detail = secondary_detail
        self._secondary_detail_url = secondary_detail_url
        self._occurred_at = occurred_at
        self._mobile_icon = mobile_icon
        self._subject_type = subject_type
        self._subject_id = subject_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Event.

        Unique identifier for the *Event*

        :return: The id of this Event.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.

        Unique identifier for the *Event*

        :param id: The id of this Event.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this Event.

        ETag for the *Event*

        :return: The etag of this Event.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Event.

        ETag for the *Event*

        :param etag: The etag of this Event.
        :type etag: str
        """

        self._etag = etag

    @property
    def message(self):
        """Gets the message of this Event.

        Concise headline message describing the event

        :return: The message of this Event.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Event.

        Concise headline message describing the event

        :param message: The message of this Event.
        :type message: str
        """

        self._message = message

    @property
    def icon(self):
        """Gets the icon of this Event.

        Font Awesome icon to display (without the fa- prefix)

        :return: The icon of this Event.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Event.

        Font Awesome icon to display (without the fa- prefix)

        :param icon: The icon of this Event.
        :type icon: str
        """

        self._icon = icon

    @property
    def title(self):
        """Gets the title of this Event.

        The title or subject of the event (e.g. Matter Number, Document Title)

        :return: The title of this Event.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Event.

        The title or subject of the event (e.g. Matter Number, Document Title)

        :param title: The title of this Event.
        :type title: str
        """

        self._title = title

    @property
    def title_url(self):
        """Gets the title_url of this Event.

        Target URL that will be opened if the user clicks on the event title

        :return: The title_url of this Event.
        :rtype: str
        """
        return self._title_url

    @title_url.setter
    def title_url(self, title_url):
        """Sets the title_url of this Event.

        Target URL that will be opened if the user clicks on the event title

        :param title_url: The title_url of this Event.
        :type title_url: str
        """

        self._title_url = title_url

    @property
    def description(self):
        """Gets the description of this Event.

        Description or additional information about the event (e.g. Matter Description)

        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.

        Description or additional information about the event (e.g. Matter Description)

        :param description: The description of this Event.
        :type description: str
        """

        self._description = description

    @property
    def description_url(self):
        """Gets the description_url of this Event.

        Target URL that will be opened if the user clicks on the event description

        :return: The description_url of this Event.
        :rtype: str
        """
        return self._description_url

    @description_url.setter
    def description_url(self, description_url):
        """Sets the description_url of this Event.

        Target URL that will be opened if the user clicks on the event description

        :param description_url: The description_url of this Event.
        :type description_url: str
        """

        self._description_url = description_url

    @property
    def primary_detail(self):
        """Gets the primary_detail of this Event.

        Optional additional information about the event (e.g. Matter Client, Document Author)

        :return: The primary_detail of this Event.
        :rtype: str
        """
        return self._primary_detail

    @primary_detail.setter
    def primary_detail(self, primary_detail):
        """Sets the primary_detail of this Event.

        Optional additional information about the event (e.g. Matter Client, Document Author)

        :param primary_detail: The primary_detail of this Event.
        :type primary_detail: str
        """

        self._primary_detail = primary_detail

    @property
    def primary_detail_url(self):
        """Gets the primary_detail_url of this Event.

        Target URL that will be opened if the user clicks on the primary detail

        :return: The primary_detail_url of this Event.
        :rtype: str
        """
        return self._primary_detail_url

    @primary_detail_url.setter
    def primary_detail_url(self, primary_detail_url):
        """Sets the primary_detail_url of this Event.

        Target URL that will be opened if the user clicks on the primary detail

        :param primary_detail_url: The primary_detail_url of this Event.
        :type primary_detail_url: str
        """

        self._primary_detail_url = primary_detail_url

    @property
    def secondary_detail(self):
        """Gets the secondary_detail of this Event.

        Optional additional information about the event (e.g. Matter Status, Document Size)

        :return: The secondary_detail of this Event.
        :rtype: str
        """
        return self._secondary_detail

    @secondary_detail.setter
    def secondary_detail(self, secondary_detail):
        """Sets the secondary_detail of this Event.

        Optional additional information about the event (e.g. Matter Status, Document Size)

        :param secondary_detail: The secondary_detail of this Event.
        :type secondary_detail: str
        """

        self._secondary_detail = secondary_detail

    @property
    def secondary_detail_url(self):
        """Gets the secondary_detail_url of this Event.

        Target URL that will be opened if the user clicks on the secondary detail

        :return: The secondary_detail_url of this Event.
        :rtype: str
        """
        return self._secondary_detail_url

    @secondary_detail_url.setter
    def secondary_detail_url(self, secondary_detail_url):
        """Sets the secondary_detail_url of this Event.

        Target URL that will be opened if the user clicks on the secondary detail

        :param secondary_detail_url: The secondary_detail_url of this Event.
        :type secondary_detail_url: str
        """

        self._secondary_detail_url = secondary_detail_url

    @property
    def occurred_at(self):
        """Gets the occurred_at of this Event.

        When the event occurred

        :return: The occurred_at of this Event.
        :rtype: datetime
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this Event.

        When the event occurred

        :param occurred_at: The occurred_at of this Event.
        :type occurred_at: datetime
        """

        self._occurred_at = occurred_at

    @property
    def mobile_icon(self):
        """Gets the mobile_icon of this Event.

        Icon to be displayed in the mobile app

        :return: The mobile_icon of this Event.
        :rtype: str
        """
        return self._mobile_icon

    @mobile_icon.setter
    def mobile_icon(self, mobile_icon):
        """Sets the mobile_icon of this Event.

        Icon to be displayed in the mobile app

        :param mobile_icon: The mobile_icon of this Event.
        :type mobile_icon: str
        """

        self._mobile_icon = mobile_icon

    @property
    def subject_type(self):
        """Gets the subject_type of this Event.

        The type of subject that triggered the notification (e.g. Matter, Document)

        :return: The subject_type of this Event.
        :rtype: str
        """
        return self._subject_type

    @subject_type.setter
    def subject_type(self, subject_type):
        """Sets the subject_type of this Event.

        The type of subject that triggered the notification (e.g. Matter, Document)

        :param subject_type: The subject_type of this Event.
        :type subject_type: str
        """

        self._subject_type = subject_type

    @property
    def subject_id(self):
        """Gets the subject_id of this Event.

        Id of the subject that triggered the notification

        :return: The subject_id of this Event.
        :rtype: int
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this Event.

        Id of the subject that triggered the notification

        :param subject_id: The subject_id of this Event.
        :type subject_id: int
        """

        self._subject_id = subject_id
