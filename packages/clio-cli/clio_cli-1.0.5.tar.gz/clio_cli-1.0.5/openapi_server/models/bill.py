# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_base import AddressBase
from openapi_server.models.balance_base import BalanceBase
from openapi_server.models.bank_account_base import BankAccountBase
from openapi_server.models.bill_base import BillBase
from openapi_server.models.bill_theme_base import BillThemeBase
from openapi_server.models.billing_setting_base import BillingSettingBase
from openapi_server.models.contact_base import ContactBase
from openapi_server.models.currency_base import CurrencyBase
from openapi_server.models.discount_base import DiscountBase
from openapi_server.models.group_base import GroupBase
from openapi_server.models.interest_base import InterestBase
from openapi_server.models.legal_aid_uk_bill_base import LegalAidUkBillBase
from openapi_server.models.matter_balance_base import MatterBalanceBase
from openapi_server.models.matter_base import MatterBase
from openapi_server.models.user_base import UserBase
from openapi_server import util


class Bill(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, number: str=None, issued_at: date=None, created_at: datetime=None, due_at: date=None, tax_rate: float=None, secondary_tax_rate: float=None, updated_at: datetime=None, subject: str=None, purchase_order: str=None, type: str=None, memo: str=None, start_at: date=None, end_at: date=None, balance: float=None, state: str=None, kind: str=None, total: float=None, paid: float=None, paid_at: datetime=None, pending: float=None, due: float=None, discount_services_only: str=None, can_update: bool=None, credits_issued: float=None, shared: bool=None, last_sent_at: datetime=None, services_secondary_tax: float=None, services_sub_total: float=None, services_tax: float=None, services_taxable_sub_total: int=None, services_secondary_taxable_sub_total: int=None, taxable_sub_total: int=None, secondary_taxable_sub_total: int=None, sub_total: float=None, tax_sum: float=None, secondary_tax_sum: float=None, total_tax: float=None, available_state_transitions: str=None, user: UserBase=None, client: ContactBase=None, discount: DiscountBase=None, interest: InterestBase=None, matters: List[MatterBase]=None, group: GroupBase=None, bill_theme: BillThemeBase=None, original_bill: BillBase=None, destination_account: BankAccountBase=None, balances: List[BalanceBase]=None, matter_totals: List[MatterBalanceBase]=None, currency: CurrencyBase=None, billing_setting: BillingSettingBase=None, client_addresses: List[AddressBase]=None, legal_aid_uk_bill: LegalAidUkBillBase=None):
        """Bill - a model defined in OpenAPI

        :param id: The id of this Bill.
        :param etag: The etag of this Bill.
        :param number: The number of this Bill.
        :param issued_at: The issued_at of this Bill.
        :param created_at: The created_at of this Bill.
        :param due_at: The due_at of this Bill.
        :param tax_rate: The tax_rate of this Bill.
        :param secondary_tax_rate: The secondary_tax_rate of this Bill.
        :param updated_at: The updated_at of this Bill.
        :param subject: The subject of this Bill.
        :param purchase_order: The purchase_order of this Bill.
        :param type: The type of this Bill.
        :param memo: The memo of this Bill.
        :param start_at: The start_at of this Bill.
        :param end_at: The end_at of this Bill.
        :param balance: The balance of this Bill.
        :param state: The state of this Bill.
        :param kind: The kind of this Bill.
        :param total: The total of this Bill.
        :param paid: The paid of this Bill.
        :param paid_at: The paid_at of this Bill.
        :param pending: The pending of this Bill.
        :param due: The due of this Bill.
        :param discount_services_only: The discount_services_only of this Bill.
        :param can_update: The can_update of this Bill.
        :param credits_issued: The credits_issued of this Bill.
        :param shared: The shared of this Bill.
        :param last_sent_at: The last_sent_at of this Bill.
        :param services_secondary_tax: The services_secondary_tax of this Bill.
        :param services_sub_total: The services_sub_total of this Bill.
        :param services_tax: The services_tax of this Bill.
        :param services_taxable_sub_total: The services_taxable_sub_total of this Bill.
        :param services_secondary_taxable_sub_total: The services_secondary_taxable_sub_total of this Bill.
        :param taxable_sub_total: The taxable_sub_total of this Bill.
        :param secondary_taxable_sub_total: The secondary_taxable_sub_total of this Bill.
        :param sub_total: The sub_total of this Bill.
        :param tax_sum: The tax_sum of this Bill.
        :param secondary_tax_sum: The secondary_tax_sum of this Bill.
        :param total_tax: The total_tax of this Bill.
        :param available_state_transitions: The available_state_transitions of this Bill.
        :param user: The user of this Bill.
        :param client: The client of this Bill.
        :param discount: The discount of this Bill.
        :param interest: The interest of this Bill.
        :param matters: The matters of this Bill.
        :param group: The group of this Bill.
        :param bill_theme: The bill_theme of this Bill.
        :param original_bill: The original_bill of this Bill.
        :param destination_account: The destination_account of this Bill.
        :param balances: The balances of this Bill.
        :param matter_totals: The matter_totals of this Bill.
        :param currency: The currency of this Bill.
        :param billing_setting: The billing_setting of this Bill.
        :param client_addresses: The client_addresses of this Bill.
        :param legal_aid_uk_bill: The legal_aid_uk_bill of this Bill.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'number': str,
            'issued_at': date,
            'created_at': datetime,
            'due_at': date,
            'tax_rate': float,
            'secondary_tax_rate': float,
            'updated_at': datetime,
            'subject': str,
            'purchase_order': str,
            'type': str,
            'memo': str,
            'start_at': date,
            'end_at': date,
            'balance': float,
            'state': str,
            'kind': str,
            'total': float,
            'paid': float,
            'paid_at': datetime,
            'pending': float,
            'due': float,
            'discount_services_only': str,
            'can_update': bool,
            'credits_issued': float,
            'shared': bool,
            'last_sent_at': datetime,
            'services_secondary_tax': float,
            'services_sub_total': float,
            'services_tax': float,
            'services_taxable_sub_total': int,
            'services_secondary_taxable_sub_total': int,
            'taxable_sub_total': int,
            'secondary_taxable_sub_total': int,
            'sub_total': float,
            'tax_sum': float,
            'secondary_tax_sum': float,
            'total_tax': float,
            'available_state_transitions': str,
            'user': UserBase,
            'client': ContactBase,
            'discount': DiscountBase,
            'interest': InterestBase,
            'matters': List[MatterBase],
            'group': GroupBase,
            'bill_theme': BillThemeBase,
            'original_bill': BillBase,
            'destination_account': BankAccountBase,
            'balances': List[BalanceBase],
            'matter_totals': List[MatterBalanceBase],
            'currency': CurrencyBase,
            'billing_setting': BillingSettingBase,
            'client_addresses': List[AddressBase],
            'legal_aid_uk_bill': LegalAidUkBillBase
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'number': 'number',
            'issued_at': 'issued_at',
            'created_at': 'created_at',
            'due_at': 'due_at',
            'tax_rate': 'tax_rate',
            'secondary_tax_rate': 'secondary_tax_rate',
            'updated_at': 'updated_at',
            'subject': 'subject',
            'purchase_order': 'purchase_order',
            'type': 'type',
            'memo': 'memo',
            'start_at': 'start_at',
            'end_at': 'end_at',
            'balance': 'balance',
            'state': 'state',
            'kind': 'kind',
            'total': 'total',
            'paid': 'paid',
            'paid_at': 'paid_at',
            'pending': 'pending',
            'due': 'due',
            'discount_services_only': 'discount_services_only',
            'can_update': 'can_update',
            'credits_issued': 'credits_issued',
            'shared': 'shared',
            'last_sent_at': 'last_sent_at',
            'services_secondary_tax': 'services_secondary_tax',
            'services_sub_total': 'services_sub_total',
            'services_tax': 'services_tax',
            'services_taxable_sub_total': 'services_taxable_sub_total',
            'services_secondary_taxable_sub_total': 'services_secondary_taxable_sub_total',
            'taxable_sub_total': 'taxable_sub_total',
            'secondary_taxable_sub_total': 'secondary_taxable_sub_total',
            'sub_total': 'sub_total',
            'tax_sum': 'tax_sum',
            'secondary_tax_sum': 'secondary_tax_sum',
            'total_tax': 'total_tax',
            'available_state_transitions': 'available_state_transitions',
            'user': 'user',
            'client': 'client',
            'discount': 'discount',
            'interest': 'interest',
            'matters': 'matters',
            'group': 'group',
            'bill_theme': 'bill_theme',
            'original_bill': 'original_bill',
            'destination_account': 'destination_account',
            'balances': 'balances',
            'matter_totals': 'matter_totals',
            'currency': 'currency',
            'billing_setting': 'billing_setting',
            'client_addresses': 'client_addresses',
            'legal_aid_uk_bill': 'legal_aid_uk_bill'
        }

        self._id = id
        self._etag = etag
        self._number = number
        self._issued_at = issued_at
        self._created_at = created_at
        self._due_at = due_at
        self._tax_rate = tax_rate
        self._secondary_tax_rate = secondary_tax_rate
        self._updated_at = updated_at
        self._subject = subject
        self._purchase_order = purchase_order
        self._type = type
        self._memo = memo
        self._start_at = start_at
        self._end_at = end_at
        self._balance = balance
        self._state = state
        self._kind = kind
        self._total = total
        self._paid = paid
        self._paid_at = paid_at
        self._pending = pending
        self._due = due
        self._discount_services_only = discount_services_only
        self._can_update = can_update
        self._credits_issued = credits_issued
        self._shared = shared
        self._last_sent_at = last_sent_at
        self._services_secondary_tax = services_secondary_tax
        self._services_sub_total = services_sub_total
        self._services_tax = services_tax
        self._services_taxable_sub_total = services_taxable_sub_total
        self._services_secondary_taxable_sub_total = services_secondary_taxable_sub_total
        self._taxable_sub_total = taxable_sub_total
        self._secondary_taxable_sub_total = secondary_taxable_sub_total
        self._sub_total = sub_total
        self._tax_sum = tax_sum
        self._secondary_tax_sum = secondary_tax_sum
        self._total_tax = total_tax
        self._available_state_transitions = available_state_transitions
        self._user = user
        self._client = client
        self._discount = discount
        self._interest = interest
        self._matters = matters
        self._group = group
        self._bill_theme = bill_theme
        self._original_bill = original_bill
        self._destination_account = destination_account
        self._balances = balances
        self._matter_totals = matter_totals
        self._currency = currency
        self._billing_setting = billing_setting
        self._client_addresses = client_addresses
        self._legal_aid_uk_bill = legal_aid_uk_bill

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Bill':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bill of this Bill.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Bill.

        Unique identifier for the *Bill*

        :return: The id of this Bill.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Bill.

        Unique identifier for the *Bill*

        :param id: The id of this Bill.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this Bill.

        ETag for the *Bill*

        :return: The etag of this Bill.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Bill.

        ETag for the *Bill*

        :param etag: The etag of this Bill.
        :type etag: str
        """

        self._etag = etag

    @property
    def number(self):
        """Gets the number of this Bill.

        The *Bill* identifier (not necessarily numeric)'

        :return: The number of this Bill.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Bill.

        The *Bill* identifier (not necessarily numeric)'

        :param number: The number of this Bill.
        :type number: str
        """

        self._number = number

    @property
    def issued_at(self):
        """Gets the issued_at of this Bill.

        The time the *Bill* was issued (as a ISO-8601 date)

        :return: The issued_at of this Bill.
        :rtype: date
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at):
        """Sets the issued_at of this Bill.

        The time the *Bill* was issued (as a ISO-8601 date)

        :param issued_at: The issued_at of this Bill.
        :type issued_at: date
        """

        self._issued_at = issued_at

    @property
    def created_at(self):
        """Gets the created_at of this Bill.

        The time the *Bill* was created (as a ISO-8601 timestamp)

        :return: The created_at of this Bill.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Bill.

        The time the *Bill* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this Bill.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def due_at(self):
        """Gets the due_at of this Bill.

        The date the *Bill* is due (as a ISO-8601 date)

        :return: The due_at of this Bill.
        :rtype: date
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this Bill.

        The date the *Bill* is due (as a ISO-8601 date)

        :param due_at: The due_at of this Bill.
        :type due_at: date
        """

        self._due_at = due_at

    @property
    def tax_rate(self):
        """Gets the tax_rate of this Bill.

        The tax rate to the *Bill*

        :return: The tax_rate of this Bill.
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this Bill.

        The tax rate to the *Bill*

        :param tax_rate: The tax_rate of this Bill.
        :type tax_rate: float
        """

        self._tax_rate = tax_rate

    @property
    def secondary_tax_rate(self):
        """Gets the secondary_tax_rate of this Bill.

        A secondary tax rate applied to the *Bill*

        :return: The secondary_tax_rate of this Bill.
        :rtype: float
        """
        return self._secondary_tax_rate

    @secondary_tax_rate.setter
    def secondary_tax_rate(self, secondary_tax_rate):
        """Sets the secondary_tax_rate of this Bill.

        A secondary tax rate applied to the *Bill*

        :param secondary_tax_rate: The secondary_tax_rate of this Bill.
        :type secondary_tax_rate: float
        """

        self._secondary_tax_rate = secondary_tax_rate

    @property
    def updated_at(self):
        """Gets the updated_at of this Bill.

        The time the *Bill* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this Bill.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Bill.

        The time the *Bill* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this Bill.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def subject(self):
        """Gets the subject of this Bill.

        The subject of the *Bill*

        :return: The subject of this Bill.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Bill.

        The subject of the *Bill*

        :param subject: The subject of this Bill.
        :type subject: str
        """

        self._subject = subject

    @property
    def purchase_order(self):
        """Gets the purchase_order of this Bill.

        The purchase order of the *Bill*

        :return: The purchase_order of this Bill.
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this Bill.

        The purchase order of the *Bill*

        :param purchase_order: The purchase_order of this Bill.
        :type purchase_order: str
        """

        self._purchase_order = purchase_order

    @property
    def type(self):
        """Gets the type of this Bill.

        The type of the *Bill*

        :return: The type of this Bill.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Bill.

        The type of the *Bill*

        :param type: The type of this Bill.
        :type type: str
        """
        allowed_values = ["MatterBill", "ClientBill"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def memo(self):
        """Gets the memo of this Bill.

        A memo for the *Bill*

        :return: The memo of this Bill.
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this Bill.

        A memo for the *Bill*

        :param memo: The memo of this Bill.
        :type memo: str
        """

        self._memo = memo

    @property
    def start_at(self):
        """Gets the start_at of this Bill.

        The time the billing period starts (as a ISO-8601 date)

        :return: The start_at of this Bill.
        :rtype: date
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this Bill.

        The time the billing period starts (as a ISO-8601 date)

        :param start_at: The start_at of this Bill.
        :type start_at: date
        """

        self._start_at = start_at

    @property
    def end_at(self):
        """Gets the end_at of this Bill.

        The time the billing period ends (as a ISO-8601 date)

        :return: The end_at of this Bill.
        :rtype: date
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this Bill.

        The time the billing period ends (as a ISO-8601 date)

        :param end_at: The end_at of this Bill.
        :type end_at: date
        """

        self._end_at = end_at

    @property
    def balance(self):
        """Gets the balance of this Bill.

        The outstanding balance of the *Bill*

        :return: The balance of this Bill.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Bill.

        The outstanding balance of the *Bill*

        :param balance: The balance of this Bill.
        :type balance: float
        """

        self._balance = balance

    @property
    def state(self):
        """Gets the state of this Bill.

        The billing state the *Bill* is in

        :return: The state of this Bill.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Bill.

        The billing state the *Bill* is in

        :param state: The state of this Bill.
        :type state: str
        """
        allowed_values = ["draft", "awaiting_approval", "awaiting_payment", "paid", "void", "deleted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def kind(self):
        """Gets the kind of this Bill.

        The kind of the *Bill*

        :return: The kind of this Bill.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Bill.

        The kind of the *Bill*

        :param kind: The kind of this Bill.
        :type kind: str
        """
        allowed_values = ["revenue_kind", "summary_kind", "trust_kind", "aggregate_all", "aggregate_split", "aggregate_services", "aggregate_expenses"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def total(self):
        """Gets the total of this Bill.

        The total with interest of the *Bill*

        :return: The total of this Bill.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Bill.

        The total with interest of the *Bill*

        :param total: The total of this Bill.
        :type total: float
        """

        self._total = total

    @property
    def paid(self):
        """Gets the paid of this Bill.

        The total amount paid for the *Bill*

        :return: The paid of this Bill.
        :rtype: float
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this Bill.

        The total amount paid for the *Bill*

        :param paid: The paid of this Bill.
        :type paid: float
        """

        self._paid = paid

    @property
    def paid_at(self):
        """Gets the paid_at of this Bill.

        The date of the last payment on the *Bill*

        :return: The paid_at of this Bill.
        :rtype: datetime
        """
        return self._paid_at

    @paid_at.setter
    def paid_at(self, paid_at):
        """Sets the paid_at of this Bill.

        The date of the last payment on the *Bill*

        :param paid_at: The paid_at of this Bill.
        :type paid_at: datetime
        """

        self._paid_at = paid_at

    @property
    def pending(self):
        """Gets the pending of this Bill.

        The amount of pending credit card payments on the *Bill*

        :return: The pending of this Bill.
        :rtype: float
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this Bill.

        The amount of pending credit card payments on the *Bill*

        :param pending: The pending of this Bill.
        :type pending: float
        """

        self._pending = pending

    @property
    def due(self):
        """Gets the due of this Bill.

        The total amount of the *Bill* with interest and less discounts

        :return: The due of this Bill.
        :rtype: float
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this Bill.

        The total amount of the *Bill* with interest and less discounts

        :param due: The due of this Bill.
        :type due: float
        """

        self._due = due

    @property
    def discount_services_only(self):
        """Gets the discount_services_only of this Bill.

        The selected discount is applied to services only.

        :return: The discount_services_only of this Bill.
        :rtype: str
        """
        return self._discount_services_only

    @discount_services_only.setter
    def discount_services_only(self, discount_services_only):
        """Sets the discount_services_only of this Bill.

        The selected discount is applied to services only.

        :param discount_services_only: The discount_services_only of this Bill.
        :type discount_services_only: str
        """

        self._discount_services_only = discount_services_only

    @property
    def can_update(self):
        """Gets the can_update of this Bill.

        This value indicates if your *Bill*'s line items and information can be updated.

        :return: The can_update of this Bill.
        :rtype: bool
        """
        return self._can_update

    @can_update.setter
    def can_update(self, can_update):
        """Sets the can_update of this Bill.

        This value indicates if your *Bill*'s line items and information can be updated.

        :param can_update: The can_update of this Bill.
        :type can_update: bool
        """

        self._can_update = can_update

    @property
    def credits_issued(self):
        """Gets the credits_issued of this Bill.

        The total credits issued for the *Bill*

        :return: The credits_issued of this Bill.
        :rtype: float
        """
        return self._credits_issued

    @credits_issued.setter
    def credits_issued(self, credits_issued):
        """Sets the credits_issued of this Bill.

        The total credits issued for the *Bill*

        :param credits_issued: The credits_issued of this Bill.
        :type credits_issued: float
        """

        self._credits_issued = credits_issued

    @property
    def shared(self):
        """Gets the shared of this Bill.

        Whether the *Bill* is a shared

        :return: The shared of this Bill.
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this Bill.

        Whether the *Bill* is a shared

        :param shared: The shared of this Bill.
        :type shared: bool
        """

        self._shared = shared

    @property
    def last_sent_at(self):
        """Gets the last_sent_at of this Bill.

        The last time the *Bill* was sent (as a ISO-8601 date)

        :return: The last_sent_at of this Bill.
        :rtype: datetime
        """
        return self._last_sent_at

    @last_sent_at.setter
    def last_sent_at(self, last_sent_at):
        """Sets the last_sent_at of this Bill.

        The last time the *Bill* was sent (as a ISO-8601 date)

        :param last_sent_at: The last_sent_at of this Bill.
        :type last_sent_at: datetime
        """

        self._last_sent_at = last_sent_at

    @property
    def services_secondary_tax(self):
        """Gets the services_secondary_tax of this Bill.

        The total secondary tax of the bill's line items of a service kind

        :return: The services_secondary_tax of this Bill.
        :rtype: float
        """
        return self._services_secondary_tax

    @services_secondary_tax.setter
    def services_secondary_tax(self, services_secondary_tax):
        """Sets the services_secondary_tax of this Bill.

        The total secondary tax of the bill's line items of a service kind

        :param services_secondary_tax: The services_secondary_tax of this Bill.
        :type services_secondary_tax: float
        """

        self._services_secondary_tax = services_secondary_tax

    @property
    def services_sub_total(self):
        """Gets the services_sub_total of this Bill.

        The sub total of all the bill's line items of a service kind

        :return: The services_sub_total of this Bill.
        :rtype: float
        """
        return self._services_sub_total

    @services_sub_total.setter
    def services_sub_total(self, services_sub_total):
        """Sets the services_sub_total of this Bill.

        The sub total of all the bill's line items of a service kind

        :param services_sub_total: The services_sub_total of this Bill.
        :type services_sub_total: float
        """

        self._services_sub_total = services_sub_total

    @property
    def services_tax(self):
        """Gets the services_tax of this Bill.

        The total tax of the bill's line items of a service kind

        :return: The services_tax of this Bill.
        :rtype: float
        """
        return self._services_tax

    @services_tax.setter
    def services_tax(self, services_tax):
        """Sets the services_tax of this Bill.

        The total tax of the bill's line items of a service kind

        :param services_tax: The services_tax of this Bill.
        :type services_tax: float
        """

        self._services_tax = services_tax

    @property
    def services_taxable_sub_total(self):
        """Gets the services_taxable_sub_total of this Bill.

        The services portion of the bill's primary tax

        :return: The services_taxable_sub_total of this Bill.
        :rtype: int
        """
        return self._services_taxable_sub_total

    @services_taxable_sub_total.setter
    def services_taxable_sub_total(self, services_taxable_sub_total):
        """Sets the services_taxable_sub_total of this Bill.

        The services portion of the bill's primary tax

        :param services_taxable_sub_total: The services_taxable_sub_total of this Bill.
        :type services_taxable_sub_total: int
        """

        self._services_taxable_sub_total = services_taxable_sub_total

    @property
    def services_secondary_taxable_sub_total(self):
        """Gets the services_secondary_taxable_sub_total of this Bill.

        The services portion of the bill's secondary tax

        :return: The services_secondary_taxable_sub_total of this Bill.
        :rtype: int
        """
        return self._services_secondary_taxable_sub_total

    @services_secondary_taxable_sub_total.setter
    def services_secondary_taxable_sub_total(self, services_secondary_taxable_sub_total):
        """Sets the services_secondary_taxable_sub_total of this Bill.

        The services portion of the bill's secondary tax

        :param services_secondary_taxable_sub_total: The services_secondary_taxable_sub_total of this Bill.
        :type services_secondary_taxable_sub_total: int
        """

        self._services_secondary_taxable_sub_total = services_secondary_taxable_sub_total

    @property
    def taxable_sub_total(self):
        """Gets the taxable_sub_total of this Bill.

        The total taxable bill amount

        :return: The taxable_sub_total of this Bill.
        :rtype: int
        """
        return self._taxable_sub_total

    @taxable_sub_total.setter
    def taxable_sub_total(self, taxable_sub_total):
        """Sets the taxable_sub_total of this Bill.

        The total taxable bill amount

        :param taxable_sub_total: The taxable_sub_total of this Bill.
        :type taxable_sub_total: int
        """

        self._taxable_sub_total = taxable_sub_total

    @property
    def secondary_taxable_sub_total(self):
        """Gets the secondary_taxable_sub_total of this Bill.

        The subtotal of the bill's secondary tax

        :return: The secondary_taxable_sub_total of this Bill.
        :rtype: int
        """
        return self._secondary_taxable_sub_total

    @secondary_taxable_sub_total.setter
    def secondary_taxable_sub_total(self, secondary_taxable_sub_total):
        """Sets the secondary_taxable_sub_total of this Bill.

        The subtotal of the bill's secondary tax

        :param secondary_taxable_sub_total: The secondary_taxable_sub_total of this Bill.
        :type secondary_taxable_sub_total: int
        """

        self._secondary_taxable_sub_total = secondary_taxable_sub_total

    @property
    def sub_total(self):
        """Gets the sub_total of this Bill.

        Sub total for the *Bill*

        :return: The sub_total of this Bill.
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this Bill.

        Sub total for the *Bill*

        :param sub_total: The sub_total of this Bill.
        :type sub_total: float
        """

        self._sub_total = sub_total

    @property
    def tax_sum(self):
        """Gets the tax_sum of this Bill.

        Sum of primary tax for the model

        :return: The tax_sum of this Bill.
        :rtype: float
        """
        return self._tax_sum

    @tax_sum.setter
    def tax_sum(self, tax_sum):
        """Sets the tax_sum of this Bill.

        Sum of primary tax for the model

        :param tax_sum: The tax_sum of this Bill.
        :type tax_sum: float
        """

        self._tax_sum = tax_sum

    @property
    def secondary_tax_sum(self):
        """Gets the secondary_tax_sum of this Bill.

        Sum of secondary tax for the model

        :return: The secondary_tax_sum of this Bill.
        :rtype: float
        """
        return self._secondary_tax_sum

    @secondary_tax_sum.setter
    def secondary_tax_sum(self, secondary_tax_sum):
        """Sets the secondary_tax_sum of this Bill.

        Sum of secondary tax for the model

        :param secondary_tax_sum: The secondary_tax_sum of this Bill.
        :type secondary_tax_sum: float
        """

        self._secondary_tax_sum = secondary_tax_sum

    @property
    def total_tax(self):
        """Gets the total_tax of this Bill.

        The total amount of tax for the bill.

        :return: The total_tax of this Bill.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this Bill.

        The total amount of tax for the bill.

        :param total_tax: The total_tax of this Bill.
        :type total_tax: float
        """

        self._total_tax = total_tax

    @property
    def available_state_transitions(self):
        """Gets the available_state_transitions of this Bill.

        The available *Bill* state transitions.

        :return: The available_state_transitions of this Bill.
        :rtype: str
        """
        return self._available_state_transitions

    @available_state_transitions.setter
    def available_state_transitions(self, available_state_transitions):
        """Sets the available_state_transitions of this Bill.

        The available *Bill* state transitions.

        :param available_state_transitions: The available_state_transitions of this Bill.
        :type available_state_transitions: str
        """
        allowed_values = ["awaiting_approval", "awaiting_payment", "paid", "void", "deleted"]  # noqa: E501
        if available_state_transitions not in allowed_values:
            raise ValueError(
                "Invalid value for `available_state_transitions` ({0}), must be one of {1}"
                .format(available_state_transitions, allowed_values)
            )

        self._available_state_transitions = available_state_transitions

    @property
    def user(self):
        """Gets the user of this Bill.


        :return: The user of this Bill.
        :rtype: UserBase
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Bill.


        :param user: The user of this Bill.
        :type user: UserBase
        """

        self._user = user

    @property
    def client(self):
        """Gets the client of this Bill.


        :return: The client of this Bill.
        :rtype: ContactBase
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Bill.


        :param client: The client of this Bill.
        :type client: ContactBase
        """

        self._client = client

    @property
    def discount(self):
        """Gets the discount of this Bill.


        :return: The discount of this Bill.
        :rtype: DiscountBase
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this Bill.


        :param discount: The discount of this Bill.
        :type discount: DiscountBase
        """

        self._discount = discount

    @property
    def interest(self):
        """Gets the interest of this Bill.


        :return: The interest of this Bill.
        :rtype: InterestBase
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this Bill.


        :param interest: The interest of this Bill.
        :type interest: InterestBase
        """

        self._interest = interest

    @property
    def matters(self):
        """Gets the matters of this Bill.

        Matter

        :return: The matters of this Bill.
        :rtype: List[MatterBase]
        """
        return self._matters

    @matters.setter
    def matters(self, matters):
        """Sets the matters of this Bill.

        Matter

        :param matters: The matters of this Bill.
        :type matters: List[MatterBase]
        """

        self._matters = matters

    @property
    def group(self):
        """Gets the group of this Bill.


        :return: The group of this Bill.
        :rtype: GroupBase
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Bill.


        :param group: The group of this Bill.
        :type group: GroupBase
        """

        self._group = group

    @property
    def bill_theme(self):
        """Gets the bill_theme of this Bill.


        :return: The bill_theme of this Bill.
        :rtype: BillThemeBase
        """
        return self._bill_theme

    @bill_theme.setter
    def bill_theme(self, bill_theme):
        """Sets the bill_theme of this Bill.


        :param bill_theme: The bill_theme of this Bill.
        :type bill_theme: BillThemeBase
        """

        self._bill_theme = bill_theme

    @property
    def original_bill(self):
        """Gets the original_bill of this Bill.


        :return: The original_bill of this Bill.
        :rtype: BillBase
        """
        return self._original_bill

    @original_bill.setter
    def original_bill(self, original_bill):
        """Sets the original_bill of this Bill.


        :param original_bill: The original_bill of this Bill.
        :type original_bill: BillBase
        """

        self._original_bill = original_bill

    @property
    def destination_account(self):
        """Gets the destination_account of this Bill.


        :return: The destination_account of this Bill.
        :rtype: BankAccountBase
        """
        return self._destination_account

    @destination_account.setter
    def destination_account(self, destination_account):
        """Sets the destination_account of this Bill.


        :param destination_account: The destination_account of this Bill.
        :type destination_account: BankAccountBase
        """

        self._destination_account = destination_account

    @property
    def balances(self):
        """Gets the balances of this Bill.

        Balance

        :return: The balances of this Bill.
        :rtype: List[BalanceBase]
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this Bill.

        Balance

        :param balances: The balances of this Bill.
        :type balances: List[BalanceBase]
        """

        self._balances = balances

    @property
    def matter_totals(self):
        """Gets the matter_totals of this Bill.

        MatterBalance

        :return: The matter_totals of this Bill.
        :rtype: List[MatterBalanceBase]
        """
        return self._matter_totals

    @matter_totals.setter
    def matter_totals(self, matter_totals):
        """Sets the matter_totals of this Bill.

        MatterBalance

        :param matter_totals: The matter_totals of this Bill.
        :type matter_totals: List[MatterBalanceBase]
        """

        self._matter_totals = matter_totals

    @property
    def currency(self):
        """Gets the currency of this Bill.


        :return: The currency of this Bill.
        :rtype: CurrencyBase
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Bill.


        :param currency: The currency of this Bill.
        :type currency: CurrencyBase
        """

        self._currency = currency

    @property
    def billing_setting(self):
        """Gets the billing_setting of this Bill.


        :return: The billing_setting of this Bill.
        :rtype: BillingSettingBase
        """
        return self._billing_setting

    @billing_setting.setter
    def billing_setting(self, billing_setting):
        """Sets the billing_setting of this Bill.


        :param billing_setting: The billing_setting of this Bill.
        :type billing_setting: BillingSettingBase
        """

        self._billing_setting = billing_setting

    @property
    def client_addresses(self):
        """Gets the client_addresses of this Bill.

        Address

        :return: The client_addresses of this Bill.
        :rtype: List[AddressBase]
        """
        return self._client_addresses

    @client_addresses.setter
    def client_addresses(self, client_addresses):
        """Sets the client_addresses of this Bill.

        Address

        :param client_addresses: The client_addresses of this Bill.
        :type client_addresses: List[AddressBase]
        """

        self._client_addresses = client_addresses

    @property
    def legal_aid_uk_bill(self):
        """Gets the legal_aid_uk_bill of this Bill.


        :return: The legal_aid_uk_bill of this Bill.
        :rtype: LegalAidUkBillBase
        """
        return self._legal_aid_uk_bill

    @legal_aid_uk_bill.setter
    def legal_aid_uk_bill(self, legal_aid_uk_bill):
        """Sets the legal_aid_uk_bill of this Bill.


        :param legal_aid_uk_bill: The legal_aid_uk_bill of this Bill.
        :type legal_aid_uk_bill: LegalAidUkBillBase
        """

        self._legal_aid_uk_bill = legal_aid_uk_bill
