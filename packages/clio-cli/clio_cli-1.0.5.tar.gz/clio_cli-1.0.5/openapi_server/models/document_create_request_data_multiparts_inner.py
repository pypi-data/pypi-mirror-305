# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentCreateRequestDataMultipartsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, part_number: int=None, content_length: str=None, content_md5: str=None):
        """DocumentCreateRequestDataMultipartsInner - a model defined in OpenAPI

        :param part_number: The part_number of this DocumentCreateRequestDataMultipartsInner.
        :param content_length: The content_length of this DocumentCreateRequestDataMultipartsInner.
        :param content_md5: The content_md5 of this DocumentCreateRequestDataMultipartsInner.
        """
        self.openapi_types = {
            'part_number': int,
            'content_length': str,
            'content_md5': str
        }

        self.attribute_map = {
            'part_number': 'part_number',
            'content_length': 'content_length',
            'content_md5': 'content_md5'
        }

        self._part_number = part_number
        self._content_length = content_length
        self._content_md5 = content_md5

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentCreateRequestDataMultipartsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Document_create_request_data_multiparts_inner of this DocumentCreateRequestDataMultipartsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def part_number(self):
        """Gets the part_number of this DocumentCreateRequestDataMultipartsInner.

        The part number of multipart upload. It must be an integer between 1 to 10,000, inclusive.  Multipart upload supports upload a single file as a set of parts. Each part is a contiguous portion of the data. A `part_number` uniquely identifies a part and also defines its position within the document being uploaded. Each part must be at least 5 MB in size, except the last part. There is no minimum size limit on the last part.  The URLs of multipart upload are returned in the field, `put_url`, with the corresponding `multipart`  The API handles maximum 50 `multiparts` in one request. If the upload is split to more than 50 parts, make a PUT request with `fully_uploaded` equal to `false`, and another set of part numbers. 

        :return: The part_number of this DocumentCreateRequestDataMultipartsInner.
        :rtype: int
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this DocumentCreateRequestDataMultipartsInner.

        The part number of multipart upload. It must be an integer between 1 to 10,000, inclusive.  Multipart upload supports upload a single file as a set of parts. Each part is a contiguous portion of the data. A `part_number` uniquely identifies a part and also defines its position within the document being uploaded. Each part must be at least 5 MB in size, except the last part. There is no minimum size limit on the last part.  The URLs of multipart upload are returned in the field, `put_url`, with the corresponding `multipart`  The API handles maximum 50 `multiparts` in one request. If the upload is split to more than 50 parts, make a PUT request with `fully_uploaded` equal to `false`, and another set of part numbers. 

        :param part_number: The part_number of this DocumentCreateRequestDataMultipartsInner.
        :type part_number: int
        """
        if part_number is None:
            raise ValueError("Invalid value for `part_number`, must not be `None`")

        self._part_number = part_number

    @property
    def content_length(self):
        """Gets the content_length of this DocumentCreateRequestDataMultipartsInner.

        The size of the part of the upload file in bytes.

        :return: The content_length of this DocumentCreateRequestDataMultipartsInner.
        :rtype: str
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """Sets the content_length of this DocumentCreateRequestDataMultipartsInner.

        The size of the part of the upload file in bytes.

        :param content_length: The content_length of this DocumentCreateRequestDataMultipartsInner.
        :type content_length: str
        """
        if content_length is None:
            raise ValueError("Invalid value for `content_length`, must not be `None`")

        self._content_length = content_length

    @property
    def content_md5(self):
        """Gets the content_md5 of this DocumentCreateRequestDataMultipartsInner.

        The base64-encoded 128-bit MD5 digest of the part data. This header can be used as a message integrity check to verify that the part data is the same data that was originally sent. Although it is optional, we recommend using the Content-MD5 mechanism as an end-to-end integrity check.

        :return: The content_md5 of this DocumentCreateRequestDataMultipartsInner.
        :rtype: str
        """
        return self._content_md5

    @content_md5.setter
    def content_md5(self, content_md5):
        """Sets the content_md5 of this DocumentCreateRequestDataMultipartsInner.

        The base64-encoded 128-bit MD5 digest of the part data. This header can be used as a message integrity check to verify that the part data is the same data that was originally sent. Although it is optional, we recommend using the Content-MD5 mechanism as an end-to-end integrity check.

        :param content_md5: The content_md5 of this DocumentCreateRequestDataMultipartsInner.
        :type content_md5: str
        """

        self._content_md5 = content_md5
