# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivityDescriptionCreateRequestDataRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=0, non_billable_amount: float=0, type: str=None):
        """ActivityDescriptionCreateRequestDataRate - a model defined in OpenAPI

        :param amount: The amount of this ActivityDescriptionCreateRequestDataRate.
        :param non_billable_amount: The non_billable_amount of this ActivityDescriptionCreateRequestDataRate.
        :param type: The type of this ActivityDescriptionCreateRequestDataRate.
        """
        self.openapi_types = {
            'amount': float,
            'non_billable_amount': float,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'non_billable_amount': 'non_billable_amount',
            'type': 'type'
        }

        self._amount = amount
        self._non_billable_amount = non_billable_amount
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityDescriptionCreateRequestDataRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityDescription_create_request_data_rate of this ActivityDescriptionCreateRequestDataRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ActivityDescriptionCreateRequestDataRate.

        The rate of the ActivityDescription. This is ignored for 'User' rates.

        :return: The amount of this ActivityDescriptionCreateRequestDataRate.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ActivityDescriptionCreateRequestDataRate.

        The rate of the ActivityDescription. This is ignored for 'User' rates.

        :param amount: The amount of this ActivityDescriptionCreateRequestDataRate.
        :type amount: float
        """

        self._amount = amount

    @property
    def non_billable_amount(self):
        """Gets the non_billable_amount of this ActivityDescriptionCreateRequestDataRate.

        The non billable rate of the ActivityDescription. This is ignored for 'User' rates.

        :return: The non_billable_amount of this ActivityDescriptionCreateRequestDataRate.
        :rtype: float
        """
        return self._non_billable_amount

    @non_billable_amount.setter
    def non_billable_amount(self, non_billable_amount):
        """Sets the non_billable_amount of this ActivityDescriptionCreateRequestDataRate.

        The non billable rate of the ActivityDescription. This is ignored for 'User' rates.

        :param non_billable_amount: The non_billable_amount of this ActivityDescriptionCreateRequestDataRate.
        :type non_billable_amount: float
        """

        self._non_billable_amount = non_billable_amount

    @property
    def type(self):
        """Gets the type of this ActivityDescriptionCreateRequestDataRate.

        What kind of rate it will be.

        :return: The type of this ActivityDescriptionCreateRequestDataRate.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActivityDescriptionCreateRequestDataRate.

        What kind of rate it will be.

        :param type: The type of this ActivityDescriptionCreateRequestDataRate.
        :type type: str
        """
        allowed_values = ["User", "FlatRate", "Custom"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
