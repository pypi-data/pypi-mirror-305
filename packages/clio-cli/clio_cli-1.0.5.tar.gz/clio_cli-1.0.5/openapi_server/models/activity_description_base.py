# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivityDescriptionBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, name: str=None, visible_to_co_counsel: bool=None, created_at: datetime=None, updated_at: datetime=None, default: bool=None, type: str=None, utbms_activity_id: int=None, utbms_task_name: str=None, utbms_task_id: int=None, xero_service_code: str=None, accessible_to_user: bool=None, category_type: str=None):
        """ActivityDescriptionBase - a model defined in OpenAPI

        :param id: The id of this ActivityDescriptionBase.
        :param etag: The etag of this ActivityDescriptionBase.
        :param name: The name of this ActivityDescriptionBase.
        :param visible_to_co_counsel: The visible_to_co_counsel of this ActivityDescriptionBase.
        :param created_at: The created_at of this ActivityDescriptionBase.
        :param updated_at: The updated_at of this ActivityDescriptionBase.
        :param default: The default of this ActivityDescriptionBase.
        :param type: The type of this ActivityDescriptionBase.
        :param utbms_activity_id: The utbms_activity_id of this ActivityDescriptionBase.
        :param utbms_task_name: The utbms_task_name of this ActivityDescriptionBase.
        :param utbms_task_id: The utbms_task_id of this ActivityDescriptionBase.
        :param xero_service_code: The xero_service_code of this ActivityDescriptionBase.
        :param accessible_to_user: The accessible_to_user of this ActivityDescriptionBase.
        :param category_type: The category_type of this ActivityDescriptionBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'name': str,
            'visible_to_co_counsel': bool,
            'created_at': datetime,
            'updated_at': datetime,
            'default': bool,
            'type': str,
            'utbms_activity_id': int,
            'utbms_task_name': str,
            'utbms_task_id': int,
            'xero_service_code': str,
            'accessible_to_user': bool,
            'category_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'name': 'name',
            'visible_to_co_counsel': 'visible_to_co_counsel',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'default': 'default',
            'type': 'type',
            'utbms_activity_id': 'utbms_activity_id',
            'utbms_task_name': 'utbms_task_name',
            'utbms_task_id': 'utbms_task_id',
            'xero_service_code': 'xero_service_code',
            'accessible_to_user': 'accessible_to_user',
            'category_type': 'category_type'
        }

        self._id = id
        self._etag = etag
        self._name = name
        self._visible_to_co_counsel = visible_to_co_counsel
        self._created_at = created_at
        self._updated_at = updated_at
        self._default = default
        self._type = type
        self._utbms_activity_id = utbms_activity_id
        self._utbms_task_name = utbms_task_name
        self._utbms_task_id = utbms_task_id
        self._xero_service_code = xero_service_code
        self._accessible_to_user = accessible_to_user
        self._category_type = category_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityDescriptionBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityDescription_base of this ActivityDescriptionBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ActivityDescriptionBase.

        Unique identifier for the *ActivityDescription*

        :return: The id of this ActivityDescriptionBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityDescriptionBase.

        Unique identifier for the *ActivityDescription*

        :param id: The id of this ActivityDescriptionBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this ActivityDescriptionBase.

        ETag for the *ActivityDescription*

        :return: The etag of this ActivityDescriptionBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ActivityDescriptionBase.

        ETag for the *ActivityDescription*

        :param etag: The etag of this ActivityDescriptionBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this ActivityDescriptionBase.

        The name of the *ActivityDescription*

        :return: The name of this ActivityDescriptionBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivityDescriptionBase.

        The name of the *ActivityDescription*

        :param name: The name of this ActivityDescriptionBase.
        :type name: str
        """

        self._name = name

    @property
    def visible_to_co_counsel(self):
        """Gets the visible_to_co_counsel of this ActivityDescriptionBase.

        A toggle that determines if a co-counsel user of the firm can have access to this activity description

        :return: The visible_to_co_counsel of this ActivityDescriptionBase.
        :rtype: bool
        """
        return self._visible_to_co_counsel

    @visible_to_co_counsel.setter
    def visible_to_co_counsel(self, visible_to_co_counsel):
        """Sets the visible_to_co_counsel of this ActivityDescriptionBase.

        A toggle that determines if a co-counsel user of the firm can have access to this activity description

        :param visible_to_co_counsel: The visible_to_co_counsel of this ActivityDescriptionBase.
        :type visible_to_co_counsel: bool
        """

        self._visible_to_co_counsel = visible_to_co_counsel

    @property
    def created_at(self):
        """Gets the created_at of this ActivityDescriptionBase.

        The time the *ActivityDescription* was created (as a ISO-8601 timestamp)

        :return: The created_at of this ActivityDescriptionBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ActivityDescriptionBase.

        The time the *ActivityDescription* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this ActivityDescriptionBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ActivityDescriptionBase.

        The time the *ActivityDescription* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this ActivityDescriptionBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ActivityDescriptionBase.

        The time the *ActivityDescription* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this ActivityDescriptionBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def default(self):
        """Gets the default of this ActivityDescriptionBase.

        Whether it is the user's default activity description

        :return: The default of this ActivityDescriptionBase.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ActivityDescriptionBase.

        Whether it is the user's default activity description

        :param default: The default of this ActivityDescriptionBase.
        :type default: bool
        """

        self._default = default

    @property
    def type(self):
        """Gets the type of this ActivityDescriptionBase.

        The type of the *ActivityDescription*

        :return: The type of this ActivityDescriptionBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActivityDescriptionBase.

        The type of the *ActivityDescription*

        :param type: The type of this ActivityDescriptionBase.
        :type type: str
        """

        self._type = type

    @property
    def utbms_activity_id(self):
        """Gets the utbms_activity_id of this ActivityDescriptionBase.

        The UTBMS activity id if the *ActivityDescription* is a UTBMS activity description

        :return: The utbms_activity_id of this ActivityDescriptionBase.
        :rtype: int
        """
        return self._utbms_activity_id

    @utbms_activity_id.setter
    def utbms_activity_id(self, utbms_activity_id):
        """Sets the utbms_activity_id of this ActivityDescriptionBase.

        The UTBMS activity id if the *ActivityDescription* is a UTBMS activity description

        :param utbms_activity_id: The utbms_activity_id of this ActivityDescriptionBase.
        :type utbms_activity_id: int
        """

        self._utbms_activity_id = utbms_activity_id

    @property
    def utbms_task_name(self):
        """Gets the utbms_task_name of this ActivityDescriptionBase.

        The UTBMS activity task name if attached to a UTBMS activity description

        :return: The utbms_task_name of this ActivityDescriptionBase.
        :rtype: str
        """
        return self._utbms_task_name

    @utbms_task_name.setter
    def utbms_task_name(self, utbms_task_name):
        """Sets the utbms_task_name of this ActivityDescriptionBase.

        The UTBMS activity task name if attached to a UTBMS activity description

        :param utbms_task_name: The utbms_task_name of this ActivityDescriptionBase.
        :type utbms_task_name: str
        """

        self._utbms_task_name = utbms_task_name

    @property
    def utbms_task_id(self):
        """Gets the utbms_task_id of this ActivityDescriptionBase.

        The UTBMS activity task id if attached to a UTBMS activity description

        :return: The utbms_task_id of this ActivityDescriptionBase.
        :rtype: int
        """
        return self._utbms_task_id

    @utbms_task_id.setter
    def utbms_task_id(self, utbms_task_id):
        """Sets the utbms_task_id of this ActivityDescriptionBase.

        The UTBMS activity task id if attached to a UTBMS activity description

        :param utbms_task_id: The utbms_task_id of this ActivityDescriptionBase.
        :type utbms_task_id: int
        """

        self._utbms_task_id = utbms_task_id

    @property
    def xero_service_code(self):
        """Gets the xero_service_code of this ActivityDescriptionBase.

        Custom Xero service code for this activity description

        :return: The xero_service_code of this ActivityDescriptionBase.
        :rtype: str
        """
        return self._xero_service_code

    @xero_service_code.setter
    def xero_service_code(self, xero_service_code):
        """Sets the xero_service_code of this ActivityDescriptionBase.

        Custom Xero service code for this activity description

        :param xero_service_code: The xero_service_code of this ActivityDescriptionBase.
        :type xero_service_code: str
        """

        self._xero_service_code = xero_service_code

    @property
    def accessible_to_user(self):
        """Gets the accessible_to_user of this ActivityDescriptionBase.

        Determines if activity description is accessible to user

        :return: The accessible_to_user of this ActivityDescriptionBase.
        :rtype: bool
        """
        return self._accessible_to_user

    @accessible_to_user.setter
    def accessible_to_user(self, accessible_to_user):
        """Sets the accessible_to_user of this ActivityDescriptionBase.

        Determines if activity description is accessible to user

        :param accessible_to_user: The accessible_to_user of this ActivityDescriptionBase.
        :type accessible_to_user: bool
        """

        self._accessible_to_user = accessible_to_user

    @property
    def category_type(self):
        """Gets the category_type of this ActivityDescriptionBase.

        Activity category rate type. Either hourly or flat fee

        :return: The category_type of this ActivityDescriptionBase.
        :rtype: str
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this ActivityDescriptionBase.

        Activity category rate type. Either hourly or flat fee

        :param category_type: The category_type of this ActivityDescriptionBase.
        :type category_type: str
        """

        self._category_type = category_type
