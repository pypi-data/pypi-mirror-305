# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PhoneNumberBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, number: str=None, name: str=None, primary: bool=None, created_at: datetime=None, updated_at: datetime=None):
        """PhoneNumberBase - a model defined in OpenAPI

        :param id: The id of this PhoneNumberBase.
        :param etag: The etag of this PhoneNumberBase.
        :param number: The number of this PhoneNumberBase.
        :param name: The name of this PhoneNumberBase.
        :param primary: The primary of this PhoneNumberBase.
        :param created_at: The created_at of this PhoneNumberBase.
        :param updated_at: The updated_at of this PhoneNumberBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'number': str,
            'name': str,
            'primary': bool,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'number': 'number',
            'name': 'name',
            'primary': 'primary',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._etag = etag
        self._number = number
        self._name = name
        self._primary = primary
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhoneNumberBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhoneNumber_base of this PhoneNumberBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PhoneNumberBase.

        Unique identifier for the *PhoneNumber*

        :return: The id of this PhoneNumberBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PhoneNumberBase.

        Unique identifier for the *PhoneNumber*

        :param id: The id of this PhoneNumberBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this PhoneNumberBase.

        ETag for the *PhoneNumber*

        :return: The etag of this PhoneNumberBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this PhoneNumberBase.

        ETag for the *PhoneNumber*

        :param etag: The etag of this PhoneNumberBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def number(self):
        """Gets the number of this PhoneNumberBase.

        Contact's Phone Number

        :return: The number of this PhoneNumberBase.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PhoneNumberBase.

        Contact's Phone Number

        :param number: The number of this PhoneNumberBase.
        :type number: str
        """

        self._number = number

    @property
    def name(self):
        """Gets the name of this PhoneNumberBase.

        The type of *PhoneNumber* it is

        :return: The name of this PhoneNumberBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PhoneNumberBase.

        The type of *PhoneNumber* it is

        :param name: The name of this PhoneNumberBase.
        :type name: str
        """
        allowed_values = ["Work", "Personal", "Other"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def primary(self):
        """Gets the primary of this PhoneNumberBase.

        Whether it is default for this contact

        :return: The primary of this PhoneNumberBase.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this PhoneNumberBase.

        Whether it is default for this contact

        :param primary: The primary of this PhoneNumberBase.
        :type primary: bool
        """

        self._primary = primary

    @property
    def created_at(self):
        """Gets the created_at of this PhoneNumberBase.

        The time the *PhoneNumber* was created (as a ISO-8601 timestamp)

        :return: The created_at of this PhoneNumberBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PhoneNumberBase.

        The time the *PhoneNumber* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this PhoneNumberBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PhoneNumberBase.

        The time the *PhoneNumber* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this PhoneNumberBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PhoneNumberBase.

        The time the *PhoneNumber* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this PhoneNumberBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
