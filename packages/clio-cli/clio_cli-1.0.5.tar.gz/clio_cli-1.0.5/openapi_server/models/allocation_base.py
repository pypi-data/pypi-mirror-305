# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AllocationBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, _date: date=None, amount: float=None, interest: bool=None, voided_at: datetime=None, created_at: datetime=None, updated_at: datetime=None, description: str=None, has_online_payment: bool=None, destroyable: bool=None, payment_type: str=None):
        """AllocationBase - a model defined in OpenAPI

        :param id: The id of this AllocationBase.
        :param etag: The etag of this AllocationBase.
        :param _date: The _date of this AllocationBase.
        :param amount: The amount of this AllocationBase.
        :param interest: The interest of this AllocationBase.
        :param voided_at: The voided_at of this AllocationBase.
        :param created_at: The created_at of this AllocationBase.
        :param updated_at: The updated_at of this AllocationBase.
        :param description: The description of this AllocationBase.
        :param has_online_payment: The has_online_payment of this AllocationBase.
        :param destroyable: The destroyable of this AllocationBase.
        :param payment_type: The payment_type of this AllocationBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            '_date': date,
            'amount': float,
            'interest': bool,
            'voided_at': datetime,
            'created_at': datetime,
            'updated_at': datetime,
            'description': str,
            'has_online_payment': bool,
            'destroyable': bool,
            'payment_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            '_date': 'date',
            'amount': 'amount',
            'interest': 'interest',
            'voided_at': 'voided_at',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'description': 'description',
            'has_online_payment': 'has_online_payment',
            'destroyable': 'destroyable',
            'payment_type': 'payment_type'
        }

        self._id = id
        self._etag = etag
        self.__date = _date
        self._amount = amount
        self._interest = interest
        self._voided_at = voided_at
        self._created_at = created_at
        self._updated_at = updated_at
        self._description = description
        self._has_online_payment = has_online_payment
        self._destroyable = destroyable
        self._payment_type = payment_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AllocationBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Allocation_base of this AllocationBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AllocationBase.

        Unique identifier for the *Allocation*

        :return: The id of this AllocationBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AllocationBase.

        Unique identifier for the *Allocation*

        :param id: The id of this AllocationBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this AllocationBase.

        ETag for the *Allocation*

        :return: The etag of this AllocationBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this AllocationBase.

        ETag for the *Allocation*

        :param etag: The etag of this AllocationBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def _date(self):
        """Gets the _date of this AllocationBase.

        The date the allocation was applied (as a ISO-8601 date)

        :return: The _date of this AllocationBase.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AllocationBase.

        The date the allocation was applied (as a ISO-8601 date)

        :param _date: The _date of this AllocationBase.
        :type _date: date
        """

        self.__date = _date

    @property
    def amount(self):
        """Gets the amount of this AllocationBase.

        The total amount of money that the user has allocated

        :return: The amount of this AllocationBase.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AllocationBase.

        The total amount of money that the user has allocated

        :param amount: The amount of this AllocationBase.
        :type amount: float
        """

        self._amount = amount

    @property
    def interest(self):
        """Gets the interest of this AllocationBase.

        Whether the allocation is applied to interest amount

        :return: The interest of this AllocationBase.
        :rtype: bool
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this AllocationBase.

        Whether the allocation is applied to interest amount

        :param interest: The interest of this AllocationBase.
        :type interest: bool
        """

        self._interest = interest

    @property
    def voided_at(self):
        """Gets the voided_at of this AllocationBase.

        Time the *Allocation* was voided (as a ISO-8601 timestamp)

        :return: The voided_at of this AllocationBase.
        :rtype: datetime
        """
        return self._voided_at

    @voided_at.setter
    def voided_at(self, voided_at):
        """Sets the voided_at of this AllocationBase.

        Time the *Allocation* was voided (as a ISO-8601 timestamp)

        :param voided_at: The voided_at of this AllocationBase.
        :type voided_at: datetime
        """

        self._voided_at = voided_at

    @property
    def created_at(self):
        """Gets the created_at of this AllocationBase.

        The time the *Allocation* was created (as a ISO-8601 timestamp)

        :return: The created_at of this AllocationBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AllocationBase.

        The time the *Allocation* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this AllocationBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AllocationBase.

        The time the *Allocation* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this AllocationBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AllocationBase.

        The time the *Allocation* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this AllocationBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def description(self):
        """Gets the description of this AllocationBase.

        The description from the associated Credit Memo (if applicable)

        :return: The description of this AllocationBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AllocationBase.

        The description from the associated Credit Memo (if applicable)

        :param description: The description of this AllocationBase.
        :type description: str
        """

        self._description = description

    @property
    def has_online_payment(self):
        """Gets the has_online_payment of this AllocationBase.

        Whether this allocation is associated with an online payment or not

        :return: The has_online_payment of this AllocationBase.
        :rtype: bool
        """
        return self._has_online_payment

    @has_online_payment.setter
    def has_online_payment(self, has_online_payment):
        """Sets the has_online_payment of this AllocationBase.

        Whether this allocation is associated with an online payment or not

        :param has_online_payment: The has_online_payment of this AllocationBase.
        :type has_online_payment: bool
        """

        self._has_online_payment = has_online_payment

    @property
    def destroyable(self):
        """Gets the destroyable of this AllocationBase.

        Whether the record can be deleted or not

        :return: The destroyable of this AllocationBase.
        :rtype: bool
        """
        return self._destroyable

    @destroyable.setter
    def destroyable(self, destroyable):
        """Sets the destroyable of this AllocationBase.

        Whether the record can be deleted or not

        :param destroyable: The destroyable of this AllocationBase.
        :type destroyable: bool
        """

        self._destroyable = destroyable

    @property
    def payment_type(self):
        """Gets the payment_type of this AllocationBase.

        A string indicating whether the payment is a card or an eCheck payment.

        :return: The payment_type of this AllocationBase.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this AllocationBase.

        A string indicating whether the payment is a card or an eCheck payment.

        :param payment_type: The payment_type of this AllocationBase.
        :type payment_type: str
        """

        self._payment_type = payment_type
