# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NoteBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, type: str=None, subject: str=None, detail: str=None, _date: date=None, created_at: datetime=None, updated_at: datetime=None, time_entries_count: int=None):
        """NoteBase - a model defined in OpenAPI

        :param id: The id of this NoteBase.
        :param etag: The etag of this NoteBase.
        :param type: The type of this NoteBase.
        :param subject: The subject of this NoteBase.
        :param detail: The detail of this NoteBase.
        :param _date: The _date of this NoteBase.
        :param created_at: The created_at of this NoteBase.
        :param updated_at: The updated_at of this NoteBase.
        :param time_entries_count: The time_entries_count of this NoteBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'type': str,
            'subject': str,
            'detail': str,
            '_date': date,
            'created_at': datetime,
            'updated_at': datetime,
            'time_entries_count': int
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'type': 'type',
            'subject': 'subject',
            'detail': 'detail',
            '_date': 'date',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'time_entries_count': 'time_entries_count'
        }

        self._id = id
        self._etag = etag
        self._type = type
        self._subject = subject
        self._detail = detail
        self.__date = _date
        self._created_at = created_at
        self._updated_at = updated_at
        self._time_entries_count = time_entries_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NoteBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Note_base of this NoteBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NoteBase.

        Unique identifier for the *Note*

        :return: The id of this NoteBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NoteBase.

        Unique identifier for the *Note*

        :param id: The id of this NoteBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this NoteBase.

        ETag for the *Note*

        :return: The etag of this NoteBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this NoteBase.

        ETag for the *Note*

        :param etag: The etag of this NoteBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def type(self):
        """Gets the type of this NoteBase.

        The type of the *Note*

        :return: The type of this NoteBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NoteBase.

        The type of the *Note*

        :param type: The type of this NoteBase.
        :type type: str
        """
        allowed_values = ["Matter", "Contact"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def subject(self):
        """Gets the subject of this NoteBase.

        The subject of the *Note*

        :return: The subject of this NoteBase.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this NoteBase.

        The subject of the *Note*

        :param subject: The subject of this NoteBase.
        :type subject: str
        """

        self._subject = subject

    @property
    def detail(self):
        """Gets the detail of this NoteBase.

        The body of the *Note*

        :return: The detail of this NoteBase.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this NoteBase.

        The body of the *Note*

        :param detail: The detail of this NoteBase.
        :type detail: str
        """

        self._detail = detail

    @property
    def _date(self):
        """Gets the _date of this NoteBase.

        The date the *Note* is for (as a ISO-8601 date)

        :return: The _date of this NoteBase.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this NoteBase.

        The date the *Note* is for (as a ISO-8601 date)

        :param _date: The _date of this NoteBase.
        :type _date: date
        """

        self.__date = _date

    @property
    def created_at(self):
        """Gets the created_at of this NoteBase.

        The time the *Note* was created (as a ISO-8601 timestamp)

        :return: The created_at of this NoteBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NoteBase.

        The time the *Note* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this NoteBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this NoteBase.

        The time the *Note* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this NoteBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this NoteBase.

        The time the *Note* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this NoteBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def time_entries_count(self):
        """Gets the time_entries_count of this NoteBase.

        The number of time_entries associated with the *Note*

        :return: The time_entries_count of this NoteBase.
        :rtype: int
        """
        return self._time_entries_count

    @time_entries_count.setter
    def time_entries_count(self, time_entries_count):
        """Sets the time_entries_count of this NoteBase.

        The number of time_entries associated with the *Note*

        :param time_entries_count: The time_entries_count of this NoteBase.
        :type time_entries_count: int
        """

        self._time_entries_count = time_entries_count
