# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.picklist_option_base import PicklistOptionBase
from openapi_server import util


class CustomField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, created_at: datetime=None, updated_at: datetime=None, name: str=None, parent_type: str=None, field_type: str=None, displayed: bool=None, deleted: bool=None, required: bool=None, display_order: int=None, picklist_options: List[PicklistOptionBase]=None):
        """CustomField - a model defined in OpenAPI

        :param id: The id of this CustomField.
        :param etag: The etag of this CustomField.
        :param created_at: The created_at of this CustomField.
        :param updated_at: The updated_at of this CustomField.
        :param name: The name of this CustomField.
        :param parent_type: The parent_type of this CustomField.
        :param field_type: The field_type of this CustomField.
        :param displayed: The displayed of this CustomField.
        :param deleted: The deleted of this CustomField.
        :param required: The required of this CustomField.
        :param display_order: The display_order of this CustomField.
        :param picklist_options: The picklist_options of this CustomField.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'created_at': datetime,
            'updated_at': datetime,
            'name': str,
            'parent_type': str,
            'field_type': str,
            'displayed': bool,
            'deleted': bool,
            'required': bool,
            'display_order': int,
            'picklist_options': List[PicklistOptionBase]
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'name': 'name',
            'parent_type': 'parent_type',
            'field_type': 'field_type',
            'displayed': 'displayed',
            'deleted': 'deleted',
            'required': 'required',
            'display_order': 'display_order',
            'picklist_options': 'picklist_options'
        }

        self._id = id
        self._etag = etag
        self._created_at = created_at
        self._updated_at = updated_at
        self._name = name
        self._parent_type = parent_type
        self._field_type = field_type
        self._displayed = displayed
        self._deleted = deleted
        self._required = required
        self._display_order = display_order
        self._picklist_options = picklist_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomField of this CustomField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CustomField.

        Unique identifier for the *CustomField*

        :return: The id of this CustomField.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomField.

        Unique identifier for the *CustomField*

        :param id: The id of this CustomField.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this CustomField.

        ETag for the *CustomField*

        :return: The etag of this CustomField.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this CustomField.

        ETag for the *CustomField*

        :param etag: The etag of this CustomField.
        :type etag: str
        """

        self._etag = etag

    @property
    def created_at(self):
        """Gets the created_at of this CustomField.

        The time the *CustomField* was created (as a ISO-8601 timestamp)

        :return: The created_at of this CustomField.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CustomField.

        The time the *CustomField* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this CustomField.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CustomField.

        The time the *CustomField* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this CustomField.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CustomField.

        The time the *CustomField* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this CustomField.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def name(self):
        """Gets the name of this CustomField.

        The name of the *CustomField*

        :return: The name of this CustomField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomField.

        The name of the *CustomField*

        :param name: The name of this CustomField.
        :type name: str
        """

        self._name = name

    @property
    def parent_type(self):
        """Gets the parent_type of this CustomField.

        Type of object the *CustomField* is for

        :return: The parent_type of this CustomField.
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type):
        """Sets the parent_type of this CustomField.

        Type of object the *CustomField* is for

        :param parent_type: The parent_type of this CustomField.
        :type parent_type: str
        """
        allowed_values = ["Contact", "Matter"]  # noqa: E501
        if parent_type not in allowed_values:
            raise ValueError(
                "Invalid value for `parent_type` ({0}), must be one of {1}"
                .format(parent_type, allowed_values)
            )

        self._parent_type = parent_type

    @property
    def field_type(self):
        """Gets the field_type of this CustomField.

        Field type of the *CustomField*

        :return: The field_type of this CustomField.
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this CustomField.

        Field type of the *CustomField*

        :param field_type: The field_type of this CustomField.
        :type field_type: str
        """
        allowed_values = ["checkbox", "contact", "currency", "date", "time", "email", "matter", "numeric", "picklist", "text_area", "text_line", "url"]  # noqa: E501
        if field_type not in allowed_values:
            raise ValueError(
                "Invalid value for `field_type` ({0}), must be one of {1}"
                .format(field_type, allowed_values)
            )

        self._field_type = field_type

    @property
    def displayed(self):
        """Gets the displayed of this CustomField.

        Whether the *CustomField* is displayed by default

        :return: The displayed of this CustomField.
        :rtype: bool
        """
        return self._displayed

    @displayed.setter
    def displayed(self, displayed):
        """Sets the displayed of this CustomField.

        Whether the *CustomField* is displayed by default

        :param displayed: The displayed of this CustomField.
        :type displayed: bool
        """

        self._displayed = displayed

    @property
    def deleted(self):
        """Gets the deleted of this CustomField.

        Whether the *CustomField* is deleted for future use

        :return: The deleted of this CustomField.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CustomField.

        Whether the *CustomField* is deleted for future use

        :param deleted: The deleted of this CustomField.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def required(self):
        """Gets the required of this CustomField.

        Whether the *CustomField* requires a value

        :return: The required of this CustomField.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this CustomField.

        Whether the *CustomField* requires a value

        :param required: The required of this CustomField.
        :type required: bool
        """

        self._required = required

    @property
    def display_order(self):
        """Gets the display_order of this CustomField.

        The display position of the *CustomField*

        :return: The display_order of this CustomField.
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this CustomField.

        The display position of the *CustomField*

        :param display_order: The display_order of this CustomField.
        :type display_order: int
        """

        self._display_order = display_order

    @property
    def picklist_options(self):
        """Gets the picklist_options of this CustomField.

        PicklistOption

        :return: The picklist_options of this CustomField.
        :rtype: List[PicklistOptionBase]
        """
        return self._picklist_options

    @picklist_options.setter
    def picklist_options(self, picklist_options):
        """Sets the picklist_options of this CustomField.

        PicklistOption

        :param picklist_options: The picklist_options of this CustomField.
        :type picklist_options: List[PicklistOptionBase]
        """

        self._picklist_options = picklist_options
