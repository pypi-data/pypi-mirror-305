# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParticipantBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, created_at: datetime=None, updated_at: datetime=None, type: str=None, identifier: str=None, secondary_identifier: str=None, enabled: bool=None, name: str=None, initials: str=None, job_title_name: str=None):
        """ParticipantBase - a model defined in OpenAPI

        :param id: The id of this ParticipantBase.
        :param etag: The etag of this ParticipantBase.
        :param created_at: The created_at of this ParticipantBase.
        :param updated_at: The updated_at of this ParticipantBase.
        :param type: The type of this ParticipantBase.
        :param identifier: The identifier of this ParticipantBase.
        :param secondary_identifier: The secondary_identifier of this ParticipantBase.
        :param enabled: The enabled of this ParticipantBase.
        :param name: The name of this ParticipantBase.
        :param initials: The initials of this ParticipantBase.
        :param job_title_name: The job_title_name of this ParticipantBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'created_at': datetime,
            'updated_at': datetime,
            'type': str,
            'identifier': str,
            'secondary_identifier': str,
            'enabled': bool,
            'name': str,
            'initials': str,
            'job_title_name': str
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'type': 'type',
            'identifier': 'identifier',
            'secondary_identifier': 'secondary_identifier',
            'enabled': 'enabled',
            'name': 'name',
            'initials': 'initials',
            'job_title_name': 'job_title_name'
        }

        self._id = id
        self._etag = etag
        self._created_at = created_at
        self._updated_at = updated_at
        self._type = type
        self._identifier = identifier
        self._secondary_identifier = secondary_identifier
        self._enabled = enabled
        self._name = name
        self._initials = initials
        self._job_title_name = job_title_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParticipantBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Participant_base of this ParticipantBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ParticipantBase.

        Unique identifier for the *Participant*

        :return: The id of this ParticipantBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ParticipantBase.

        Unique identifier for the *Participant*

        :param id: The id of this ParticipantBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this ParticipantBase.

        ETag for the *Participant*

        :return: The etag of this ParticipantBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ParticipantBase.

        ETag for the *Participant*

        :param etag: The etag of this ParticipantBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def created_at(self):
        """Gets the created_at of this ParticipantBase.

        The time the *Participant* was created (as a ISO-8601 timestamp)

        :return: The created_at of this ParticipantBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ParticipantBase.

        The time the *Participant* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this ParticipantBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ParticipantBase.

        The time the *Participant* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this ParticipantBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ParticipantBase.

        The time the *Participant* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this ParticipantBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def type(self):
        """Gets the type of this ParticipantBase.

        The type of the Participant. Person and Company are subtypes of Contact

        :return: The type of this ParticipantBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ParticipantBase.

        The type of the Participant. Person and Company are subtypes of Contact

        :param type: The type of this ParticipantBase.
        :type type: str
        """
        allowed_values = ["Person", "Company", "User"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def identifier(self):
        """Gets the identifier of this ParticipantBase.

        A string to identify the *Participant*

        :return: The identifier of this ParticipantBase.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ParticipantBase.

        A string to identify the *Participant*

        :param identifier: The identifier of this ParticipantBase.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def secondary_identifier(self):
        """Gets the secondary_identifier of this ParticipantBase.

        A secondary string to identify the *Participant*

        :return: The secondary_identifier of this ParticipantBase.
        :rtype: str
        """
        return self._secondary_identifier

    @secondary_identifier.setter
    def secondary_identifier(self, secondary_identifier):
        """Sets the secondary_identifier of this ParticipantBase.

        A secondary string to identify the *Participant*

        :param secondary_identifier: The secondary_identifier of this ParticipantBase.
        :type secondary_identifier: str
        """

        self._secondary_identifier = secondary_identifier

    @property
    def enabled(self):
        """Gets the enabled of this ParticipantBase.

        The enabled state of the *Participant* record. Always 'null' if *Participant* type is Contact

        :return: The enabled of this ParticipantBase.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ParticipantBase.

        The enabled state of the *Participant* record. Always 'null' if *Participant* type is Contact

        :param enabled: The enabled of this ParticipantBase.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this ParticipantBase.

        The name of the *Participant* record

        :return: The name of this ParticipantBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ParticipantBase.

        The name of the *Participant* record

        :param name: The name of this ParticipantBase.
        :type name: str
        """

        self._name = name

    @property
    def initials(self):
        """Gets the initials of this ParticipantBase.

        A  string with the participant initials

        :return: The initials of this ParticipantBase.
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this ParticipantBase.

        A  string with the participant initials

        :param initials: The initials of this ParticipantBase.
        :type initials: str
        """

        self._initials = initials

    @property
    def job_title_name(self):
        """Gets the job_title_name of this ParticipantBase.

        the job title name of the participant if they are a firm user and have one

        :return: The job_title_name of this ParticipantBase.
        :rtype: str
        """
        return self._job_title_name

    @job_title_name.setter
    def job_title_name(self, job_title_name):
        """Sets the job_title_name of this ParticipantBase.

        the job title name of the participant if they are a firm user and have one

        :param job_title_name: The job_title_name of this ParticipantBase.
        :type job_title_name: str
        """

        self._job_title_name = job_title_name
