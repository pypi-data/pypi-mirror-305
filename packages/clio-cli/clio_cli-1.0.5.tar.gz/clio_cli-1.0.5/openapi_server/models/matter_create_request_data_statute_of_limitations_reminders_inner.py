# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.matter_create_request_data_statute_of_limitations_reminders_inner_notification_method import MatterCreateRequestDataStatuteOfLimitationsRemindersInnerNotificationMethod
from openapi_server import util


class MatterCreateRequestDataStatuteOfLimitationsRemindersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration_value: int=None, duration_unit: str=None, notification_method: MatterCreateRequestDataStatuteOfLimitationsRemindersInnerNotificationMethod=None):
        """MatterCreateRequestDataStatuteOfLimitationsRemindersInner - a model defined in OpenAPI

        :param duration_value: The duration_value of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.
        :param duration_unit: The duration_unit of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.
        :param notification_method: The notification_method of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.
        """
        self.openapi_types = {
            'duration_value': int,
            'duration_unit': str,
            'notification_method': MatterCreateRequestDataStatuteOfLimitationsRemindersInnerNotificationMethod
        }

        self.attribute_map = {
            'duration_value': 'duration_value',
            'duration_unit': 'duration_unit',
            'notification_method': 'notification_method'
        }

        self._duration_value = duration_value
        self._duration_unit = duration_unit
        self._notification_method = notification_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatterCreateRequestDataStatuteOfLimitationsRemindersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Matter_create_request_data_statute_of_limitations_reminders_inner of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration_value(self):
        """Gets the duration_value of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.

        Time measured in `duration_unit` to remind user before the subject.

        :return: The duration_value of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.
        :rtype: int
        """
        return self._duration_value

    @duration_value.setter
    def duration_value(self, duration_value):
        """Sets the duration_value of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.

        Time measured in `duration_unit` to remind user before the subject.

        :param duration_value: The duration_value of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.
        :type duration_value: int
        """
        if duration_value is None:
            raise ValueError("Invalid value for `duration_value`, must not be `None`")

        self._duration_value = duration_value

    @property
    def duration_unit(self):
        """Gets the duration_unit of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.

        Unit to measure the duration value in.

        :return: The duration_unit of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.
        :rtype: str
        """
        return self._duration_unit

    @duration_unit.setter
    def duration_unit(self, duration_unit):
        """Sets the duration_unit of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.

        Unit to measure the duration value in.

        :param duration_unit: The duration_unit of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.
        :type duration_unit: str
        """
        if duration_unit is None:
            raise ValueError("Invalid value for `duration_unit`, must not be `None`")

        self._duration_unit = duration_unit

    @property
    def notification_method(self):
        """Gets the notification_method of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.


        :return: The notification_method of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.
        :rtype: MatterCreateRequestDataStatuteOfLimitationsRemindersInnerNotificationMethod
        """
        return self._notification_method

    @notification_method.setter
    def notification_method(self, notification_method):
        """Sets the notification_method of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.


        :param notification_method: The notification_method of this MatterCreateRequestDataStatuteOfLimitationsRemindersInner.
        :type notification_method: MatterCreateRequestDataStatuteOfLimitationsRemindersInnerNotificationMethod
        """
        if notification_method is None:
            raise ValueError("Invalid value for `notification_method`, must not be `None`")

        self._notification_method = notification_method
