# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LinkedFolderBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, created_at: datetime=None, updated_at: datetime=None, deleted_at: datetime=None, type: str=None, locked: bool=None, name: str=None, root: bool=None):
        """LinkedFolderBase - a model defined in OpenAPI

        :param id: The id of this LinkedFolderBase.
        :param etag: The etag of this LinkedFolderBase.
        :param created_at: The created_at of this LinkedFolderBase.
        :param updated_at: The updated_at of this LinkedFolderBase.
        :param deleted_at: The deleted_at of this LinkedFolderBase.
        :param type: The type of this LinkedFolderBase.
        :param locked: The locked of this LinkedFolderBase.
        :param name: The name of this LinkedFolderBase.
        :param root: The root of this LinkedFolderBase.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'created_at': datetime,
            'updated_at': datetime,
            'deleted_at': datetime,
            'type': str,
            'locked': bool,
            'name': str,
            'root': bool
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'deleted_at': 'deleted_at',
            'type': 'type',
            'locked': 'locked',
            'name': 'name',
            'root': 'root'
        }

        self._id = id
        self._etag = etag
        self._created_at = created_at
        self._updated_at = updated_at
        self._deleted_at = deleted_at
        self._type = type
        self._locked = locked
        self._name = name
        self._root = root

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinkedFolderBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinkedFolder_base of this LinkedFolderBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this LinkedFolderBase.

        Unique identifier for the *Folder*

        :return: The id of this LinkedFolderBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LinkedFolderBase.

        Unique identifier for the *Folder*

        :param id: The id of this LinkedFolderBase.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this LinkedFolderBase.

        ETag for the *Folder*

        :return: The etag of this LinkedFolderBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this LinkedFolderBase.

        ETag for the *Folder*

        :param etag: The etag of this LinkedFolderBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def created_at(self):
        """Gets the created_at of this LinkedFolderBase.

        The time the *Folder* was created (as a ISO-8601 timestamp)

        :return: The created_at of this LinkedFolderBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LinkedFolderBase.

        The time the *Folder* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this LinkedFolderBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this LinkedFolderBase.

        The time the *Folder* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this LinkedFolderBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LinkedFolderBase.

        The time the *Folder* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this LinkedFolderBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this LinkedFolderBase.

        The time the *Folder* was deleted (as a ISO-8601 timestamp)

        :return: The deleted_at of this LinkedFolderBase.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this LinkedFolderBase.

        The time the *Folder* was deleted (as a ISO-8601 timestamp)

        :param deleted_at: The deleted_at of this LinkedFolderBase.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def type(self):
        """Gets the type of this LinkedFolderBase.

        The type of the *Folder*

        :return: The type of this LinkedFolderBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LinkedFolderBase.

        The type of the *Folder*

        :param type: The type of this LinkedFolderBase.
        :type type: str
        """
        allowed_values = ["Folder"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def locked(self):
        """Gets the locked of this LinkedFolderBase.

        Whether or not the Folder is locked. Locked Folder cannot be modified

        :return: The locked of this LinkedFolderBase.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this LinkedFolderBase.

        Whether or not the Folder is locked. Locked Folder cannot be modified

        :param locked: The locked of this LinkedFolderBase.
        :type locked: bool
        """

        self._locked = locked

    @property
    def name(self):
        """Gets the name of this LinkedFolderBase.

        The name of the *Folder*

        :return: The name of this LinkedFolderBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LinkedFolderBase.

        The name of the *Folder*

        :param name: The name of this LinkedFolderBase.
        :type name: str
        """

        self._name = name

    @property
    def root(self):
        """Gets the root of this LinkedFolderBase.

        Whether or not the Folder is the root folder. There is only one root folder per account

        :return: The root of this LinkedFolderBase.
        :rtype: bool
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this LinkedFolderBase.

        Whether or not the Folder is the root folder. There is only one root folder per account

        :param root: The root of this LinkedFolderBase.
        :type root: bool
        """

        self._root = root
