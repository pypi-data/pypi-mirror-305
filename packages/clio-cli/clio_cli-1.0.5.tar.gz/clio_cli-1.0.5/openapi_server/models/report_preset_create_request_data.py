# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportPresetCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: str=None, kind: str=None, name: str=None, options: str=None):
        """ReportPresetCreateRequestData - a model defined in OpenAPI

        :param format: The format of this ReportPresetCreateRequestData.
        :param kind: The kind of this ReportPresetCreateRequestData.
        :param name: The name of this ReportPresetCreateRequestData.
        :param options: The options of this ReportPresetCreateRequestData.
        """
        self.openapi_types = {
            'format': str,
            'kind': str,
            'name': str,
            'options': str
        }

        self.attribute_map = {
            'format': 'format',
            'kind': 'kind',
            'name': 'name',
            'options': 'options'
        }

        self._format = format
        self._kind = kind
        self._name = name
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportPresetCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportPreset_create_request_data of this ReportPresetCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this ReportPresetCreateRequestData.

        What format the report will be generated in.

        :return: The format of this ReportPresetCreateRequestData.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ReportPresetCreateRequestData.

        What format the report will be generated in.

        :param format: The format of this ReportPresetCreateRequestData.
        :type format: str
        """
        allowed_values = ["csv", "html", "json", "pdf", "xlsx", "zip"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def kind(self):
        """Gets the kind of this ReportPresetCreateRequestData.

        What kind of report will be generated.

        :return: The kind of this ReportPresetCreateRequestData.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ReportPresetCreateRequestData.

        What kind of report will be generated.

        :param kind: The kind of this ReportPresetCreateRequestData.
        :type kind: str
        """
        allowed_values = ["accounts_receivable", "accounts_receivable_aging", "bank_account_activity", "billing_history", "billing_rate", "client_activity", "client_ledger", "clio_payments_deposit", "clio_payments_ledger", "clio_payments_monthly_statement", "clio_payments_sales_tax", "clio_payments_transaction", "contact_information", "disbursement_payment", "fee_allocation", "general_ledger", "grant_matters", "invoice_payments_v2", "law_society_of_alberta", "law_society_of_alberta_al", "law_society_of_alberta_bar", "law_society_of_alberta_tl", "law_society_of_alberta_tt", "matter", "matter_balance_summary", "matter_productivity_by_user", "matters_by_responsible_attorney", "originating_attorney_revenue", "other_revenue", "productivity_by_client", "productivity_by_user", "revenue", "task_productivity_by_user", "task_progress_by_user", "trust_ledger", "trust_ledger_nsw", "trust_listing", "trust_management", "work_in_progress"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this ReportPresetCreateRequestData.

        Name of the ReportPreset.

        :return: The name of this ReportPresetCreateRequestData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportPresetCreateRequestData.

        Name of the ReportPreset.

        :param name: The name of this ReportPresetCreateRequestData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def options(self):
        """Gets the options of this ReportPresetCreateRequestData.

        What the report generation parameters are. See [Creating a Report Preset](#section/Creating-a-Report-Preset) for a sample request.

        :return: The options of this ReportPresetCreateRequestData.
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ReportPresetCreateRequestData.

        What the report generation parameters are. See [Creating a Report Preset](#section/Creating-a-Report-Preset) for a sample request.

        :param options: The options of this ReportPresetCreateRequestData.
        :type options: str
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")

        self._options = options
