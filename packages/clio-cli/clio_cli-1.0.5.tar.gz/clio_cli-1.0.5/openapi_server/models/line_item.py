# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_base import ActivityBase
from openapi_server.models.bill_base import BillBase
from openapi_server.models.discount_base import DiscountBase
from openapi_server.models.line_item_totals_base import LineItemTotalsBase
from openapi_server.models.matter_base import MatterBase
from openapi_server.models.user_base import UserBase
from openapi_server import util


class LineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, type: str=None, description: str=None, _date: date=None, price: float=None, taxable: bool=None, kind: str=None, note: str=None, secondary_taxable: bool=None, total: float=None, tax: float=None, secondary_tax: float=None, sub_total: float=None, quantity: float=None, group_ordering: int=None, created_at: datetime=None, updated_at: datetime=None, bill: BillBase=None, activity: ActivityBase=None, matter: MatterBase=None, user: UserBase=None, discount: DiscountBase=None, included_line_item_totals: LineItemTotalsBase=None):
        """LineItem - a model defined in OpenAPI

        :param id: The id of this LineItem.
        :param etag: The etag of this LineItem.
        :param type: The type of this LineItem.
        :param description: The description of this LineItem.
        :param _date: The _date of this LineItem.
        :param price: The price of this LineItem.
        :param taxable: The taxable of this LineItem.
        :param kind: The kind of this LineItem.
        :param note: The note of this LineItem.
        :param secondary_taxable: The secondary_taxable of this LineItem.
        :param total: The total of this LineItem.
        :param tax: The tax of this LineItem.
        :param secondary_tax: The secondary_tax of this LineItem.
        :param sub_total: The sub_total of this LineItem.
        :param quantity: The quantity of this LineItem.
        :param group_ordering: The group_ordering of this LineItem.
        :param created_at: The created_at of this LineItem.
        :param updated_at: The updated_at of this LineItem.
        :param bill: The bill of this LineItem.
        :param activity: The activity of this LineItem.
        :param matter: The matter of this LineItem.
        :param user: The user of this LineItem.
        :param discount: The discount of this LineItem.
        :param included_line_item_totals: The included_line_item_totals of this LineItem.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'type': str,
            'description': str,
            '_date': date,
            'price': float,
            'taxable': bool,
            'kind': str,
            'note': str,
            'secondary_taxable': bool,
            'total': float,
            'tax': float,
            'secondary_tax': float,
            'sub_total': float,
            'quantity': float,
            'group_ordering': int,
            'created_at': datetime,
            'updated_at': datetime,
            'bill': BillBase,
            'activity': ActivityBase,
            'matter': MatterBase,
            'user': UserBase,
            'discount': DiscountBase,
            'included_line_item_totals': LineItemTotalsBase
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'type': 'type',
            'description': 'description',
            '_date': 'date',
            'price': 'price',
            'taxable': 'taxable',
            'kind': 'kind',
            'note': 'note',
            'secondary_taxable': 'secondary_taxable',
            'total': 'total',
            'tax': 'tax',
            'secondary_tax': 'secondary_tax',
            'sub_total': 'sub_total',
            'quantity': 'quantity',
            'group_ordering': 'group_ordering',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'bill': 'bill',
            'activity': 'activity',
            'matter': 'matter',
            'user': 'user',
            'discount': 'discount',
            'included_line_item_totals': 'included_line_item_totals'
        }

        self._id = id
        self._etag = etag
        self._type = type
        self._description = description
        self.__date = _date
        self._price = price
        self._taxable = taxable
        self._kind = kind
        self._note = note
        self._secondary_taxable = secondary_taxable
        self._total = total
        self._tax = tax
        self._secondary_tax = secondary_tax
        self._sub_total = sub_total
        self._quantity = quantity
        self._group_ordering = group_ordering
        self._created_at = created_at
        self._updated_at = updated_at
        self._bill = bill
        self._activity = activity
        self._matter = matter
        self._user = user
        self._discount = discount
        self._included_line_item_totals = included_line_item_totals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineItem of this LineItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this LineItem.

        Unique identifier for the *LineItem*

        :return: The id of this LineItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LineItem.

        Unique identifier for the *LineItem*

        :param id: The id of this LineItem.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this LineItem.

        ETag for the *LineItem*

        :return: The etag of this LineItem.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this LineItem.

        ETag for the *LineItem*

        :param etag: The etag of this LineItem.
        :type etag: str
        """

        self._etag = etag

    @property
    def type(self):
        """Gets the type of this LineItem.

        The type of the *LineItem*

        :return: The type of this LineItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LineItem.

        The type of the *LineItem*

        :param type: The type of this LineItem.
        :type type: str
        """
        allowed_values = ["ActivityLineItem", "LineItem", "NoChargeLineItem", "SummaryLineItem"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def description(self):
        """Gets the description of this LineItem.

        The description for the *LineItem*

        :return: The description of this LineItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LineItem.

        The description for the *LineItem*

        :param description: The description of this LineItem.
        :type description: str
        """

        self._description = description

    @property
    def _date(self):
        """Gets the _date of this LineItem.

        The *LineItem* date (as a ISO-8601 date)

        :return: The _date of this LineItem.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this LineItem.

        The *LineItem* date (as a ISO-8601 date)

        :param _date: The _date of this LineItem.
        :type _date: date
        """

        self.__date = _date

    @property
    def price(self):
        """Gets the price of this LineItem.

        The price of the *LineItem*

        :return: The price of this LineItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this LineItem.

        The price of the *LineItem*

        :param price: The price of this LineItem.
        :type price: float
        """

        self._price = price

    @property
    def taxable(self):
        """Gets the taxable of this LineItem.

        Whether the *LineItem* is taxable

        :return: The taxable of this LineItem.
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this LineItem.

        Whether the *LineItem* is taxable

        :param taxable: The taxable of this LineItem.
        :type taxable: bool
        """

        self._taxable = taxable

    @property
    def kind(self):
        """Gets the kind of this LineItem.

        The kind of *LineItem*

        :return: The kind of this LineItem.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LineItem.

        The kind of *LineItem*

        :param kind: The kind of this LineItem.
        :type kind: str
        """
        allowed_values = ["Service", "Expense"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def note(self):
        """Gets the note of this LineItem.

        The note attached to the *LineItem*

        :return: The note of this LineItem.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this LineItem.

        The note attached to the *LineItem*

        :param note: The note of this LineItem.
        :type note: str
        """

        self._note = note

    @property
    def secondary_taxable(self):
        """Gets the secondary_taxable of this LineItem.

        Whether the *LineItem* is secondary taxable

        :return: The secondary_taxable of this LineItem.
        :rtype: bool
        """
        return self._secondary_taxable

    @secondary_taxable.setter
    def secondary_taxable(self, secondary_taxable):
        """Sets the secondary_taxable of this LineItem.

        Whether the *LineItem* is secondary taxable

        :param secondary_taxable: The secondary_taxable of this LineItem.
        :type secondary_taxable: bool
        """

        self._secondary_taxable = secondary_taxable

    @property
    def total(self):
        """Gets the total of this LineItem.

        The total amount for the *LineItem*

        :return: The total of this LineItem.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this LineItem.

        The total amount for the *LineItem*

        :param total: The total of this LineItem.
        :type total: float
        """

        self._total = total

    @property
    def tax(self):
        """Gets the tax of this LineItem.

        The tax amount for the *LineItem*

        :return: The tax of this LineItem.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this LineItem.

        The tax amount for the *LineItem*

        :param tax: The tax of this LineItem.
        :type tax: float
        """

        self._tax = tax

    @property
    def secondary_tax(self):
        """Gets the secondary_tax of this LineItem.

        The secondary tax amount for the *LineItem*

        :return: The secondary_tax of this LineItem.
        :rtype: float
        """
        return self._secondary_tax

    @secondary_tax.setter
    def secondary_tax(self, secondary_tax):
        """Sets the secondary_tax of this LineItem.

        The secondary tax amount for the *LineItem*

        :param secondary_tax: The secondary_tax of this LineItem.
        :type secondary_tax: float
        """

        self._secondary_tax = secondary_tax

    @property
    def sub_total(self):
        """Gets the sub_total of this LineItem.

        The subtotal amount for the *LineItem*

        :return: The sub_total of this LineItem.
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this LineItem.

        The subtotal amount for the *LineItem*

        :param sub_total: The sub_total of this LineItem.
        :type sub_total: float
        """

        self._sub_total = sub_total

    @property
    def quantity(self):
        """Gets the quantity of this LineItem.

        The amount of hours for the *LineItem*

        :return: The quantity of this LineItem.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this LineItem.

        The amount of hours for the *LineItem*

        :param quantity: The quantity of this LineItem.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def group_ordering(self):
        """Gets the group_ordering of this LineItem.

        The value to specify the ordering of the *LineItem* on a bill

        :return: The group_ordering of this LineItem.
        :rtype: int
        """
        return self._group_ordering

    @group_ordering.setter
    def group_ordering(self, group_ordering):
        """Sets the group_ordering of this LineItem.

        The value to specify the ordering of the *LineItem* on a bill

        :param group_ordering: The group_ordering of this LineItem.
        :type group_ordering: int
        """

        self._group_ordering = group_ordering

    @property
    def created_at(self):
        """Gets the created_at of this LineItem.

        The time the *LineItem* was created (as a ISO-8601 timestamp)

        :return: The created_at of this LineItem.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LineItem.

        The time the *LineItem* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this LineItem.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this LineItem.

        The time the *LineItem* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this LineItem.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LineItem.

        The time the *LineItem* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this LineItem.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def bill(self):
        """Gets the bill of this LineItem.


        :return: The bill of this LineItem.
        :rtype: BillBase
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """Sets the bill of this LineItem.


        :param bill: The bill of this LineItem.
        :type bill: BillBase
        """

        self._bill = bill

    @property
    def activity(self):
        """Gets the activity of this LineItem.


        :return: The activity of this LineItem.
        :rtype: ActivityBase
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this LineItem.


        :param activity: The activity of this LineItem.
        :type activity: ActivityBase
        """

        self._activity = activity

    @property
    def matter(self):
        """Gets the matter of this LineItem.


        :return: The matter of this LineItem.
        :rtype: MatterBase
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this LineItem.


        :param matter: The matter of this LineItem.
        :type matter: MatterBase
        """

        self._matter = matter

    @property
    def user(self):
        """Gets the user of this LineItem.


        :return: The user of this LineItem.
        :rtype: UserBase
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LineItem.


        :param user: The user of this LineItem.
        :type user: UserBase
        """

        self._user = user

    @property
    def discount(self):
        """Gets the discount of this LineItem.


        :return: The discount of this LineItem.
        :rtype: DiscountBase
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this LineItem.


        :param discount: The discount of this LineItem.
        :type discount: DiscountBase
        """

        self._discount = discount

    @property
    def included_line_item_totals(self):
        """Gets the included_line_item_totals of this LineItem.


        :return: The included_line_item_totals of this LineItem.
        :rtype: LineItemTotalsBase
        """
        return self._included_line_item_totals

    @included_line_item_totals.setter
    def included_line_item_totals(self, included_line_item_totals):
        """Sets the included_line_item_totals of this LineItem.


        :param included_line_item_totals: The included_line_item_totals of this LineItem.
        :type included_line_item_totals: LineItemTotalsBase
        """

        self._included_line_item_totals = included_line_item_totals
