# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.matter_docket_create_request_data_jurisdiction import MatterDocketCreateRequestDataJurisdiction
from openapi_server.models.matter_docket_create_request_data_trigger import MatterDocketCreateRequestDataTrigger
from openapi_server import util


class MatterDocketCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, jurisdiction: MatterDocketCreateRequestDataJurisdiction=None, name: str=None, start_date: date=None, start_time: datetime=None, trigger: MatterDocketCreateRequestDataTrigger=None):
        """MatterDocketCreateRequestData - a model defined in OpenAPI

        :param jurisdiction: The jurisdiction of this MatterDocketCreateRequestData.
        :param name: The name of this MatterDocketCreateRequestData.
        :param start_date: The start_date of this MatterDocketCreateRequestData.
        :param start_time: The start_time of this MatterDocketCreateRequestData.
        :param trigger: The trigger of this MatterDocketCreateRequestData.
        """
        self.openapi_types = {
            'jurisdiction': MatterDocketCreateRequestDataJurisdiction,
            'name': str,
            'start_date': date,
            'start_time': datetime,
            'trigger': MatterDocketCreateRequestDataTrigger
        }

        self.attribute_map = {
            'jurisdiction': 'jurisdiction',
            'name': 'name',
            'start_date': 'start_date',
            'start_time': 'start_time',
            'trigger': 'trigger'
        }

        self._jurisdiction = jurisdiction
        self._name = name
        self._start_date = start_date
        self._start_time = start_time
        self._trigger = trigger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatterDocketCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatterDocket_create_request_data of this MatterDocketCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def jurisdiction(self):
        """Gets the jurisdiction of this MatterDocketCreateRequestData.


        :return: The jurisdiction of this MatterDocketCreateRequestData.
        :rtype: MatterDocketCreateRequestDataJurisdiction
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction):
        """Sets the jurisdiction of this MatterDocketCreateRequestData.


        :param jurisdiction: The jurisdiction of this MatterDocketCreateRequestData.
        :type jurisdiction: MatterDocketCreateRequestDataJurisdiction
        """
        if jurisdiction is None:
            raise ValueError("Invalid value for `jurisdiction`, must not be `None`")

        self._jurisdiction = jurisdiction

    @property
    def name(self):
        """Gets the name of this MatterDocketCreateRequestData.

        Name of the MatterDocket.

        :return: The name of this MatterDocketCreateRequestData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MatterDocketCreateRequestData.

        Name of the MatterDocket.

        :param name: The name of this MatterDocketCreateRequestData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this MatterDocketCreateRequestData.

        Start date of the MatterDocket. (Expects an ISO-8601 date).

        :return: The start_date of this MatterDocketCreateRequestData.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this MatterDocketCreateRequestData.

        Start date of the MatterDocket. (Expects an ISO-8601 date).

        :param start_date: The start_date of this MatterDocketCreateRequestData.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def start_time(self):
        """Gets the start_time of this MatterDocketCreateRequestData.

        Start time of the MatterDocket. Required for some triggers.  (Expects an ISO-8601 timestamp).

        :return: The start_time of this MatterDocketCreateRequestData.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MatterDocketCreateRequestData.

        Start time of the MatterDocket. Required for some triggers.  (Expects an ISO-8601 timestamp).

        :param start_time: The start_time of this MatterDocketCreateRequestData.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def trigger(self):
        """Gets the trigger of this MatterDocketCreateRequestData.


        :return: The trigger of this MatterDocketCreateRequestData.
        :rtype: MatterDocketCreateRequestDataTrigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this MatterDocketCreateRequestData.


        :param trigger: The trigger of this MatterDocketCreateRequestData.
        :type trigger: MatterDocketCreateRequestDataTrigger
        """
        if trigger is None:
            raise ValueError("Invalid value for `trigger`, must not be `None`")

        self._trigger = trigger
