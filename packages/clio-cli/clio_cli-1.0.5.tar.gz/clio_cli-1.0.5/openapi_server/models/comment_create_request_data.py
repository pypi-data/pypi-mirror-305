# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment_create_request_data_item import CommentCreateRequestDataItem
from openapi_server import util


class CommentCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item: CommentCreateRequestDataItem=None, message: str=None):
        """CommentCreateRequestData - a model defined in OpenAPI

        :param item: The item of this CommentCreateRequestData.
        :param message: The message of this CommentCreateRequestData.
        """
        self.openapi_types = {
            'item': CommentCreateRequestDataItem,
            'message': str
        }

        self.attribute_map = {
            'item': 'item',
            'message': 'message'
        }

        self._item = item
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommentCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment_create_request_data of this CommentCreateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item(self):
        """Gets the item of this CommentCreateRequestData.


        :return: The item of this CommentCreateRequestData.
        :rtype: CommentCreateRequestDataItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this CommentCreateRequestData.


        :param item: The item of this CommentCreateRequestData.
        :type item: CommentCreateRequestDataItem
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")

        self._item = item

    @property
    def message(self):
        """Gets the message of this CommentCreateRequestData.

        The content of the Comment.

        :return: The message of this CommentCreateRequestData.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CommentCreateRequestData.

        The content of the Comment.

        :param message: The message of this CommentCreateRequestData.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message
