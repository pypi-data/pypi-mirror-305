# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LienBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, amount: float=None, description: str=None, etag: str=None, lien_type: str=None, mark_as_lien: bool=None, created_at: datetime=None, updated_at: datetime=None):
        """LienBase - a model defined in OpenAPI

        :param id: The id of this LienBase.
        :param amount: The amount of this LienBase.
        :param description: The description of this LienBase.
        :param etag: The etag of this LienBase.
        :param lien_type: The lien_type of this LienBase.
        :param mark_as_lien: The mark_as_lien of this LienBase.
        :param created_at: The created_at of this LienBase.
        :param updated_at: The updated_at of this LienBase.
        """
        self.openapi_types = {
            'id': int,
            'amount': float,
            'description': str,
            'etag': str,
            'lien_type': str,
            'mark_as_lien': bool,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'amount': 'amount',
            'description': 'description',
            'etag': 'etag',
            'lien_type': 'lien_type',
            'mark_as_lien': 'mark_as_lien',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._amount = amount
        self._description = description
        self._etag = etag
        self._lien_type = lien_type
        self._mark_as_lien = mark_as_lien
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LienBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Lien_base of this LienBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this LienBase.

        Unique identifier for the *Lien*

        :return: The id of this LienBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LienBase.

        Unique identifier for the *Lien*

        :param id: The id of this LienBase.
        :type id: int
        """

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this LienBase.

        The amount for Lien

        :return: The amount of this LienBase.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this LienBase.

        The amount for Lien

        :param amount: The amount of this LienBase.
        :type amount: float
        """

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this LienBase.

        Lien description

        :return: The description of this LienBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LienBase.

        Lien description

        :param description: The description of this LienBase.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this LienBase.

        ETag for the *Lien*

        :return: The etag of this LienBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this LienBase.

        ETag for the *Lien*

        :param etag: The etag of this LienBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def lien_type(self):
        """Gets the lien_type of this LienBase.

        Lien type

        :return: The lien_type of this LienBase.
        :rtype: str
        """
        return self._lien_type

    @lien_type.setter
    def lien_type(self, lien_type):
        """Sets the lien_type of this LienBase.

        Lien type

        :param lien_type: The lien_type of this LienBase.
        :type lien_type: str
        """
        allowed_values = ["general", "medical_payer", "medical_provider"]  # noqa: E501
        if lien_type not in allowed_values:
            raise ValueError(
                "Invalid value for `lien_type` ({0}), must be one of {1}"
                .format(lien_type, allowed_values)
            )

        self._lien_type = lien_type

    @property
    def mark_as_lien(self):
        """Gets the mark_as_lien of this LienBase.

        Mark item as Lien

        :return: The mark_as_lien of this LienBase.
        :rtype: bool
        """
        return self._mark_as_lien

    @mark_as_lien.setter
    def mark_as_lien(self, mark_as_lien):
        """Sets the mark_as_lien of this LienBase.

        Mark item as Lien

        :param mark_as_lien: The mark_as_lien of this LienBase.
        :type mark_as_lien: bool
        """

        self._mark_as_lien = mark_as_lien

    @property
    def created_at(self):
        """Gets the created_at of this LienBase.

        The time the *Lien* was created (as a ISO-8601 timestamp)

        :return: The created_at of this LienBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LienBase.

        The time the *Lien* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this LienBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this LienBase.

        The time the *Lien* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this LienBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LienBase.

        The time the *Lien* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this LienBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
