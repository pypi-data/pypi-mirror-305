# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClioPaymentsLinkCreateRequestDataSubject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, type: str=None):
        """ClioPaymentsLinkCreateRequestDataSubject - a model defined in OpenAPI

        :param id: The id of this ClioPaymentsLinkCreateRequestDataSubject.
        :param type: The type of this ClioPaymentsLinkCreateRequestDataSubject.
        """
        self.openapi_types = {
            'id': int,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type'
        }

        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClioPaymentsLinkCreateRequestDataSubject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClioPaymentsLink_create_request_data_subject of this ClioPaymentsLinkCreateRequestDataSubject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ClioPaymentsLinkCreateRequestDataSubject.

        The ID of the record associated with the payment link.

        :return: The id of this ClioPaymentsLinkCreateRequestDataSubject.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClioPaymentsLinkCreateRequestDataSubject.

        The ID of the record associated with the payment link.

        :param id: The id of this ClioPaymentsLinkCreateRequestDataSubject.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def type(self):
        """Gets the type of this ClioPaymentsLinkCreateRequestDataSubject.

        The type of the record associated with the payment link. The type of record determines the behavior of the payment link.  Type of subject object: * 'BankAccount' results in a payment link for a direct payment. * 'Bill' results in a payment link for paying an existing invoice or trust request. * 'Contact' results in a payment link for paying the outstanding invoices of a contact. 

        :return: The type of this ClioPaymentsLinkCreateRequestDataSubject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClioPaymentsLinkCreateRequestDataSubject.

        The type of the record associated with the payment link. The type of record determines the behavior of the payment link.  Type of subject object: * 'BankAccount' results in a payment link for a direct payment. * 'Bill' results in a payment link for paying an existing invoice or trust request. * 'Contact' results in a payment link for paying the outstanding invoices of a contact. 

        :param type: The type of this ClioPaymentsLinkCreateRequestDataSubject.
        :type type: str
        """
        allowed_values = ["BankAccount", "Bill", "Contact"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
