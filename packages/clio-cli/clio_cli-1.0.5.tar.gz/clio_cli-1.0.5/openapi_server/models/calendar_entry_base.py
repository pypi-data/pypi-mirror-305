# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CalendarEntryBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, etag: str=None, summary: str=None, description: str=None, location: str=None, start_at: datetime=None, end_at: datetime=None, all_day: bool=None, recurrence_rule: str=None, parent_calendar_entry_id: int=None, court_rule: bool=None, created_at: datetime=None, updated_at: datetime=None, permission: str=None, calendar_owner_id: int=None, start_at_time_zone: str=None, time_entries_count: int=None):
        """CalendarEntryBase - a model defined in OpenAPI

        :param id: The id of this CalendarEntryBase.
        :param etag: The etag of this CalendarEntryBase.
        :param summary: The summary of this CalendarEntryBase.
        :param description: The description of this CalendarEntryBase.
        :param location: The location of this CalendarEntryBase.
        :param start_at: The start_at of this CalendarEntryBase.
        :param end_at: The end_at of this CalendarEntryBase.
        :param all_day: The all_day of this CalendarEntryBase.
        :param recurrence_rule: The recurrence_rule of this CalendarEntryBase.
        :param parent_calendar_entry_id: The parent_calendar_entry_id of this CalendarEntryBase.
        :param court_rule: The court_rule of this CalendarEntryBase.
        :param created_at: The created_at of this CalendarEntryBase.
        :param updated_at: The updated_at of this CalendarEntryBase.
        :param permission: The permission of this CalendarEntryBase.
        :param calendar_owner_id: The calendar_owner_id of this CalendarEntryBase.
        :param start_at_time_zone: The start_at_time_zone of this CalendarEntryBase.
        :param time_entries_count: The time_entries_count of this CalendarEntryBase.
        """
        self.openapi_types = {
            'id': str,
            'etag': str,
            'summary': str,
            'description': str,
            'location': str,
            'start_at': datetime,
            'end_at': datetime,
            'all_day': bool,
            'recurrence_rule': str,
            'parent_calendar_entry_id': int,
            'court_rule': bool,
            'created_at': datetime,
            'updated_at': datetime,
            'permission': str,
            'calendar_owner_id': int,
            'start_at_time_zone': str,
            'time_entries_count': int
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'summary': 'summary',
            'description': 'description',
            'location': 'location',
            'start_at': 'start_at',
            'end_at': 'end_at',
            'all_day': 'all_day',
            'recurrence_rule': 'recurrence_rule',
            'parent_calendar_entry_id': 'parent_calendar_entry_id',
            'court_rule': 'court_rule',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'permission': 'permission',
            'calendar_owner_id': 'calendar_owner_id',
            'start_at_time_zone': 'start_at_time_zone',
            'time_entries_count': 'time_entries_count'
        }

        self._id = id
        self._etag = etag
        self._summary = summary
        self._description = description
        self._location = location
        self._start_at = start_at
        self._end_at = end_at
        self._all_day = all_day
        self._recurrence_rule = recurrence_rule
        self._parent_calendar_entry_id = parent_calendar_entry_id
        self._court_rule = court_rule
        self._created_at = created_at
        self._updated_at = updated_at
        self._permission = permission
        self._calendar_owner_id = calendar_owner_id
        self._start_at_time_zone = start_at_time_zone
        self._time_entries_count = time_entries_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalendarEntryBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalendarEntry_base of this CalendarEntryBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CalendarEntryBase.

        Unique identifier for the *CalendarEntry*

        :return: The id of this CalendarEntryBase.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalendarEntryBase.

        Unique identifier for the *CalendarEntry*

        :param id: The id of this CalendarEntryBase.
        :type id: str
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this CalendarEntryBase.

        ETag for the *CalendarEntry*

        :return: The etag of this CalendarEntryBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this CalendarEntryBase.

        ETag for the *CalendarEntry*

        :param etag: The etag of this CalendarEntryBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def summary(self):
        """Gets the summary of this CalendarEntryBase.

        A short summary of the *CalendarEntry*

        :return: The summary of this CalendarEntryBase.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this CalendarEntryBase.

        A short summary of the *CalendarEntry*

        :param summary: The summary of this CalendarEntryBase.
        :type summary: str
        """

        self._summary = summary

    @property
    def description(self):
        """Gets the description of this CalendarEntryBase.

        A detailed description of the *CalendarEntry*

        :return: The description of this CalendarEntryBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CalendarEntryBase.

        A detailed description of the *CalendarEntry*

        :param description: The description of this CalendarEntryBase.
        :type description: str
        """

        self._description = description

    @property
    def location(self):
        """Gets the location of this CalendarEntryBase.

        The geographic location of the *CalendarEntry*

        :return: The location of this CalendarEntryBase.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CalendarEntryBase.

        The geographic location of the *CalendarEntry*

        :param location: The location of this CalendarEntryBase.
        :type location: str
        """

        self._location = location

    @property
    def start_at(self):
        """Gets the start_at of this CalendarEntryBase.

        The time the *CalendarEntry* starts (as an ISO-8601 timestamp)

        :return: The start_at of this CalendarEntryBase.
        :rtype: datetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this CalendarEntryBase.

        The time the *CalendarEntry* starts (as an ISO-8601 timestamp)

        :param start_at: The start_at of this CalendarEntryBase.
        :type start_at: datetime
        """

        self._start_at = start_at

    @property
    def end_at(self):
        """Gets the end_at of this CalendarEntryBase.

        The time the *CalendarEntry* ends (as an ISO-8601 timestamp)

        :return: The end_at of this CalendarEntryBase.
        :rtype: datetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this CalendarEntryBase.

        The time the *CalendarEntry* ends (as an ISO-8601 timestamp)

        :param end_at: The end_at of this CalendarEntryBase.
        :type end_at: datetime
        """

        self._end_at = end_at

    @property
    def all_day(self):
        """Gets the all_day of this CalendarEntryBase.

        Whether the event is all day

        :return: The all_day of this CalendarEntryBase.
        :rtype: bool
        """
        return self._all_day

    @all_day.setter
    def all_day(self, all_day):
        """Sets the all_day of this CalendarEntryBase.

        Whether the event is all day

        :param all_day: The all_day of this CalendarEntryBase.
        :type all_day: bool
        """

        self._all_day = all_day

    @property
    def recurrence_rule(self):
        """Gets the recurrence_rule of this CalendarEntryBase.

        Recurrence rule for expanding

        :return: The recurrence_rule of this CalendarEntryBase.
        :rtype: str
        """
        return self._recurrence_rule

    @recurrence_rule.setter
    def recurrence_rule(self, recurrence_rule):
        """Sets the recurrence_rule of this CalendarEntryBase.

        Recurrence rule for expanding

        :param recurrence_rule: The recurrence_rule of this CalendarEntryBase.
        :type recurrence_rule: str
        """

        self._recurrence_rule = recurrence_rule

    @property
    def parent_calendar_entry_id(self):
        """Gets the parent_calendar_entry_id of this CalendarEntryBase.

        Identifier for the parent *CalendarEntry*

        :return: The parent_calendar_entry_id of this CalendarEntryBase.
        :rtype: int
        """
        return self._parent_calendar_entry_id

    @parent_calendar_entry_id.setter
    def parent_calendar_entry_id(self, parent_calendar_entry_id):
        """Sets the parent_calendar_entry_id of this CalendarEntryBase.

        Identifier for the parent *CalendarEntry*

        :param parent_calendar_entry_id: The parent_calendar_entry_id of this CalendarEntryBase.
        :type parent_calendar_entry_id: int
        """

        self._parent_calendar_entry_id = parent_calendar_entry_id

    @property
    def court_rule(self):
        """Gets the court_rule of this CalendarEntryBase.

        Whether this event is associated with a Court Rule

        :return: The court_rule of this CalendarEntryBase.
        :rtype: bool
        """
        return self._court_rule

    @court_rule.setter
    def court_rule(self, court_rule):
        """Sets the court_rule of this CalendarEntryBase.

        Whether this event is associated with a Court Rule

        :param court_rule: The court_rule of this CalendarEntryBase.
        :type court_rule: bool
        """

        self._court_rule = court_rule

    @property
    def created_at(self):
        """Gets the created_at of this CalendarEntryBase.

        The time the *CalendarEntry* was created (as a ISO-8601 timestamp)

        :return: The created_at of this CalendarEntryBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CalendarEntryBase.

        The time the *CalendarEntry* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this CalendarEntryBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CalendarEntryBase.

        The time the *CalendarEntry* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this CalendarEntryBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CalendarEntryBase.

        The time the *CalendarEntry* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this CalendarEntryBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def permission(self):
        """Gets the permission of this CalendarEntryBase.

        The view permission for the current user, will return 'viewer' when permission is 'limited_viewer' and the user is an attendee.

        :return: The permission of this CalendarEntryBase.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this CalendarEntryBase.

        The view permission for the current user, will return 'viewer' when permission is 'limited_viewer' and the user is an attendee.

        :param permission: The permission of this CalendarEntryBase.
        :type permission: str
        """

        self._permission = permission

    @property
    def calendar_owner_id(self):
        """Gets the calendar_owner_id of this CalendarEntryBase.

        The id of the calendar owner.

        :return: The calendar_owner_id of this CalendarEntryBase.
        :rtype: int
        """
        return self._calendar_owner_id

    @calendar_owner_id.setter
    def calendar_owner_id(self, calendar_owner_id):
        """Sets the calendar_owner_id of this CalendarEntryBase.

        The id of the calendar owner.

        :param calendar_owner_id: The calendar_owner_id of this CalendarEntryBase.
        :type calendar_owner_id: int
        """

        self._calendar_owner_id = calendar_owner_id

    @property
    def start_at_time_zone(self):
        """Gets the start_at_time_zone of this CalendarEntryBase.

        Original start at time zone of the event.

        :return: The start_at_time_zone of this CalendarEntryBase.
        :rtype: str
        """
        return self._start_at_time_zone

    @start_at_time_zone.setter
    def start_at_time_zone(self, start_at_time_zone):
        """Sets the start_at_time_zone of this CalendarEntryBase.

        Original start at time zone of the event.

        :param start_at_time_zone: The start_at_time_zone of this CalendarEntryBase.
        :type start_at_time_zone: str
        """

        self._start_at_time_zone = start_at_time_zone

    @property
    def time_entries_count(self):
        """Gets the time_entries_count of this CalendarEntryBase.

        The number of `TimeEntry` activities associated with the *CalendarEntry*

        :return: The time_entries_count of this CalendarEntryBase.
        :rtype: int
        """
        return self._time_entries_count

    @time_entries_count.setter
    def time_entries_count(self, time_entries_count):
        """Sets the time_entries_count of this CalendarEntryBase.

        The number of `TimeEntry` activities associated with the *CalendarEntry*

        :param time_entries_count: The time_entries_count of this CalendarEntryBase.
        :type time_entries_count: int
        """

        self._time_entries_count = time_entries_count
