# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_calendar_entry_base import ActivityCalendarEntryBase
from openapi_server.models.activity_description_base import ActivityDescriptionBase
from openapi_server.models.activity_task_base import ActivityTaskBase
from openapi_server.models.activity_text_message_conversation_base import ActivityTextMessageConversationBase
from openapi_server.models.bill_base import BillBase
from openapi_server.models.client_portal_base import ClientPortalBase
from openapi_server.models.communication_base import CommunicationBase
from openapi_server.models.contact_base import ContactBase
from openapi_server.models.document_version_base import DocumentVersionBase
from openapi_server.models.expense_category_base import ExpenseCategoryBase
from openapi_server.models.legal_aid_uk_activity_base import LegalAidUkActivityBase
from openapi_server.models.matter_base import MatterBase
from openapi_server.models.note_base import NoteBase
from openapi_server.models.polymorphic_object_base import PolymorphicObjectBase
from openapi_server.models.timer_base import TimerBase
from openapi_server.models.user_base import UserBase
from openapi_server.models.utbms_code_base import UtbmsCodeBase
from openapi_server import util


class Activity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, type: str=None, _date: date=None, quantity_in_hours: float=None, rounded_quantity_in_hours: float=None, quantity: float=None, rounded_quantity: float=None, quantity_redacted: bool=None, price: float=None, note: str=None, flat_rate: bool=None, billed: bool=None, on_bill: bool=None, total: float=None, contingency_fee: bool=None, created_at: datetime=None, updated_at: datetime=None, reference: str=None, non_billable: bool=None, non_billable_total: float=None, no_charge: bool=None, tax_setting: str=None, activity_description: ActivityDescriptionBase=None, expense_category: ExpenseCategoryBase=None, bill: BillBase=None, communication: CommunicationBase=None, client_portal: ClientPortalBase=None, matter: MatterBase=None, matter_note: NoteBase=None, contact_note: NoteBase=None, subject: PolymorphicObjectBase=None, timer: TimerBase=None, user: UserBase=None, utbms_expense: UtbmsCodeBase=None, vendor: ContactBase=None, calendar_entry: ActivityCalendarEntryBase=None, task: ActivityTaskBase=None, text_message_conversation: ActivityTextMessageConversationBase=None, document_version: DocumentVersionBase=None, legal_aid_uk_activity: LegalAidUkActivityBase=None):
        """Activity - a model defined in OpenAPI

        :param id: The id of this Activity.
        :param etag: The etag of this Activity.
        :param type: The type of this Activity.
        :param _date: The _date of this Activity.
        :param quantity_in_hours: The quantity_in_hours of this Activity.
        :param rounded_quantity_in_hours: The rounded_quantity_in_hours of this Activity.
        :param quantity: The quantity of this Activity.
        :param rounded_quantity: The rounded_quantity of this Activity.
        :param quantity_redacted: The quantity_redacted of this Activity.
        :param price: The price of this Activity.
        :param note: The note of this Activity.
        :param flat_rate: The flat_rate of this Activity.
        :param billed: The billed of this Activity.
        :param on_bill: The on_bill of this Activity.
        :param total: The total of this Activity.
        :param contingency_fee: The contingency_fee of this Activity.
        :param created_at: The created_at of this Activity.
        :param updated_at: The updated_at of this Activity.
        :param reference: The reference of this Activity.
        :param non_billable: The non_billable of this Activity.
        :param non_billable_total: The non_billable_total of this Activity.
        :param no_charge: The no_charge of this Activity.
        :param tax_setting: The tax_setting of this Activity.
        :param activity_description: The activity_description of this Activity.
        :param expense_category: The expense_category of this Activity.
        :param bill: The bill of this Activity.
        :param communication: The communication of this Activity.
        :param client_portal: The client_portal of this Activity.
        :param matter: The matter of this Activity.
        :param matter_note: The matter_note of this Activity.
        :param contact_note: The contact_note of this Activity.
        :param subject: The subject of this Activity.
        :param timer: The timer of this Activity.
        :param user: The user of this Activity.
        :param utbms_expense: The utbms_expense of this Activity.
        :param vendor: The vendor of this Activity.
        :param calendar_entry: The calendar_entry of this Activity.
        :param task: The task of this Activity.
        :param text_message_conversation: The text_message_conversation of this Activity.
        :param document_version: The document_version of this Activity.
        :param legal_aid_uk_activity: The legal_aid_uk_activity of this Activity.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'type': str,
            '_date': date,
            'quantity_in_hours': float,
            'rounded_quantity_in_hours': float,
            'quantity': float,
            'rounded_quantity': float,
            'quantity_redacted': bool,
            'price': float,
            'note': str,
            'flat_rate': bool,
            'billed': bool,
            'on_bill': bool,
            'total': float,
            'contingency_fee': bool,
            'created_at': datetime,
            'updated_at': datetime,
            'reference': str,
            'non_billable': bool,
            'non_billable_total': float,
            'no_charge': bool,
            'tax_setting': str,
            'activity_description': ActivityDescriptionBase,
            'expense_category': ExpenseCategoryBase,
            'bill': BillBase,
            'communication': CommunicationBase,
            'client_portal': ClientPortalBase,
            'matter': MatterBase,
            'matter_note': NoteBase,
            'contact_note': NoteBase,
            'subject': PolymorphicObjectBase,
            'timer': TimerBase,
            'user': UserBase,
            'utbms_expense': UtbmsCodeBase,
            'vendor': ContactBase,
            'calendar_entry': ActivityCalendarEntryBase,
            'task': ActivityTaskBase,
            'text_message_conversation': ActivityTextMessageConversationBase,
            'document_version': DocumentVersionBase,
            'legal_aid_uk_activity': LegalAidUkActivityBase
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'type': 'type',
            '_date': 'date',
            'quantity_in_hours': 'quantity_in_hours',
            'rounded_quantity_in_hours': 'rounded_quantity_in_hours',
            'quantity': 'quantity',
            'rounded_quantity': 'rounded_quantity',
            'quantity_redacted': 'quantity_redacted',
            'price': 'price',
            'note': 'note',
            'flat_rate': 'flat_rate',
            'billed': 'billed',
            'on_bill': 'on_bill',
            'total': 'total',
            'contingency_fee': 'contingency_fee',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'reference': 'reference',
            'non_billable': 'non_billable',
            'non_billable_total': 'non_billable_total',
            'no_charge': 'no_charge',
            'tax_setting': 'tax_setting',
            'activity_description': 'activity_description',
            'expense_category': 'expense_category',
            'bill': 'bill',
            'communication': 'communication',
            'client_portal': 'client_portal',
            'matter': 'matter',
            'matter_note': 'matter_note',
            'contact_note': 'contact_note',
            'subject': 'subject',
            'timer': 'timer',
            'user': 'user',
            'utbms_expense': 'utbms_expense',
            'vendor': 'vendor',
            'calendar_entry': 'calendar_entry',
            'task': 'task',
            'text_message_conversation': 'text_message_conversation',
            'document_version': 'document_version',
            'legal_aid_uk_activity': 'legal_aid_uk_activity'
        }

        self._id = id
        self._etag = etag
        self._type = type
        self.__date = _date
        self._quantity_in_hours = quantity_in_hours
        self._rounded_quantity_in_hours = rounded_quantity_in_hours
        self._quantity = quantity
        self._rounded_quantity = rounded_quantity
        self._quantity_redacted = quantity_redacted
        self._price = price
        self._note = note
        self._flat_rate = flat_rate
        self._billed = billed
        self._on_bill = on_bill
        self._total = total
        self._contingency_fee = contingency_fee
        self._created_at = created_at
        self._updated_at = updated_at
        self._reference = reference
        self._non_billable = non_billable
        self._non_billable_total = non_billable_total
        self._no_charge = no_charge
        self._tax_setting = tax_setting
        self._activity_description = activity_description
        self._expense_category = expense_category
        self._bill = bill
        self._communication = communication
        self._client_portal = client_portal
        self._matter = matter
        self._matter_note = matter_note
        self._contact_note = contact_note
        self._subject = subject
        self._timer = timer
        self._user = user
        self._utbms_expense = utbms_expense
        self._vendor = vendor
        self._calendar_entry = calendar_entry
        self._task = task
        self._text_message_conversation = text_message_conversation
        self._document_version = document_version
        self._legal_aid_uk_activity = legal_aid_uk_activity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Activity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activity of this Activity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Activity.

        Unique identifier for the *Activity*

        :return: The id of this Activity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Activity.

        Unique identifier for the *Activity*

        :param id: The id of this Activity.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this Activity.

        ETag for the *Activity*

        :return: The etag of this Activity.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Activity.

        ETag for the *Activity*

        :param etag: The etag of this Activity.
        :type etag: str
        """

        self._etag = etag

    @property
    def type(self):
        """Gets the type of this Activity.

        The type of the *Activity*

        :return: The type of this Activity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Activity.

        The type of the *Activity*

        :param type: The type of this Activity.
        :type type: str
        """
        allowed_values = ["TimeEntry", "ExpenseEntry", "HardCostEntry", "SoftCostEntry"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def _date(self):
        """Gets the _date of this Activity.

        The date the *Activity* was performed (as a ISO-8601 date)

        :return: The _date of this Activity.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Activity.

        The date the *Activity* was performed (as a ISO-8601 date)

        :param _date: The _date of this Activity.
        :type _date: date
        """

        self.__date = _date

    @property
    def quantity_in_hours(self):
        """Gets the quantity_in_hours of this Activity.

        The number of hours the TimeEntry took.

        :return: The quantity_in_hours of this Activity.
        :rtype: float
        """
        return self._quantity_in_hours

    @quantity_in_hours.setter
    def quantity_in_hours(self, quantity_in_hours):
        """Sets the quantity_in_hours of this Activity.

        The number of hours the TimeEntry took.

        :param quantity_in_hours: The quantity_in_hours of this Activity.
        :type quantity_in_hours: float
        """

        self._quantity_in_hours = quantity_in_hours

    @property
    def rounded_quantity_in_hours(self):
        """Gets the rounded_quantity_in_hours of this Activity.

        The number of hours rounded accordingly to the billing settings. The rounded value is used to calculate the total. 

        :return: The rounded_quantity_in_hours of this Activity.
        :rtype: float
        """
        return self._rounded_quantity_in_hours

    @rounded_quantity_in_hours.setter
    def rounded_quantity_in_hours(self, rounded_quantity_in_hours):
        """Sets the rounded_quantity_in_hours of this Activity.

        The number of hours rounded accordingly to the billing settings. The rounded value is used to calculate the total. 

        :param rounded_quantity_in_hours: The rounded_quantity_in_hours of this Activity.
        :type rounded_quantity_in_hours: float
        """

        self._rounded_quantity_in_hours = rounded_quantity_in_hours

    @property
    def quantity(self):
        """Gets the quantity of this Activity.

        The field is applicable to TimeEntry, ExpenseEntry, and SoftCostEntry.  **Version <= 4.0.3:** The number of hours the TimeEntry took.  **Latest version:** The number of seconds the TimeEntry took. 

        :return: The quantity of this Activity.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Activity.

        The field is applicable to TimeEntry, ExpenseEntry, and SoftCostEntry.  **Version <= 4.0.3:** The number of hours the TimeEntry took.  **Latest version:** The number of seconds the TimeEntry took. 

        :param quantity: The quantity of this Activity.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def rounded_quantity(self):
        """Gets the rounded_quantity of this Activity.

        The field is applicable to time entries only.  **Version <= 4.0.3:** The number of hours rounded accordingly to the billing settings. The rounded value is used to calculate the total.  **Latest version:** The number of seconds rounded accordingly to the billing settings. The rounded value is used to calculate the total. 

        :return: The rounded_quantity of this Activity.
        :rtype: float
        """
        return self._rounded_quantity

    @rounded_quantity.setter
    def rounded_quantity(self, rounded_quantity):
        """Sets the rounded_quantity of this Activity.

        The field is applicable to time entries only.  **Version <= 4.0.3:** The number of hours rounded accordingly to the billing settings. The rounded value is used to calculate the total.  **Latest version:** The number of seconds rounded accordingly to the billing settings. The rounded value is used to calculate the total. 

        :param rounded_quantity: The rounded_quantity of this Activity.
        :type rounded_quantity: float
        """

        self._rounded_quantity = rounded_quantity

    @property
    def quantity_redacted(self):
        """Gets the quantity_redacted of this Activity.

        Is `true` if any of the following fields are redacted: `quantity`, `rounded_quantity`, `rounded_quantity_in_hours`, `quantity_in_hours`, `total`, `non_billable_total` 

        :return: The quantity_redacted of this Activity.
        :rtype: bool
        """
        return self._quantity_redacted

    @quantity_redacted.setter
    def quantity_redacted(self, quantity_redacted):
        """Sets the quantity_redacted of this Activity.

        Is `true` if any of the following fields are redacted: `quantity`, `rounded_quantity`, `rounded_quantity_in_hours`, `quantity_in_hours`, `total`, `non_billable_total` 

        :param quantity_redacted: The quantity_redacted of this Activity.
        :type quantity_redacted: bool
        """

        self._quantity_redacted = quantity_redacted

    @property
    def price(self):
        """Gets the price of this Activity.

        The hourly or flat rate of the *Activity*

        :return: The price of this Activity.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Activity.

        The hourly or flat rate of the *Activity*

        :param price: The price of this Activity.
        :type price: float
        """

        self._price = price

    @property
    def note(self):
        """Gets the note of this Activity.

        The details about the *Activity*

        :return: The note of this Activity.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Activity.

        The details about the *Activity*

        :param note: The note of this Activity.
        :type note: str
        """

        self._note = note

    @property
    def flat_rate(self):
        """Gets the flat_rate of this Activity.

        Whether the *Activity* is a flat rate

        :return: The flat_rate of this Activity.
        :rtype: bool
        """
        return self._flat_rate

    @flat_rate.setter
    def flat_rate(self, flat_rate):
        """Sets the flat_rate of this Activity.

        Whether the *Activity* is a flat rate

        :param flat_rate: The flat_rate of this Activity.
        :type flat_rate: bool
        """

        self._flat_rate = flat_rate

    @property
    def billed(self):
        """Gets the billed of this Activity.

        Whether the *Activity* has been added to an active bill that is in the state of `awaiting_payment` or `paid`

        :return: The billed of this Activity.
        :rtype: bool
        """
        return self._billed

    @billed.setter
    def billed(self, billed):
        """Sets the billed of this Activity.

        Whether the *Activity* has been added to an active bill that is in the state of `awaiting_payment` or `paid`

        :param billed: The billed of this Activity.
        :type billed: bool
        """

        self._billed = billed

    @property
    def on_bill(self):
        """Gets the on_bill of this Activity.

        Whether the *Activity* has been added to an active bill that is in the state of `draft`, `awaiting_approval`, `awaiting_payment` or `paid`

        :return: The on_bill of this Activity.
        :rtype: bool
        """
        return self._on_bill

    @on_bill.setter
    def on_bill(self, on_bill):
        """Sets the on_bill of this Activity.

        Whether the *Activity* has been added to an active bill that is in the state of `draft`, `awaiting_approval`, `awaiting_payment` or `paid`

        :param on_bill: The on_bill of this Activity.
        :type on_bill: bool
        """

        self._on_bill = on_bill

    @property
    def total(self):
        """Gets the total of this Activity.

        The total cost of draft, billable and billed items in the *Activity*

        :return: The total of this Activity.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Activity.

        The total cost of draft, billable and billed items in the *Activity*

        :param total: The total of this Activity.
        :type total: float
        """

        self._total = total

    @property
    def contingency_fee(self):
        """Gets the contingency_fee of this Activity.

        Whether or not the *Activity* is a contingency fee

        :return: The contingency_fee of this Activity.
        :rtype: bool
        """
        return self._contingency_fee

    @contingency_fee.setter
    def contingency_fee(self, contingency_fee):
        """Sets the contingency_fee of this Activity.

        Whether or not the *Activity* is a contingency fee

        :param contingency_fee: The contingency_fee of this Activity.
        :type contingency_fee: bool
        """

        self._contingency_fee = contingency_fee

    @property
    def created_at(self):
        """Gets the created_at of this Activity.

        The time the *Activity* was created (as a ISO-8601 timestamp)

        :return: The created_at of this Activity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Activity.

        The time the *Activity* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this Activity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Activity.

        The time the *Activity* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this Activity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Activity.

        The time the *Activity* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this Activity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def reference(self):
        """Gets the reference of this Activity.

        A check reference for a HardCostEntry.

        :return: The reference of this Activity.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Activity.

        A check reference for a HardCostEntry.

        :param reference: The reference of this Activity.
        :type reference: str
        """

        self._reference = reference

    @property
    def non_billable(self):
        """Gets the non_billable of this Activity.

        Whether the *Activity* is non-billable

        :return: The non_billable of this Activity.
        :rtype: bool
        """
        return self._non_billable

    @non_billable.setter
    def non_billable(self, non_billable):
        """Sets the non_billable of this Activity.

        Whether the *Activity* is non-billable

        :param non_billable: The non_billable of this Activity.
        :type non_billable: bool
        """

        self._non_billable = non_billable

    @property
    def non_billable_total(self):
        """Gets the non_billable_total of this Activity.

        The total cost of non-billable items in the *Activity*

        :return: The non_billable_total of this Activity.
        :rtype: float
        """
        return self._non_billable_total

    @non_billable_total.setter
    def non_billable_total(self, non_billable_total):
        """Sets the non_billable_total of this Activity.

        The total cost of non-billable items in the *Activity*

        :param non_billable_total: The non_billable_total of this Activity.
        :type non_billable_total: float
        """

        self._non_billable_total = non_billable_total

    @property
    def no_charge(self):
        """Gets the no_charge of this Activity.

        Whether the non-billable *Activity* is shown on the bill.

        :return: The no_charge of this Activity.
        :rtype: bool
        """
        return self._no_charge

    @no_charge.setter
    def no_charge(self, no_charge):
        """Sets the no_charge of this Activity.

        Whether the non-billable *Activity* is shown on the bill.

        :param no_charge: The no_charge of this Activity.
        :type no_charge: bool
        """

        self._no_charge = no_charge

    @property
    def tax_setting(self):
        """Gets the tax_setting of this Activity.

        The option denoting whether primary tax, secondary tax, or both is applied to an expense entry.

        :return: The tax_setting of this Activity.
        :rtype: str
        """
        return self._tax_setting

    @tax_setting.setter
    def tax_setting(self, tax_setting):
        """Sets the tax_setting of this Activity.

        The option denoting whether primary tax, secondary tax, or both is applied to an expense entry.

        :param tax_setting: The tax_setting of this Activity.
        :type tax_setting: str
        """
        allowed_values = ["no_tax", "tax_1_only", "tax_2_only", "tax_1_and_tax_2"]  # noqa: E501
        if tax_setting not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_setting` ({0}), must be one of {1}"
                .format(tax_setting, allowed_values)
            )

        self._tax_setting = tax_setting

    @property
    def activity_description(self):
        """Gets the activity_description of this Activity.


        :return: The activity_description of this Activity.
        :rtype: ActivityDescriptionBase
        """
        return self._activity_description

    @activity_description.setter
    def activity_description(self, activity_description):
        """Sets the activity_description of this Activity.


        :param activity_description: The activity_description of this Activity.
        :type activity_description: ActivityDescriptionBase
        """

        self._activity_description = activity_description

    @property
    def expense_category(self):
        """Gets the expense_category of this Activity.


        :return: The expense_category of this Activity.
        :rtype: ExpenseCategoryBase
        """
        return self._expense_category

    @expense_category.setter
    def expense_category(self, expense_category):
        """Sets the expense_category of this Activity.


        :param expense_category: The expense_category of this Activity.
        :type expense_category: ExpenseCategoryBase
        """

        self._expense_category = expense_category

    @property
    def bill(self):
        """Gets the bill of this Activity.


        :return: The bill of this Activity.
        :rtype: BillBase
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """Sets the bill of this Activity.


        :param bill: The bill of this Activity.
        :type bill: BillBase
        """

        self._bill = bill

    @property
    def communication(self):
        """Gets the communication of this Activity.


        :return: The communication of this Activity.
        :rtype: CommunicationBase
        """
        return self._communication

    @communication.setter
    def communication(self, communication):
        """Sets the communication of this Activity.


        :param communication: The communication of this Activity.
        :type communication: CommunicationBase
        """

        self._communication = communication

    @property
    def client_portal(self):
        """Gets the client_portal of this Activity.


        :return: The client_portal of this Activity.
        :rtype: ClientPortalBase
        """
        return self._client_portal

    @client_portal.setter
    def client_portal(self, client_portal):
        """Sets the client_portal of this Activity.


        :param client_portal: The client_portal of this Activity.
        :type client_portal: ClientPortalBase
        """

        self._client_portal = client_portal

    @property
    def matter(self):
        """Gets the matter of this Activity.


        :return: The matter of this Activity.
        :rtype: MatterBase
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this Activity.


        :param matter: The matter of this Activity.
        :type matter: MatterBase
        """

        self._matter = matter

    @property
    def matter_note(self):
        """Gets the matter_note of this Activity.


        :return: The matter_note of this Activity.
        :rtype: NoteBase
        """
        return self._matter_note

    @matter_note.setter
    def matter_note(self, matter_note):
        """Sets the matter_note of this Activity.


        :param matter_note: The matter_note of this Activity.
        :type matter_note: NoteBase
        """

        self._matter_note = matter_note

    @property
    def contact_note(self):
        """Gets the contact_note of this Activity.


        :return: The contact_note of this Activity.
        :rtype: NoteBase
        """
        return self._contact_note

    @contact_note.setter
    def contact_note(self, contact_note):
        """Sets the contact_note of this Activity.


        :param contact_note: The contact_note of this Activity.
        :type contact_note: NoteBase
        """

        self._contact_note = contact_note

    @property
    def subject(self):
        """Gets the subject of this Activity.


        :return: The subject of this Activity.
        :rtype: PolymorphicObjectBase
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Activity.


        :param subject: The subject of this Activity.
        :type subject: PolymorphicObjectBase
        """

        self._subject = subject

    @property
    def timer(self):
        """Gets the timer of this Activity.


        :return: The timer of this Activity.
        :rtype: TimerBase
        """
        return self._timer

    @timer.setter
    def timer(self, timer):
        """Sets the timer of this Activity.


        :param timer: The timer of this Activity.
        :type timer: TimerBase
        """

        self._timer = timer

    @property
    def user(self):
        """Gets the user of this Activity.


        :return: The user of this Activity.
        :rtype: UserBase
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Activity.


        :param user: The user of this Activity.
        :type user: UserBase
        """

        self._user = user

    @property
    def utbms_expense(self):
        """Gets the utbms_expense of this Activity.


        :return: The utbms_expense of this Activity.
        :rtype: UtbmsCodeBase
        """
        return self._utbms_expense

    @utbms_expense.setter
    def utbms_expense(self, utbms_expense):
        """Sets the utbms_expense of this Activity.


        :param utbms_expense: The utbms_expense of this Activity.
        :type utbms_expense: UtbmsCodeBase
        """

        self._utbms_expense = utbms_expense

    @property
    def vendor(self):
        """Gets the vendor of this Activity.


        :return: The vendor of this Activity.
        :rtype: ContactBase
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Activity.


        :param vendor: The vendor of this Activity.
        :type vendor: ContactBase
        """

        self._vendor = vendor

    @property
    def calendar_entry(self):
        """Gets the calendar_entry of this Activity.


        :return: The calendar_entry of this Activity.
        :rtype: ActivityCalendarEntryBase
        """
        return self._calendar_entry

    @calendar_entry.setter
    def calendar_entry(self, calendar_entry):
        """Sets the calendar_entry of this Activity.


        :param calendar_entry: The calendar_entry of this Activity.
        :type calendar_entry: ActivityCalendarEntryBase
        """

        self._calendar_entry = calendar_entry

    @property
    def task(self):
        """Gets the task of this Activity.


        :return: The task of this Activity.
        :rtype: ActivityTaskBase
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this Activity.


        :param task: The task of this Activity.
        :type task: ActivityTaskBase
        """

        self._task = task

    @property
    def text_message_conversation(self):
        """Gets the text_message_conversation of this Activity.


        :return: The text_message_conversation of this Activity.
        :rtype: ActivityTextMessageConversationBase
        """
        return self._text_message_conversation

    @text_message_conversation.setter
    def text_message_conversation(self, text_message_conversation):
        """Sets the text_message_conversation of this Activity.


        :param text_message_conversation: The text_message_conversation of this Activity.
        :type text_message_conversation: ActivityTextMessageConversationBase
        """

        self._text_message_conversation = text_message_conversation

    @property
    def document_version(self):
        """Gets the document_version of this Activity.


        :return: The document_version of this Activity.
        :rtype: DocumentVersionBase
        """
        return self._document_version

    @document_version.setter
    def document_version(self, document_version):
        """Sets the document_version of this Activity.


        :param document_version: The document_version of this Activity.
        :type document_version: DocumentVersionBase
        """

        self._document_version = document_version

    @property
    def legal_aid_uk_activity(self):
        """Gets the legal_aid_uk_activity of this Activity.


        :return: The legal_aid_uk_activity of this Activity.
        :rtype: LegalAidUkActivityBase
        """
        return self._legal_aid_uk_activity

    @legal_aid_uk_activity.setter
    def legal_aid_uk_activity(self, legal_aid_uk_activity):
        """Sets the legal_aid_uk_activity of this Activity.


        :param legal_aid_uk_activity: The legal_aid_uk_activity of this Activity.
        :type legal_aid_uk_activity: LegalAidUkActivityBase
        """

        self._legal_aid_uk_activity = legal_aid_uk_activity
