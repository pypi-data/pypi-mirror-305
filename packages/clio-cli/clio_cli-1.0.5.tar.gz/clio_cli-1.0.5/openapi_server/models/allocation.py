# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account_base import BankAccountBase
from openapi_server.models.bill_base import BillBase
from openapi_server.models.contact_base import ContactBase
from openapi_server.models.matter_base import MatterBase
from openapi_server.models.polymorphic_object_base import PolymorphicObjectBase
from openapi_server import util


class Allocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, _date: date=None, amount: float=None, interest: bool=None, voided_at: datetime=None, created_at: datetime=None, updated_at: datetime=None, description: str=None, has_online_payment: bool=None, destroyable: bool=None, payment_type: str=None, bill: BillBase=None, source_bank_account: BankAccountBase=None, destination_bank_account: BankAccountBase=None, matter: MatterBase=None, contact: ContactBase=None, parent: PolymorphicObjectBase=None):
        """Allocation - a model defined in OpenAPI

        :param id: The id of this Allocation.
        :param etag: The etag of this Allocation.
        :param _date: The _date of this Allocation.
        :param amount: The amount of this Allocation.
        :param interest: The interest of this Allocation.
        :param voided_at: The voided_at of this Allocation.
        :param created_at: The created_at of this Allocation.
        :param updated_at: The updated_at of this Allocation.
        :param description: The description of this Allocation.
        :param has_online_payment: The has_online_payment of this Allocation.
        :param destroyable: The destroyable of this Allocation.
        :param payment_type: The payment_type of this Allocation.
        :param bill: The bill of this Allocation.
        :param source_bank_account: The source_bank_account of this Allocation.
        :param destination_bank_account: The destination_bank_account of this Allocation.
        :param matter: The matter of this Allocation.
        :param contact: The contact of this Allocation.
        :param parent: The parent of this Allocation.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            '_date': date,
            'amount': float,
            'interest': bool,
            'voided_at': datetime,
            'created_at': datetime,
            'updated_at': datetime,
            'description': str,
            'has_online_payment': bool,
            'destroyable': bool,
            'payment_type': str,
            'bill': BillBase,
            'source_bank_account': BankAccountBase,
            'destination_bank_account': BankAccountBase,
            'matter': MatterBase,
            'contact': ContactBase,
            'parent': PolymorphicObjectBase
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            '_date': 'date',
            'amount': 'amount',
            'interest': 'interest',
            'voided_at': 'voided_at',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'description': 'description',
            'has_online_payment': 'has_online_payment',
            'destroyable': 'destroyable',
            'payment_type': 'payment_type',
            'bill': 'bill',
            'source_bank_account': 'source_bank_account',
            'destination_bank_account': 'destination_bank_account',
            'matter': 'matter',
            'contact': 'contact',
            'parent': 'parent'
        }

        self._id = id
        self._etag = etag
        self.__date = _date
        self._amount = amount
        self._interest = interest
        self._voided_at = voided_at
        self._created_at = created_at
        self._updated_at = updated_at
        self._description = description
        self._has_online_payment = has_online_payment
        self._destroyable = destroyable
        self._payment_type = payment_type
        self._bill = bill
        self._source_bank_account = source_bank_account
        self._destination_bank_account = destination_bank_account
        self._matter = matter
        self._contact = contact
        self._parent = parent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Allocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Allocation of this Allocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Allocation.

        Unique identifier for the *Allocation*

        :return: The id of this Allocation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Allocation.

        Unique identifier for the *Allocation*

        :param id: The id of this Allocation.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this Allocation.

        ETag for the *Allocation*

        :return: The etag of this Allocation.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Allocation.

        ETag for the *Allocation*

        :param etag: The etag of this Allocation.
        :type etag: str
        """

        self._etag = etag

    @property
    def _date(self):
        """Gets the _date of this Allocation.

        The date the allocation was applied (as a ISO-8601 date)

        :return: The _date of this Allocation.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Allocation.

        The date the allocation was applied (as a ISO-8601 date)

        :param _date: The _date of this Allocation.
        :type _date: date
        """

        self.__date = _date

    @property
    def amount(self):
        """Gets the amount of this Allocation.

        The total amount of money that the user has allocated

        :return: The amount of this Allocation.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Allocation.

        The total amount of money that the user has allocated

        :param amount: The amount of this Allocation.
        :type amount: float
        """

        self._amount = amount

    @property
    def interest(self):
        """Gets the interest of this Allocation.

        Whether the allocation is applied to interest amount

        :return: The interest of this Allocation.
        :rtype: bool
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this Allocation.

        Whether the allocation is applied to interest amount

        :param interest: The interest of this Allocation.
        :type interest: bool
        """

        self._interest = interest

    @property
    def voided_at(self):
        """Gets the voided_at of this Allocation.

        Time the *Allocation* was voided (as a ISO-8601 timestamp)

        :return: The voided_at of this Allocation.
        :rtype: datetime
        """
        return self._voided_at

    @voided_at.setter
    def voided_at(self, voided_at):
        """Sets the voided_at of this Allocation.

        Time the *Allocation* was voided (as a ISO-8601 timestamp)

        :param voided_at: The voided_at of this Allocation.
        :type voided_at: datetime
        """

        self._voided_at = voided_at

    @property
    def created_at(self):
        """Gets the created_at of this Allocation.

        The time the *Allocation* was created (as a ISO-8601 timestamp)

        :return: The created_at of this Allocation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Allocation.

        The time the *Allocation* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this Allocation.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Allocation.

        The time the *Allocation* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this Allocation.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Allocation.

        The time the *Allocation* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this Allocation.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def description(self):
        """Gets the description of this Allocation.

        The description from the associated Credit Memo (if applicable)

        :return: The description of this Allocation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Allocation.

        The description from the associated Credit Memo (if applicable)

        :param description: The description of this Allocation.
        :type description: str
        """

        self._description = description

    @property
    def has_online_payment(self):
        """Gets the has_online_payment of this Allocation.

        Whether this allocation is associated with an online payment or not

        :return: The has_online_payment of this Allocation.
        :rtype: bool
        """
        return self._has_online_payment

    @has_online_payment.setter
    def has_online_payment(self, has_online_payment):
        """Sets the has_online_payment of this Allocation.

        Whether this allocation is associated with an online payment or not

        :param has_online_payment: The has_online_payment of this Allocation.
        :type has_online_payment: bool
        """

        self._has_online_payment = has_online_payment

    @property
    def destroyable(self):
        """Gets the destroyable of this Allocation.

        Whether the record can be deleted or not

        :return: The destroyable of this Allocation.
        :rtype: bool
        """
        return self._destroyable

    @destroyable.setter
    def destroyable(self, destroyable):
        """Sets the destroyable of this Allocation.

        Whether the record can be deleted or not

        :param destroyable: The destroyable of this Allocation.
        :type destroyable: bool
        """

        self._destroyable = destroyable

    @property
    def payment_type(self):
        """Gets the payment_type of this Allocation.

        A string indicating whether the payment is a card or an eCheck payment.

        :return: The payment_type of this Allocation.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this Allocation.

        A string indicating whether the payment is a card or an eCheck payment.

        :param payment_type: The payment_type of this Allocation.
        :type payment_type: str
        """

        self._payment_type = payment_type

    @property
    def bill(self):
        """Gets the bill of this Allocation.


        :return: The bill of this Allocation.
        :rtype: BillBase
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """Sets the bill of this Allocation.


        :param bill: The bill of this Allocation.
        :type bill: BillBase
        """

        self._bill = bill

    @property
    def source_bank_account(self):
        """Gets the source_bank_account of this Allocation.


        :return: The source_bank_account of this Allocation.
        :rtype: BankAccountBase
        """
        return self._source_bank_account

    @source_bank_account.setter
    def source_bank_account(self, source_bank_account):
        """Sets the source_bank_account of this Allocation.


        :param source_bank_account: The source_bank_account of this Allocation.
        :type source_bank_account: BankAccountBase
        """

        self._source_bank_account = source_bank_account

    @property
    def destination_bank_account(self):
        """Gets the destination_bank_account of this Allocation.


        :return: The destination_bank_account of this Allocation.
        :rtype: BankAccountBase
        """
        return self._destination_bank_account

    @destination_bank_account.setter
    def destination_bank_account(self, destination_bank_account):
        """Sets the destination_bank_account of this Allocation.


        :param destination_bank_account: The destination_bank_account of this Allocation.
        :type destination_bank_account: BankAccountBase
        """

        self._destination_bank_account = destination_bank_account

    @property
    def matter(self):
        """Gets the matter of this Allocation.


        :return: The matter of this Allocation.
        :rtype: MatterBase
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this Allocation.


        :param matter: The matter of this Allocation.
        :type matter: MatterBase
        """

        self._matter = matter

    @property
    def contact(self):
        """Gets the contact of this Allocation.


        :return: The contact of this Allocation.
        :rtype: ContactBase
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Allocation.


        :param contact: The contact of this Allocation.
        :type contact: ContactBase
        """

        self._contact = contact

    @property
    def parent(self):
        """Gets the parent of this Allocation.


        :return: The parent of this Allocation.
        :rtype: PolymorphicObjectBase
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Allocation.


        :param parent: The parent of this Allocation.
        :type parent: PolymorphicObjectBase
        """

        self._parent = parent
