# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.line_item_update_request_data_activity import LineItemUpdateRequestDataActivity
from openapi_server.models.line_item_update_request_data_bill import LineItemUpdateRequestDataBill
from openapi_server.models.line_item_update_request_data_discount import LineItemUpdateRequestDataDiscount
from openapi_server.models.line_item_update_request_data_matter import LineItemUpdateRequestDataMatter
from openapi_server import util


class LineItemUpdateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity: LineItemUpdateRequestDataActivity=None, bill: LineItemUpdateRequestDataBill=None, _date: date=None, description: str=None, discount: LineItemUpdateRequestDataDiscount=None, group_ordering: int=None, kind: str=None, matter: LineItemUpdateRequestDataMatter=None, note: str=None, price: float=None, quantity: float=None, secondary_taxable: bool=None, taxable: bool=None, update_original_record: bool=None):
        """LineItemUpdateRequestData - a model defined in OpenAPI

        :param activity: The activity of this LineItemUpdateRequestData.
        :param bill: The bill of this LineItemUpdateRequestData.
        :param _date: The _date of this LineItemUpdateRequestData.
        :param description: The description of this LineItemUpdateRequestData.
        :param discount: The discount of this LineItemUpdateRequestData.
        :param group_ordering: The group_ordering of this LineItemUpdateRequestData.
        :param kind: The kind of this LineItemUpdateRequestData.
        :param matter: The matter of this LineItemUpdateRequestData.
        :param note: The note of this LineItemUpdateRequestData.
        :param price: The price of this LineItemUpdateRequestData.
        :param quantity: The quantity of this LineItemUpdateRequestData.
        :param secondary_taxable: The secondary_taxable of this LineItemUpdateRequestData.
        :param taxable: The taxable of this LineItemUpdateRequestData.
        :param update_original_record: The update_original_record of this LineItemUpdateRequestData.
        """
        self.openapi_types = {
            'activity': LineItemUpdateRequestDataActivity,
            'bill': LineItemUpdateRequestDataBill,
            '_date': date,
            'description': str,
            'discount': LineItemUpdateRequestDataDiscount,
            'group_ordering': int,
            'kind': str,
            'matter': LineItemUpdateRequestDataMatter,
            'note': str,
            'price': float,
            'quantity': float,
            'secondary_taxable': bool,
            'taxable': bool,
            'update_original_record': bool
        }

        self.attribute_map = {
            'activity': 'activity',
            'bill': 'bill',
            '_date': 'date',
            'description': 'description',
            'discount': 'discount',
            'group_ordering': 'group_ordering',
            'kind': 'kind',
            'matter': 'matter',
            'note': 'note',
            'price': 'price',
            'quantity': 'quantity',
            'secondary_taxable': 'secondary_taxable',
            'taxable': 'taxable',
            'update_original_record': 'update_original_record'
        }

        self._activity = activity
        self._bill = bill
        self.__date = _date
        self._description = description
        self._discount = discount
        self._group_ordering = group_ordering
        self._kind = kind
        self._matter = matter
        self._note = note
        self._price = price
        self._quantity = quantity
        self._secondary_taxable = secondary_taxable
        self._taxable = taxable
        self._update_original_record = update_original_record

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineItemUpdateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineItem_update_request_data of this LineItemUpdateRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity(self):
        """Gets the activity of this LineItemUpdateRequestData.


        :return: The activity of this LineItemUpdateRequestData.
        :rtype: LineItemUpdateRequestDataActivity
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this LineItemUpdateRequestData.


        :param activity: The activity of this LineItemUpdateRequestData.
        :type activity: LineItemUpdateRequestDataActivity
        """

        self._activity = activity

    @property
    def bill(self):
        """Gets the bill of this LineItemUpdateRequestData.


        :return: The bill of this LineItemUpdateRequestData.
        :rtype: LineItemUpdateRequestDataBill
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """Sets the bill of this LineItemUpdateRequestData.


        :param bill: The bill of this LineItemUpdateRequestData.
        :type bill: LineItemUpdateRequestDataBill
        """

        self._bill = bill

    @property
    def _date(self):
        """Gets the _date of this LineItemUpdateRequestData.

        The LineItem date.

        :return: The _date of this LineItemUpdateRequestData.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this LineItemUpdateRequestData.

        The LineItem date.

        :param _date: The _date of this LineItemUpdateRequestData.
        :type _date: date
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this LineItemUpdateRequestData.

        Description of the LineItem.

        :return: The description of this LineItemUpdateRequestData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LineItemUpdateRequestData.

        Description of the LineItem.

        :param description: The description of this LineItemUpdateRequestData.
        :type description: str
        """

        self._description = description

    @property
    def discount(self):
        """Gets the discount of this LineItemUpdateRequestData.


        :return: The discount of this LineItemUpdateRequestData.
        :rtype: LineItemUpdateRequestDataDiscount
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this LineItemUpdateRequestData.


        :param discount: The discount of this LineItemUpdateRequestData.
        :type discount: LineItemUpdateRequestDataDiscount
        """

        self._discount = discount

    @property
    def group_ordering(self):
        """Gets the group_ordering of this LineItemUpdateRequestData.

        The LineItem group ordering.

        :return: The group_ordering of this LineItemUpdateRequestData.
        :rtype: int
        """
        return self._group_ordering

    @group_ordering.setter
    def group_ordering(self, group_ordering):
        """Sets the group_ordering of this LineItemUpdateRequestData.

        The LineItem group ordering.

        :param group_ordering: The group_ordering of this LineItemUpdateRequestData.
        :type group_ordering: int
        """

        self._group_ordering = group_ordering

    @property
    def kind(self):
        """Gets the kind of this LineItemUpdateRequestData.

        The specific type of activity which is associated with the LineItem.

        :return: The kind of this LineItemUpdateRequestData.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LineItemUpdateRequestData.

        The specific type of activity which is associated with the LineItem.

        :param kind: The kind of this LineItemUpdateRequestData.
        :type kind: str
        """
        allowed_values = ["Expense", "Service", "Product"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def matter(self):
        """Gets the matter of this LineItemUpdateRequestData.


        :return: The matter of this LineItemUpdateRequestData.
        :rtype: LineItemUpdateRequestDataMatter
        """
        return self._matter

    @matter.setter
    def matter(self, matter):
        """Sets the matter of this LineItemUpdateRequestData.


        :param matter: The matter of this LineItemUpdateRequestData.
        :type matter: LineItemUpdateRequestDataMatter
        """

        self._matter = matter

    @property
    def note(self):
        """Gets the note of this LineItemUpdateRequestData.

        The note attached to the LineItem.

        :return: The note of this LineItemUpdateRequestData.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this LineItemUpdateRequestData.

        The note attached to the LineItem.

        :param note: The note of this LineItemUpdateRequestData.
        :type note: str
        """

        self._note = note

    @property
    def price(self):
        """Gets the price of this LineItemUpdateRequestData.

        The price of the LineItem.

        :return: The price of this LineItemUpdateRequestData.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this LineItemUpdateRequestData.

        The price of the LineItem.

        :param price: The price of this LineItemUpdateRequestData.
        :type price: float
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this LineItemUpdateRequestData.

        Quantity of the LineItem.

        :return: The quantity of this LineItemUpdateRequestData.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this LineItemUpdateRequestData.

        Quantity of the LineItem.

        :param quantity: The quantity of this LineItemUpdateRequestData.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def secondary_taxable(self):
        """Gets the secondary_taxable of this LineItemUpdateRequestData.

        Whether the LineItem is secondary taxable.

        :return: The secondary_taxable of this LineItemUpdateRequestData.
        :rtype: bool
        """
        return self._secondary_taxable

    @secondary_taxable.setter
    def secondary_taxable(self, secondary_taxable):
        """Sets the secondary_taxable of this LineItemUpdateRequestData.

        Whether the LineItem is secondary taxable.

        :param secondary_taxable: The secondary_taxable of this LineItemUpdateRequestData.
        :type secondary_taxable: bool
        """

        self._secondary_taxable = secondary_taxable

    @property
    def taxable(self):
        """Gets the taxable of this LineItemUpdateRequestData.

        Whether the LineItem taxable.

        :return: The taxable of this LineItemUpdateRequestData.
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this LineItemUpdateRequestData.

        Whether the LineItem taxable.

        :param taxable: The taxable of this LineItemUpdateRequestData.
        :type taxable: bool
        """

        self._taxable = taxable

    @property
    def update_original_record(self):
        """Gets the update_original_record of this LineItemUpdateRequestData.

        Whether the associated activity will be updated.

        :return: The update_original_record of this LineItemUpdateRequestData.
        :rtype: bool
        """
        return self._update_original_record

    @update_original_record.setter
    def update_original_record(self, update_original_record):
        """Sets the update_original_record of this LineItemUpdateRequestData.

        Whether the associated activity will be updated.

        :param update_original_record: The update_original_record of this LineItemUpdateRequestData.
        :type update_original_record: bool
        """

        self._update_original_record = update_original_record
