# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_balance_base import AccountBalanceBase
from openapi_server.models.contact_base import ContactBase
from openapi_server.models.contingency_fee_base import ContingencyFeeBase
from openapi_server.models.custom_field_set_association_base import CustomFieldSetAssociationBase
from openapi_server.models.custom_field_value import CustomFieldValue
from openapi_server.models.evergreen_retainer_base import EvergreenRetainerBase
from openapi_server.models.folder_base import FolderBase
from openapi_server.models.group_base import GroupBase
from openapi_server.models.legal_aid_uk_matter_base import LegalAidUkMatterBase
from openapi_server.models.matter_bill_recipient import MatterBillRecipient
from openapi_server.models.matter_budget_base import MatterBudgetBase
from openapi_server.models.matter_custom_rate import MatterCustomRate
from openapi_server.models.matter_stage_base import MatterStageBase
from openapi_server.models.practice_area_base import PracticeAreaBase
from openapi_server.models.relationship_base import RelationshipBase
from openapi_server.models.task_base import TaskBase
from openapi_server.models.task_template_list_instace_base import TaskTemplateListInstaceBase
from openapi_server.models.user_base import UserBase
from openapi_server import util


class Matter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, number: int=None, display_number: str=None, custom_number: str=None, description: str=None, status: str=None, location: str=None, client_reference: str=None, client_id: int=None, billable: bool=None, maildrop_address: str=None, billing_method: str=None, open_date: date=None, close_date: date=None, pending_date: date=None, created_at: datetime=None, updated_at: datetime=None, shared: bool=None, has_tasks: bool=None, last_activity_date: date=None, matter_stage_updated_at: datetime=None, client: ContactBase=None, contingency_fee: ContingencyFeeBase=None, custom_rate: MatterCustomRate=None, evergreen_retainer: EvergreenRetainerBase=None, folder: FolderBase=None, group: GroupBase=None, matter_budget: MatterBudgetBase=None, matter_stage: MatterStageBase=None, originating_attorney: UserBase=None, practice_area: PracticeAreaBase=None, responsible_attorney: UserBase=None, statute_of_limitations: TaskBase=None, user: UserBase=None, legal_aid_uk_matter: LegalAidUkMatterBase=None, account_balances: List[AccountBalanceBase]=None, custom_field_values: List[CustomFieldValue]=None, custom_field_set_associations: List[CustomFieldSetAssociationBase]=None, matter_bill_recipients: List[MatterBillRecipient]=None, relationships: List[RelationshipBase]=None, task_template_list_instances: List[TaskTemplateListInstaceBase]=None):
        """Matter - a model defined in OpenAPI

        :param id: The id of this Matter.
        :param etag: The etag of this Matter.
        :param number: The number of this Matter.
        :param display_number: The display_number of this Matter.
        :param custom_number: The custom_number of this Matter.
        :param description: The description of this Matter.
        :param status: The status of this Matter.
        :param location: The location of this Matter.
        :param client_reference: The client_reference of this Matter.
        :param client_id: The client_id of this Matter.
        :param billable: The billable of this Matter.
        :param maildrop_address: The maildrop_address of this Matter.
        :param billing_method: The billing_method of this Matter.
        :param open_date: The open_date of this Matter.
        :param close_date: The close_date of this Matter.
        :param pending_date: The pending_date of this Matter.
        :param created_at: The created_at of this Matter.
        :param updated_at: The updated_at of this Matter.
        :param shared: The shared of this Matter.
        :param has_tasks: The has_tasks of this Matter.
        :param last_activity_date: The last_activity_date of this Matter.
        :param matter_stage_updated_at: The matter_stage_updated_at of this Matter.
        :param client: The client of this Matter.
        :param contingency_fee: The contingency_fee of this Matter.
        :param custom_rate: The custom_rate of this Matter.
        :param evergreen_retainer: The evergreen_retainer of this Matter.
        :param folder: The folder of this Matter.
        :param group: The group of this Matter.
        :param matter_budget: The matter_budget of this Matter.
        :param matter_stage: The matter_stage of this Matter.
        :param originating_attorney: The originating_attorney of this Matter.
        :param practice_area: The practice_area of this Matter.
        :param responsible_attorney: The responsible_attorney of this Matter.
        :param statute_of_limitations: The statute_of_limitations of this Matter.
        :param user: The user of this Matter.
        :param legal_aid_uk_matter: The legal_aid_uk_matter of this Matter.
        :param account_balances: The account_balances of this Matter.
        :param custom_field_values: The custom_field_values of this Matter.
        :param custom_field_set_associations: The custom_field_set_associations of this Matter.
        :param matter_bill_recipients: The matter_bill_recipients of this Matter.
        :param relationships: The relationships of this Matter.
        :param task_template_list_instances: The task_template_list_instances of this Matter.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'number': int,
            'display_number': str,
            'custom_number': str,
            'description': str,
            'status': str,
            'location': str,
            'client_reference': str,
            'client_id': int,
            'billable': bool,
            'maildrop_address': str,
            'billing_method': str,
            'open_date': date,
            'close_date': date,
            'pending_date': date,
            'created_at': datetime,
            'updated_at': datetime,
            'shared': bool,
            'has_tasks': bool,
            'last_activity_date': date,
            'matter_stage_updated_at': datetime,
            'client': ContactBase,
            'contingency_fee': ContingencyFeeBase,
            'custom_rate': MatterCustomRate,
            'evergreen_retainer': EvergreenRetainerBase,
            'folder': FolderBase,
            'group': GroupBase,
            'matter_budget': MatterBudgetBase,
            'matter_stage': MatterStageBase,
            'originating_attorney': UserBase,
            'practice_area': PracticeAreaBase,
            'responsible_attorney': UserBase,
            'statute_of_limitations': TaskBase,
            'user': UserBase,
            'legal_aid_uk_matter': LegalAidUkMatterBase,
            'account_balances': List[AccountBalanceBase],
            'custom_field_values': List[CustomFieldValue],
            'custom_field_set_associations': List[CustomFieldSetAssociationBase],
            'matter_bill_recipients': List[MatterBillRecipient],
            'relationships': List[RelationshipBase],
            'task_template_list_instances': List[TaskTemplateListInstaceBase]
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'number': 'number',
            'display_number': 'display_number',
            'custom_number': 'custom_number',
            'description': 'description',
            'status': 'status',
            'location': 'location',
            'client_reference': 'client_reference',
            'client_id': 'client_id',
            'billable': 'billable',
            'maildrop_address': 'maildrop_address',
            'billing_method': 'billing_method',
            'open_date': 'open_date',
            'close_date': 'close_date',
            'pending_date': 'pending_date',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'shared': 'shared',
            'has_tasks': 'has_tasks',
            'last_activity_date': 'last_activity_date',
            'matter_stage_updated_at': 'matter_stage_updated_at',
            'client': 'client',
            'contingency_fee': 'contingency_fee',
            'custom_rate': 'custom_rate',
            'evergreen_retainer': 'evergreen_retainer',
            'folder': 'folder',
            'group': 'group',
            'matter_budget': 'matter_budget',
            'matter_stage': 'matter_stage',
            'originating_attorney': 'originating_attorney',
            'practice_area': 'practice_area',
            'responsible_attorney': 'responsible_attorney',
            'statute_of_limitations': 'statute_of_limitations',
            'user': 'user',
            'legal_aid_uk_matter': 'legal_aid_uk_matter',
            'account_balances': 'account_balances',
            'custom_field_values': 'custom_field_values',
            'custom_field_set_associations': 'custom_field_set_associations',
            'matter_bill_recipients': 'matter_bill_recipients',
            'relationships': 'relationships',
            'task_template_list_instances': 'task_template_list_instances'
        }

        self._id = id
        self._etag = etag
        self._number = number
        self._display_number = display_number
        self._custom_number = custom_number
        self._description = description
        self._status = status
        self._location = location
        self._client_reference = client_reference
        self._client_id = client_id
        self._billable = billable
        self._maildrop_address = maildrop_address
        self._billing_method = billing_method
        self._open_date = open_date
        self._close_date = close_date
        self._pending_date = pending_date
        self._created_at = created_at
        self._updated_at = updated_at
        self._shared = shared
        self._has_tasks = has_tasks
        self._last_activity_date = last_activity_date
        self._matter_stage_updated_at = matter_stage_updated_at
        self._client = client
        self._contingency_fee = contingency_fee
        self._custom_rate = custom_rate
        self._evergreen_retainer = evergreen_retainer
        self._folder = folder
        self._group = group
        self._matter_budget = matter_budget
        self._matter_stage = matter_stage
        self._originating_attorney = originating_attorney
        self._practice_area = practice_area
        self._responsible_attorney = responsible_attorney
        self._statute_of_limitations = statute_of_limitations
        self._user = user
        self._legal_aid_uk_matter = legal_aid_uk_matter
        self._account_balances = account_balances
        self._custom_field_values = custom_field_values
        self._custom_field_set_associations = custom_field_set_associations
        self._matter_bill_recipients = matter_bill_recipients
        self._relationships = relationships
        self._task_template_list_instances = task_template_list_instances

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Matter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Matter of this Matter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Matter.

        Unique identifier for the *Matter*

        :return: The id of this Matter.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Matter.

        Unique identifier for the *Matter*

        :param id: The id of this Matter.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this Matter.

        ETag for the *Matter*

        :return: The etag of this Matter.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Matter.

        ETag for the *Matter*

        :param etag: The etag of this Matter.
        :type etag: str
        """

        self._etag = etag

    @property
    def number(self):
        """Gets the number of this Matter.

        The number given to the *Matter* within an account

        :return: The number of this Matter.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Matter.

        The number given to the *Matter* within an account

        :param number: The number of this Matter.
        :type number: int
        """

        self._number = number

    @property
    def display_number(self):
        """Gets the display_number of this Matter.

        The reference and label of the *Matter*. Depending on the account's manual_matter_numbering setting, this is either read only (generated) or customizable.

        :return: The display_number of this Matter.
        :rtype: str
        """
        return self._display_number

    @display_number.setter
    def display_number(self, display_number):
        """Sets the display_number of this Matter.

        The reference and label of the *Matter*. Depending on the account's manual_matter_numbering setting, this is either read only (generated) or customizable.

        :param display_number: The display_number of this Matter.
        :type display_number: str
        """

        self._display_number = display_number

    @property
    def custom_number(self):
        """Gets the custom_number of this Matter.

        User defined custom number of the *Matter*

        :return: The custom_number of this Matter.
        :rtype: str
        """
        return self._custom_number

    @custom_number.setter
    def custom_number(self, custom_number):
        """Sets the custom_number of this Matter.

        User defined custom number of the *Matter*

        :param custom_number: The custom_number of this Matter.
        :type custom_number: str
        """

        self._custom_number = custom_number

    @property
    def description(self):
        """Gets the description of this Matter.

        The detailed description of the *Matter*

        :return: The description of this Matter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Matter.

        The detailed description of the *Matter*

        :param description: The description of this Matter.
        :type description: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this Matter.

        The current status of the *Matter*

        :return: The status of this Matter.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Matter.

        The current status of the *Matter*

        :param status: The status of this Matter.
        :type status: str
        """
        allowed_values = ["Pending", "Open", "Closed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def location(self):
        """Gets the location of this Matter.

        The location of the *Matter*

        :return: The location of this Matter.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Matter.

        The location of the *Matter*

        :param location: The location of this Matter.
        :type location: str
        """

        self._location = location

    @property
    def client_reference(self):
        """Gets the client_reference of this Matter.

        Client Reference string for external uses

        :return: The client_reference of this Matter.
        :rtype: str
        """
        return self._client_reference

    @client_reference.setter
    def client_reference(self, client_reference):
        """Sets the client_reference of this Matter.

        Client Reference string for external uses

        :param client_reference: The client_reference of this Matter.
        :type client_reference: str
        """

        self._client_reference = client_reference

    @property
    def client_id(self):
        """Gets the client_id of this Matter.

        Client ID

        :return: The client_id of this Matter.
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Matter.

        Client ID

        :param client_id: The client_id of this Matter.
        :type client_id: int
        """

        self._client_id = client_id

    @property
    def billable(self):
        """Gets the billable of this Matter.

        Whether this matter is billable

        :return: The billable of this Matter.
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """Sets the billable of this Matter.

        Whether this matter is billable

        :param billable: The billable of this Matter.
        :type billable: bool
        """

        self._billable = billable

    @property
    def maildrop_address(self):
        """Gets the maildrop_address of this Matter.

        A unique Maildrop email address for the matter

        :return: The maildrop_address of this Matter.
        :rtype: str
        """
        return self._maildrop_address

    @maildrop_address.setter
    def maildrop_address(self, maildrop_address):
        """Sets the maildrop_address of this Matter.

        A unique Maildrop email address for the matter

        :param maildrop_address: The maildrop_address of this Matter.
        :type maildrop_address: str
        """

        self._maildrop_address = maildrop_address

    @property
    def billing_method(self):
        """Gets the billing_method of this Matter.

        Billing method of this matter

        :return: The billing_method of this Matter.
        :rtype: str
        """
        return self._billing_method

    @billing_method.setter
    def billing_method(self, billing_method):
        """Sets the billing_method of this Matter.

        Billing method of this matter

        :param billing_method: The billing_method of this Matter.
        :type billing_method: str
        """
        allowed_values = ["flat", "contingency", "hourly"]  # noqa: E501
        if billing_method not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_method` ({0}), must be one of {1}"
                .format(billing_method, allowed_values)
            )

        self._billing_method = billing_method

    @property
    def open_date(self):
        """Gets the open_date of this Matter.

        The date the matter was set to open (as a ISO-8601 date)

        :return: The open_date of this Matter.
        :rtype: date
        """
        return self._open_date

    @open_date.setter
    def open_date(self, open_date):
        """Sets the open_date of this Matter.

        The date the matter was set to open (as a ISO-8601 date)

        :param open_date: The open_date of this Matter.
        :type open_date: date
        """

        self._open_date = open_date

    @property
    def close_date(self):
        """Gets the close_date of this Matter.

        The date the matter was set to closed (as a ISO-8601 date)

        :return: The close_date of this Matter.
        :rtype: date
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date):
        """Sets the close_date of this Matter.

        The date the matter was set to closed (as a ISO-8601 date)

        :param close_date: The close_date of this Matter.
        :type close_date: date
        """

        self._close_date = close_date

    @property
    def pending_date(self):
        """Gets the pending_date of this Matter.

        The date the matter was set to pending (as a ISO-8601 date)

        :return: The pending_date of this Matter.
        :rtype: date
        """
        return self._pending_date

    @pending_date.setter
    def pending_date(self, pending_date):
        """Sets the pending_date of this Matter.

        The date the matter was set to pending (as a ISO-8601 date)

        :param pending_date: The pending_date of this Matter.
        :type pending_date: date
        """

        self._pending_date = pending_date

    @property
    def created_at(self):
        """Gets the created_at of this Matter.

        The time the *Matter* was created (as a ISO-8601 timestamp)

        :return: The created_at of this Matter.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Matter.

        The time the *Matter* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this Matter.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Matter.

        The time the *Matter* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this Matter.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Matter.

        The time the *Matter* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this Matter.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def shared(self):
        """Gets the shared of this Matter.

        Whether the matter is currently shared with Clio Connect

        :return: The shared of this Matter.
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this Matter.

        Whether the matter is currently shared with Clio Connect

        :param shared: The shared of this Matter.
        :type shared: bool
        """

        self._shared = shared

    @property
    def has_tasks(self):
        """Gets the has_tasks of this Matter.

        Whether or not the matter has any tasks.

        :return: The has_tasks of this Matter.
        :rtype: bool
        """
        return self._has_tasks

    @has_tasks.setter
    def has_tasks(self, has_tasks):
        """Sets the has_tasks of this Matter.

        Whether or not the matter has any tasks.

        :param has_tasks: The has_tasks of this Matter.
        :type has_tasks: bool
        """

        self._has_tasks = has_tasks

    @property
    def last_activity_date(self):
        """Gets the last_activity_date of this Matter.

        The greatest date out of all of the activities on the matter (as a ISO-8601 date)

        :return: The last_activity_date of this Matter.
        :rtype: date
        """
        return self._last_activity_date

    @last_activity_date.setter
    def last_activity_date(self, last_activity_date):
        """Sets the last_activity_date of this Matter.

        The greatest date out of all of the activities on the matter (as a ISO-8601 date)

        :param last_activity_date: The last_activity_date of this Matter.
        :type last_activity_date: date
        """

        self._last_activity_date = last_activity_date

    @property
    def matter_stage_updated_at(self):
        """Gets the matter_stage_updated_at of this Matter.

        The date the matter stage was last updated (as a ISO-8601 date)

        :return: The matter_stage_updated_at of this Matter.
        :rtype: datetime
        """
        return self._matter_stage_updated_at

    @matter_stage_updated_at.setter
    def matter_stage_updated_at(self, matter_stage_updated_at):
        """Sets the matter_stage_updated_at of this Matter.

        The date the matter stage was last updated (as a ISO-8601 date)

        :param matter_stage_updated_at: The matter_stage_updated_at of this Matter.
        :type matter_stage_updated_at: datetime
        """

        self._matter_stage_updated_at = matter_stage_updated_at

    @property
    def client(self):
        """Gets the client of this Matter.


        :return: The client of this Matter.
        :rtype: ContactBase
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Matter.


        :param client: The client of this Matter.
        :type client: ContactBase
        """

        self._client = client

    @property
    def contingency_fee(self):
        """Gets the contingency_fee of this Matter.


        :return: The contingency_fee of this Matter.
        :rtype: ContingencyFeeBase
        """
        return self._contingency_fee

    @contingency_fee.setter
    def contingency_fee(self, contingency_fee):
        """Sets the contingency_fee of this Matter.


        :param contingency_fee: The contingency_fee of this Matter.
        :type contingency_fee: ContingencyFeeBase
        """

        self._contingency_fee = contingency_fee

    @property
    def custom_rate(self):
        """Gets the custom_rate of this Matter.


        :return: The custom_rate of this Matter.
        :rtype: MatterCustomRate
        """
        return self._custom_rate

    @custom_rate.setter
    def custom_rate(self, custom_rate):
        """Sets the custom_rate of this Matter.


        :param custom_rate: The custom_rate of this Matter.
        :type custom_rate: MatterCustomRate
        """

        self._custom_rate = custom_rate

    @property
    def evergreen_retainer(self):
        """Gets the evergreen_retainer of this Matter.


        :return: The evergreen_retainer of this Matter.
        :rtype: EvergreenRetainerBase
        """
        return self._evergreen_retainer

    @evergreen_retainer.setter
    def evergreen_retainer(self, evergreen_retainer):
        """Sets the evergreen_retainer of this Matter.


        :param evergreen_retainer: The evergreen_retainer of this Matter.
        :type evergreen_retainer: EvergreenRetainerBase
        """

        self._evergreen_retainer = evergreen_retainer

    @property
    def folder(self):
        """Gets the folder of this Matter.


        :return: The folder of this Matter.
        :rtype: FolderBase
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this Matter.


        :param folder: The folder of this Matter.
        :type folder: FolderBase
        """

        self._folder = folder

    @property
    def group(self):
        """Gets the group of this Matter.


        :return: The group of this Matter.
        :rtype: GroupBase
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Matter.


        :param group: The group of this Matter.
        :type group: GroupBase
        """

        self._group = group

    @property
    def matter_budget(self):
        """Gets the matter_budget of this Matter.


        :return: The matter_budget of this Matter.
        :rtype: MatterBudgetBase
        """
        return self._matter_budget

    @matter_budget.setter
    def matter_budget(self, matter_budget):
        """Sets the matter_budget of this Matter.


        :param matter_budget: The matter_budget of this Matter.
        :type matter_budget: MatterBudgetBase
        """

        self._matter_budget = matter_budget

    @property
    def matter_stage(self):
        """Gets the matter_stage of this Matter.


        :return: The matter_stage of this Matter.
        :rtype: MatterStageBase
        """
        return self._matter_stage

    @matter_stage.setter
    def matter_stage(self, matter_stage):
        """Sets the matter_stage of this Matter.


        :param matter_stage: The matter_stage of this Matter.
        :type matter_stage: MatterStageBase
        """

        self._matter_stage = matter_stage

    @property
    def originating_attorney(self):
        """Gets the originating_attorney of this Matter.


        :return: The originating_attorney of this Matter.
        :rtype: UserBase
        """
        return self._originating_attorney

    @originating_attorney.setter
    def originating_attorney(self, originating_attorney):
        """Sets the originating_attorney of this Matter.


        :param originating_attorney: The originating_attorney of this Matter.
        :type originating_attorney: UserBase
        """

        self._originating_attorney = originating_attorney

    @property
    def practice_area(self):
        """Gets the practice_area of this Matter.


        :return: The practice_area of this Matter.
        :rtype: PracticeAreaBase
        """
        return self._practice_area

    @practice_area.setter
    def practice_area(self, practice_area):
        """Sets the practice_area of this Matter.


        :param practice_area: The practice_area of this Matter.
        :type practice_area: PracticeAreaBase
        """

        self._practice_area = practice_area

    @property
    def responsible_attorney(self):
        """Gets the responsible_attorney of this Matter.


        :return: The responsible_attorney of this Matter.
        :rtype: UserBase
        """
        return self._responsible_attorney

    @responsible_attorney.setter
    def responsible_attorney(self, responsible_attorney):
        """Sets the responsible_attorney of this Matter.


        :param responsible_attorney: The responsible_attorney of this Matter.
        :type responsible_attorney: UserBase
        """

        self._responsible_attorney = responsible_attorney

    @property
    def statute_of_limitations(self):
        """Gets the statute_of_limitations of this Matter.


        :return: The statute_of_limitations of this Matter.
        :rtype: TaskBase
        """
        return self._statute_of_limitations

    @statute_of_limitations.setter
    def statute_of_limitations(self, statute_of_limitations):
        """Sets the statute_of_limitations of this Matter.


        :param statute_of_limitations: The statute_of_limitations of this Matter.
        :type statute_of_limitations: TaskBase
        """

        self._statute_of_limitations = statute_of_limitations

    @property
    def user(self):
        """Gets the user of this Matter.


        :return: The user of this Matter.
        :rtype: UserBase
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Matter.


        :param user: The user of this Matter.
        :type user: UserBase
        """

        self._user = user

    @property
    def legal_aid_uk_matter(self):
        """Gets the legal_aid_uk_matter of this Matter.


        :return: The legal_aid_uk_matter of this Matter.
        :rtype: LegalAidUkMatterBase
        """
        return self._legal_aid_uk_matter

    @legal_aid_uk_matter.setter
    def legal_aid_uk_matter(self, legal_aid_uk_matter):
        """Sets the legal_aid_uk_matter of this Matter.


        :param legal_aid_uk_matter: The legal_aid_uk_matter of this Matter.
        :type legal_aid_uk_matter: LegalAidUkMatterBase
        """

        self._legal_aid_uk_matter = legal_aid_uk_matter

    @property
    def account_balances(self):
        """Gets the account_balances of this Matter.

        AccountBalance

        :return: The account_balances of this Matter.
        :rtype: List[AccountBalanceBase]
        """
        return self._account_balances

    @account_balances.setter
    def account_balances(self, account_balances):
        """Sets the account_balances of this Matter.

        AccountBalance

        :param account_balances: The account_balances of this Matter.
        :type account_balances: List[AccountBalanceBase]
        """

        self._account_balances = account_balances

    @property
    def custom_field_values(self):
        """Gets the custom_field_values of this Matter.

        CustomFieldValue

        :return: The custom_field_values of this Matter.
        :rtype: List[CustomFieldValue]
        """
        return self._custom_field_values

    @custom_field_values.setter
    def custom_field_values(self, custom_field_values):
        """Sets the custom_field_values of this Matter.

        CustomFieldValue

        :param custom_field_values: The custom_field_values of this Matter.
        :type custom_field_values: List[CustomFieldValue]
        """

        self._custom_field_values = custom_field_values

    @property
    def custom_field_set_associations(self):
        """Gets the custom_field_set_associations of this Matter.

        CustomFieldSetAssociation

        :return: The custom_field_set_associations of this Matter.
        :rtype: List[CustomFieldSetAssociationBase]
        """
        return self._custom_field_set_associations

    @custom_field_set_associations.setter
    def custom_field_set_associations(self, custom_field_set_associations):
        """Sets the custom_field_set_associations of this Matter.

        CustomFieldSetAssociation

        :param custom_field_set_associations: The custom_field_set_associations of this Matter.
        :type custom_field_set_associations: List[CustomFieldSetAssociationBase]
        """

        self._custom_field_set_associations = custom_field_set_associations

    @property
    def matter_bill_recipients(self):
        """Gets the matter_bill_recipients of this Matter.

        MatterBillRecipient

        :return: The matter_bill_recipients of this Matter.
        :rtype: List[MatterBillRecipient]
        """
        return self._matter_bill_recipients

    @matter_bill_recipients.setter
    def matter_bill_recipients(self, matter_bill_recipients):
        """Sets the matter_bill_recipients of this Matter.

        MatterBillRecipient

        :param matter_bill_recipients: The matter_bill_recipients of this Matter.
        :type matter_bill_recipients: List[MatterBillRecipient]
        """

        self._matter_bill_recipients = matter_bill_recipients

    @property
    def relationships(self):
        """Gets the relationships of this Matter.

        Relationship

        :return: The relationships of this Matter.
        :rtype: List[RelationshipBase]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this Matter.

        Relationship

        :param relationships: The relationships of this Matter.
        :type relationships: List[RelationshipBase]
        """

        self._relationships = relationships

    @property
    def task_template_list_instances(self):
        """Gets the task_template_list_instances of this Matter.

        TaskTemplateListInstace

        :return: The task_template_list_instances of this Matter.
        :rtype: List[TaskTemplateListInstaceBase]
        """
        return self._task_template_list_instances

    @task_template_list_instances.setter
    def task_template_list_instances(self, task_template_list_instances):
        """Sets the task_template_list_instances of this Matter.

        TaskTemplateListInstace

        :param task_template_list_instances: The task_template_list_instances of this Matter.
        :type task_template_list_instances: List[TaskTemplateListInstaceBase]
        """

        self._task_template_list_instances = task_template_list_instances
