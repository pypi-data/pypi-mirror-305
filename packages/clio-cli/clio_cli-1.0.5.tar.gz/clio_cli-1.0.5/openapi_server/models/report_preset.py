# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_schedule_base import ReportScheduleBase
from openapi_server import util


class ReportPreset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, etag: str=None, name: str=None, kind: str=None, format: str=None, last_generated_at: datetime=None, created_at: datetime=None, updated_at: datetime=None, category: str=None, options: str=None, report_schedule: ReportScheduleBase=None):
        """ReportPreset - a model defined in OpenAPI

        :param id: The id of this ReportPreset.
        :param etag: The etag of this ReportPreset.
        :param name: The name of this ReportPreset.
        :param kind: The kind of this ReportPreset.
        :param format: The format of this ReportPreset.
        :param last_generated_at: The last_generated_at of this ReportPreset.
        :param created_at: The created_at of this ReportPreset.
        :param updated_at: The updated_at of this ReportPreset.
        :param category: The category of this ReportPreset.
        :param options: The options of this ReportPreset.
        :param report_schedule: The report_schedule of this ReportPreset.
        """
        self.openapi_types = {
            'id': int,
            'etag': str,
            'name': str,
            'kind': str,
            'format': str,
            'last_generated_at': datetime,
            'created_at': datetime,
            'updated_at': datetime,
            'category': str,
            'options': str,
            'report_schedule': ReportScheduleBase
        }

        self.attribute_map = {
            'id': 'id',
            'etag': 'etag',
            'name': 'name',
            'kind': 'kind',
            'format': 'format',
            'last_generated_at': 'last_generated_at',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'category': 'category',
            'options': 'options',
            'report_schedule': 'report_schedule'
        }

        self._id = id
        self._etag = etag
        self._name = name
        self._kind = kind
        self._format = format
        self._last_generated_at = last_generated_at
        self._created_at = created_at
        self._updated_at = updated_at
        self._category = category
        self._options = options
        self._report_schedule = report_schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportPreset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportPreset of this ReportPreset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ReportPreset.

        Unique identifier for the *ReportPreset*

        :return: The id of this ReportPreset.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportPreset.

        Unique identifier for the *ReportPreset*

        :param id: The id of this ReportPreset.
        :type id: int
        """

        self._id = id

    @property
    def etag(self):
        """Gets the etag of this ReportPreset.

        ETag for the *ReportPreset*

        :return: The etag of this ReportPreset.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ReportPreset.

        ETag for the *ReportPreset*

        :param etag: The etag of this ReportPreset.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this ReportPreset.

        A specified name for the report preset

        :return: The name of this ReportPreset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportPreset.

        A specified name for the report preset

        :param name: The name of this ReportPreset.
        :type name: str
        """

        self._name = name

    @property
    def kind(self):
        """Gets the kind of this ReportPreset.

        The kind of report the preset generates

        :return: The kind of this ReportPreset.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ReportPreset.

        The kind of report the preset generates

        :param kind: The kind of this ReportPreset.
        :type kind: str
        """
        allowed_values = ["accounts_receivable", "accounts_receivable_aging", "bank_account_activity", "billing_history", "billing_rate", "client_activity", "client_ledger", "clio_payments_deposit", "clio_payments_ledger", "clio_payments_monthly_statement", "clio_payments_sales_tax", "clio_payments_transaction", "contact_information", "disbursement_payment", "fee_allocation", "general_ledger", "grant_matters", "invoice_payments_v2", "law_society_of_alberta", "law_society_of_alberta_al", "law_society_of_alberta_bar", "law_society_of_alberta_tl", "law_society_of_alberta_tt", "matter", "matter_balance_summary", "matter_productivity_by_user", "matters_by_responsible_attorney", "originating_attorney_revenue", "other_revenue", "productivity_by_client", "productivity_by_user", "revenue", "task_productivity_by_user", "task_progress_by_user", "trust_ledger", "trust_ledger_nsw", "trust_listing", "trust_management", "work_in_progress"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def format(self):
        """Gets the format of this ReportPreset.

        The format of the report the preset generates

        :return: The format of this ReportPreset.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ReportPreset.

        The format of the report the preset generates

        :param format: The format of this ReportPreset.
        :type format: str
        """
        allowed_values = ["csv", "html", "json", "pdf", "xlsx", "zip"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def last_generated_at(self):
        """Gets the last_generated_at of this ReportPreset.

        The time of the last generated report from this preset (as a ISO-8601 timestamp)

        :return: The last_generated_at of this ReportPreset.
        :rtype: datetime
        """
        return self._last_generated_at

    @last_generated_at.setter
    def last_generated_at(self, last_generated_at):
        """Sets the last_generated_at of this ReportPreset.

        The time of the last generated report from this preset (as a ISO-8601 timestamp)

        :param last_generated_at: The last_generated_at of this ReportPreset.
        :type last_generated_at: datetime
        """

        self._last_generated_at = last_generated_at

    @property
    def created_at(self):
        """Gets the created_at of this ReportPreset.

        The time the *ReportPreset* was created (as a ISO-8601 timestamp)

        :return: The created_at of this ReportPreset.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReportPreset.

        The time the *ReportPreset* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this ReportPreset.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ReportPreset.

        The time the *ReportPreset* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this ReportPreset.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ReportPreset.

        The time the *ReportPreset* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this ReportPreset.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def category(self):
        """Gets the category of this ReportPreset.

        The category of the report the preset generates

        :return: The category of this ReportPreset.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ReportPreset.

        The category of the report the preset generates

        :param category: The category of this ReportPreset.
        :type category: str
        """
        allowed_values = ["billing", "client", "compliance", "financial", "matter", "online_payments", "productivity", "revenue", "task"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def options(self):
        """Gets the options of this ReportPreset.

        The report options parameters

        :return: The options of this ReportPreset.
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ReportPreset.

        The report options parameters

        :param options: The options of this ReportPreset.
        :type options: str
        """

        self._options = options

    @property
    def report_schedule(self):
        """Gets the report_schedule of this ReportPreset.


        :return: The report_schedule of this ReportPreset.
        :rtype: ReportScheduleBase
        """
        return self._report_schedule

    @report_schedule.setter
    def report_schedule(self, report_schedule):
        """Sets the report_schedule of this ReportPreset.


        :param report_schedule: The report_schedule of this ReportPreset.
        :type report_schedule: ReportScheduleBase
        """

        self._report_schedule = report_schedule
