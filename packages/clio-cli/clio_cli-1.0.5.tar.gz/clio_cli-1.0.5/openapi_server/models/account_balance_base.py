# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountBalanceBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, balance: float=None, type: str=None, name: str=None):
        """AccountBalanceBase - a model defined in OpenAPI

        :param id: The id of this AccountBalanceBase.
        :param balance: The balance of this AccountBalanceBase.
        :param type: The type of this AccountBalanceBase.
        :param name: The name of this AccountBalanceBase.
        """
        self.openapi_types = {
            'id': int,
            'balance': float,
            'type': str,
            'name': str
        }

        self.attribute_map = {
            'id': 'id',
            'balance': 'balance',
            'type': 'type',
            'name': 'name'
        }

        self._id = id
        self._balance = balance
        self._type = type
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountBalanceBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountBalance_base of this AccountBalanceBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AccountBalanceBase.

        Unique identifier for the *AccountBalance*

        :return: The id of this AccountBalanceBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountBalanceBase.

        Unique identifier for the *AccountBalance*

        :param id: The id of this AccountBalanceBase.
        :type id: int
        """

        self._id = id

    @property
    def balance(self):
        """Gets the balance of this AccountBalanceBase.

        The current balance of the bank account available to the matter or contact

        :return: The balance of this AccountBalanceBase.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AccountBalanceBase.

        The current balance of the bank account available to the matter or contact

        :param balance: The balance of this AccountBalanceBase.
        :type balance: float
        """

        self._balance = balance

    @property
    def type(self):
        """Gets the type of this AccountBalanceBase.

        The bank account type. Either Operating or Trust

        :return: The type of this AccountBalanceBase.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountBalanceBase.

        The bank account type. Either Operating or Trust

        :param type: The type of this AccountBalanceBase.
        :type type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this AccountBalanceBase.

        The name of the bank account

        :return: The name of this AccountBalanceBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountBalanceBase.

        The name of the bank account

        :param name: The name of this AccountBalanceBase.
        :type name: str
        """

        self._name = name
