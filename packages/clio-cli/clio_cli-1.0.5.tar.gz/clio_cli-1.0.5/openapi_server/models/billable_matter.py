# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_base import ContactBase
from openapi_server import util


class BillableMatter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, unbilled_hours: float=None, unbilled_amount: float=None, amount_in_trust: float=None, display_number: str=None, client: ContactBase=None):
        """BillableMatter - a model defined in OpenAPI

        :param id: The id of this BillableMatter.
        :param unbilled_hours: The unbilled_hours of this BillableMatter.
        :param unbilled_amount: The unbilled_amount of this BillableMatter.
        :param amount_in_trust: The amount_in_trust of this BillableMatter.
        :param display_number: The display_number of this BillableMatter.
        :param client: The client of this BillableMatter.
        """
        self.openapi_types = {
            'id': int,
            'unbilled_hours': float,
            'unbilled_amount': float,
            'amount_in_trust': float,
            'display_number': str,
            'client': ContactBase
        }

        self.attribute_map = {
            'id': 'id',
            'unbilled_hours': 'unbilled_hours',
            'unbilled_amount': 'unbilled_amount',
            'amount_in_trust': 'amount_in_trust',
            'display_number': 'display_number',
            'client': 'client'
        }

        self._id = id
        self._unbilled_hours = unbilled_hours
        self._unbilled_amount = unbilled_amount
        self._amount_in_trust = amount_in_trust
        self._display_number = display_number
        self._client = client

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillableMatter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BillableMatter of this BillableMatter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this BillableMatter.

        Unique identifier for the *BillableMatter*

        :return: The id of this BillableMatter.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BillableMatter.

        Unique identifier for the *BillableMatter*

        :param id: The id of this BillableMatter.
        :type id: int
        """

        self._id = id

    @property
    def unbilled_hours(self):
        """Gets the unbilled_hours of this BillableMatter.

        The unbilled number of hours for the matter

        :return: The unbilled_hours of this BillableMatter.
        :rtype: float
        """
        return self._unbilled_hours

    @unbilled_hours.setter
    def unbilled_hours(self, unbilled_hours):
        """Sets the unbilled_hours of this BillableMatter.

        The unbilled number of hours for the matter

        :param unbilled_hours: The unbilled_hours of this BillableMatter.
        :type unbilled_hours: float
        """

        self._unbilled_hours = unbilled_hours

    @property
    def unbilled_amount(self):
        """Gets the unbilled_amount of this BillableMatter.

        The unbilled amount for the matter

        :return: The unbilled_amount of this BillableMatter.
        :rtype: float
        """
        return self._unbilled_amount

    @unbilled_amount.setter
    def unbilled_amount(self, unbilled_amount):
        """Sets the unbilled_amount of this BillableMatter.

        The unbilled amount for the matter

        :param unbilled_amount: The unbilled_amount of this BillableMatter.
        :type unbilled_amount: float
        """

        self._unbilled_amount = unbilled_amount

    @property
    def amount_in_trust(self):
        """Gets the amount_in_trust of this BillableMatter.

        The trust amount available for the matter

        :return: The amount_in_trust of this BillableMatter.
        :rtype: float
        """
        return self._amount_in_trust

    @amount_in_trust.setter
    def amount_in_trust(self, amount_in_trust):
        """Sets the amount_in_trust of this BillableMatter.

        The trust amount available for the matter

        :param amount_in_trust: The amount_in_trust of this BillableMatter.
        :type amount_in_trust: float
        """

        self._amount_in_trust = amount_in_trust

    @property
    def display_number(self):
        """Gets the display_number of this BillableMatter.

        The reference to the matter

        :return: The display_number of this BillableMatter.
        :rtype: str
        """
        return self._display_number

    @display_number.setter
    def display_number(self, display_number):
        """Sets the display_number of this BillableMatter.

        The reference to the matter

        :param display_number: The display_number of this BillableMatter.
        :type display_number: str
        """

        self._display_number = display_number

    @property
    def client(self):
        """Gets the client of this BillableMatter.


        :return: The client of this BillableMatter.
        :rtype: ContactBase
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this BillableMatter.


        :param client: The client of this BillableMatter.
        :type client: ContactBase
        """

        self._client = client
