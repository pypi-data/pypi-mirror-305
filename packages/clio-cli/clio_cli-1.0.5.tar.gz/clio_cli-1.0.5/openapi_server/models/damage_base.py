# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DamageBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, amount: float=None, damage_type: str=None, description: str=None, etag: str=None, created_at: datetime=None, updated_at: datetime=None):
        """DamageBase - a model defined in OpenAPI

        :param id: The id of this DamageBase.
        :param amount: The amount of this DamageBase.
        :param damage_type: The damage_type of this DamageBase.
        :param description: The description of this DamageBase.
        :param etag: The etag of this DamageBase.
        :param created_at: The created_at of this DamageBase.
        :param updated_at: The updated_at of this DamageBase.
        """
        self.openapi_types = {
            'id': int,
            'amount': float,
            'damage_type': str,
            'description': str,
            'etag': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'amount': 'amount',
            'damage_type': 'damage_type',
            'description': 'description',
            'etag': 'etag',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._amount = amount
        self._damage_type = damage_type
        self._description = description
        self._etag = etag
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DamageBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Damage_base of this DamageBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DamageBase.

        Unique identifier for the *Damage*

        :return: The id of this DamageBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DamageBase.

        Unique identifier for the *Damage*

        :param id: The id of this DamageBase.
        :type id: int
        """

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this DamageBase.

        Amount for Damage

        :return: The amount of this DamageBase.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DamageBase.

        Amount for Damage

        :param amount: The amount of this DamageBase.
        :type amount: float
        """

        self._amount = amount

    @property
    def damage_type(self):
        """Gets the damage_type of this DamageBase.

        Damage type of the record

        :return: The damage_type of this DamageBase.
        :rtype: str
        """
        return self._damage_type

    @damage_type.setter
    def damage_type(self, damage_type):
        """Sets the damage_type of this DamageBase.

        Damage type of the record

        :param damage_type: The damage_type of this DamageBase.
        :type damage_type: str
        """
        allowed_values = ["special", "general", "other"]  # noqa: E501
        if damage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `damage_type` ({0}), must be one of {1}"
                .format(damage_type, allowed_values)
            )

        self._damage_type = damage_type

    @property
    def description(self):
        """Gets the description of this DamageBase.

        Description for Damage

        :return: The description of this DamageBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DamageBase.

        Description for Damage

        :param description: The description of this DamageBase.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this DamageBase.

        ETag for the *Damage*

        :return: The etag of this DamageBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this DamageBase.

        ETag for the *Damage*

        :param etag: The etag of this DamageBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def created_at(self):
        """Gets the created_at of this DamageBase.

        The time the *Damage* was created (as a ISO-8601 timestamp)

        :return: The created_at of this DamageBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DamageBase.

        The time the *Damage* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this DamageBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DamageBase.

        The time the *Damage* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this DamageBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DamageBase.

        The time the *Damage* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this DamageBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
