# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LaukCivilControlledRateBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, activity: str=None, activity_type: str=None, category_of_law: str=None, created_at: datetime=None, etag: str=None, exceptional: float=None, fee: float=None, fee_scheme: str=None, key: str=None, rate_type: str=None, region: str=None, updated_at: datetime=None):
        """LaukCivilControlledRateBase - a model defined in OpenAPI

        :param id: The id of this LaukCivilControlledRateBase.
        :param activity: The activity of this LaukCivilControlledRateBase.
        :param activity_type: The activity_type of this LaukCivilControlledRateBase.
        :param category_of_law: The category_of_law of this LaukCivilControlledRateBase.
        :param created_at: The created_at of this LaukCivilControlledRateBase.
        :param etag: The etag of this LaukCivilControlledRateBase.
        :param exceptional: The exceptional of this LaukCivilControlledRateBase.
        :param fee: The fee of this LaukCivilControlledRateBase.
        :param fee_scheme: The fee_scheme of this LaukCivilControlledRateBase.
        :param key: The key of this LaukCivilControlledRateBase.
        :param rate_type: The rate_type of this LaukCivilControlledRateBase.
        :param region: The region of this LaukCivilControlledRateBase.
        :param updated_at: The updated_at of this LaukCivilControlledRateBase.
        """
        self.openapi_types = {
            'id': int,
            'activity': str,
            'activity_type': str,
            'category_of_law': str,
            'created_at': datetime,
            'etag': str,
            'exceptional': float,
            'fee': float,
            'fee_scheme': str,
            'key': str,
            'rate_type': str,
            'region': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'activity': 'activity',
            'activity_type': 'activity_type',
            'category_of_law': 'category_of_law',
            'created_at': 'created_at',
            'etag': 'etag',
            'exceptional': 'exceptional',
            'fee': 'fee',
            'fee_scheme': 'fee_scheme',
            'key': 'key',
            'rate_type': 'rate_type',
            'region': 'region',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._activity = activity
        self._activity_type = activity_type
        self._category_of_law = category_of_law
        self._created_at = created_at
        self._etag = etag
        self._exceptional = exceptional
        self._fee = fee
        self._fee_scheme = fee_scheme
        self._key = key
        self._rate_type = rate_type
        self._region = region
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LaukCivilControlledRateBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LaukCivilControlledRate_base of this LaukCivilControlledRateBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this LaukCivilControlledRateBase.

        Unique identifier for the *LaukCivilControlledRate*

        :return: The id of this LaukCivilControlledRateBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LaukCivilControlledRateBase.

        Unique identifier for the *LaukCivilControlledRate*

        :param id: The id of this LaukCivilControlledRateBase.
        :type id: int
        """

        self._id = id

    @property
    def activity(self):
        """Gets the activity of this LaukCivilControlledRateBase.

        Activity of the *LaukCivilControlledRate*

        :return: The activity of this LaukCivilControlledRateBase.
        :rtype: str
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this LaukCivilControlledRateBase.

        Activity of the *LaukCivilControlledRate*

        :param activity: The activity of this LaukCivilControlledRateBase.
        :type activity: str
        """

        self._activity = activity

    @property
    def activity_type(self):
        """Gets the activity_type of this LaukCivilControlledRateBase.

        Activity type

        :return: The activity_type of this LaukCivilControlledRateBase.
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this LaukCivilControlledRateBase.

        Activity type

        :param activity_type: The activity_type of this LaukCivilControlledRateBase.
        :type activity_type: str
        """

        self._activity_type = activity_type

    @property
    def category_of_law(self):
        """Gets the category_of_law of this LaukCivilControlledRateBase.

        Category of law

        :return: The category_of_law of this LaukCivilControlledRateBase.
        :rtype: str
        """
        return self._category_of_law

    @category_of_law.setter
    def category_of_law(self, category_of_law):
        """Sets the category_of_law of this LaukCivilControlledRateBase.

        Category of law

        :param category_of_law: The category_of_law of this LaukCivilControlledRateBase.
        :type category_of_law: str
        """

        self._category_of_law = category_of_law

    @property
    def created_at(self):
        """Gets the created_at of this LaukCivilControlledRateBase.

        The time the *LaukCivilControlledRate* was created (as a ISO-8601 timestamp)

        :return: The created_at of this LaukCivilControlledRateBase.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LaukCivilControlledRateBase.

        The time the *LaukCivilControlledRate* was created (as a ISO-8601 timestamp)

        :param created_at: The created_at of this LaukCivilControlledRateBase.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def etag(self):
        """Gets the etag of this LaukCivilControlledRateBase.

        ETag for the *LaukCivilControlledRate*

        :return: The etag of this LaukCivilControlledRateBase.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this LaukCivilControlledRateBase.

        ETag for the *LaukCivilControlledRate*

        :param etag: The etag of this LaukCivilControlledRateBase.
        :type etag: str
        """

        self._etag = etag

    @property
    def exceptional(self):
        """Gets the exceptional of this LaukCivilControlledRateBase.

        Fee applied for high activity count

        :return: The exceptional of this LaukCivilControlledRateBase.
        :rtype: float
        """
        return self._exceptional

    @exceptional.setter
    def exceptional(self, exceptional):
        """Sets the exceptional of this LaukCivilControlledRateBase.

        Fee applied for high activity count

        :param exceptional: The exceptional of this LaukCivilControlledRateBase.
        :type exceptional: float
        """

        self._exceptional = exceptional

    @property
    def fee(self):
        """Gets the fee of this LaukCivilControlledRateBase.

        Fee amount

        :return: The fee of this LaukCivilControlledRateBase.
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this LaukCivilControlledRateBase.

        Fee amount

        :param fee: The fee of this LaukCivilControlledRateBase.
        :type fee: float
        """

        self._fee = fee

    @property
    def fee_scheme(self):
        """Gets the fee_scheme of this LaukCivilControlledRateBase.

        Fee scheme

        :return: The fee_scheme of this LaukCivilControlledRateBase.
        :rtype: str
        """
        return self._fee_scheme

    @fee_scheme.setter
    def fee_scheme(self, fee_scheme):
        """Sets the fee_scheme of this LaukCivilControlledRateBase.

        Fee scheme

        :param fee_scheme: The fee_scheme of this LaukCivilControlledRateBase.
        :type fee_scheme: str
        """

        self._fee_scheme = fee_scheme

    @property
    def key(self):
        """Gets the key of this LaukCivilControlledRateBase.

        Unique key

        :return: The key of this LaukCivilControlledRateBase.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this LaukCivilControlledRateBase.

        Unique key

        :param key: The key of this LaukCivilControlledRateBase.
        :type key: str
        """

        self._key = key

    @property
    def rate_type(self):
        """Gets the rate_type of this LaukCivilControlledRateBase.

        Rate type

        :return: The rate_type of this LaukCivilControlledRateBase.
        :rtype: str
        """
        return self._rate_type

    @rate_type.setter
    def rate_type(self, rate_type):
        """Sets the rate_type of this LaukCivilControlledRateBase.

        Rate type

        :param rate_type: The rate_type of this LaukCivilControlledRateBase.
        :type rate_type: str
        """

        self._rate_type = rate_type

    @property
    def region(self):
        """Gets the region of this LaukCivilControlledRateBase.

        Region

        :return: The region of this LaukCivilControlledRateBase.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this LaukCivilControlledRateBase.

        Region

        :param region: The region of this LaukCivilControlledRateBase.
        :type region: str
        """

        self._region = region

    @property
    def updated_at(self):
        """Gets the updated_at of this LaukCivilControlledRateBase.

        The time the *LaukCivilControlledRate* was last updated (as a ISO-8601 timestamp)

        :return: The updated_at of this LaukCivilControlledRateBase.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LaukCivilControlledRateBase.

        The time the *LaukCivilControlledRate* was last updated (as a ISO-8601 timestamp)

        :param updated_at: The updated_at of this LaukCivilControlledRateBase.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
