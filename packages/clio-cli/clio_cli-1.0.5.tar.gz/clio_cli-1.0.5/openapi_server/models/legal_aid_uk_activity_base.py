# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegalAidUkActivityBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_sub_category: str=None, advocacy: int=None, base_rate: float=None, bolt_ons: str=None, bolt_ons_summary: str=None, court: int=None, eligible_for_sqm: bool=None, expert: int=None, form_of_civil_legal_service: int=None, id: int=None, is_custom_rate: bool=None, json_key: str=None, region: int=None, tax_exclusive: bool=None, uplift: float=None, user_type: int=None):
        """LegalAidUkActivityBase - a model defined in OpenAPI

        :param activity_sub_category: The activity_sub_category of this LegalAidUkActivityBase.
        :param advocacy: The advocacy of this LegalAidUkActivityBase.
        :param base_rate: The base_rate of this LegalAidUkActivityBase.
        :param bolt_ons: The bolt_ons of this LegalAidUkActivityBase.
        :param bolt_ons_summary: The bolt_ons_summary of this LegalAidUkActivityBase.
        :param court: The court of this LegalAidUkActivityBase.
        :param eligible_for_sqm: The eligible_for_sqm of this LegalAidUkActivityBase.
        :param expert: The expert of this LegalAidUkActivityBase.
        :param form_of_civil_legal_service: The form_of_civil_legal_service of this LegalAidUkActivityBase.
        :param id: The id of this LegalAidUkActivityBase.
        :param is_custom_rate: The is_custom_rate of this LegalAidUkActivityBase.
        :param json_key: The json_key of this LegalAidUkActivityBase.
        :param region: The region of this LegalAidUkActivityBase.
        :param tax_exclusive: The tax_exclusive of this LegalAidUkActivityBase.
        :param uplift: The uplift of this LegalAidUkActivityBase.
        :param user_type: The user_type of this LegalAidUkActivityBase.
        """
        self.openapi_types = {
            'activity_sub_category': str,
            'advocacy': int,
            'base_rate': float,
            'bolt_ons': str,
            'bolt_ons_summary': str,
            'court': int,
            'eligible_for_sqm': bool,
            'expert': int,
            'form_of_civil_legal_service': int,
            'id': int,
            'is_custom_rate': bool,
            'json_key': str,
            'region': int,
            'tax_exclusive': bool,
            'uplift': float,
            'user_type': int
        }

        self.attribute_map = {
            'activity_sub_category': 'activity_sub_category',
            'advocacy': 'advocacy',
            'base_rate': 'base_rate',
            'bolt_ons': 'bolt_ons',
            'bolt_ons_summary': 'bolt_ons_summary',
            'court': 'court',
            'eligible_for_sqm': 'eligible_for_sqm',
            'expert': 'expert',
            'form_of_civil_legal_service': 'form_of_civil_legal_service',
            'id': 'id',
            'is_custom_rate': 'is_custom_rate',
            'json_key': 'json_key',
            'region': 'region',
            'tax_exclusive': 'tax_exclusive',
            'uplift': 'uplift',
            'user_type': 'user_type'
        }

        self._activity_sub_category = activity_sub_category
        self._advocacy = advocacy
        self._base_rate = base_rate
        self._bolt_ons = bolt_ons
        self._bolt_ons_summary = bolt_ons_summary
        self._court = court
        self._eligible_for_sqm = eligible_for_sqm
        self._expert = expert
        self._form_of_civil_legal_service = form_of_civil_legal_service
        self._id = id
        self._is_custom_rate = is_custom_rate
        self._json_key = json_key
        self._region = region
        self._tax_exclusive = tax_exclusive
        self._uplift = uplift
        self._user_type = user_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalAidUkActivityBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalAidUkActivity_base of this LegalAidUkActivityBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_sub_category(self):
        """Gets the activity_sub_category of this LegalAidUkActivityBase.

        Activity sub-category

        :return: The activity_sub_category of this LegalAidUkActivityBase.
        :rtype: str
        """
        return self._activity_sub_category

    @activity_sub_category.setter
    def activity_sub_category(self, activity_sub_category):
        """Sets the activity_sub_category of this LegalAidUkActivityBase.

        Activity sub-category

        :param activity_sub_category: The activity_sub_category of this LegalAidUkActivityBase.
        :type activity_sub_category: str
        """

        self._activity_sub_category = activity_sub_category

    @property
    def advocacy(self):
        """Gets the advocacy of this LegalAidUkActivityBase.

        Advocacy

        :return: The advocacy of this LegalAidUkActivityBase.
        :rtype: int
        """
        return self._advocacy

    @advocacy.setter
    def advocacy(self, advocacy):
        """Sets the advocacy of this LegalAidUkActivityBase.

        Advocacy

        :param advocacy: The advocacy of this LegalAidUkActivityBase.
        :type advocacy: int
        """

        self._advocacy = advocacy

    @property
    def base_rate(self):
        """Gets the base_rate of this LegalAidUkActivityBase.

        Base rate

        :return: The base_rate of this LegalAidUkActivityBase.
        :rtype: float
        """
        return self._base_rate

    @base_rate.setter
    def base_rate(self, base_rate):
        """Sets the base_rate of this LegalAidUkActivityBase.

        Base rate

        :param base_rate: The base_rate of this LegalAidUkActivityBase.
        :type base_rate: float
        """

        self._base_rate = base_rate

    @property
    def bolt_ons(self):
        """Gets the bolt_ons of this LegalAidUkActivityBase.

        Bolt ons

        :return: The bolt_ons of this LegalAidUkActivityBase.
        :rtype: str
        """
        return self._bolt_ons

    @bolt_ons.setter
    def bolt_ons(self, bolt_ons):
        """Sets the bolt_ons of this LegalAidUkActivityBase.

        Bolt ons

        :param bolt_ons: The bolt_ons of this LegalAidUkActivityBase.
        :type bolt_ons: str
        """

        self._bolt_ons = bolt_ons

    @property
    def bolt_ons_summary(self):
        """Gets the bolt_ons_summary of this LegalAidUkActivityBase.

        Bolt ons summary

        :return: The bolt_ons_summary of this LegalAidUkActivityBase.
        :rtype: str
        """
        return self._bolt_ons_summary

    @bolt_ons_summary.setter
    def bolt_ons_summary(self, bolt_ons_summary):
        """Sets the bolt_ons_summary of this LegalAidUkActivityBase.

        Bolt ons summary

        :param bolt_ons_summary: The bolt_ons_summary of this LegalAidUkActivityBase.
        :type bolt_ons_summary: str
        """

        self._bolt_ons_summary = bolt_ons_summary

    @property
    def court(self):
        """Gets the court of this LegalAidUkActivityBase.

        Court

        :return: The court of this LegalAidUkActivityBase.
        :rtype: int
        """
        return self._court

    @court.setter
    def court(self, court):
        """Sets the court of this LegalAidUkActivityBase.

        Court

        :param court: The court of this LegalAidUkActivityBase.
        :type court: int
        """

        self._court = court

    @property
    def eligible_for_sqm(self):
        """Gets the eligible_for_sqm of this LegalAidUkActivityBase.

        Eligible for SQM

        :return: The eligible_for_sqm of this LegalAidUkActivityBase.
        :rtype: bool
        """
        return self._eligible_for_sqm

    @eligible_for_sqm.setter
    def eligible_for_sqm(self, eligible_for_sqm):
        """Sets the eligible_for_sqm of this LegalAidUkActivityBase.

        Eligible for SQM

        :param eligible_for_sqm: The eligible_for_sqm of this LegalAidUkActivityBase.
        :type eligible_for_sqm: bool
        """

        self._eligible_for_sqm = eligible_for_sqm

    @property
    def expert(self):
        """Gets the expert of this LegalAidUkActivityBase.

        Expert

        :return: The expert of this LegalAidUkActivityBase.
        :rtype: int
        """
        return self._expert

    @expert.setter
    def expert(self, expert):
        """Sets the expert of this LegalAidUkActivityBase.

        Expert

        :param expert: The expert of this LegalAidUkActivityBase.
        :type expert: int
        """

        self._expert = expert

    @property
    def form_of_civil_legal_service(self):
        """Gets the form_of_civil_legal_service of this LegalAidUkActivityBase.

        Form of civil legal service

        :return: The form_of_civil_legal_service of this LegalAidUkActivityBase.
        :rtype: int
        """
        return self._form_of_civil_legal_service

    @form_of_civil_legal_service.setter
    def form_of_civil_legal_service(self, form_of_civil_legal_service):
        """Sets the form_of_civil_legal_service of this LegalAidUkActivityBase.

        Form of civil legal service

        :param form_of_civil_legal_service: The form_of_civil_legal_service of this LegalAidUkActivityBase.
        :type form_of_civil_legal_service: int
        """

        self._form_of_civil_legal_service = form_of_civil_legal_service

    @property
    def id(self):
        """Gets the id of this LegalAidUkActivityBase.

        Unique identifier for the *LegalAidUkActivity*

        :return: The id of this LegalAidUkActivityBase.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LegalAidUkActivityBase.

        Unique identifier for the *LegalAidUkActivity*

        :param id: The id of this LegalAidUkActivityBase.
        :type id: int
        """

        self._id = id

    @property
    def is_custom_rate(self):
        """Gets the is_custom_rate of this LegalAidUkActivityBase.

        Flag to indicate if rate was manually entered by user

        :return: The is_custom_rate of this LegalAidUkActivityBase.
        :rtype: bool
        """
        return self._is_custom_rate

    @is_custom_rate.setter
    def is_custom_rate(self, is_custom_rate):
        """Sets the is_custom_rate of this LegalAidUkActivityBase.

        Flag to indicate if rate was manually entered by user

        :param is_custom_rate: The is_custom_rate of this LegalAidUkActivityBase.
        :type is_custom_rate: bool
        """

        self._is_custom_rate = is_custom_rate

    @property
    def json_key(self):
        """Gets the json_key of this LegalAidUkActivityBase.

        Lookup key that references JSON data

        :return: The json_key of this LegalAidUkActivityBase.
        :rtype: str
        """
        return self._json_key

    @json_key.setter
    def json_key(self, json_key):
        """Sets the json_key of this LegalAidUkActivityBase.

        Lookup key that references JSON data

        :param json_key: The json_key of this LegalAidUkActivityBase.
        :type json_key: str
        """

        self._json_key = json_key

    @property
    def region(self):
        """Gets the region of this LegalAidUkActivityBase.

        Region

        :return: The region of this LegalAidUkActivityBase.
        :rtype: int
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this LegalAidUkActivityBase.

        Region

        :param region: The region of this LegalAidUkActivityBase.
        :type region: int
        """

        self._region = region

    @property
    def tax_exclusive(self):
        """Gets the tax_exclusive of this LegalAidUkActivityBase.

        Flag to indicate if tax is exclusive

        :return: The tax_exclusive of this LegalAidUkActivityBase.
        :rtype: bool
        """
        return self._tax_exclusive

    @tax_exclusive.setter
    def tax_exclusive(self, tax_exclusive):
        """Sets the tax_exclusive of this LegalAidUkActivityBase.

        Flag to indicate if tax is exclusive

        :param tax_exclusive: The tax_exclusive of this LegalAidUkActivityBase.
        :type tax_exclusive: bool
        """

        self._tax_exclusive = tax_exclusive

    @property
    def uplift(self):
        """Gets the uplift of this LegalAidUkActivityBase.

        Uplift percentage applied to activity rate

        :return: The uplift of this LegalAidUkActivityBase.
        :rtype: float
        """
        return self._uplift

    @uplift.setter
    def uplift(self, uplift):
        """Sets the uplift of this LegalAidUkActivityBase.

        Uplift percentage applied to activity rate

        :param uplift: The uplift of this LegalAidUkActivityBase.
        :type uplift: float
        """

        self._uplift = uplift

    @property
    def user_type(self):
        """Gets the user_type of this LegalAidUkActivityBase.

        User type

        :return: The user_type of this LegalAidUkActivityBase.
        :rtype: int
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this LegalAidUkActivityBase.

        User type

        :param user_type: The user_type of this LegalAidUkActivityBase.
        :type user_type: int
        """

        self._user_type = user_type
