from __future__ import annotations
import _wlplan.data
import _wlplan.graph
import _wlplan.planning
import typing
__all__ = list()
class _CCWLFeatures(_WLFeatures):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, prune_features: str, multiset_hash: bool) -> None:
        ...
    def set_weights(self, weights: list[float]) -> None:
        ...
class _Features:
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @typing.overload
    def collect(self, dataset: _wlplan.data.Dataset) -> None:
        ...
    @typing.overload
    def collect(self, graphs: list[_wlplan.graph.Graph]) -> None:
        ...
    @typing.overload
    def embed(self, dataset: _wlplan.data.Dataset) -> list[list[float]]:
        ...
    @typing.overload
    def embed(self, graphs: list[_wlplan.graph.Graph]) -> list[list[float]]:
        ...
    @typing.overload
    def embed(self, state: _wlplan.planning.State) -> list[float]:
        ...
    def get_n_features(self) -> int:
        ...
    def get_n_seen_edges(self) -> int:
        ...
    def get_n_seen_graphs(self) -> int:
        ...
    def get_n_seen_initial_colours(self) -> int:
        ...
    def get_n_seen_nodes(self) -> int:
        ...
    def get_n_seen_refined_colours(self) -> int:
        ...
    def get_seen_counts(self) -> list[int]:
        ...
    @typing.overload
    def get_string_representation(self, embedding: list[float]) -> str:
        ...
    @typing.overload
    def get_string_representation(self, state: _wlplan.planning.State) -> str:
        ...
    def get_unseen_counts(self) -> list[int]:
        ...
    def get_weights(self) -> list[float]:
        ...
    @typing.overload
    def predict(self, graph: _wlplan.graph.Graph) -> float:
        ...
    @typing.overload
    def predict(self, state: _wlplan.planning.State) -> float:
        ...
    def print_init_colours(self) -> None:
        ...
    def save(self, arg0: str) -> None:
        ...
    def set_problem(self, problem: _wlplan.planning.Problem) -> None:
        ...
    def set_weights(self, weights: list[float]) -> None:
        ...
class _IWLFeatures(_Features):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, prune_features: str, multiset_hash: bool) -> None:
        ...
class _KWL2Features(_Features):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, prune_features: str, multiset_hash: bool) -> None:
        ...
class _LWL2Features(_Features):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, prune_features: str, multiset_hash: bool) -> None:
        ...
class _NIWLFeatures(_IWLFeatures):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, prune_features: str, multiset_hash: bool) -> None:
        ...
class _WLFeatures(_Features):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, domain: _wlplan.planning.Domain, graph_representation: str, iterations: int, prune_features: str, multiset_hash: bool) -> None:
        ...
