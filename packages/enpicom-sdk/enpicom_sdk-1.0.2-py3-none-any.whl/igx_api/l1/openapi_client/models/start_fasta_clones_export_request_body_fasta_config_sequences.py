# coding: utf-8

"""
    IGX Platform Public API

    The IGX Platform Public API is a powerful API that enables a wide variety of use cases.                 The architecture of the IGX Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StartFastaClonesExportRequestBodyFastaConfigSequences(BaseModel):
    """
    Configuration of the sequences in the exported FASTA file. In case of multiple                         tags being specified here, sequence values will be concatenated without any separators
    """ # noqa: E501
    heavy: Optional[List[StrictStr]] = None
    var_lambda: Optional[List[StrictStr]] = Field(default=None, alias="lambda")
    kappa: Optional[List[StrictStr]] = None
    alpha: Optional[List[StrictStr]] = None
    beta: Optional[List[StrictStr]] = None
    gamma: Optional[List[StrictStr]] = None
    delta: Optional[List[StrictStr]] = None
    iota: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["heavy", "lambda", "kappa", "alpha", "beta", "gamma", "delta", "iota"]

    @field_validator('heavy')
    def heavy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids']):
                raise ValueError("each list item must be one of ('FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids')")
        return value

    @field_validator('var_lambda')
    def var_lambda_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids']):
                raise ValueError("each list item must be one of ('FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids')")
        return value

    @field_validator('kappa')
    def kappa_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids']):
                raise ValueError("each list item must be one of ('FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids')")
        return value

    @field_validator('alpha')
    def alpha_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids']):
                raise ValueError("each list item must be one of ('FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids')")
        return value

    @field_validator('beta')
    def beta_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids']):
                raise ValueError("each list item must be one of ('FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids')")
        return value

    @field_validator('gamma')
    def gamma_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids']):
                raise ValueError("each list item must be one of ('FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids')")
        return value

    @field_validator('delta')
    def delta_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids']):
                raise ValueError("each list item must be one of ('FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids')")
        return value

    @field_validator('iota')
    def iota_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids']):
                raise ValueError("each list item must be one of ('FR1 Nucleotides', 'FR2 Nucleotides', 'FR3 Nucleotides', 'FR4 Nucleotides', 'CDR1 Nucleotides', 'CDR2 Nucleotides', 'CDR3 Nucleotides', 'Receptor Nucleotides', 'FR1 Amino Acids', 'FR2 Amino Acids', 'FR3 Amino Acids', 'FR4 Amino Acids', 'CDR1 Amino Acids', 'CDR2 Amino Acids', 'CDR3 Amino Acids', 'Receptor Amino Acids')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StartFastaClonesExportRequestBodyFastaConfigSequences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if heavy (nullable) is None
        # and model_fields_set contains the field
        if self.heavy is None and "heavy" in self.model_fields_set:
            _dict['heavy'] = None

        # set to None if var_lambda (nullable) is None
        # and model_fields_set contains the field
        if self.var_lambda is None and "var_lambda" in self.model_fields_set:
            _dict['lambda'] = None

        # set to None if kappa (nullable) is None
        # and model_fields_set contains the field
        if self.kappa is None and "kappa" in self.model_fields_set:
            _dict['kappa'] = None

        # set to None if alpha (nullable) is None
        # and model_fields_set contains the field
        if self.alpha is None and "alpha" in self.model_fields_set:
            _dict['alpha'] = None

        # set to None if beta (nullable) is None
        # and model_fields_set contains the field
        if self.beta is None and "beta" in self.model_fields_set:
            _dict['beta'] = None

        # set to None if gamma (nullable) is None
        # and model_fields_set contains the field
        if self.gamma is None and "gamma" in self.model_fields_set:
            _dict['gamma'] = None

        # set to None if delta (nullable) is None
        # and model_fields_set contains the field
        if self.delta is None and "delta" in self.model_fields_set:
            _dict['delta'] = None

        # set to None if iota (nullable) is None
        # and model_fields_set contains the field
        if self.iota is None and "iota" in self.model_fields_set:
            _dict['iota'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StartFastaClonesExportRequestBodyFastaConfigSequences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "heavy": obj.get("heavy"),
            "lambda": obj.get("lambda"),
            "kappa": obj.get("kappa"),
            "alpha": obj.get("alpha"),
            "beta": obj.get("beta"),
            "gamma": obj.get("gamma"),
            "delta": obj.get("delta"),
            "iota": obj.get("iota")
        })
        return _obj


