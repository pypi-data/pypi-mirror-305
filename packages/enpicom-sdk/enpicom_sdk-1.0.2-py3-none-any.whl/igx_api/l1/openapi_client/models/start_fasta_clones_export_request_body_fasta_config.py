# coding: utf-8

"""
    IGX Platform Public API

    The IGX Platform Public API is a powerful API that enables a wide variety of use cases.                 The architecture of the IGX Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from igx_api.l1.openapi_client.models.start_fasta_clones_export_request_body_fasta_config_headers import StartFastaClonesExportRequestBodyFastaConfigHeaders
from igx_api.l1.openapi_client.models.start_fasta_clones_export_request_body_fasta_config_sequences import StartFastaClonesExportRequestBodyFastaConfigSequences
from typing import Optional, Set
from typing_extensions import Self

class StartFastaClonesExportRequestBodyFastaConfig(BaseModel):
    """
    Configuration of the Basket FASTA export.
    """ # noqa: E501
    headers: StartFastaClonesExportRequestBodyFastaConfigHeaders
    sequences: StartFastaClonesExportRequestBodyFastaConfigSequences
    __properties: ClassVar[List[str]] = ["headers", "sequences"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StartFastaClonesExportRequestBodyFastaConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of headers
        if self.headers:
            _dict['headers'] = self.headers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sequences
        if self.sequences:
            _dict['sequences'] = self.sequences.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StartFastaClonesExportRequestBodyFastaConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "headers": StartFastaClonesExportRequestBodyFastaConfigHeaders.from_dict(obj["headers"]) if obj.get("headers") is not None else None,
            "sequences": StartFastaClonesExportRequestBodyFastaConfigSequences.from_dict(obj["sequences"]) if obj.get("sequences") is not None else None
        })
        return _obj


