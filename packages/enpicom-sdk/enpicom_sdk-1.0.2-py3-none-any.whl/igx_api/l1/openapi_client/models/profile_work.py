# coding: utf-8

"""
    IGX Platform Public API

    The IGX Platform Public API is a powerful API that enables a wide variety of use cases.                 The architecture of the IGX Platform centers around files, collections, tags and analyses,                 securely managed through cloud-based access.                 The Public API can be used to easily import data, annotate metadata, run analyses and export results.

    The version of the OpenAPI document: 1.0.0
    Contact: info@enpicom.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from igx_api.l1.openapi_client.models.clone_id_to_tag_spec import CloneIdToTagSpec
from igx_api.l1.openapi_client.models.correction_settings import CorrectionSettings
from igx_api.l1.openapi_client.models.profile_work_sequence_templates_inner import ProfileWorkSequenceTemplatesInner
from typing import Optional, Set
from typing_extensions import Self

class ProfileWork(BaseModel):
    """
    ProfileWork
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the resulting collection.")
    file_ids: List[StrictStr]
    reference_database_id: StrictStr = Field(description="The identifier of a reference database.")
    reference_database_version: StrictInt = Field(description="The version of a reference database revision.")
    archive_inputs: StrictBool
    quality_control_template_id: StrictStr = Field(description="The identifier of a Profile quality control template.")
    quality_control_template_version: Optional[StrictInt] = None
    sequence_templates: List[ProfileWorkSequenceTemplatesInner]
    clone_id_to_tag_spec: Optional[CloneIdToTagSpec] = None
    correction_settings: Optional[CorrectionSettings] = None
    chain_fraction_tag_id: Optional[StrictInt] = Field(default=None, description="The id of the tag archetype.")
    __properties: ClassVar[List[str]] = ["name", "file_ids", "reference_database_id", "reference_database_version", "archive_inputs", "quality_control_template_id", "quality_control_template_version", "sequence_templates", "clone_id_to_tag_spec", "correction_settings", "chain_fraction_tag_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProfileWork from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sequence_templates (list)
        _items = []
        if self.sequence_templates:
            for _item in self.sequence_templates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sequence_templates'] = _items
        # override the default output from pydantic by calling `to_dict()` of clone_id_to_tag_spec
        if self.clone_id_to_tag_spec:
            _dict['clone_id_to_tag_spec'] = self.clone_id_to_tag_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of correction_settings
        if self.correction_settings:
            _dict['correction_settings'] = self.correction_settings.to_dict()
        # set to None if clone_id_to_tag_spec (nullable) is None
        # and model_fields_set contains the field
        if self.clone_id_to_tag_spec is None and "clone_id_to_tag_spec" in self.model_fields_set:
            _dict['clone_id_to_tag_spec'] = None

        # set to None if correction_settings (nullable) is None
        # and model_fields_set contains the field
        if self.correction_settings is None and "correction_settings" in self.model_fields_set:
            _dict['correction_settings'] = None

        # set to None if chain_fraction_tag_id (nullable) is None
        # and model_fields_set contains the field
        if self.chain_fraction_tag_id is None and "chain_fraction_tag_id" in self.model_fields_set:
            _dict['chain_fraction_tag_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProfileWork from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "file_ids": obj.get("file_ids"),
            "reference_database_id": obj.get("reference_database_id"),
            "reference_database_version": obj.get("reference_database_version"),
            "archive_inputs": obj.get("archive_inputs"),
            "quality_control_template_id": obj.get("quality_control_template_id"),
            "quality_control_template_version": obj.get("quality_control_template_version"),
            "sequence_templates": [ProfileWorkSequenceTemplatesInner.from_dict(_item) for _item in obj["sequence_templates"]] if obj.get("sequence_templates") is not None else None,
            "clone_id_to_tag_spec": CloneIdToTagSpec.from_dict(obj["clone_id_to_tag_spec"]) if obj.get("clone_id_to_tag_spec") is not None else None,
            "correction_settings": CorrectionSettings.from_dict(obj["correction_settings"]) if obj.get("correction_settings") is not None else None,
            "chain_fraction_tag_id": obj.get("chain_fraction_tag_id")
        })
        return _obj


