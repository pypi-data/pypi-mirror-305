[tool.poetry]
name = "django-rubble"
version = "0.7.0b6"
description = "Extend django-model-utils and django-extensions."
repository = "https://github.com/WoosterTech/django-rubble"
authors = ["Karl Wooster <karl@woostertech.com>"]
documentation = "https://woostertech.github.io/django-rubble/"
license = "MIT"
readme = "README.md"
keywords = ["django", "django-model-utils", "django-extensions"]
classifiers = [
  "Framework :: Django :: 4",
  "Framework :: Django :: 4.0",
  "Framework :: Django :: 4.1",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.0",
  "Framework :: Django :: 5.1",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/WoosterTech/django-rubble/issues"
"Change Log" = "https://github.com/WoosterTech/django-rubble/blob/main/CHANGELOG.md"

[tool.poetry.scripts]
rubble = "django_rubble.cli:app"

[tool.poetry.dependencies]
python = "^3.10"
django = ">4,<5.3"
django-model-utils = ">=4.5.1"
pydantic = ">=2.6.4"
loguru = ">=0.7.2"
croniter = ">=3.0.3"
neapolitan = {version = ">=24.6", optional = true}
django-simple-history = {version = ">=3.7.0", optional = true}
infisical-python = {version = "^2.3.5", optional = true}
rich = ">=13.7.0"
typer = {version = "^0.12.5", optional = true}

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
mypy = "^1.10.0"
pre-commit = "^3.7.1"
commitizen = "^3.27.0"
django-stubs = { version = "^5.0.2", extras = ["compatible-mypy"] }

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^8.2.1"
pytest-cov = "^5.0.0"
pytest-sugar = "^1.0.0"
pytest-django = "^4.8.0"
factory-boy = "^3.3.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocstrings = {extras = ["python"], version = "^0.25.2"}
mkdocs-material = "^9.5.33"
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.1"
mkdocs-section-index = "^0.3.9"
mkdocs-include-markdown-plugin = "^6.2.2"
griffe-fieldz = "^0.2.0"

[tool.poetry.extras]
project = ["neapolitan"]
history = ["django-simple-history"]
secrets = ["infisical-python"]
cli = ["typer"]

all = ["neapolitan", "django-simple-history", "infisical-python", "typer"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "*/migrations/*.py",
  "staticfiles/*",
]
# Same as Django: https://github.com/cookiecutter/cookiecutter-django/issues/4792.
line-length = 88
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
select = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "UP",
  "YTT",
  # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
  "ASYNC",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "COM",
  "C4",
  "DTZ",
  "T10",
  "DJ",
  "EM",
  "EXE",
  "FA",
  'ISC',
  "ICN",
  "G",
  'INP',
  'PIE',
  "T20",
  'PYI',
  'PT',
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SLOT",
  "SIM",
  "TID",
  "TCH",
  "INT",
  # "ARG", # Unused function argument
  "PTH",
  "ERA",
  "PD",
  "PGH",
  "PL",
  "TRY",
  "FLY",
  # "NPY",
  # "AIR",
  "PERF",
  # "FURB",
  # "LOG",
  "RUF",
]
ignore = [
  "S101",   # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "SIM102", # sometimes it's better to nest
  "COM812",
  "ISC001",
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = ["F401"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = false

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "test.settings"

[tool.mypy]
plugins = ["mypy_django_plugin.main"]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
