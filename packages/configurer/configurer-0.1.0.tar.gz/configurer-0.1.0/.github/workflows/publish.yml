# .github/workflows/publish.yml
name: Publish to PyPI

on:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for PyPI trusted publishing
      contents: write  # Required for creating tags

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for proper versioning

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools wheel
          pip install -e ".[test]"

      - name: Run tests
        run: pytest

      - name: Extract version
        id: version
        run: |
          # Extract version from __init__.py using Python
          VERSION=$(python -c "exec(open('src/configurer/__init__.py').read()); print(__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if version exists
        id: check_version
        run: |
          if git show-ref --tags "v${{ steps.version.outputs.version }}" --quiet; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create tag
        if: steps.check_version.outputs.exists == 'false'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release version ${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        if: steps.check_version.outputs.exists == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
          
      - name: Create GitHub Release
        if: steps.check_version.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.version.outputs.version }}"
          name: "Release v${{ steps.version.outputs.version }}"
          generate_release_notes: true
          draft: false
          prerelease: false